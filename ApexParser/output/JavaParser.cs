//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g 2014-06-05 22:41:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


//package com.habelitz.jsobjectizer.unmarshaller.antlrbridge.generated;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "COMMENT", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GLOBAL", "GREATER_OR_EQUAL", "GREATER_THAN", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "MAP_INITIALIZER", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "OVERRIDE", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROPERTY_DECL", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SET_INITIALIZER", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SOQL_LITERAL", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "TEST_METHOD", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VIRTUAL", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WITHOUT_SHARING", "WITH_SHARING", "WS", "XOR", "XOR_ASSIGN", "'=>'"
	};
	public const int EOF=-1;
	public const int T__192=192;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSIGN=20;
	public const int AT=21;
	public const int BIT_SHIFT_RIGHT=22;
	public const int BIT_SHIFT_RIGHT_ASSIGN=23;
	public const int BLOCK_SCOPE=24;
	public const int BOOLEAN=25;
	public const int BREAK=26;
	public const int BYTE=27;
	public const int CASE=28;
	public const int CAST_EXPR=29;
	public const int CATCH=30;
	public const int CATCH_CLAUSE_LIST=31;
	public const int CHAR=32;
	public const int CHARACTER_LITERAL=33;
	public const int CLASS=34;
	public const int CLASS_CONSTRUCTOR_CALL=35;
	public const int CLASS_INSTANCE_INITIALIZER=36;
	public const int CLASS_STATIC_INITIALIZER=37;
	public const int CLASS_TOP_LEVEL_SCOPE=38;
	public const int COLON=39;
	public const int COMMA=40;
	public const int COMMENT=41;
	public const int CONSTRUCTOR_DECL=42;
	public const int CONTINUE=43;
	public const int DEC=44;
	public const int DECIMAL_LITERAL=45;
	public const int DEFAULT=46;
	public const int DIV=47;
	public const int DIV_ASSIGN=48;
	public const int DO=49;
	public const int DOT=50;
	public const int DOTSTAR=51;
	public const int DOUBLE=52;
	public const int ELLIPSIS=53;
	public const int ELSE=54;
	public const int ENUM=55;
	public const int ENUM_TOP_LEVEL_SCOPE=56;
	public const int EQUAL=57;
	public const int ESCAPE_SEQUENCE=58;
	public const int EXPONENT=59;
	public const int EXPR=60;
	public const int EXTENDS=61;
	public const int EXTENDS_BOUND_LIST=62;
	public const int EXTENDS_CLAUSE=63;
	public const int FALSE=64;
	public const int FINAL=65;
	public const int FINALLY=66;
	public const int FLOAT=67;
	public const int FLOATING_POINT_LITERAL=68;
	public const int FLOAT_TYPE_SUFFIX=69;
	public const int FOR=70;
	public const int FORMAL_PARAM_LIST=71;
	public const int FORMAL_PARAM_STD_DECL=72;
	public const int FORMAL_PARAM_VARARG_DECL=73;
	public const int FOR_CONDITION=74;
	public const int FOR_EACH=75;
	public const int FOR_INIT=76;
	public const int FOR_UPDATE=77;
	public const int FUNCTION_METHOD_DECL=78;
	public const int GENERIC_TYPE_ARG_LIST=79;
	public const int GENERIC_TYPE_PARAM_LIST=80;
	public const int GLOBAL=81;
	public const int GREATER_OR_EQUAL=82;
	public const int GREATER_THAN=83;
	public const int HEX_DIGIT=84;
	public const int HEX_LITERAL=85;
	public const int IDENT=86;
	public const int IF=87;
	public const int IMPLEMENTS=88;
	public const int IMPLEMENTS_CLAUSE=89;
	public const int IMPORT=90;
	public const int INC=91;
	public const int INSTANCEOF=92;
	public const int INT=93;
	public const int INTEGER_TYPE_SUFFIX=94;
	public const int INTERFACE=95;
	public const int INTERFACE_TOP_LEVEL_SCOPE=96;
	public const int JAVA_ID_PART=97;
	public const int JAVA_ID_START=98;
	public const int JAVA_SOURCE=99;
	public const int LABELED_STATEMENT=100;
	public const int LBRACK=101;
	public const int LCURLY=102;
	public const int LESS_OR_EQUAL=103;
	public const int LESS_THAN=104;
	public const int LINE_COMMENT=105;
	public const int LOCAL_MODIFIER_LIST=106;
	public const int LOGICAL_AND=107;
	public const int LOGICAL_NOT=108;
	public const int LOGICAL_OR=109;
	public const int LONG=110;
	public const int LPAREN=111;
	public const int MAP_INITIALIZER=112;
	public const int METHOD_CALL=113;
	public const int MINUS=114;
	public const int MINUS_ASSIGN=115;
	public const int MOD=116;
	public const int MODIFIER_LIST=117;
	public const int MOD_ASSIGN=118;
	public const int NATIVE=119;
	public const int NEW=120;
	public const int NOT=121;
	public const int NOT_EQUAL=122;
	public const int NULL=123;
	public const int OCTAL_ESCAPE=124;
	public const int OCTAL_LITERAL=125;
	public const int OR=126;
	public const int OR_ASSIGN=127;
	public const int OVERRIDE=128;
	public const int PACKAGE=129;
	public const int PARENTESIZED_EXPR=130;
	public const int PLUS=131;
	public const int PLUS_ASSIGN=132;
	public const int POST_DEC=133;
	public const int POST_INC=134;
	public const int PRE_DEC=135;
	public const int PRE_INC=136;
	public const int PRIVATE=137;
	public const int PROPERTY_DECL=138;
	public const int PROTECTED=139;
	public const int PUBLIC=140;
	public const int QUALIFIED_TYPE_IDENT=141;
	public const int QUESTION=142;
	public const int RBRACK=143;
	public const int RCURLY=144;
	public const int RETURN=145;
	public const int RPAREN=146;
	public const int SEMI=147;
	public const int SET_INITIALIZER=148;
	public const int SHIFT_LEFT=149;
	public const int SHIFT_LEFT_ASSIGN=150;
	public const int SHIFT_RIGHT=151;
	public const int SHIFT_RIGHT_ASSIGN=152;
	public const int SHORT=153;
	public const int SOQL_LITERAL=154;
	public const int STAR=155;
	public const int STAR_ASSIGN=156;
	public const int STATIC=157;
	public const int STATIC_ARRAY_CREATOR=158;
	public const int STRICTFP=159;
	public const int STRING_LITERAL=160;
	public const int SUPER=161;
	public const int SUPER_CONSTRUCTOR_CALL=162;
	public const int SWITCH=163;
	public const int SWITCH_BLOCK_LABEL_LIST=164;
	public const int SYNCHRONIZED=165;
	public const int TEST_METHOD=166;
	public const int THIS=167;
	public const int THIS_CONSTRUCTOR_CALL=168;
	public const int THROW=169;
	public const int THROWS=170;
	public const int THROWS_CLAUSE=171;
	public const int TRANSIENT=172;
	public const int TRUE=173;
	public const int TRY=174;
	public const int TYPE=175;
	public const int UNARY_MINUS=176;
	public const int UNARY_PLUS=177;
	public const int UNICODE_ESCAPE=178;
	public const int VAR_DECLARATION=179;
	public const int VAR_DECLARATOR=180;
	public const int VAR_DECLARATOR_LIST=181;
	public const int VIRTUAL=182;
	public const int VOID=183;
	public const int VOID_METHOD_DECL=184;
	public const int VOLATILE=185;
	public const int WHILE=186;
	public const int WITHOUT_SHARING=187;
	public const int WITH_SHARING=188;
	public const int WS=189;
	public const int XOR=190;
	public const int XOR_ASSIGN=191;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[391+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g"; } }


	     private bool mMessageCollectionEnabled = true;
		    private List<string> mMessages;

		    public void enableErrorMessageCollection(bool pNewState) {
		        mMessageCollectionEnabled = pNewState;
		        if (mMessages == null && mMessageCollectionEnabled) {
		            mMessages = new List<string>();
		        }
		    }
		    
	        public override void EmitErrorMessage(string pMessage)
	        {
	            if (mMessageCollectionEnabled) {
		            mMessages.Add(pMessage);
		        } else {
		            base.EmitErrorMessage(pMessage);
		        }
		    }
		    
		    public List<string> getMessages() {
		        return mMessages;
		    }

		    public bool hasErrors() {
	            return mMessages.Count>0;
		    }



	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:244:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
	[GrammarRule("javaSource")]
	private AstParserRuleReturnScope<CommonTree, IToken> javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int javaSource_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> compilationUnit1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:245:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:245:9: compilationUnit
			{
			DebugLocation(245, 9);
			PushFollow(Follow._compilationUnit_in_javaSource4578);
			compilationUnit1=compilationUnit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_compilationUnit.Add(compilationUnit1.Tree);


			{
			// AST REWRITE
			// elements: compilationUnit
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:9: -> ^( JAVA_SOURCE compilationUnit )
			{
				DebugLocation(246, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:246:13: ^( JAVA_SOURCE compilationUnit )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

				DebugLocation(246, 27);
				adaptor.AddChild(root_1, stream_compilationUnit.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return retval;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:249:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
	[GrammarRule("compilationUnit")]
	private AstParserRuleReturnScope<CommonTree, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 2);
		TraceIn("compilationUnit", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationList2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> importDeclaration4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDecls5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(249, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:250:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:250:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(250, 9);
			PushFollow(Follow._annotationList_in_compilationUnit4614);
			annotationList2=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList2.Tree);
			DebugLocation(251, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:251:9: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:251:9: packageDeclaration
				{
				DebugLocation(251, 9);
				PushFollow(Follow._packageDeclaration_in_compilationUnit4625);
				packageDeclaration3=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(252, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:252:9: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:252:9: importDeclaration
					{
					DebugLocation(252, 9);
					PushFollow(Follow._importDeclaration_in_compilationUnit4637);
					importDeclaration4=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration4.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(253, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:253:9: ( typeDecls )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==ABSTRACT||LA3_1==AT||LA3_1==BOOLEAN||LA3_1==BYTE||LA3_1==CHAR||LA3_1==CLASS||LA3_1==DOUBLE||LA3_1==ENUM||LA3_1==FINAL||LA3_1==FLOAT||LA3_1==GLOBAL||LA3_1==IDENT||LA3_1==INT||LA3_1==INTERFACE||LA3_1==LESS_THAN||LA3_1==LONG||LA3_1==NATIVE||LA3_1==OVERRIDE||LA3_1==PRIVATE||(LA3_1>=PROTECTED && LA3_1<=PUBLIC)||LA3_1==SEMI||LA3_1==SHORT||LA3_1==STATIC||LA3_1==STRICTFP||(LA3_1>=SYNCHRONIZED && LA3_1<=TEST_METHOD)||LA3_1==TRANSIENT||(LA3_1>=VIRTUAL && LA3_1<=VOID)||LA3_1==VOLATILE||(LA3_1>=WITHOUT_SHARING && LA3_1<=WITH_SHARING)))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:253:9: typeDecls
					{
					DebugLocation(253, 9);
					PushFollow(Follow._typeDecls_in_compilationUnit4649);
					typeDecls5=typeDecls();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDecls5.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 2);
			LeaveRule("compilationUnit", 2);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 2, compilationUnit_StartIndex); }

		}
		DebugLocation(254, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_typeDecls();
	partial void LeaveRule_typeDecls();
	// $ANTLR start "typeDecls"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:256:1: typeDecls : ( typeDeclaration | SEMI !);
	[GrammarRule("typeDecls")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDecls()
	{
		EnterRule_typeDecls();
		EnterRule("typeDecls", 3);
		TraceIn("typeDecls", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDecls_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration6 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeDecls");
		DebugLocation(256, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:257:5: ( typeDeclaration | SEMI !)
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==ABSTRACT||LA4_1==AT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==GLOBAL||LA4_1==IDENT||LA4_1==INT||LA4_1==INTERFACE||LA4_1==LESS_THAN||LA4_1==LONG||LA4_1==NATIVE||LA4_1==OVERRIDE||LA4_1==PRIVATE||(LA4_1>=PROTECTED && LA4_1<=PUBLIC)||LA4_1==SHORT||LA4_1==STATIC||LA4_1==STRICTFP||(LA4_1>=SYNCHRONIZED && LA4_1<=TEST_METHOD)||LA4_1==TRANSIENT||(LA4_1>=VIRTUAL && LA4_1<=VOID)||LA4_1==VOLATILE||(LA4_1>=WITHOUT_SHARING && LA4_1<=WITH_SHARING)))
			{
				alt4 = 1;
			}
			else if ((LA4_1==SEMI))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:257:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 9);
				PushFollow(Follow._typeDeclaration_in_typeDecls4669);
				typeDeclaration6=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:258:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 13);
				SEMI7=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDecls4679); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDecls", 3);
			LeaveRule("typeDecls", 3);
			LeaveRule_typeDecls();
			if (state.backtracking > 0) { Memoize(input, 3, typeDecls_StartIndex); }

		}
		DebugLocation(259, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDecls"); }
		return retval;

	}
	// $ANTLR end "typeDecls"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:261:1: packageDeclaration : PACKAGE ^ qualifiedIdentifier SEMI !;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 4);
		TraceIn("packageDeclaration", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PACKAGE8 = default(IToken);
		IToken SEMI10 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PACKAGE8_tree = default(CommonTree);
		CommonTree SEMI10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(261, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:262:5: ( PACKAGE ^ qualifiedIdentifier SEMI !)
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:262:9: PACKAGE ^ qualifiedIdentifier SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(262, 16);
			PACKAGE8=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration4699); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PACKAGE8_tree = (CommonTree)adaptor.Create(PACKAGE8);
			root_0 = (CommonTree)adaptor.BecomeRoot(PACKAGE8_tree, root_0);
			}
			DebugLocation(262, 18);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration4702);
			qualifiedIdentifier9=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier9.Tree);
			DebugLocation(262, 42);
			SEMI10=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration4704); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 4);
			LeaveRule("packageDeclaration", 4);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, packageDeclaration_StartIndex); }

		}
		DebugLocation(263, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:265:1: importDeclaration : IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !;
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 5);
		TraceIn("importDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPORT11 = default(IToken);
		IToken STATIC12 = default(IToken);
		IToken DOTSTAR14 = default(IToken);
		IToken SEMI15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPORT11_tree = default(CommonTree);
		CommonTree STATIC12_tree = default(CommonTree);
		CommonTree DOTSTAR14_tree = default(CommonTree);
		CommonTree SEMI15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(265, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:5: ( IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !)
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:9: IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(266, 15);
			IMPORT11=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration4730); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT11_tree = (CommonTree)adaptor.Create(IMPORT11);
			root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT11_tree, root_0);
			}
			DebugLocation(266, 17);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:17: ( STATIC )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==STATIC))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:17: STATIC
				{
				DebugLocation(266, 17);
				STATIC12=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration4733); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC12_tree = (CommonTree)adaptor.Create(STATIC12);
				adaptor.AddChild(root_0, STATIC12_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(266, 25);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration4736);
			qualifiedIdentifier13=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier13.Tree);
			DebugLocation(266, 45);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:45: ( DOTSTAR )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==DOTSTAR))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:266:45: DOTSTAR
				{
				DebugLocation(266, 45);
				DOTSTAR14=(IToken)Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration4738); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTSTAR14_tree = (CommonTree)adaptor.Create(DOTSTAR14);
				adaptor.AddChild(root_0, DOTSTAR14_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(266, 58);
			SEMI15=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration4741); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 5);
			LeaveRule("importDeclaration", 5);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, importDeclaration_StartIndex); }

		}
		DebugLocation(267, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:269:1: typeDeclaration : modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 6);
		TraceIn("typeDeclaration", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifierList16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(269, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:270:5: ( modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:270:9: modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(270, 21);
			PushFollow(Follow._modifierList_in_typeDeclaration4765);
			modifierList16=modifierList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(271, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:271:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			int alt7=4;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt7 = 1;
				}
				break;
			case INTERFACE:
				{
				alt7 = 2;
				}
				break;
			case ENUM:
				{
				alt7 = 3;
				}
				break;
			case AT:
				{
				alt7 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:271:13: classTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(271, 13);
				PushFollow(Follow._classTypeDeclaration_in_typeDeclaration4780);
				classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classTypeDeclaration17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:272:13: interfaceTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(272, 13);
				PushFollow(Follow._interfaceTypeDeclaration_in_typeDeclaration4795);
				interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceTypeDeclaration18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:273:13: enumTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(273, 13);
				PushFollow(Follow._enumTypeDeclaration_in_typeDeclaration4810);
				enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumTypeDeclaration19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:274:13: annotationTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(274, 13);
				PushFollow(Follow._annotationTypeDeclaration_in_typeDeclaration4825);
				annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 6);
			LeaveRule("typeDeclaration", 6);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, typeDeclaration_StartIndex); }

		}
		DebugLocation(276, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classTypeDeclaration();
	partial void LeaveRule_classTypeDeclaration();
	// $ANTLR start "classTypeDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:278:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
	[GrammarRule("classTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_classTypeDeclaration();
		EnterRule("classTypeDeclaration", 7);
		TraceIn("classTypeDeclaration", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CLASS21 = default(IToken);
		IToken IDENT22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CLASS21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		try { DebugEnterRule(GrammarFileName, "classTypeDeclaration");
		DebugLocation(278, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
			{
			DebugLocation(279, 9);
			CLASS21=(IToken)Match(input,CLASS,Follow._CLASS_in_classTypeDeclaration4860); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLASS.Add(CLASS21);

			DebugLocation(279, 15);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_classTypeDeclaration4862); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT22);

			DebugLocation(279, 21);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:21: ( genericTypeParameterList )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==LESS_THAN))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:21: genericTypeParameterList
				{
				DebugLocation(279, 21);
				PushFollow(Follow._genericTypeParameterList_in_classTypeDeclaration4864);
				genericTypeParameterList23=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(279, 47);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:47: ( classExtendsClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==EXTENDS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:47: classExtendsClause
				{
				DebugLocation(279, 47);
				PushFollow(Follow._classExtendsClause_in_classTypeDeclaration4867);
				classExtendsClause24=classExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classExtendsClause.Add(classExtendsClause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(279, 67);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:67: ( implementsClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==IMPLEMENTS))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:279:67: implementsClause
				{
				DebugLocation(279, 67);
				PushFollow(Follow._implementsClause_in_classTypeDeclaration4870);
				implementsClause25=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(279, 85);
			PushFollow(Follow._classBody_in_classTypeDeclaration4873);
			classBody26=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classBody.Add(classBody26.Tree);


			{
			// AST REWRITE
			// elements: CLASS, IDENT, implementsClause, classBody, genericTypeParameterList, classExtendsClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
			{
				DebugLocation(280, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:280:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CLASS.NextNode(), root_1);

				DebugLocation(280, 21);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(280, 34);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(280, 40);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:280:40: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(280, 40);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(280, 66);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:280:66: ( classExtendsClause )?
				if (stream_classExtendsClause.HasNext)
				{
					DebugLocation(280, 66);
					adaptor.AddChild(root_1, stream_classExtendsClause.NextTree());

				}
				stream_classExtendsClause.Reset();
				DebugLocation(280, 86);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:280:86: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(280, 86);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(280, 104);
				adaptor.AddChild(root_1, stream_classBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classTypeDeclaration", 7);
			LeaveRule("classTypeDeclaration", 7);
			LeaveRule_classTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 7, classTypeDeclaration_StartIndex); }

		}
		DebugLocation(281, 4);
		} finally { DebugExitRule(GrammarFileName, "classTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "classTypeDeclaration"

	partial void EnterRule_classExtendsClause();
	partial void LeaveRule_classExtendsClause();
	// $ANTLR start "classExtendsClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:283:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
	[GrammarRule("classExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause()
	{
		EnterRule_classExtendsClause();
		EnterRule("classExtendsClause", 8);
		TraceIn("classExtendsClause", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS27 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "classExtendsClause");
		DebugLocation(283, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:284:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:284:9: EXTENDS type
			{
			DebugLocation(284, 9);
			EXTENDS27=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_classExtendsClause4926); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS27);

			DebugLocation(284, 17);
			PushFollow(Follow._type_in_classExtendsClause4928);
			type28=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type28.Tree);


			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
			{
				DebugLocation(285, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:285:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(285, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classExtendsClause", 8);
			LeaveRule("classExtendsClause", 8);
			LeaveRule_classExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 8, classExtendsClause_StartIndex); }

		}
		DebugLocation(286, 4);
		} finally { DebugExitRule(GrammarFileName, "classExtendsClause"); }
		return retval;

	}
	// $ANTLR end "classExtendsClause"

	partial void EnterRule_interfaceExtendsClause();
	partial void LeaveRule_interfaceExtendsClause();
	// $ANTLR start "interfaceExtendsClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:288:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
	[GrammarRule("interfaceExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause()
	{
		EnterRule_interfaceExtendsClause();
		EnterRule("interfaceExtendsClause", 9);
		TraceIn("interfaceExtendsClause", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "interfaceExtendsClause");
		DebugLocation(288, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:289:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:289:9: EXTENDS typeList
			{
			DebugLocation(289, 9);
			EXTENDS29=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_interfaceExtendsClause4972); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS29);

			DebugLocation(289, 17);
			PushFollow(Follow._typeList_in_interfaceExtendsClause4974);
			typeList30=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList30.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
			{
				DebugLocation(290, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:290:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(290, 58);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtendsClause", 9);
			LeaveRule("interfaceExtendsClause", 9);
			LeaveRule_interfaceExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceExtendsClause_StartIndex); }

		}
		DebugLocation(291, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtendsClause"); }
		return retval;

	}
	// $ANTLR end "interfaceExtendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:293:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
	[GrammarRule("implementsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 10);
		TraceIn("implementsClause", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int implementsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPLEMENTS31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPLEMENTS31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IMPLEMENTS=new RewriteRuleITokenStream(adaptor,"token IMPLEMENTS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(293, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:294:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:294:9: IMPLEMENTS typeList
			{
			DebugLocation(294, 9);
			IMPLEMENTS31=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_implementsClause5018); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPLEMENTS.Add(IMPLEMENTS31);

			DebugLocation(294, 20);
			PushFollow(Follow._typeList_in_implementsClause5020);
			typeList32=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList32.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 295:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
			{
				DebugLocation(295, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:295:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(295, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"), root_1);

				DebugLocation(295, 67);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implementsClause", 10);
			LeaveRule("implementsClause", 10);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 10, implementsClause_StartIndex); }

		}
		DebugLocation(296, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return retval;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:298:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 11);
		TraceIn("genericTypeParameterList", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN33 = default(IToken);
		IToken COMMA35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN33_tree = default(CommonTree);
		CommonTree COMMA35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:299:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:299:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
			{
			DebugLocation(299, 9);
			LESS_THAN33=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeParameterList5065); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN33);

			DebugLocation(299, 19);
			PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5067);
			genericTypeParameter34=genericTypeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter34.Tree);
			DebugLocation(299, 40);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:299:40: ( COMMA genericTypeParameter )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMA))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:299:41: COMMA genericTypeParameter
					{
					DebugLocation(299, 41);
					COMMA35=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeParameterList5070); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA35);

					DebugLocation(299, 47);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5072);
					genericTypeParameter36=genericTypeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter36.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(299, 70);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeParameterList5076);
			genericTypeListClosing37=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing37.Tree);


			{
			// AST REWRITE
			// elements: genericTypeParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 300:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
			{
				DebugLocation(300, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:300:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(300, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"), root_1);

				DebugLocation(300, 78);
				if (!(stream_genericTypeParameter.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeParameter.HasNext )
				{
					DebugLocation(300, 78);
					adaptor.AddChild(root_1, stream_genericTypeParameter.NextTree());

				}
				stream_genericTypeParameter.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameterList", 11);
			LeaveRule("genericTypeParameterList", 11);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 11, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(301, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeListClosing();
	partial void LeaveRule_genericTypeListClosing();
	// $ANTLR start "genericTypeListClosing"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:303:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |);
	[GrammarRule("genericTypeListClosing")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing()
	{
		EnterRule_genericTypeListClosing();
		EnterRule("genericTypeListClosing", 12);
		TraceIn("genericTypeListClosing", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeListClosing_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken GREATER_THAN38 = default(IToken);
		IToken SHIFT_RIGHT39 = default(IToken);
		IToken BIT_SHIFT_RIGHT40 = default(IToken);

		CommonTree GREATER_THAN38_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT39_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeListClosing");
		DebugLocation(303, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:307:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |)
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case GREATER_THAN:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_Java_fragment)))
				{
					alt12 = 2;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_Java_fragment)))
				{
					alt12 = 3;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case EOF:
			case ABSTRACT:
			case AND:
			case AND_ASSIGN:
			case ASSIGN:
			case AT:
			case BIT_SHIFT_RIGHT_ASSIGN:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CHAR:
			case CHARACTER_LITERAL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONTINUE:
			case DEC:
			case DECIMAL_LITERAL:
			case DEFAULT:
			case DIV_ASSIGN:
			case DO:
			case DOT:
			case DOUBLE:
			case ELLIPSIS:
			case ELSE:
			case ENUM:
			case EQUAL:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case FOR:
			case GLOBAL:
			case HEX_LITERAL:
			case IDENT:
			case IF:
			case IMPLEMENTS:
			case INC:
			case INT:
			case INTERFACE:
			case LBRACK:
			case LCURLY:
			case LESS_THAN:
			case LOGICAL_AND:
			case LOGICAL_NOT:
			case LOGICAL_OR:
			case LONG:
			case LPAREN:
			case MINUS:
			case MINUS_ASSIGN:
			case MOD_ASSIGN:
			case NATIVE:
			case NEW:
			case NOT:
			case NOT_EQUAL:
			case NULL:
			case OCTAL_LITERAL:
			case OR:
			case OR_ASSIGN:
			case OVERRIDE:
			case PLUS:
			case PLUS_ASSIGN:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case QUESTION:
			case RBRACK:
			case RCURLY:
			case RETURN:
			case RPAREN:
			case SEMI:
			case SHIFT_LEFT_ASSIGN:
			case SHIFT_RIGHT_ASSIGN:
			case SHORT:
			case SOQL_LITERAL:
			case STAR_ASSIGN:
			case STATIC:
			case STRICTFP:
			case STRING_LITERAL:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case TEST_METHOD:
			case THIS:
			case THROW:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITHOUT_SHARING:
			case WITH_SHARING:
			case XOR:
			case XOR_ASSIGN:
			case 192:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:307:9: GREATER_THAN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 9);
				GREATER_THAN38=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_genericTypeListClosing5191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER_THAN38_tree = (CommonTree)adaptor.Create(GREATER_THAN38);
				adaptor.AddChild(root_0, GREATER_THAN38_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:308:9: SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(308, 9);
				SHIFT_RIGHT39=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_genericTypeListClosing5201); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHIFT_RIGHT39_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT39);
				adaptor.AddChild(root_0, SHIFT_RIGHT39_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:309:9: BIT_SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(309, 9);
				BIT_SHIFT_RIGHT40=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_genericTypeListClosing5211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT40);
				adaptor.AddChild(root_0, BIT_SHIFT_RIGHT40_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:311:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeListClosing", 12);
			LeaveRule("genericTypeListClosing", 12);
			LeaveRule_genericTypeListClosing();
			if (state.backtracking > 0) { Memoize(input, 12, genericTypeListClosing_StartIndex); }

		}
		DebugLocation(311, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeListClosing"); }
		return retval;

	}
	// $ANTLR end "genericTypeListClosing"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:313:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 13);
		TraceIn("genericTypeParameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> bound42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(313, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:9: IDENT ( bound )?
			{
			DebugLocation(314, 9);
			IDENT41=(IToken)Match(input,IDENT,Follow._IDENT_in_genericTypeParameter5239); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT41);

			DebugLocation(314, 15);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:15: ( bound )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==EXTENDS))
			{
				int LA13_2 = input.LA(2);

				if ((LA13_2==BOOLEAN||LA13_2==BYTE||LA13_2==CHAR||LA13_2==DOUBLE||LA13_2==FLOAT||LA13_2==INT||LA13_2==LONG||LA13_2==SHORT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
				else if ((LA13_2==IDENT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:15: bound
				{
				DebugLocation(314, 15);
				PushFollow(Follow._bound_in_genericTypeParameter5241);
				bound42=bound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bound.Add(bound42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: IDENT, bound
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 315:9: -> ^( IDENT ( bound )? )
			{
				DebugLocation(315, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:315:13: ^( IDENT ( bound )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(315, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDENT.NextNode(), root_1);

				DebugLocation(315, 21);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:315:21: ( bound )?
				if (stream_bound.HasNext)
				{
					DebugLocation(315, 21);
					adaptor.AddChild(root_1, stream_bound.NextTree());

				}
				stream_bound.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameter", 13);
			LeaveRule("genericTypeParameter", 13);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 13, genericTypeParameter_StartIndex); }

		}
		DebugLocation(316, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:318:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
	[GrammarRule("bound")]
	private AstParserRuleReturnScope<CommonTree, IToken> bound()
	{
		EnterRule_bound();
		EnterRule("bound", 14);
		TraceIn("bound", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bound_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS43 = default(IToken);
		IToken AND45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS43_tree = default(CommonTree);
		CommonTree AND45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(318, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:319:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:319:9: EXTENDS type ( AND type )*
			{
			DebugLocation(319, 9);
			EXTENDS43=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_bound5287); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS43);

			DebugLocation(319, 17);
			PushFollow(Follow._type_in_bound5289);
			type44=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type44.Tree);
			DebugLocation(319, 22);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:319:22: ( AND type )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==AND))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:319:23: AND type
					{
					DebugLocation(319, 23);
					AND45=(IToken)Match(input,AND,Follow._AND_in_bound5292); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND45);

					DebugLocation(319, 27);
					PushFollow(Follow._type_in_bound5294);
					type46=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type46.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 320:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
			{
				DebugLocation(320, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:320:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(320, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

				DebugLocation(320, 66);
				if (!(stream_type.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_type.HasNext )
				{
					DebugLocation(320, 66);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bound", 14);
			LeaveRule("bound", 14);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 14, bound_StartIndex); }

		}
		DebugLocation(321, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return retval;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTypeDeclaration();
	partial void LeaveRule_enumTypeDeclaration();
	// $ANTLR start "enumTypeDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:323:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
	[GrammarRule("enumTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_enumTypeDeclaration();
		EnterRule("enumTypeDeclaration", 15);
		TraceIn("enumTypeDeclaration", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ENUM47 = default(IToken);
		IToken IDENT48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumBody50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ENUM47_tree = default(CommonTree);
		CommonTree IDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ENUM=new RewriteRuleITokenStream(adaptor,"token ENUM");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		try { DebugEnterRule(GrammarFileName, "enumTypeDeclaration");
		DebugLocation(323, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:324:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:324:9: ENUM IDENT ( implementsClause )? enumBody
			{
			DebugLocation(324, 9);
			ENUM47=(IToken)Match(input,ENUM,Follow._ENUM_in_enumTypeDeclaration5335); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ENUM.Add(ENUM47);

			DebugLocation(324, 14);
			IDENT48=(IToken)Match(input,IDENT,Follow._IDENT_in_enumTypeDeclaration5337); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT48);

			DebugLocation(324, 20);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:324:20: ( implementsClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==IMPLEMENTS))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:324:20: implementsClause
				{
				DebugLocation(324, 20);
				PushFollow(Follow._implementsClause_in_enumTypeDeclaration5339);
				implementsClause49=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(324, 38);
			PushFollow(Follow._enumBody_in_enumTypeDeclaration5342);
			enumBody50=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumBody.Add(enumBody50.Tree);


			{
			// AST REWRITE
			// elements: IDENT, implementsClause, ENUM, enumBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
			{
				DebugLocation(325, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:325:13: ^( ENUM IDENT ( implementsClause )? enumBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_ENUM.NextNode(), root_1);

				DebugLocation(325, 20);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(325, 33);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(325, 39);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:325:39: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(325, 39);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(325, 57);
				adaptor.AddChild(root_1, stream_enumBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumTypeDeclaration", 15);
			LeaveRule("enumTypeDeclaration", 15);
			LeaveRule_enumTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 15, enumTypeDeclaration_StartIndex); }

		}
		DebugLocation(326, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumTypeDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:328:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 16);
		TraceIn("enumBody", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY51 = default(IToken);
		IToken RCURLY53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY51_tree = default(CommonTree);
		CommonTree RCURLY53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(328, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:329:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:329:9: LCURLY enumScopeDeclarations RCURLY
			{
			DebugLocation(329, 9);
			LCURLY51=(IToken)Match(input,LCURLY,Follow._LCURLY_in_enumBody5389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY51);

			DebugLocation(329, 16);
			PushFollow(Follow._enumScopeDeclarations_in_enumBody5391);
			enumScopeDeclarations52=enumScopeDeclarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumScopeDeclarations.Add(enumScopeDeclarations52.Tree);
			DebugLocation(329, 38);
			RCURLY53=(IToken)Match(input,RCURLY,Follow._RCURLY_in_enumBody5393); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY53);



			{
			// AST REWRITE
			// elements: enumScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 330:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
			{
				DebugLocation(330, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:330:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(330, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(330, 69);
				adaptor.AddChild(root_1, stream_enumScopeDeclarations.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 16);
			LeaveRule("enumBody", 16);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 16, enumBody_StartIndex); }

		}
		DebugLocation(331, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumScopeDeclarations();
	partial void LeaveRule_enumScopeDeclarations();
	// $ANTLR start "enumScopeDeclarations"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:333:1: enumScopeDeclarations : enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? ;
	[GrammarRule("enumScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations()
	{
		EnterRule_enumScopeDeclarations();
		EnterRule("enumScopeDeclarations", 17);
		TraceIn("enumScopeDeclarations", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstants54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumScopeDeclarations");
		DebugLocation(333, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:5: ( enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:9: enumConstants ( COMMA !)? ( enumClassScopeDeclarations )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(334, 9);
			PushFollow(Follow._enumConstants_in_enumScopeDeclarations5430);
			enumConstants54=enumConstants();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants54.Tree);
			DebugLocation(334, 23);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:23: ( COMMA !)?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==COMMA))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:24: COMMA !
				{
				DebugLocation(334, 29);
				COMMA55=(IToken)Match(input,COMMA,Follow._COMMA_in_enumScopeDeclarations5433); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(334, 33);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:33: ( enumClassScopeDeclarations )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==SEMI))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:334:33: enumClassScopeDeclarations
				{
				DebugLocation(334, 33);
				PushFollow(Follow._enumClassScopeDeclarations_in_enumScopeDeclarations5438);
				enumClassScopeDeclarations56=enumClassScopeDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumClassScopeDeclarations56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumScopeDeclarations", 17);
			LeaveRule("enumScopeDeclarations", 17);
			LeaveRule_enumScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 17, enumScopeDeclarations_StartIndex); }

		}
		DebugLocation(335, 4);
		} finally { DebugExitRule(GrammarFileName, "enumScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumScopeDeclarations"

	partial void EnterRule_enumClassScopeDeclarations();
	partial void LeaveRule_enumClassScopeDeclarations();
	// $ANTLR start "enumClassScopeDeclarations"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:337:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("enumClassScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations()
	{
		EnterRule_enumClassScopeDeclarations();
		EnterRule("enumClassScopeDeclarations", 18);
		TraceIn("enumClassScopeDeclarations", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumClassScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI57_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumClassScopeDeclarations");
		DebugLocation(337, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:338:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:338:9: SEMI ( classScopeDeclarations )*
			{
			DebugLocation(338, 9);
			SEMI57=(IToken)Match(input,SEMI,Follow._SEMI_in_enumClassScopeDeclarations5458); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI57);

			DebugLocation(338, 14);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:338:14: ( classScopeDeclarations )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==ABSTRACT||LA18_1==AT||LA18_1==BOOLEAN||LA18_1==BYTE||LA18_1==CHAR||LA18_1==CLASS||LA18_1==DOUBLE||LA18_1==ENUM||LA18_1==FINAL||LA18_1==FLOAT||LA18_1==GLOBAL||LA18_1==IDENT||LA18_1==INT||LA18_1==INTERFACE||LA18_1==LCURLY||LA18_1==LESS_THAN||LA18_1==LONG||LA18_1==NATIVE||LA18_1==OVERRIDE||LA18_1==PRIVATE||(LA18_1>=PROTECTED && LA18_1<=PUBLIC)||LA18_1==SEMI||LA18_1==SHORT||LA18_1==STATIC||LA18_1==STRICTFP||(LA18_1>=SYNCHRONIZED && LA18_1<=TEST_METHOD)||LA18_1==TRANSIENT||(LA18_1>=VIRTUAL && LA18_1<=VOID)||LA18_1==VOLATILE||(LA18_1>=WITHOUT_SHARING && LA18_1<=WITH_SHARING)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:338:14: classScopeDeclarations
					{
					DebugLocation(338, 14);
					PushFollow(Follow._classScopeDeclarations_in_enumClassScopeDeclarations5460);
					classScopeDeclarations58=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations58.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(339, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:339:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(339, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(339, 69);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:339:69: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(339, 69);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumClassScopeDeclarations", 18);
			LeaveRule("enumClassScopeDeclarations", 18);
			LeaveRule_enumClassScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumClassScopeDeclarations_StartIndex); }

		}
		DebugLocation(340, 4);
		} finally { DebugExitRule(GrammarFileName, "enumClassScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumClassScopeDeclarations"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:342:1: enumConstants : enumConstant ( COMMA ! enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 19);
		TraceIn("enumConstants", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(342, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:343:5: ( enumConstant ( COMMA ! enumConstant )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:343:9: enumConstant ( COMMA ! enumConstant )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(343, 9);
			PushFollow(Follow._enumConstant_in_enumConstants5499);
			enumConstant59=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant59.Tree);
			DebugLocation(343, 22);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:343:22: ( COMMA ! enumConstant )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					int LA19_2 = input.LA(2);

					if ((LA19_2==AT||LA19_2==IDENT))
					{
						alt19 = 1;
					}


				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:343:23: COMMA ! enumConstant
					{
					DebugLocation(343, 28);
					COMMA60=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants5502); if (state.failed) return retval;
					DebugLocation(343, 30);
					PushFollow(Follow._enumConstant_in_enumConstants5505);
					enumConstant61=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant61.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 19);
			LeaveRule("enumConstants", 19);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 19, enumConstants_StartIndex); }

		}
		DebugLocation(344, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:346:1: enumConstant : annotationList IDENT ^ ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 20);
		TraceIn("enumConstant", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationList62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(346, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:5: ( annotationList IDENT ^ ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:9: annotationList IDENT ^ ( arguments )? ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 9);
			PushFollow(Follow._annotationList_in_enumConstant5530);
			annotationList62=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList62.Tree);
			DebugLocation(347, 29);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_enumConstant5532); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT63_tree, root_0);
			}
			DebugLocation(347, 31);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:31: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==LPAREN))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:31: arguments
				{
				DebugLocation(347, 31);
				PushFollow(Follow._arguments_in_enumConstant5535);
				arguments64=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(347, 42);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:42: ( classBody )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==LCURLY))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:347:42: classBody
				{
				DebugLocation(347, 42);
				PushFollow(Follow._classBody_in_enumConstant5538);
				classBody65=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 20);
			LeaveRule("enumConstant", 20);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 20, enumConstant_StartIndex); }

		}
		DebugLocation(348, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_interfaceTypeDeclaration();
	partial void LeaveRule_interfaceTypeDeclaration();
	// $ANTLR start "interfaceTypeDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:350:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
	[GrammarRule("interfaceTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_interfaceTypeDeclaration();
		EnterRule("interfaceTypeDeclaration", 21);
		TraceIn("interfaceTypeDeclaration", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INTERFACE66 = default(IToken);
		IToken IDENT67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceBody70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INTERFACE66_tree = default(CommonTree);
		CommonTree IDENT67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
		RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		try { DebugEnterRule(GrammarFileName, "interfaceTypeDeclaration");
		DebugLocation(350, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
			{
			DebugLocation(351, 9);
			INTERFACE66=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceTypeDeclaration5563); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE66);

			DebugLocation(351, 19);
			IDENT67=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceTypeDeclaration5565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT67);

			DebugLocation(351, 25);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:25: ( genericTypeParameterList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==LESS_THAN))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:25: genericTypeParameterList
				{
				DebugLocation(351, 25);
				PushFollow(Follow._genericTypeParameterList_in_interfaceTypeDeclaration5567);
				genericTypeParameterList68=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(351, 51);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:51: ( interfaceExtendsClause )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==EXTENDS))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:351:51: interfaceExtendsClause
				{
				DebugLocation(351, 51);
				PushFollow(Follow._interfaceExtendsClause_in_interfaceTypeDeclaration5570);
				interfaceExtendsClause69=interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(351, 75);
			PushFollow(Follow._interfaceBody_in_interfaceTypeDeclaration5573);
			interfaceBody70=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceBody.Add(interfaceBody70.Tree);


			{
			// AST REWRITE
			// elements: INTERFACE, IDENT, genericTypeParameterList, interfaceBody, interfaceExtendsClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
			{
				DebugLocation(352, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:352:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(352, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_INTERFACE.NextNode(), root_1);

				DebugLocation(352, 25);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(352, 38);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(352, 44);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:352:44: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(352, 44);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(352, 70);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:352:70: ( interfaceExtendsClause )?
				if (stream_interfaceExtendsClause.HasNext)
				{
					DebugLocation(352, 70);
					adaptor.AddChild(root_1, stream_interfaceExtendsClause.NextTree());

				}
				stream_interfaceExtendsClause.Reset();
				DebugLocation(352, 94);
				adaptor.AddChild(root_1, stream_interfaceBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceTypeDeclaration", 21);
			LeaveRule("interfaceTypeDeclaration", 21);
			LeaveRule_interfaceTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 21, interfaceTypeDeclaration_StartIndex); }

		}
		DebugLocation(353, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceTypeDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:355:1: typeList : type ( COMMA ! type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 22);
		TraceIn("typeList", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(355, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:356:5: ( type ( COMMA ! type )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:356:9: type ( COMMA ! type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(356, 9);
			PushFollow(Follow._type_in_typeList5623);
			type71=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type71.Tree);
			DebugLocation(356, 14);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:356:14: ( COMMA ! type )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==COMMA))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:356:15: COMMA ! type
					{
					DebugLocation(356, 20);
					COMMA72=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList5626); if (state.failed) return retval;
					DebugLocation(356, 22);
					PushFollow(Follow._type_in_typeList5629);
					type73=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type73.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 22);
			LeaveRule("typeList", 22);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 22, typeList_StartIndex); }

		}
		DebugLocation(357, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:359:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 23);
		TraceIn("classBody", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY74 = default(IToken);
		IToken RCURLY76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY74_tree = default(CommonTree);
		CommonTree RCURLY76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(359, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:360:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:360:9: LCURLY ( classScopeDeclarations )* RCURLY
			{
			DebugLocation(360, 9);
			LCURLY74=(IToken)Match(input,LCURLY,Follow._LCURLY_in_classBody5654); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY74);

			DebugLocation(360, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:360:16: ( classScopeDeclarations )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==ABSTRACT||LA25_1==AT||LA25_1==BOOLEAN||LA25_1==BYTE||LA25_1==CHAR||LA25_1==CLASS||LA25_1==DOUBLE||LA25_1==ENUM||LA25_1==FINAL||LA25_1==FLOAT||LA25_1==GLOBAL||LA25_1==IDENT||LA25_1==INT||LA25_1==INTERFACE||LA25_1==LCURLY||LA25_1==LESS_THAN||LA25_1==LONG||LA25_1==NATIVE||LA25_1==OVERRIDE||LA25_1==PRIVATE||(LA25_1>=PROTECTED && LA25_1<=PUBLIC)||LA25_1==SEMI||LA25_1==SHORT||LA25_1==STATIC||LA25_1==STRICTFP||(LA25_1>=SYNCHRONIZED && LA25_1<=TEST_METHOD)||LA25_1==TRANSIENT||(LA25_1>=VIRTUAL && LA25_1<=VOID)||LA25_1==VOLATILE||(LA25_1>=WITHOUT_SHARING && LA25_1<=WITH_SHARING)))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:360:16: classScopeDeclarations
					{
					DebugLocation(360, 16);
					PushFollow(Follow._classScopeDeclarations_in_classBody5656);
					classScopeDeclarations75=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations75.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(360, 40);
			RCURLY76=(IToken)Match(input,RCURLY,Follow._RCURLY_in_classBody5659); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY76);



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(361, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:361:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(361, 71);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:361:71: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(361, 71);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 23);
			LeaveRule("classBody", 23);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 23, classBody_StartIndex); }

		}
		DebugLocation(362, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:364:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 24);
		TraceIn("interfaceBody", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY77 = default(IToken);
		IToken RCURLY79 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY77_tree = default(CommonTree);
		CommonTree RCURLY79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(364, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:365:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:365:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
			{
			DebugLocation(365, 9);
			LCURLY77=(IToken)Match(input,LCURLY,Follow._LCURLY_in_interfaceBody5701); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY77);

			DebugLocation(365, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:365:16: ( interfaceScopeDeclarations )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==ABSTRACT||LA26_1==AT||LA26_1==BOOLEAN||LA26_1==BYTE||LA26_1==CHAR||LA26_1==CLASS||LA26_1==DOUBLE||LA26_1==ENUM||LA26_1==FINAL||LA26_1==FLOAT||LA26_1==GLOBAL||LA26_1==IDENT||LA26_1==INT||LA26_1==INTERFACE||LA26_1==LESS_THAN||LA26_1==LONG||LA26_1==NATIVE||LA26_1==OVERRIDE||LA26_1==PRIVATE||(LA26_1>=PROTECTED && LA26_1<=PUBLIC)||LA26_1==SEMI||LA26_1==SHORT||LA26_1==STATIC||LA26_1==STRICTFP||(LA26_1>=SYNCHRONIZED && LA26_1<=TEST_METHOD)||LA26_1==TRANSIENT||(LA26_1>=VIRTUAL && LA26_1<=VOID)||LA26_1==VOLATILE||(LA26_1>=WITHOUT_SHARING && LA26_1<=WITH_SHARING)))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:365:16: interfaceScopeDeclarations
					{
					DebugLocation(365, 16);
					PushFollow(Follow._interfaceScopeDeclarations_in_interfaceBody5703);
					interfaceScopeDeclarations78=interfaceScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceScopeDeclarations.Add(interfaceScopeDeclarations78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(365, 44);
			RCURLY79=(IToken)Match(input,RCURLY,Follow._RCURLY_in_interfaceBody5706); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY79);



			{
			// AST REWRITE
			// elements: interfaceScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 366:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
			{
				DebugLocation(366, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:366:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(366, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(366, 75);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:366:75: ( interfaceScopeDeclarations )*
				while ( stream_interfaceScopeDeclarations.HasNext )
				{
					DebugLocation(366, 75);
					adaptor.AddChild(root_1, stream_interfaceScopeDeclarations.NextTree());

				}
				stream_interfaceScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 24);
			LeaveRule("interfaceBody", 24);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 24, interfaceBody_StartIndex); }

		}
		DebugLocation(367, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:369:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("classScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 25);
		TraceIn("classScopeDeclarations", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken STATIC81 = default(IToken);
		IToken IDENT86 = default(IToken);
		IToken IDENT89 = default(IToken);
		IToken SEMI94 = default(IToken);
		IToken VOID95 = default(IToken);
		IToken IDENT96 = default(IToken);
		IToken SEMI100 = default(IToken);
		IToken SEMI106 = default(IToken);
		IToken SEMI108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> propertyDeclaration87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration107 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ident_tree = default(CommonTree);
		CommonTree STATIC81_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree IDENT89_tree = default(CommonTree);
		CommonTree SEMI94_tree = default(CommonTree);
		CommonTree VOID95_tree = default(CommonTree);
		CommonTree IDENT96_tree = default(CommonTree);
		CommonTree SEMI100_tree = default(CommonTree);
		CommonTree SEMI106_tree = default(CommonTree);
		CommonTree SEMI108_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleITokenStream stream_STATIC=new RewriteRuleITokenStream(adaptor,"token STATIC");
		RewriteRuleSubtreeStream stream_propertyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule propertyDeclaration");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(369, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:370:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt36=5;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt36 = 1;
				}
				break;
			case STATIC:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred32_Java_fragment)))
				{
					alt36 = 2;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt36 = 3;
				}
				else if ((EvaluatePredicate(synpred45_Java_fragment)))
				{
					alt36 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt36 = 3;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt36 = 4;
				}
				break;
			case SEMI:
				{
				alt36 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:370:9: block
				{
				DebugLocation(370, 9);
				PushFollow(Follow._block_in_classScopeDeclarations5744);
				block80=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block80.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
				{
					DebugLocation(370, 29);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:370:29: ^( CLASS_INSTANCE_INITIALIZER block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

					DebugLocation(370, 58);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:371:9: STATIC block
				{
				DebugLocation(371, 9);
				STATIC81=(IToken)Match(input,STATIC,Follow._STATIC_in_classScopeDeclarations5773); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATIC.Add(STATIC81);

				DebugLocation(371, 16);
				PushFollow(Follow._block_in_classScopeDeclarations5775);
				block82=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block82.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 371:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
				{
					DebugLocation(371, 29);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:371:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(371, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

					DebugLocation(371, 93);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:372:9: modifierList ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(372, 9);
				PushFollow(Follow._modifierList_in_classScopeDeclarations5798);
				modifierList83=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList83.Tree);
				DebugLocation(373, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:9: ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt35 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred43_Java_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred43_Java_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )? ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					{
					DebugLocation(373, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==LESS_THAN))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: genericTypeParameterList
						{
						DebugLocation(373, 13);
						PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations5812);
						genericTypeParameterList84=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList84.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(374, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:374:13: ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL propertyDeclaration ) | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					int alt34=4;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred34_Java_fragment)))
						{
							alt34 = 1;
						}
						else if ((EvaluatePredicate(synpred38_Java_fragment)))
						{
							alt34 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENT:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred34_Java_fragment)))
						{
							alt34 = 1;
						}
						else if ((EvaluatePredicate(synpred38_Java_fragment)))
						{
							alt34 = 2;
						}
						else if ((true))
						{
							alt34 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 2, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case VOID:
						{
						alt34 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:17: type IDENT propertyDeclaration
						{
						DebugLocation(375, 17);
						PushFollow(Follow._type_in_classScopeDeclarations5848);
						type85=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type85.Tree);
						DebugLocation(375, 22);
						IDENT86=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5850); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT86);

						DebugLocation(375, 28);
						PushFollow(Follow._propertyDeclaration_in_classScopeDeclarations5852);
						propertyDeclaration87=propertyDeclaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_propertyDeclaration.Add(propertyDeclaration87.Tree);


						{
						// AST REWRITE
						// elements: propertyDeclaration
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 375:48: -> ^( PROPERTY_DECL propertyDeclaration )
						{
							DebugLocation(375, 51);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:51: ^( PROPERTY_DECL propertyDeclaration )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(375, 53);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_DECL, "PROPERTY_DECL"), root_1);

							DebugLocation(375, 67);
							adaptor.AddChild(root_1, stream_propertyDeclaration.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(376, 17);
						PushFollow(Follow._type_in_classScopeDeclarations5878);
						type88=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type88.Tree);
						DebugLocation(376, 22);
						IDENT89=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5880); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT89);

						DebugLocation(376, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5882);
						formalParameterList90=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList90.Tree);
						DebugLocation(376, 48);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: ( arrayDeclaratorList )?
						int alt28=2;
						try { DebugEnterSubRule(28);
						try { DebugEnterDecision(28, false);
						int LA28_1 = input.LA(1);

						if ((LA28_1==LBRACK))
						{
							alt28 = 1;
						}
						} finally { DebugExitDecision(28); }
						switch (alt28)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: arrayDeclaratorList
							{
							DebugLocation(376, 48);
							PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations5884);
							arrayDeclaratorList91=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList91.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(28); }

						DebugLocation(376, 69);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: ( throwsClause )?
						int alt29=2;
						try { DebugEnterSubRule(29);
						try { DebugEnterDecision(29, false);
						int LA29_1 = input.LA(1);

						if ((LA29_1==THROWS))
						{
							alt29 = 1;
						}
						} finally { DebugExitDecision(29); }
						switch (alt29)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: throwsClause
							{
							DebugLocation(376, 69);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5887);
							throwsClause92=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause92.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(29); }

						DebugLocation(376, 83);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:83: ( block | SEMI )
						int alt30=2;
						try { DebugEnterSubRule(30);
						try { DebugEnterDecision(30, false);
						int LA30_1 = input.LA(1);

						if ((LA30_1==LCURLY))
						{
							alt30 = 1;
						}
						else if ((LA30_1==SEMI))
						{
							alt30 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(30); }
						switch (alt30)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:84: block
							{
							DebugLocation(376, 84);
							PushFollow(Follow._block_in_classScopeDeclarations5891);
							block93=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block93.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:92: SEMI
							{
							DebugLocation(376, 92);
							SEMI94=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5895); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI94);


							}
							break;

						}
						} finally { DebugExitSubRule(30); }



						{
						// AST REWRITE
						// elements: arrayDeclaratorList, IDENT, throwsClause, formalParameterList, modifierList, genericTypeParameterList, block, type
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 377:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
						{
							DebugLocation(377, 21);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:377:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(377, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(377, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(377, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:377:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(377, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(377, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(377, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(377, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(377, 114);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:377:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(377, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(377, 135);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:377:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(377, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(377, 149);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:377:149: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(377, 149);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(378, 17);
						VOID95=(IToken)Match(input,VOID,Follow._VOID_in_classScopeDeclarations5957); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID95);

						DebugLocation(378, 22);
						IDENT96=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5959); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT96);

						DebugLocation(378, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5961);
						formalParameterList97=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList97.Tree);
						DebugLocation(378, 48);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: ( throwsClause )?
						int alt31=2;
						try { DebugEnterSubRule(31);
						try { DebugEnterDecision(31, false);
						int LA31_1 = input.LA(1);

						if ((LA31_1==THROWS))
						{
							alt31 = 1;
						}
						} finally { DebugExitDecision(31); }
						switch (alt31)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: throwsClause
							{
							DebugLocation(378, 48);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5963);
							throwsClause98=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause98.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(31); }

						DebugLocation(378, 62);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:62: ( block | SEMI )
						int alt32=2;
						try { DebugEnterSubRule(32);
						try { DebugEnterDecision(32, false);
						int LA32_1 = input.LA(1);

						if ((LA32_1==LCURLY))
						{
							alt32 = 1;
						}
						else if ((LA32_1==SEMI))
						{
							alt32 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(32); }
						switch (alt32)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:63: block
							{
							DebugLocation(378, 63);
							PushFollow(Follow._block_in_classScopeDeclarations5967);
							block99=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block99.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:71: SEMI
							{
							DebugLocation(378, 71);
							SEMI100=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5971); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI100);


							}
							break;

						}
						} finally { DebugExitSubRule(32); }



						{
						// AST REWRITE
						// elements: IDENT, throwsClause, modifierList, formalParameterList, genericTypeParameterList, block
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 379:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
						{
							DebugLocation(379, 21);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:379:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(379, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(379, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(379, 53);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:379:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(379, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(379, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(379, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(379, 105);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:379:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(379, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(379, 119);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:379:119: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(379, 119);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:17: ident= IDENT formalParameterList ( throwsClause )? block
						{
						DebugLocation(380, 22);
						ident=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations6030); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(ident);

						DebugLocation(380, 29);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations6032);
						formalParameterList101=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList101.Tree);
						DebugLocation(380, 49);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: ( throwsClause )?
						int alt33=2;
						try { DebugEnterSubRule(33);
						try { DebugEnterDecision(33, false);
						int LA33_1 = input.LA(1);

						if ((LA33_1==THROWS))
						{
							alt33 = 1;
						}
						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: throwsClause
							{
							DebugLocation(380, 49);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations6034);
							throwsClause102=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause102.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(33); }

						DebugLocation(380, 63);
						PushFollow(Follow._block_in_classScopeDeclarations6037);
						block103=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block103.Tree);


						{
						// AST REWRITE
						// elements: block, formalParameterList, throwsClause, modifierList, genericTypeParameterList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 381:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
						{
							DebugLocation(381, 21);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:381:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(381, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

							DebugLocation(381, 68);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(381, 81);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:381:81: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(381, 81);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(381, 107);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(381, 127);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:381:127: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(381, 127);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(381, 141);
							adaptor.AddChild(root_1, stream_block.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(34); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:383:13: type classFieldDeclaratorList SEMI
					{
					DebugLocation(383, 13);
					PushFollow(Follow._type_in_classScopeDeclarations6101);
					type104=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type104.Tree);
					DebugLocation(383, 18);
					PushFollow(Follow._classFieldDeclaratorList_in_classScopeDeclarations6103);
					classFieldDeclaratorList105=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList105.Tree);
					DebugLocation(383, 43);
					SEMI106=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6105); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI106);



					{
					// AST REWRITE
					// elements: modifierList, classFieldDeclaratorList, type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(384, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:384:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(384, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(384, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(384, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(35); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:386:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations6150);
				typeDeclaration107=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration107.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:387:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 13);
				SEMI108=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6160); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classScopeDeclarations", 25);
			LeaveRule("classScopeDeclarations", 25);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 25, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(388, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:390:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("interfaceScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 26);
		TraceIn("interfaceScopeDeclarations", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT112 = default(IToken);
		IToken SEMI116 = default(IToken);
		IToken VOID117 = default(IToken);
		IToken IDENT118 = default(IToken);
		IToken SEMI121 = default(IToken);
		IToken SEMI124 = default(IToken);
		IToken SEMI126 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT112_tree = default(CommonTree);
		CommonTree SEMI116_tree = default(CommonTree);
		CommonTree VOID117_tree = default(CommonTree);
		CommonTree IDENT118_tree = default(CommonTree);
		CommonTree SEMI121_tree = default(CommonTree);
		CommonTree SEMI124_tree = default(CommonTree);
		CommonTree SEMI126_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(390, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:391:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt43=3;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt43 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt43 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt43 = 2;
				}
				break;
			case SEMI:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:391:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				{
				DebugLocation(391, 9);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations6180);
				modifierList109=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList109.Tree);
				DebugLocation(392, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt42 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred51_Java_fragment)))
					{
						alt42 = 1;
					}
					else if ((true))
					{
						alt42 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred51_Java_fragment)))
					{
						alt42 = 1;
					}
					else if ((true))
					{
						alt42 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					{
					DebugLocation(392, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==LESS_THAN))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: genericTypeParameterList
						{
						DebugLocation(392, 13);
						PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations6194);
						genericTypeParameterList110=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList110.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(393, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==BOOLEAN||LA41_1==BYTE||LA41_1==CHAR||LA41_1==DOUBLE||LA41_1==FLOAT||LA41_1==IDENT||LA41_1==INT||LA41_1==LONG||LA41_1==SHORT))
					{
						alt41 = 1;
					}
					else if ((LA41_1==VOID))
					{
						alt41 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
						{
						DebugLocation(393, 17);
						PushFollow(Follow._type_in_interfaceScopeDeclarations6213);
						type111=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type111.Tree);
						DebugLocation(393, 22);
						IDENT112=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6215); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT112);

						DebugLocation(393, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6217);
						formalParameterList113=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList113.Tree);
						DebugLocation(393, 48);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: ( arrayDeclaratorList )?
						int alt38=2;
						try { DebugEnterSubRule(38);
						try { DebugEnterDecision(38, false);
						int LA38_1 = input.LA(1);

						if ((LA38_1==LBRACK))
						{
							alt38 = 1;
						}
						} finally { DebugExitDecision(38); }
						switch (alt38)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: arrayDeclaratorList
							{
							DebugLocation(393, 48);
							PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations6219);
							arrayDeclaratorList114=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList114.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(38); }

						DebugLocation(393, 69);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: ( throwsClause )?
						int alt39=2;
						try { DebugEnterSubRule(39);
						try { DebugEnterDecision(39, false);
						int LA39_1 = input.LA(1);

						if ((LA39_1==THROWS))
						{
							alt39 = 1;
						}
						} finally { DebugExitDecision(39); }
						switch (alt39)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: throwsClause
							{
							DebugLocation(393, 69);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6222);
							throwsClause115=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause115.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(39); }

						DebugLocation(393, 83);
						SEMI116=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6225); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI116);



						{
						// AST REWRITE
						// elements: modifierList, type, formalParameterList, genericTypeParameterList, throwsClause, IDENT, arrayDeclaratorList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 394:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
						{
							DebugLocation(394, 21);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:394:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(394, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(394, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(394, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:394:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(394, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(394, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(394, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(394, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(394, 114);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:394:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(394, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(394, 135);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:394:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(394, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
						{
						DebugLocation(395, 17);
						VOID117=(IToken)Match(input,VOID,Follow._VOID_in_interfaceScopeDeclarations6283); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID117);

						DebugLocation(395, 22);
						IDENT118=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6285); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT118);

						DebugLocation(395, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6287);
						formalParameterList119=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList119.Tree);
						DebugLocation(395, 48);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: ( throwsClause )?
						int alt40=2;
						try { DebugEnterSubRule(40);
						try { DebugEnterDecision(40, false);
						int LA40_1 = input.LA(1);

						if ((LA40_1==THROWS))
						{
							alt40 = 1;
						}
						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: throwsClause
							{
							DebugLocation(395, 48);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6289);
							throwsClause120=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause120.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(40); }

						DebugLocation(395, 62);
						SEMI121=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6292); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI121);



						{
						// AST REWRITE
						// elements: IDENT, formalParameterList, throwsClause, modifierList, genericTypeParameterList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 396:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
						{
							DebugLocation(396, 21);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:396:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(396, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(396, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(396, 53);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:396:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(396, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(396, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(396, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(396, 105);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:396:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(396, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(41); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:398:13: type interfaceFieldDeclaratorList SEMI
					{
					DebugLocation(398, 13);
					PushFollow(Follow._type_in_interfaceScopeDeclarations6355);
					type122=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type122.Tree);
					DebugLocation(398, 18);
					PushFollow(Follow._interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6357);
					interfaceFieldDeclaratorList123=interfaceFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclaratorList.Add(interfaceFieldDeclaratorList123.Tree);
					DebugLocation(398, 47);
					SEMI124=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6359); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI124);



					{
					// AST REWRITE
					// elements: modifierList, type, interfaceFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
					{
						DebugLocation(399, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:399:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(399, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(399, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(399, 53);
						adaptor.AddChild(root_1, stream_interfaceFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:401:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations6404);
				typeDeclaration125=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration125.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:402:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 13);
				SEMI126=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6414); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 26);
			LeaveRule("interfaceScopeDeclarations", 26);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 26, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(403, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_classFieldDeclaratorList();
	partial void LeaveRule_classFieldDeclaratorList();
	// $ANTLR start "classFieldDeclaratorList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:405:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
	[GrammarRule("classFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList()
	{
		EnterRule_classFieldDeclaratorList();
		EnterRule("classFieldDeclaratorList", 27);
		TraceIn("classFieldDeclaratorList", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclaratorList");
		DebugLocation(405, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:406:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:406:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
			{
			DebugLocation(406, 9);
			PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6434);
			classFieldDeclarator127=classFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator127.Tree);
			DebugLocation(406, 30);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:406:30: ( COMMA classFieldDeclarator )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==COMMA))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:406:31: COMMA classFieldDeclarator
					{
					DebugLocation(406, 31);
					COMMA128=(IToken)Match(input,COMMA,Follow._COMMA_in_classFieldDeclaratorList6437); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA128);

					DebugLocation(406, 37);
					PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6439);
					classFieldDeclarator129=classFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator129.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: classFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
			{
				DebugLocation(407, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:407:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(407, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(407, 35);
				if (!(stream_classFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_classFieldDeclarator.HasNext )
				{
					DebugLocation(407, 35);
					adaptor.AddChild(root_1, stream_classFieldDeclarator.NextTree());

				}
				stream_classFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclaratorList", 27);
			LeaveRule("classFieldDeclaratorList", 27);
			LeaveRule_classFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 27, classFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(408, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclaratorList"

	partial void EnterRule_classFieldDeclarator();
	partial void LeaveRule_classFieldDeclarator();
	// $ANTLR start "classFieldDeclarator"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:410:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("classFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator()
	{
		EnterRule_classFieldDeclarator();
		EnterRule("classFieldDeclarator", 28);
		TraceIn("classFieldDeclarator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclarator");
		DebugLocation(410, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:411:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:411:9: variableDeclaratorId ( ASSIGN variableInitializer )?
			{
			DebugLocation(411, 9);
			PushFollow(Follow._variableDeclaratorId_in_classFieldDeclarator6478);
			variableDeclaratorId130=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId130.Tree);
			DebugLocation(411, 30);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:411:30: ( ASSIGN variableInitializer )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==ASSIGN))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:411:31: ASSIGN variableInitializer
				{
				DebugLocation(411, 31);
				ASSIGN131=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_classFieldDeclarator6481); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN131);

				DebugLocation(411, 38);
				PushFollow(Follow._variableInitializer_in_classFieldDeclarator6483);
				variableInitializer132=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer132.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: variableInitializer, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 412:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
				DebugLocation(412, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:412:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(412, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(412, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(412, 51);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:412:51: ( variableInitializer )?
				if (stream_variableInitializer.HasNext)
				{
					DebugLocation(412, 51);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclarator", 28);
			LeaveRule("classFieldDeclarator", 28);
			LeaveRule_classFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, classFieldDeclarator_StartIndex); }

		}
		DebugLocation(413, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclarator"

	partial void EnterRule_interfaceFieldDeclaratorList();
	partial void LeaveRule_interfaceFieldDeclaratorList();
	// $ANTLR start "interfaceFieldDeclaratorList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:415:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
	[GrammarRule("interfaceFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList()
	{
		EnterRule_interfaceFieldDeclaratorList();
		EnterRule("interfaceFieldDeclaratorList", 29);
		TraceIn("interfaceFieldDeclaratorList", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaratorList");
		DebugLocation(415, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:416:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:416:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
			{
			DebugLocation(416, 9);
			PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6528);
			interfaceFieldDeclarator133=interfaceFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator133.Tree);
			DebugLocation(416, 34);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:416:34: ( COMMA interfaceFieldDeclarator )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==COMMA))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:416:35: COMMA interfaceFieldDeclarator
					{
					DebugLocation(416, 35);
					COMMA134=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaratorList6531); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA134);

					DebugLocation(416, 41);
					PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6533);
					interfaceFieldDeclarator135=interfaceFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator135.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: interfaceFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
			{
				DebugLocation(417, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:417:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(417, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(417, 35);
				if (!(stream_interfaceFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_interfaceFieldDeclarator.HasNext )
				{
					DebugLocation(417, 35);
					adaptor.AddChild(root_1, stream_interfaceFieldDeclarator.NextTree());

				}
				stream_interfaceFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaratorList", 29);
			LeaveRule("interfaceFieldDeclaratorList", 29);
			LeaveRule_interfaceFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(418, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaratorList"

	partial void EnterRule_interfaceFieldDeclarator();
	partial void LeaveRule_interfaceFieldDeclarator();
	// $ANTLR start "interfaceFieldDeclarator"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:420:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
	[GrammarRule("interfaceFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator()
	{
		EnterRule_interfaceFieldDeclarator();
		EnterRule("interfaceFieldDeclarator", 30);
		TraceIn("interfaceFieldDeclarator", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclarator");
		DebugLocation(420, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:421:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:421:9: variableDeclaratorId ASSIGN variableInitializer
			{
			DebugLocation(421, 9);
			PushFollow(Follow._variableDeclaratorId_in_interfaceFieldDeclarator6572);
			variableDeclaratorId136=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId136.Tree);
			DebugLocation(421, 30);
			ASSIGN137=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_interfaceFieldDeclarator6574); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN137);

			DebugLocation(421, 37);
			PushFollow(Follow._variableInitializer_in_interfaceFieldDeclarator6576);
			variableInitializer138=variableInitializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer138.Tree);


			{
			// AST REWRITE
			// elements: variableDeclaratorId, variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 422:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
			{
				DebugLocation(422, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:422:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(422, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(422, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(422, 51);
				adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclarator", 30);
			LeaveRule("interfaceFieldDeclarator", 30);
			LeaveRule_interfaceFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceFieldDeclarator_StartIndex); }

		}
		DebugLocation(423, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:425:1: variableDeclaratorId : IDENT ^ ( arrayDeclaratorList )? ;
	[GrammarRule("variableDeclaratorId")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 31);
		TraceIn("variableDeclaratorId", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT139_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(425, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:426:5: ( IDENT ^ ( arrayDeclaratorList )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:426:9: IDENT ^ ( arrayDeclaratorList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(426, 14);
			IDENT139=(IToken)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId6618); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT139_tree = (CommonTree)adaptor.Create(IDENT139);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT139_tree, root_0);
			}
			DebugLocation(426, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:426:16: ( arrayDeclaratorList )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==LBRACK))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:426:16: arrayDeclaratorList
				{
				DebugLocation(426, 16);
				PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId6621);
				arrayDeclaratorList140=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaratorId", 31);
			LeaveRule("variableDeclaratorId", 31);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 31, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(427, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return retval;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:429:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 32);
		TraceIn("variableInitializer", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(429, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:430:5: ( arrayInitializer | expression )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==LCURLY))
			{
				alt48 = 1;
			}
			else if ((LA48_1==BOOLEAN||LA48_1==BYTE||(LA48_1>=CHAR && LA48_1<=CHARACTER_LITERAL)||(LA48_1>=DEC && LA48_1<=DECIMAL_LITERAL)||LA48_1==DOUBLE||LA48_1==FALSE||(LA48_1>=FLOAT && LA48_1<=FLOATING_POINT_LITERAL)||(LA48_1>=HEX_LITERAL && LA48_1<=IDENT)||LA48_1==INC||LA48_1==INT||LA48_1==LESS_THAN||LA48_1==LOGICAL_NOT||(LA48_1>=LONG && LA48_1<=LPAREN)||LA48_1==MINUS||(LA48_1>=NEW && LA48_1<=NOT)||LA48_1==NULL||LA48_1==OCTAL_LITERAL||LA48_1==PLUS||(LA48_1>=SHORT && LA48_1<=SOQL_LITERAL)||(LA48_1>=STRING_LITERAL && LA48_1<=SUPER)||LA48_1==THIS||LA48_1==TRUE||LA48_1==VOID))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:430:9: arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(430, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer6641);
				arrayInitializer141=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer141.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:431:9: expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(431, 9);
				PushFollow(Follow._expression_in_variableInitializer6651);
				expression142=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression142.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 32);
			LeaveRule("variableInitializer", 32);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 32, variableInitializer_StartIndex); }

		}
		DebugLocation(432, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:434:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
	[GrammarRule("arrayDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 33);
		TraceIn("arrayDeclarator", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK143 = default(IToken);
		IToken RBRACK144 = default(IToken);

		CommonTree LBRACK143_tree = default(CommonTree);
		CommonTree RBRACK144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(434, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:435:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:435:9: LBRACK RBRACK
			{
			DebugLocation(435, 9);
			LBRACK143=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator6674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACK.Add(LBRACK143);

			DebugLocation(435, 16);
			RBRACK144=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator6676); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACK.Add(RBRACK144);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:9: -> ^( ARRAY_DECLARATOR )
			{
				DebugLocation(436, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:436:13: ^( ARRAY_DECLARATOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(436, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclarator", 33);
			LeaveRule("arrayDeclarator", 33);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 33, arrayDeclarator_StartIndex); }

		}
		DebugLocation(437, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return retval;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:439:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
	[GrammarRule("arrayDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 34);
		TraceIn("arrayDeclaratorList", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(439, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:9: ( arrayDeclarator )+
			{
			DebugLocation(440, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:9: ( arrayDeclarator )+
			int cnt49=0;
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==LBRACK))
				{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred59_Java_fragment)))
					{
						alt49 = 1;
					}


				}


				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:9: arrayDeclarator
					{
					DebugLocation(440, 9);
					PushFollow(Follow._arrayDeclarator_in_arrayDeclaratorList6710);
					arrayDeclarator145=arrayDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator145.Tree);

					}
					break;

				default:
					if (cnt49 >= 1)
						goto loop49;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee49 = new EarlyExitException( 49, input );
					DebugRecognitionException(eee49);
					throw eee49;
				}
				cnt49++;
			}
			loop49:
				;

			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: arrayDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 441:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
			{
				DebugLocation(441, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:441:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(441, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

				DebugLocation(441, 37);
				if (!(stream_arrayDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_arrayDeclarator.HasNext )
				{
					DebugLocation(441, 37);
					adaptor.AddChild(root_1, stream_arrayDeclarator.NextTree());

				}
				stream_arrayDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaratorList", 34);
			LeaveRule("arrayDeclaratorList", 34);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 34, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(442, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:444:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 35);
		TraceIn("arrayInitializer", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY146 = default(IToken);
		IToken COMMA148 = default(IToken);
		IToken COMMA150 = default(IToken);
		IToken RCURLY151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY146_tree = default(CommonTree);
		CommonTree COMMA148_tree = default(CommonTree);
		CommonTree COMMA150_tree = default(CommonTree);
		CommonTree RCURLY151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(444, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
			{
			DebugLocation(445, 9);
			LCURLY146=(IToken)Match(input,LCURLY,Follow._LCURLY_in_arrayInitializer6755); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY146);

			DebugLocation(445, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==BOOLEAN||LA52_1==BYTE||(LA52_1>=CHAR && LA52_1<=CHARACTER_LITERAL)||(LA52_1>=DEC && LA52_1<=DECIMAL_LITERAL)||LA52_1==DOUBLE||LA52_1==FALSE||(LA52_1>=FLOAT && LA52_1<=FLOATING_POINT_LITERAL)||(LA52_1>=HEX_LITERAL && LA52_1<=IDENT)||LA52_1==INC||LA52_1==INT||LA52_1==LCURLY||LA52_1==LESS_THAN||LA52_1==LOGICAL_NOT||(LA52_1>=LONG && LA52_1<=LPAREN)||LA52_1==MINUS||(LA52_1>=NEW && LA52_1<=NOT)||LA52_1==NULL||LA52_1==OCTAL_LITERAL||LA52_1==PLUS||(LA52_1>=SHORT && LA52_1<=SOQL_LITERAL)||(LA52_1>=STRING_LITERAL && LA52_1<=SUPER)||LA52_1==THIS||LA52_1==TRUE||LA52_1==VOID))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
				{
				DebugLocation(445, 17);
				PushFollow(Follow._variableInitializer_in_arrayInitializer6758);
				variableInitializer147=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer147.Tree);
				DebugLocation(445, 37);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:37: ( COMMA variableInitializer )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_1 = input.LA(1);

					if ((LA50_1==COMMA))
					{
						int LA50_2 = input.LA(2);

						if ((LA50_2==BOOLEAN||LA50_2==BYTE||(LA50_2>=CHAR && LA50_2<=CHARACTER_LITERAL)||(LA50_2>=DEC && LA50_2<=DECIMAL_LITERAL)||LA50_2==DOUBLE||LA50_2==FALSE||(LA50_2>=FLOAT && LA50_2<=FLOATING_POINT_LITERAL)||(LA50_2>=HEX_LITERAL && LA50_2<=IDENT)||LA50_2==INC||LA50_2==INT||LA50_2==LCURLY||LA50_2==LESS_THAN||LA50_2==LOGICAL_NOT||(LA50_2>=LONG && LA50_2<=LPAREN)||LA50_2==MINUS||(LA50_2>=NEW && LA50_2<=NOT)||LA50_2==NULL||LA50_2==OCTAL_LITERAL||LA50_2==PLUS||(LA50_2>=SHORT && LA50_2<=SOQL_LITERAL)||(LA50_2>=STRING_LITERAL && LA50_2<=SUPER)||LA50_2==THIS||LA50_2==TRUE||LA50_2==VOID))
						{
							alt50 = 1;
						}


					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:38: COMMA variableInitializer
						{
						DebugLocation(445, 38);
						COMMA148=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6761); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA148);

						DebugLocation(445, 44);
						PushFollow(Follow._variableInitializer_in_arrayInitializer6763);
						variableInitializer149=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer149.Tree);

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(445, 66);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:66: ( COMMA )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==COMMA))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:445:66: COMMA
					{
					DebugLocation(445, 66);
					COMMA150=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6767); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA150);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(445, 75);
			RCURLY151=(IToken)Match(input,RCURLY,Follow._RCURLY_in_arrayInitializer6772); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY151);



			{
			// AST REWRITE
			// elements: variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 446:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
			{
				DebugLocation(446, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:446:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(446, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_INITIALIZER, LCURLY146, "ARRAY_INITIALIZER"), root_1);

				DebugLocation(446, 63);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:446:63: ( variableInitializer )*
				while ( stream_variableInitializer.HasNext )
				{
					DebugLocation(446, 63);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 35);
			LeaveRule("arrayInitializer", 35);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 35, arrayInitializer_StartIndex); }

		}
		DebugLocation(447, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:449:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
	[GrammarRule("throwsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 36);
		TraceIn("throwsClause", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken THROWS152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree THROWS152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THROWS=new RewriteRuleITokenStream(adaptor,"token THROWS");
		RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(449, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:450:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:450:9: THROWS qualifiedIdentList
			{
			DebugLocation(450, 9);
			THROWS152=(IToken)Match(input,THROWS,Follow._THROWS_in_throwsClause6814); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THROWS.Add(THROWS152);

			DebugLocation(450, 16);
			PushFollow(Follow._qualifiedIdentList_in_throwsClause6816);
			qualifiedIdentList153=qualifiedIdentList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentList.Add(qualifiedIdentList153.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
			{
				DebugLocation(451, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:451:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(451, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROWS_CLAUSE, THROWS152, "THROWS_CLAUSE"), root_1);

				DebugLocation(451, 55);
				adaptor.AddChild(root_1, stream_qualifiedIdentList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwsClause", 36);
			LeaveRule("throwsClause", 36);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 36, throwsClause_StartIndex); }

		}
		DebugLocation(452, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return retval;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:454:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 37);
		TraceIn("modifierList", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifier154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(454, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:455:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:455:9: ( modifier )*
			{
			DebugLocation(455, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:455:9: ( modifier )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==AT))
				{
					int LA53_2 = input.LA(2);

					if ((LA53_2==IDENT))
					{
						alt53 = 1;
					}


				}
				else if ((LA53_1==ABSTRACT||LA53_1==FINAL||LA53_1==GLOBAL||LA53_1==NATIVE||LA53_1==OVERRIDE||LA53_1==PRIVATE||(LA53_1>=PROTECTED && LA53_1<=PUBLIC)||LA53_1==STATIC||LA53_1==STRICTFP||(LA53_1>=SYNCHRONIZED && LA53_1<=TEST_METHOD)||LA53_1==TRANSIENT||LA53_1==VIRTUAL||LA53_1==VOLATILE||(LA53_1>=WITHOUT_SHARING && LA53_1<=WITH_SHARING)))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:455:9: modifier
					{
					DebugLocation(455, 9);
					PushFollow(Follow._modifier_in_modifierList6853);
					modifier154=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_modifier.Add(modifier154.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 456:9: -> ^( MODIFIER_LIST ( modifier )* )
			{
				DebugLocation(456, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:456:13: ^( MODIFIER_LIST ( modifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(456, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

				DebugLocation(456, 29);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:456:29: ( modifier )*
				while ( stream_modifier.HasNext )
				{
					DebugLocation(456, 29);
					adaptor.AddChild(root_1, stream_modifier.NextTree());

				}
				stream_modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifierList", 37);
			LeaveRule("modifierList", 37);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 37, modifierList_StartIndex); }

		}
		DebugLocation(457, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return retval;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:459:1: modifier : ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier );
	[GrammarRule("modifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 38);
		TraceIn("modifier", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PUBLIC155 = default(IToken);
		IToken OVERRIDE156 = default(IToken);
		IToken VIRTUAL157 = default(IToken);
		IToken WITH_SHARING158 = default(IToken);
		IToken WITHOUT_SHARING159 = default(IToken);
		IToken PROTECTED160 = default(IToken);
		IToken PRIVATE161 = default(IToken);
		IToken STATIC162 = default(IToken);
		IToken ABSTRACT163 = default(IToken);
		IToken NATIVE164 = default(IToken);
		IToken SYNCHRONIZED165 = default(IToken);
		IToken TRANSIENT166 = default(IToken);
		IToken VOLATILE167 = default(IToken);
		IToken STRICTFP168 = default(IToken);
		IToken GLOBAL169 = default(IToken);
		IToken TEST_METHOD170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifier171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PUBLIC155_tree = default(CommonTree);
		CommonTree OVERRIDE156_tree = default(CommonTree);
		CommonTree VIRTUAL157_tree = default(CommonTree);
		CommonTree WITH_SHARING158_tree = default(CommonTree);
		CommonTree WITHOUT_SHARING159_tree = default(CommonTree);
		CommonTree PROTECTED160_tree = default(CommonTree);
		CommonTree PRIVATE161_tree = default(CommonTree);
		CommonTree STATIC162_tree = default(CommonTree);
		CommonTree ABSTRACT163_tree = default(CommonTree);
		CommonTree NATIVE164_tree = default(CommonTree);
		CommonTree SYNCHRONIZED165_tree = default(CommonTree);
		CommonTree TRANSIENT166_tree = default(CommonTree);
		CommonTree VOLATILE167_tree = default(CommonTree);
		CommonTree STRICTFP168_tree = default(CommonTree);
		CommonTree GLOBAL169_tree = default(CommonTree);
		CommonTree TEST_METHOD170_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(459, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:460:5: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			int alt54=17;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt54 = 1;
				}
				break;
			case OVERRIDE:
				{
				alt54 = 2;
				}
				break;
			case VIRTUAL:
				{
				alt54 = 3;
				}
				break;
			case WITH_SHARING:
				{
				alt54 = 4;
				}
				break;
			case WITHOUT_SHARING:
				{
				alt54 = 5;
				}
				break;
			case PROTECTED:
				{
				alt54 = 6;
				}
				break;
			case PRIVATE:
				{
				alt54 = 7;
				}
				break;
			case STATIC:
				{
				alt54 = 8;
				}
				break;
			case ABSTRACT:
				{
				alt54 = 9;
				}
				break;
			case NATIVE:
				{
				alt54 = 10;
				}
				break;
			case SYNCHRONIZED:
				{
				alt54 = 11;
				}
				break;
			case TRANSIENT:
				{
				alt54 = 12;
				}
				break;
			case VOLATILE:
				{
				alt54 = 13;
				}
				break;
			case STRICTFP:
				{
				alt54 = 14;
				}
				break;
			case GLOBAL:
				{
				alt54 = 15;
				}
				break;
			case TEST_METHOD:
				{
				alt54 = 16;
				}
				break;
			case AT:
			case FINAL:
				{
				alt54 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:460:9: PUBLIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(460, 9);
				PUBLIC155=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifier6894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PUBLIC155_tree = (CommonTree)adaptor.Create(PUBLIC155);
				adaptor.AddChild(root_0, PUBLIC155_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:461:9: OVERRIDE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(461, 9);
				OVERRIDE156=(IToken)Match(input,OVERRIDE,Follow._OVERRIDE_in_modifier6904); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OVERRIDE156_tree = (CommonTree)adaptor.Create(OVERRIDE156);
				adaptor.AddChild(root_0, OVERRIDE156_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:462:9: VIRTUAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(462, 9);
				VIRTUAL157=(IToken)Match(input,VIRTUAL,Follow._VIRTUAL_in_modifier6914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VIRTUAL157_tree = (CommonTree)adaptor.Create(VIRTUAL157);
				adaptor.AddChild(root_0, VIRTUAL157_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:463:9: WITH_SHARING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(463, 9);
				WITH_SHARING158=(IToken)Match(input,WITH_SHARING,Follow._WITH_SHARING_in_modifier6924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITH_SHARING158_tree = (CommonTree)adaptor.Create(WITH_SHARING158);
				adaptor.AddChild(root_0, WITH_SHARING158_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:464:7: WITHOUT_SHARING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(464, 7);
				WITHOUT_SHARING159=(IToken)Match(input,WITHOUT_SHARING,Follow._WITHOUT_SHARING_in_modifier6932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITHOUT_SHARING159_tree = (CommonTree)adaptor.Create(WITHOUT_SHARING159);
				adaptor.AddChild(root_0, WITHOUT_SHARING159_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:465:9: PROTECTED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(465, 9);
				PROTECTED160=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifier6942); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PROTECTED160_tree = (CommonTree)adaptor.Create(PROTECTED160);
				adaptor.AddChild(root_0, PROTECTED160_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:466:9: PRIVATE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(466, 9);
				PRIVATE161=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifier6952); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIVATE161_tree = (CommonTree)adaptor.Create(PRIVATE161);
				adaptor.AddChild(root_0, PRIVATE161_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:467:9: STATIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(467, 9);
				STATIC162=(IToken)Match(input,STATIC,Follow._STATIC_in_modifier6962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC162_tree = (CommonTree)adaptor.Create(STATIC162);
				adaptor.AddChild(root_0, STATIC162_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:468:9: ABSTRACT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(468, 9);
				ABSTRACT163=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier6972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ABSTRACT163_tree = (CommonTree)adaptor.Create(ABSTRACT163);
				adaptor.AddChild(root_0, ABSTRACT163_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:469:9: NATIVE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 9);
				NATIVE164=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifier6982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NATIVE164_tree = (CommonTree)adaptor.Create(NATIVE164);
				adaptor.AddChild(root_0, NATIVE164_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:470:9: SYNCHRONIZED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(470, 9);
				SYNCHRONIZED165=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier6992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SYNCHRONIZED165_tree = (CommonTree)adaptor.Create(SYNCHRONIZED165);
				adaptor.AddChild(root_0, SYNCHRONIZED165_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:471:9: TRANSIENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(471, 9);
				TRANSIENT166=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier7002); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRANSIENT166_tree = (CommonTree)adaptor.Create(TRANSIENT166);
				adaptor.AddChild(root_0, TRANSIENT166_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:472:9: VOLATILE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(472, 9);
				VOLATILE167=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifier7012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VOLATILE167_tree = (CommonTree)adaptor.Create(VOLATILE167);
				adaptor.AddChild(root_0, VOLATILE167_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:473:9: STRICTFP
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(473, 9);
				STRICTFP168=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifier7022); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRICTFP168_tree = (CommonTree)adaptor.Create(STRICTFP168);
				adaptor.AddChild(root_0, STRICTFP168_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:474:7: GLOBAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(474, 7);
				GLOBAL169=(IToken)Match(input,GLOBAL,Follow._GLOBAL_in_modifier7030); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GLOBAL169_tree = (CommonTree)adaptor.Create(GLOBAL169);
				adaptor.AddChild(root_0, GLOBAL169_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:475:9: TEST_METHOD
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(475, 9);
				TEST_METHOD170=(IToken)Match(input,TEST_METHOD,Follow._TEST_METHOD_in_modifier7040); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TEST_METHOD170_tree = (CommonTree)adaptor.Create(TEST_METHOD170);
				adaptor.AddChild(root_0, TEST_METHOD170_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:476:9: localModifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(476, 9);
				PushFollow(Follow._localModifier_in_modifier7050);
				localModifier171=localModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localModifier171.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 38);
			LeaveRule("modifier", 38);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 38, modifier_StartIndex); }

		}
		DebugLocation(477, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:479:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 39);
		TraceIn("localModifierList", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifier172 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(479, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:480:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:480:9: ( localModifier )*
			{
			DebugLocation(480, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:480:9: ( localModifier )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==AT||LA55_1==FINAL))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:480:9: localModifier
					{
					DebugLocation(480, 9);
					PushFollow(Follow._localModifier_in_localModifierList7069);
					localModifier172=localModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifier.Add(localModifier172.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: localModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 481:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
				DebugLocation(481, 12);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:481:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(481, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

				DebugLocation(481, 34);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:481:34: ( localModifier )*
				while ( stream_localModifier.HasNext )
				{
					DebugLocation(481, 34);
					adaptor.AddChild(root_1, stream_localModifier.NextTree());

				}
				stream_localModifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifierList", 39);
			LeaveRule("localModifierList", 39);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 39, localModifierList_StartIndex); }

		}
		DebugLocation(482, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return retval;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:484:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 40);
		TraceIn("localModifier", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINAL173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotation174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINAL173_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(484, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:485:5: ( FINAL | annotation )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==FINAL))
			{
				alt56 = 1;
			}
			else if ((LA56_1==AT))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:485:9: FINAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(485, 9);
				FINAL173=(IToken)Match(input,FINAL,Follow._FINAL_in_localModifier7110); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FINAL173_tree = (CommonTree)adaptor.Create(FINAL173);
				adaptor.AddChild(root_0, FINAL173_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:486:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(486, 9);
				PushFollow(Follow._annotation_in_localModifier7120);
				annotation174=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation174.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifier", 40);
			LeaveRule("localModifier", 40);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 40, localModifier_StartIndex); }

		}
		DebugLocation(487, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return retval;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:489:1: type : ( simpleType | objectType );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 41);
		TraceIn("type", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> simpleType175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> objectType176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(489, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:490:5: ( simpleType | objectType )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==BOOLEAN||LA57_1==BYTE||LA57_1==CHAR||LA57_1==DOUBLE||LA57_1==FLOAT||LA57_1==INT||LA57_1==LONG||LA57_1==SHORT))
			{
				alt57 = 1;
			}
			else if ((LA57_1==IDENT))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:490:9: simpleType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(490, 9);
				PushFollow(Follow._simpleType_in_type7139);
				simpleType175=simpleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleType175.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:491:9: objectType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(491, 9);
				PushFollow(Follow._objectType_in_type7149);
				objectType176=objectType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectType176.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 41);
			LeaveRule("type", 41);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 41, type_StartIndex); }

		}
		DebugLocation(492, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_simpleType();
	partial void LeaveRule_simpleType();
	// $ANTLR start "simpleType"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:494:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
	[GrammarRule("simpleType")]
	private AstParserRuleReturnScope<CommonTree, IToken> simpleType()
	{
		EnterRule_simpleType();
		EnterRule("simpleType", 42);
		TraceIn("simpleType", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> primitiveType177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "simpleType");
		DebugLocation(494, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:9: primitiveType ( arrayDeclaratorList )?
			{
			DebugLocation(495, 9);
			PushFollow(Follow._primitiveType_in_simpleType7169);
			primitiveType177=primitiveType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primitiveType.Add(primitiveType177.Tree);
			DebugLocation(495, 23);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:23: ( arrayDeclaratorList )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==LBRACK))
			{
				int LA58_2 = input.LA(2);

				if ((LA58_2==RBRACK))
				{
					int LA58_3 = input.LA(3);

					if ((EvaluatePredicate(synpred83_Java_fragment)))
					{
						alt58 = 1;
					}
				}
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:23: arrayDeclaratorList
				{
				DebugLocation(495, 23);
				PushFollow(Follow._arrayDeclaratorList_in_simpleType7171);
				arrayDeclaratorList178=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList178.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: primitiveType, arrayDeclaratorList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 496:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
			{
				DebugLocation(496, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:496:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(496, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(496, 20);
				adaptor.AddChild(root_1, stream_primitiveType.NextTree());
				DebugLocation(496, 34);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:496:34: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(496, 34);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleType", 42);
			LeaveRule("simpleType", 42);
			LeaveRule_simpleType();
			if (state.backtracking > 0) { Memoize(input, 42, simpleType_StartIndex); }

		}
		DebugLocation(497, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleType"); }
		return retval;

	}
	// $ANTLR end "simpleType"

	partial void EnterRule_objectType();
	partial void LeaveRule_objectType();
	// $ANTLR start "objectType"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:499:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectType")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectType()
	{
		EnterRule_objectType();
		EnterRule("objectType", 43);
		TraceIn("objectType", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList180 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectType");
		DebugLocation(499, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:9: qualifiedTypeIdent ( arrayDeclaratorList )?
			{
			DebugLocation(500, 9);
			PushFollow(Follow._qualifiedTypeIdent_in_objectType7218);
			qualifiedTypeIdent179=qualifiedTypeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdent.Add(qualifiedTypeIdent179.Tree);
			DebugLocation(500, 28);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:28: ( arrayDeclaratorList )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==LBRACK))
			{
				int LA59_2 = input.LA(2);

				if ((EvaluatePredicate(synpred84_Java_fragment)))
				{
					alt59 = 1;
				}
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:28: arrayDeclaratorList
				{
				DebugLocation(500, 28);
				PushFollow(Follow._arrayDeclaratorList_in_objectType7220);
				arrayDeclaratorList180=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList180.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: arrayDeclaratorList, qualifiedTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 501:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
			{
				DebugLocation(501, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:501:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(501, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(501, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdent.NextTree());
				DebugLocation(501, 39);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:501:39: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(501, 39);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectType", 43);
			LeaveRule("objectType", 43);
			LeaveRule_objectType();
			if (state.backtracking > 0) { Memoize(input, 43, objectType_StartIndex); }

		}
		DebugLocation(502, 4);
		} finally { DebugExitRule(GrammarFileName, "objectType"); }
		return retval;

	}
	// $ANTLR end "objectType"

	partial void EnterRule_objectTypeSimplified();
	partial void LeaveRule_objectTypeSimplified();
	// $ANTLR start "objectTypeSimplified"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:504:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectTypeSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectTypeSimplified()
	{
		EnterRule_objectTypeSimplified();
		EnterRule("objectTypeSimplified", 44);
		TraceIn("objectTypeSimplified", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectTypeSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "objectTypeSimplified");
		DebugLocation(504, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:505:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:505:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
			{
			DebugLocation(505, 9);
			PushFollow(Follow._qualifiedTypeIdentSimplified_in_objectTypeSimplified7260);
			qualifiedTypeIdentSimplified181=qualifiedTypeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified181.Tree);
			DebugLocation(505, 38);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:505:38: ( arrayDeclaratorList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==LBRACK))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:505:38: arrayDeclaratorList
				{
				DebugLocation(505, 38);
				PushFollow(Follow._arrayDeclaratorList_in_objectTypeSimplified7262);
				arrayDeclaratorList182=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList182.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }



			{
			// AST REWRITE
			// elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 506:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
			{
				DebugLocation(506, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:506:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(506, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(506, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
				DebugLocation(506, 49);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:506:49: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(506, 49);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectTypeSimplified", 44);
			LeaveRule("objectTypeSimplified", 44);
			LeaveRule_objectTypeSimplified();
			if (state.backtracking > 0) { Memoize(input, 44, objectTypeSimplified_StartIndex); }

		}
		DebugLocation(507, 4);
		} finally { DebugExitRule(GrammarFileName, "objectTypeSimplified"); }
		return retval;

	}
	// $ANTLR end "objectTypeSimplified"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:509:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 45);
		TraceIn("qualifiedTypeIdent", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT184_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(509, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:9: typeIdent ( DOT typeIdent )*
			{
			DebugLocation(510, 9);
			PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7302);
			typeIdent183=typeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdent.Add(typeIdent183.Tree);
			DebugLocation(510, 19);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:19: ( DOT typeIdent )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==DOT))
				{
					int LA61_2 = input.LA(2);

					if ((EvaluatePredicate(synpred86_Java_fragment)))
					{
						alt61 = 1;
					}


				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:20: DOT typeIdent
					{
					DebugLocation(510, 20);
					DOT184=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdent7305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT184);

					DebugLocation(510, 24);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7307);
					typeIdent185=typeIdent();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdent.Add(typeIdent185.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: typeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 511:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
				DebugLocation(511, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:511:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(511, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(511, 36);
				if (!(stream_typeIdent.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdent.HasNext )
				{
					DebugLocation(511, 36);
					adaptor.AddChild(root_1, stream_typeIdent.NextTree());

				}
				stream_typeIdent.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 45);
			LeaveRule("qualifiedTypeIdent", 45);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 45, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(512, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_qualifiedTypeIdentSimplified();
	partial void LeaveRule_qualifiedTypeIdentSimplified();
	// $ANTLR start "qualifiedTypeIdentSimplified"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:514:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
	[GrammarRule("qualifiedTypeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified()
	{
		EnterRule_qualifiedTypeIdentSimplified();
		EnterRule("qualifiedTypeIdentSimplified", 46);
		TraceIn("qualifiedTypeIdentSimplified", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdentSimplified");
		DebugLocation(514, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:515:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:515:9: typeIdentSimplified ( DOT typeIdentSimplified )*
			{
			DebugLocation(515, 9);
			PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7347);
			typeIdentSimplified186=typeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified186.Tree);
			DebugLocation(515, 29);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:515:29: ( DOT typeIdentSimplified )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==DOT))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:515:30: DOT typeIdentSimplified
					{
					DebugLocation(515, 30);
					DOT187=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdentSimplified7350); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT187);

					DebugLocation(515, 34);
					PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7352);
					typeIdentSimplified188=typeIdentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified188.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: typeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 516:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
			{
				DebugLocation(516, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:516:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(516, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(516, 36);
				if (!(stream_typeIdentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdentSimplified.HasNext )
				{
					DebugLocation(516, 36);
					adaptor.AddChild(root_1, stream_typeIdentSimplified.NextTree());

				}
				stream_typeIdentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdentSimplified", 46);
			LeaveRule("qualifiedTypeIdentSimplified", 46);
			LeaveRule_qualifiedTypeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }

		}
		DebugLocation(517, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdentSimplified"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:519:1: typeIdent : IDENT ^ ( genericTypeArgumentList )? ;
	[GrammarRule("typeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 47);
		TraceIn("typeIdent", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT189_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(519, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:5: ( IDENT ^ ( genericTypeArgumentList )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:9: IDENT ^ ( genericTypeArgumentList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(520, 14);
			IDENT189=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdent7392); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT189_tree = (CommonTree)adaptor.Create(IDENT189);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT189_tree, root_0);
			}
			DebugLocation(520, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:16: ( genericTypeArgumentList )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==LESS_THAN))
			{
				switch (input.LA(2))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA63_3 = input.LA(3);

					if ((EvaluatePredicate(synpred88_Java_fragment)))
					{
						alt63 = 1;
					}
					}
					break;
				case IDENT:
					{
					int LA63_3 = input.LA(3);

					if ((EvaluatePredicate(synpred88_Java_fragment)))
					{
						alt63 = 1;
					}
					}
					break;
				case QUESTION:
					{
					int LA63_3 = input.LA(3);

					if ((EvaluatePredicate(synpred88_Java_fragment)))
					{
						alt63 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:16: genericTypeArgumentList
				{
				DebugLocation(520, 16);
				PushFollow(Follow._genericTypeArgumentList_in_typeIdent7395);
				genericTypeArgumentList190=genericTypeArgumentList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentList190.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdent", 47);
			LeaveRule("typeIdent", 47);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 47, typeIdent_StartIndex); }

		}
		DebugLocation(521, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return retval;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_typeIdentSimplified();
	partial void LeaveRule_typeIdentSimplified();
	// $ANTLR start "typeIdentSimplified"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:523:1: typeIdentSimplified : IDENT ^ ( genericTypeArgumentListSimplified )? ;
	[GrammarRule("typeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified()
	{
		EnterRule_typeIdentSimplified();
		EnterRule("typeIdentSimplified", 48);
		TraceIn("typeIdentSimplified", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT191_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdentSimplified");
		DebugLocation(523, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:524:5: ( IDENT ^ ( genericTypeArgumentListSimplified )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:524:9: IDENT ^ ( genericTypeArgumentListSimplified )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(524, 14);
			IDENT191=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdentSimplified7415); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT191_tree = (CommonTree)adaptor.Create(IDENT191);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT191_tree, root_0);
			}
			DebugLocation(524, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:524:16: ( genericTypeArgumentListSimplified )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==LESS_THAN))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:524:16: genericTypeArgumentListSimplified
				{
				DebugLocation(524, 16);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_typeIdentSimplified7418);
				genericTypeArgumentListSimplified192=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentListSimplified192.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdentSimplified", 48);
			LeaveRule("typeIdentSimplified", 48);
			LeaveRule_typeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 48, typeIdentSimplified_StartIndex); }

		}
		DebugLocation(525, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "typeIdentSimplified"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:527:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<CommonTree, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 49);
		TraceIn("primitiveType", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set193 = default(IToken);

		CommonTree set193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(527, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:528:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(528, 5);

			set193=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set193));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 49);
			LeaveRule("primitiveType", 49);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 49, primitiveType_StartIndex); }

		}
		DebugLocation(537, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:539:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 50);
		TraceIn("genericTypeArgumentList", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN194 = default(IToken);
		IToken COMMA196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing198 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN194_tree = default(CommonTree);
		CommonTree COMMA196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(539, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
			{
			DebugLocation(540, 9);
			LESS_THAN194=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentList7533); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN194);

			DebugLocation(540, 19);
			PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7535);
			genericTypeArgument195=genericTypeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument195.Tree);
			DebugLocation(540, 39);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:39: ( COMMA genericTypeArgument )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==COMMA))
				{
					int LA65_2 = input.LA(2);

					if ((EvaluatePredicate(synpred97_Java_fragment)))
					{
						alt65 = 1;
					}


				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:40: COMMA genericTypeArgument
					{
					DebugLocation(540, 40);
					COMMA196=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentList7538); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA196);

					DebugLocation(540, 46);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7540);
					genericTypeArgument197=genericTypeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument197.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(540, 68);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentList7544);
			genericTypeListClosing198=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing198.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgument
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 541:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
			{
				DebugLocation(541, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:541:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(541, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN194, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(541, 74);
				if (!(stream_genericTypeArgument.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgument.HasNext )
				{
					DebugLocation(541, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgument.NextTree());

				}
				stream_genericTypeArgument.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentList", 50);
			LeaveRule("genericTypeArgumentList", 50);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 50, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(542, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:544:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 51);
		TraceIn("genericTypeArgument", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgument_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION200 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
		RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(544, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:545:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==BOOLEAN||LA67_1==BYTE||LA67_1==CHAR||LA67_1==DOUBLE||LA67_1==FLOAT||LA67_1==IDENT||LA67_1==INT||LA67_1==LONG||LA67_1==SHORT))
			{
				alt67 = 1;
			}
			else if ((LA67_1==QUESTION))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:545:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(545, 9);
				PushFollow(Follow._type_in_genericTypeArgument7582);
				type199=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type199.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:546:9: QUESTION ( genericWildcardBoundType )?
				{
				DebugLocation(546, 9);
				QUESTION200=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument7592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QUESTION.Add(QUESTION200);

				DebugLocation(546, 18);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:546:18: ( genericWildcardBoundType )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==EXTENDS))
				{
					int LA66_2 = input.LA(2);

					if ((LA66_2==BOOLEAN||LA66_2==BYTE||LA66_2==CHAR||LA66_2==DOUBLE||LA66_2==FLOAT||LA66_2==INT||LA66_2==LONG||LA66_2==SHORT))
					{
						int LA66_3 = input.LA(3);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt66 = 1;
						}
					}
					else if ((LA66_2==IDENT))
					{
						int LA66_3 = input.LA(3);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt66 = 1;
						}
					}
				}
				else if ((LA66_1==SUPER))
				{
					int LA66_2 = input.LA(2);

					if ((LA66_2==BOOLEAN||LA66_2==BYTE||LA66_2==CHAR||LA66_2==DOUBLE||LA66_2==FLOAT||LA66_2==IDENT||LA66_2==INT||LA66_2==LONG||LA66_2==SHORT))
					{
						alt66 = 1;
					}
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:546:18: genericWildcardBoundType
					{
					DebugLocation(546, 18);
					PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument7594);
					genericWildcardBoundType201=genericWildcardBoundType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericWildcardBoundType.Add(genericWildcardBoundType201.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(66); }



				{
				// AST REWRITE
				// elements: genericWildcardBoundType, QUESTION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 547:9: -> ^( QUESTION ( genericWildcardBoundType )? )
				{
					DebugLocation(547, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:547:13: ^( QUESTION ( genericWildcardBoundType )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(547, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.NextNode(), root_1);

					DebugLocation(547, 24);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:547:24: ( genericWildcardBoundType )?
					if (stream_genericWildcardBoundType.HasNext)
					{
						DebugLocation(547, 24);
						adaptor.AddChild(root_1, stream_genericWildcardBoundType.NextTree());

					}
					stream_genericWildcardBoundType.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgument", 51);
			LeaveRule("genericTypeArgument", 51);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 51, genericTypeArgument_StartIndex); }

		}
		DebugLocation(548, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:550:1: genericWildcardBoundType : ( EXTENDS | SUPER ) ^ type ;
	[GrammarRule("genericWildcardBoundType")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 52);
		TraceIn("genericWildcardBoundType", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericWildcardBoundType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set202_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(550, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:551:5: ( ( EXTENDS | SUPER ) ^ type )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:551:9: ( EXTENDS | SUPER ) ^ type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(551, 26);

			set202=(IToken)input.LT(1);
			set202=(IToken)input.LT(1);
			if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set202), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(551, 28);
			PushFollow(Follow._type_in_genericWildcardBoundType7645);
			type203=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type203.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericWildcardBoundType", 52);
			LeaveRule("genericWildcardBoundType", 52);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 52, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(552, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return retval;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_genericTypeArgumentListSimplified();
	partial void LeaveRule_genericTypeArgumentListSimplified();
	// $ANTLR start "genericTypeArgumentListSimplified"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:554:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
	[GrammarRule("genericTypeArgumentListSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified()
	{
		EnterRule_genericTypeArgumentListSimplified();
		EnterRule("genericTypeArgumentListSimplified", 53);
		TraceIn("genericTypeArgumentListSimplified", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentListSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN204 = default(IToken);
		IToken COMMA206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN204_tree = default(CommonTree);
		CommonTree COMMA206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentListSimplified");
		DebugLocation(554, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:555:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:555:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
			{
			DebugLocation(555, 9);
			LESS_THAN204=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentListSimplified7664); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN204);

			DebugLocation(555, 19);
			PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7666);
			genericTypeArgumentSimplified205=genericTypeArgumentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified205.Tree);
			DebugLocation(555, 49);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:555:49: ( COMMA genericTypeArgumentSimplified )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:555:50: COMMA genericTypeArgumentSimplified
					{
					DebugLocation(555, 50);
					COMMA206=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentListSimplified7669); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA206);

					DebugLocation(555, 56);
					PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7671);
					genericTypeArgumentSimplified207=genericTypeArgumentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified207.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(555, 88);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentListSimplified7675);
			genericTypeListClosing208=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing208.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgumentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 556:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
			{
				DebugLocation(556, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:556:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(556, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN204, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(556, 74);
				if (!(stream_genericTypeArgumentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgumentSimplified.HasNext )
				{
					DebugLocation(556, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgumentSimplified.NextTree());

				}
				stream_genericTypeArgumentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentListSimplified", 53);
			LeaveRule("genericTypeArgumentListSimplified", 53);
			LeaveRule_genericTypeArgumentListSimplified();
			if (state.backtracking > 0) { Memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }

		}
		DebugLocation(557, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentListSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentListSimplified"

	partial void EnterRule_genericTypeArgumentSimplified();
	partial void LeaveRule_genericTypeArgumentSimplified();
	// $ANTLR start "genericTypeArgumentSimplified"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:559:1: genericTypeArgumentSimplified : ( type | QUESTION );
	[GrammarRule("genericTypeArgumentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified()
	{
		EnterRule_genericTypeArgumentSimplified();
		EnterRule("genericTypeArgumentSimplified", 54);
		TraceIn("genericTypeArgumentSimplified", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION210_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentSimplified");
		DebugLocation(559, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:560:5: ( type | QUESTION )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FLOAT||LA69_1==IDENT||LA69_1==INT||LA69_1==LONG||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==QUESTION))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:560:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(560, 9);
				PushFollow(Follow._type_in_genericTypeArgumentSimplified7717);
				type209=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type209.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:561:9: QUESTION
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(561, 9);
				QUESTION210=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgumentSimplified7727); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION210_tree = (CommonTree)adaptor.Create(QUESTION210);
				adaptor.AddChild(root_0, QUESTION210_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentSimplified", 54);
			LeaveRule("genericTypeArgumentSimplified", 54);
			LeaveRule_genericTypeArgumentSimplified();
			if (state.backtracking > 0) { Memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }

		}
		DebugLocation(562, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentSimplified"

	partial void EnterRule_qualifiedIdentList();
	partial void LeaveRule_qualifiedIdentList();
	// $ANTLR start "qualifiedIdentList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:564:1: qualifiedIdentList : qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* ;
	[GrammarRule("qualifiedIdentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList()
	{
		EnterRule_qualifiedIdentList();
		EnterRule("qualifiedIdentList", 55);
		TraceIn("qualifiedIdentList", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA212_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentList");
		DebugLocation(564, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:565:5: ( qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:565:9: qualifiedIdentifier ( COMMA ! qualifiedIdentifier )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(565, 9);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7750);
			qualifiedIdentifier211=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier211.Tree);
			DebugLocation(565, 29);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:565:29: ( COMMA ! qualifiedIdentifier )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==COMMA))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:565:30: COMMA ! qualifiedIdentifier
					{
					DebugLocation(565, 35);
					COMMA212=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedIdentList7753); if (state.failed) return retval;
					DebugLocation(565, 37);
					PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7756);
					qualifiedIdentifier213=qualifiedIdentifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier213.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentList", 55);
			LeaveRule("qualifiedIdentList", 55);
			LeaveRule_qualifiedIdentList();
			if (state.backtracking > 0) { Memoize(input, 55, qualifiedIdentList_StartIndex); }

		}
		DebugLocation(566, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentList"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentList"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:568:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
	[GrammarRule("formalParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 56);
		TraceIn("formalParameterList", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN214 = default(IToken);
		IToken COMMA216 = default(IToken);
		IToken COMMA218 = default(IToken);
		IToken RPAREN221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN214_tree = default(CommonTree);
		CommonTree COMMA216_tree = default(CommonTree);
		CommonTree COMMA218_tree = default(CommonTree);
		CommonTree RPAREN221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
		RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(568, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:569:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:569:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
			{
			DebugLocation(569, 9);
			LPAREN214=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList7781); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN214);

			DebugLocation(570, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:570:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
			int alt73=3;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred107_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred107_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred107_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred107_Java_fragment)))
				{
					alt73 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RPAREN:
				{
				alt73 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
				{
				DebugLocation(571, 13);
				PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7809);
				formalParameterStandardDecl215=formalParameterStandardDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl215.Tree);
				DebugLocation(571, 41);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:41: ( COMMA formalParameterStandardDecl )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==COMMA))
					{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred104_Java_fragment)))
						{
							alt71 = 1;
						}


					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:42: COMMA formalParameterStandardDecl
						{
						DebugLocation(571, 42);
						COMMA216=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7812); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA216);

						DebugLocation(571, 48);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7814);
						formalParameterStandardDecl217=formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl217.Tree);

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(571, 78);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:78: ( COMMA formalParameterVarArgDecl )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_1 = input.LA(1);

				if ((LA72_1==COMMA))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:79: COMMA formalParameterVarArgDecl
					{
					DebugLocation(571, 79);
					COMMA218=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7819); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA218);

					DebugLocation(571, 85);
					PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7821);
					formalParameterVarArgDecl219=formalParameterVarArgDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl219.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(72); }



				{
				// AST REWRITE
				// elements: formalParameterStandardDecl, formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 572:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
				{
					DebugLocation(572, 17);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:572:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(572, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(572, 67);
					if (!(stream_formalParameterStandardDecl.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_formalParameterStandardDecl.HasNext )
					{
						DebugLocation(572, 67);
						adaptor.AddChild(root_1, stream_formalParameterStandardDecl.NextTree());

					}
					stream_formalParameterStandardDecl.Reset();
					DebugLocation(572, 96);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:572:96: ( formalParameterVarArgDecl )?
					if (stream_formalParameterVarArgDecl.HasNext)
					{
						DebugLocation(572, 96);
						adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					}
					stream_formalParameterVarArgDecl.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:574:13: formalParameterVarArgDecl
				{
				DebugLocation(574, 13);
				PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7878);
				formalParameterVarArgDecl220=formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl220.Tree);


				{
				// AST REWRITE
				// elements: formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 575:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
				{
					DebugLocation(575, 17);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:575:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(575, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(575, 67);
					adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:577:13: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 577:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
				{
					DebugLocation(577, 17);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:577:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(577, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(579, 9);
			RPAREN221=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList7955); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN221);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 56);
			LeaveRule("formalParameterList", 56);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 56, formalParameterList_StartIndex); }

		}
		DebugLocation(580, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:582:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 57);
		TraceIn("formalParameterStandardDecl", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterStandardDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(582, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:583:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:583:9: localModifierList type variableDeclaratorId
			{
			DebugLocation(583, 9);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl7978);
			localModifierList222=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList222.Tree);
			DebugLocation(583, 27);
			PushFollow(Follow._type_in_formalParameterStandardDecl7980);
			type223=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type223.Tree);
			DebugLocation(583, 32);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl7982);
			variableDeclaratorId224=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId224.Tree);


			{
			// AST REWRITE
			// elements: type, localModifierList, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 584:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(584, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:584:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(584, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

				DebugLocation(584, 37);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(584, 55);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(584, 60);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 57);
			LeaveRule("formalParameterStandardDecl", 57);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 57, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(585, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarArgDecl();
	partial void LeaveRule_formalParameterVarArgDecl();
	// $ANTLR start "formalParameterVarArgDecl"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:587:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarArgDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl()
	{
		EnterRule_formalParameterVarArgDecl();
		EnterRule("formalParameterVarArgDecl", 58);
		TraceIn("formalParameterVarArgDecl", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterVarArgDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ELLIPSIS227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ELLIPSIS227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ELLIPSIS=new RewriteRuleITokenStream(adaptor,"token ELLIPSIS");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		try { DebugEnterRule(GrammarFileName, "formalParameterVarArgDecl");
		DebugLocation(587, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:588:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:588:9: localModifierList type ELLIPSIS variableDeclaratorId
			{
			DebugLocation(588, 9);
			PushFollow(Follow._localModifierList_in_formalParameterVarArgDecl8026);
			localModifierList225=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList225.Tree);
			DebugLocation(588, 27);
			PushFollow(Follow._type_in_formalParameterVarArgDecl8028);
			type226=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type226.Tree);
			DebugLocation(588, 32);
			ELLIPSIS227=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_formalParameterVarArgDecl8030); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELLIPSIS.Add(ELLIPSIS227);

			DebugLocation(588, 41);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarArgDecl8032);
			variableDeclaratorId228=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId228.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, variableDeclaratorId, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 589:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(589, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:589:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(589, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

				DebugLocation(589, 40);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(589, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(589, 63);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterVarArgDecl", 58);
			LeaveRule("formalParameterVarArgDecl", 58);
			LeaveRule_formalParameterVarArgDecl();
			if (state.backtracking > 0) { Memoize(input, 58, formalParameterVarArgDecl_StartIndex); }

		}
		DebugLocation(590, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarArgDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterVarArgDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:592:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
	[GrammarRule("qualifiedIdentifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 59);
		TraceIn("qualifiedIdentifier", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken IDENT229 = default(IToken);
		IToken DOT230 = default(IToken);

		CommonTree ident_tree = default(CommonTree);
		CommonTree IDENT229_tree = default(CommonTree);
		CommonTree DOT230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(592, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:593:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:593:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			{
			DebugLocation(593, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:593:9: ( IDENT -> IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:593:13: IDENT
			{
			DebugLocation(593, 13);
			IDENT229=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8080); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT229);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 593:33: -> IDENT
			{
				DebugLocation(593, 37);
				adaptor.AddChild(root_0, stream_IDENT.NextNode());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(595, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:595:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==DOT))
				{
					int LA74_2 = input.LA(2);

					if ((LA74_2==IDENT))
					{
						int LA74_3 = input.LA(3);

						if ((EvaluatePredicate(synpred108_Java_fragment)))
						{
							alt74 = 1;
						}


					}


				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:595:13: DOT ident= IDENT
					{
					DebugLocation(595, 13);
					DOT230=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentifier8123); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT230);

					DebugLocation(595, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8127); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(ident);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, ident
					// token labels: ident
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_ident=new RewriteRuleITokenStream(adaptor,"token ident",ident);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 595:33: -> ^( DOT $qualifiedIdentifier $ident)
					{
						DebugLocation(595, 37);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:595:37: ^( DOT $qualifiedIdentifier $ident)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(595, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(595, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(595, 65);
						adaptor.AddChild(root_1, stream_ident.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentifier", 59);
			LeaveRule("qualifiedIdentifier", 59);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 59, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(597, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:601:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 60);
		TraceIn("annotationList", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotation231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(601, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:9: ( annotation )*
			{
			DebugLocation(602, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:9: ( annotation )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==AT))
				{
					int LA75_2 = input.LA(2);

					if ((LA75_2==IDENT))
					{
						int LA75_3 = input.LA(3);

						if ((EvaluatePredicate(synpred109_Java_fragment)))
						{
							alt75 = 1;
						}


					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:9: annotation
					{
					DebugLocation(602, 9);
					PushFollow(Follow._annotation_in_annotationList8180);
					annotation231=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotation.Add(annotation231.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: annotation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 603:9: -> ^( ANNOTATION_LIST ( annotation )* )
			{
				DebugLocation(603, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:603:13: ^( ANNOTATION_LIST ( annotation )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(603, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

				DebugLocation(603, 31);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:603:31: ( annotation )*
				while ( stream_annotation.HasNext )
				{
					DebugLocation(603, 31);
					adaptor.AddChild(root_1, stream_annotation.NextTree());

				}
				stream_annotation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationList", 60);
			LeaveRule("annotationList", 60);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 60, annotationList_StartIndex); }

		}
		DebugLocation(604, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return retval;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:606:1: annotation : AT ^ qualifiedIdentifier ( annotationInit )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 61);
		TraceIn("annotation", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInit234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT232_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(606, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:607:5: ( AT ^ qualifiedIdentifier ( annotationInit )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:607:9: AT ^ qualifiedIdentifier ( annotationInit )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(607, 11);
			AT232=(IToken)Match(input,AT,Follow._AT_in_annotation8218); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AT232_tree = (CommonTree)adaptor.Create(AT232);
			root_0 = (CommonTree)adaptor.BecomeRoot(AT232_tree, root_0);
			}
			DebugLocation(607, 13);
			PushFollow(Follow._qualifiedIdentifier_in_annotation8221);
			qualifiedIdentifier233=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier233.Tree);
			DebugLocation(607, 33);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:607:33: ( annotationInit )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==LPAREN))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:607:33: annotationInit
				{
				DebugLocation(607, 33);
				PushFollow(Follow._annotationInit_in_annotation8223);
				annotationInit234=annotationInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationInit234.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 61);
			LeaveRule("annotation", 61);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 61, annotation_StartIndex); }

		}
		DebugLocation(608, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:610:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
	[GrammarRule("annotationInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 62);
		TraceIn("annotationInit", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN235 = default(IToken);
		IToken RPAREN237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN235_tree = default(CommonTree);
		CommonTree RPAREN237_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(610, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:611:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:611:9: LPAREN annotationInitializers RPAREN
			{
			DebugLocation(611, 9);
			LPAREN235=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationInit8247); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN235);

			DebugLocation(611, 16);
			PushFollow(Follow._annotationInitializers_in_annotationInit8249);
			annotationInitializers236=annotationInitializers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationInitializers.Add(annotationInitializers236.Tree);
			DebugLocation(611, 39);
			RPAREN237=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationInit8251); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN237);



			{
			// AST REWRITE
			// elements: annotationInitializers
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 612:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
			{
				DebugLocation(612, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:612:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(612, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_BLOCK, LPAREN235, "ANNOTATION_INIT_BLOCK"), root_1);

				DebugLocation(612, 71);
				adaptor.AddChild(root_1, stream_annotationInitializers.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInit", 62);
			LeaveRule("annotationInit", 62);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 62, annotationInit_StartIndex); }

		}
		DebugLocation(613, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return retval;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:615:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 63);
		TraceIn("annotationInitializers", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(615, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:616:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_1 = input.LA(1);

			if ((LA78_1==IDENT))
			{
				int LA78_2 = input.LA(2);

				if ((LA78_2==ASSIGN))
				{
					alt78 = 1;
				}
				else if ((LA78_2==AND||LA78_2==BIT_SHIFT_RIGHT||LA78_2==DEC||LA78_2==DIV||LA78_2==DOT||LA78_2==EQUAL||(LA78_2>=GREATER_OR_EQUAL && LA78_2<=GREATER_THAN)||(LA78_2>=INC && LA78_2<=INSTANCEOF)||LA78_2==LBRACK||(LA78_2>=LESS_OR_EQUAL && LA78_2<=LESS_THAN)||LA78_2==LOGICAL_AND||LA78_2==LOGICAL_OR||LA78_2==LPAREN||LA78_2==MINUS||LA78_2==MOD||LA78_2==NOT_EQUAL||LA78_2==OR||LA78_2==PLUS||LA78_2==QUESTION||LA78_2==RPAREN||LA78_2==SHIFT_LEFT||LA78_2==SHIFT_RIGHT||LA78_2==STAR||LA78_2==XOR))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA78_1==AT||LA78_1==BOOLEAN||LA78_1==BYTE||(LA78_1>=CHAR && LA78_1<=CHARACTER_LITERAL)||(LA78_1>=DEC && LA78_1<=DECIMAL_LITERAL)||LA78_1==DOUBLE||LA78_1==FALSE||(LA78_1>=FLOAT && LA78_1<=FLOATING_POINT_LITERAL)||LA78_1==HEX_LITERAL||LA78_1==INC||LA78_1==INT||LA78_1==LCURLY||LA78_1==LESS_THAN||LA78_1==LOGICAL_NOT||(LA78_1>=LONG && LA78_1<=LPAREN)||LA78_1==MINUS||(LA78_1>=NEW && LA78_1<=NOT)||LA78_1==NULL||LA78_1==OCTAL_LITERAL||LA78_1==PLUS||(LA78_1>=SHORT && LA78_1<=SOQL_LITERAL)||(LA78_1>=STRING_LITERAL && LA78_1<=SUPER)||LA78_1==THIS||LA78_1==TRUE||LA78_1==VOID))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:616:9: annotationInitializer ( COMMA annotationInitializer )*
				{
				DebugLocation(616, 9);
				PushFollow(Follow._annotationInitializer_in_annotationInitializers8288);
				annotationInitializer238=annotationInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer238.Tree);
				DebugLocation(616, 31);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:616:31: ( COMMA annotationInitializer )*
				try { DebugEnterSubRule(77);
				while (true)
				{
					int alt77=2;
					try { DebugEnterDecision(77, false);
					int LA77_1 = input.LA(1);

					if ((LA77_1==COMMA))
					{
						alt77 = 1;
					}


					} finally { DebugExitDecision(77); }
					switch ( alt77 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:616:32: COMMA annotationInitializer
						{
						DebugLocation(616, 32);
						COMMA239=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationInitializers8291); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA239);

						DebugLocation(616, 38);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers8293);
						annotationInitializer240=annotationInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer240.Tree);

						}
						break;

					default:
						goto loop77;
					}
				}

				loop77:
					;

				} finally { DebugExitSubRule(77); }



				{
				// AST REWRITE
				// elements: annotationInitializer
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 617:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
					DebugLocation(617, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:617:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(617, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

					DebugLocation(617, 40);
					if (!(stream_annotationInitializer.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_annotationInitializer.HasNext )
					{
						DebugLocation(617, 40);
						adaptor.AddChild(root_1, stream_annotationInitializer.NextTree());

					}
					stream_annotationInitializer.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:618:9: annotationElementValue
				{
				DebugLocation(618, 9);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers8323);
				annotationElementValue241=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue241.Tree);


				{
				// AST REWRITE
				// elements: annotationElementValue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 619:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
					DebugLocation(619, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:619:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(619, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

					DebugLocation(619, 43);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializers", 63);
			LeaveRule("annotationInitializers", 63);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 63, annotationInitializers_StartIndex); }

		}
		DebugLocation(620, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return retval;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:622:1: annotationInitializer : IDENT ^ ASSIGN ! annotationElementValue ;
	[GrammarRule("annotationInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 64);
		TraceIn("annotationInitializer", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT242 = default(IToken);
		IToken ASSIGN243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT242_tree = default(CommonTree);
		CommonTree ASSIGN243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(622, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:623:5: ( IDENT ^ ASSIGN ! annotationElementValue )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:623:9: IDENT ^ ASSIGN ! annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(623, 14);
			IDENT242=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationInitializer8364); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT242_tree = (CommonTree)adaptor.Create(IDENT242);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT242_tree, root_0);
			}
			DebugLocation(623, 22);
			ASSIGN243=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_annotationInitializer8367); if (state.failed) return retval;
			DebugLocation(623, 24);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer8370);
			annotationElementValue244=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue244.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializer", 64);
			LeaveRule("annotationInitializer", 64);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 64, annotationInitializer_StartIndex); }

		}
		DebugLocation(624, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:626:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
	[GrammarRule("annotationElementValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 65);
		TraceIn("annotationElementValue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotation246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(626, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:627:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
			int alt79=3;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt79 = 1;
				}
				break;
			case AT:
				{
				alt79 = 2;
				}
				break;
			case LCURLY:
				{
				alt79 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:627:9: annotationElementValueExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(627, 9);
				PushFollow(Follow._annotationElementValueExpression_in_annotationElementValue8393);
				annotationElementValueExpression245=annotationElementValueExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueExpression245.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:628:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(628, 9);
				PushFollow(Follow._annotation_in_annotationElementValue8403);
				annotation246=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation246.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:629:9: annotationElementValueArrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(629, 9);
				PushFollow(Follow._annotationElementValueArrayInitializer_in_annotationElementValue8413);
				annotationElementValueArrayInitializer247=annotationElementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueArrayInitializer247.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValue", 65);
			LeaveRule("annotationElementValue", 65);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 65, annotationElementValue_StartIndex); }

		}
		DebugLocation(630, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return retval;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationElementValueExpression();
	partial void LeaveRule_annotationElementValueExpression();
	// $ANTLR start "annotationElementValueExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:632:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
	[GrammarRule("annotationElementValueExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression()
	{
		EnterRule_annotationElementValueExpression();
		EnterRule("annotationElementValueExpression", 66);
		TraceIn("annotationElementValueExpression", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueExpression");
		DebugLocation(632, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:633:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:633:9: conditionalExpression
			{
			DebugLocation(633, 9);
			PushFollow(Follow._conditionalExpression_in_annotationElementValueExpression8436);
			conditionalExpression248=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_conditionalExpression.Add(conditionalExpression248.Tree);


			{
			// AST REWRITE
			// elements: conditionalExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 634:9: -> ^( EXPR conditionalExpression )
			{
				DebugLocation(634, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:634:13: ^( EXPR conditionalExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(634, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(634, 20);
				adaptor.AddChild(root_1, stream_conditionalExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueExpression", 66);
			LeaveRule("annotationElementValueExpression", 66);
			LeaveRule_annotationElementValueExpression();
			if (state.backtracking > 0) { Memoize(input, 66, annotationElementValueExpression_StartIndex); }

		}
		DebugLocation(635, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueExpression"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueExpression"

	partial void EnterRule_annotationElementValueArrayInitializer();
	partial void LeaveRule_annotationElementValueArrayInitializer();
	// $ANTLR start "annotationElementValueArrayInitializer"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:637:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
	[GrammarRule("annotationElementValueArrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer()
	{
		EnterRule_annotationElementValueArrayInitializer();
		EnterRule("annotationElementValueArrayInitializer", 67);
		TraceIn("annotationElementValueArrayInitializer", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueArrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY249 = default(IToken);
		IToken COMMA251 = default(IToken);
		IToken COMMA253 = default(IToken);
		IToken RCURLY254 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue252 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY249_tree = default(CommonTree);
		CommonTree COMMA251_tree = default(CommonTree);
		CommonTree COMMA253_tree = default(CommonTree);
		CommonTree RCURLY254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueArrayInitializer");
		DebugLocation(637, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
			{
			DebugLocation(638, 9);
			LCURLY249=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationElementValueArrayInitializer8476); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY249);

			DebugLocation(638, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==AT||LA81_1==BOOLEAN||LA81_1==BYTE||(LA81_1>=CHAR && LA81_1<=CHARACTER_LITERAL)||(LA81_1>=DEC && LA81_1<=DECIMAL_LITERAL)||LA81_1==DOUBLE||LA81_1==FALSE||(LA81_1>=FLOAT && LA81_1<=FLOATING_POINT_LITERAL)||(LA81_1>=HEX_LITERAL && LA81_1<=IDENT)||LA81_1==INC||LA81_1==INT||LA81_1==LCURLY||LA81_1==LESS_THAN||LA81_1==LOGICAL_NOT||(LA81_1>=LONG && LA81_1<=LPAREN)||LA81_1==MINUS||(LA81_1>=NEW && LA81_1<=NOT)||LA81_1==NULL||LA81_1==OCTAL_LITERAL||LA81_1==PLUS||(LA81_1>=SHORT && LA81_1<=SOQL_LITERAL)||(LA81_1>=STRING_LITERAL && LA81_1<=SUPER)||LA81_1==THIS||LA81_1==TRUE||LA81_1==VOID))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:17: annotationElementValue ( COMMA annotationElementValue )*
				{
				DebugLocation(638, 17);
				PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8479);
				annotationElementValue250=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue250.Tree);
				DebugLocation(638, 40);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:40: ( COMMA annotationElementValue )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_1 = input.LA(1);

					if ((LA80_1==COMMA))
					{
						int LA80_2 = input.LA(2);

						if ((LA80_2==AT||LA80_2==BOOLEAN||LA80_2==BYTE||(LA80_2>=CHAR && LA80_2<=CHARACTER_LITERAL)||(LA80_2>=DEC && LA80_2<=DECIMAL_LITERAL)||LA80_2==DOUBLE||LA80_2==FALSE||(LA80_2>=FLOAT && LA80_2<=FLOATING_POINT_LITERAL)||(LA80_2>=HEX_LITERAL && LA80_2<=IDENT)||LA80_2==INC||LA80_2==INT||LA80_2==LCURLY||LA80_2==LESS_THAN||LA80_2==LOGICAL_NOT||(LA80_2>=LONG && LA80_2<=LPAREN)||LA80_2==MINUS||(LA80_2>=NEW && LA80_2<=NOT)||LA80_2==NULL||LA80_2==OCTAL_LITERAL||LA80_2==PLUS||(LA80_2>=SHORT && LA80_2<=SOQL_LITERAL)||(LA80_2>=STRING_LITERAL && LA80_2<=SUPER)||LA80_2==THIS||LA80_2==TRUE||LA80_2==VOID))
						{
							alt80 = 1;
						}


					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:41: COMMA annotationElementValue
						{
						DebugLocation(638, 41);
						COMMA251=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8482); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA251);

						DebugLocation(638, 47);
						PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8484);
						annotationElementValue252=annotationElementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue252.Tree);

						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(638, 74);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:74: ( COMMA )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if ((LA82_1==COMMA))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:638:75: COMMA
				{
				DebugLocation(638, 75);
				COMMA253=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8491); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA253);


				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(638, 83);
			RCURLY254=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationElementValueArrayInitializer8495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY254);



			{
			// AST REWRITE
			// elements: annotationElementValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 639:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
			{
				DebugLocation(639, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:639:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(639, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY249, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

				DebugLocation(639, 90);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:639:90: ( annotationElementValue )*
				while ( stream_annotationElementValue.HasNext )
				{
					DebugLocation(639, 90);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

				}
				stream_annotationElementValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueArrayInitializer", 67);
			LeaveRule("annotationElementValueArrayInitializer", 67);
			LeaveRule_annotationElementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(640, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:642:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 68);
		TraceIn("annotationTypeDeclaration", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT255 = default(IToken);
		IToken INTERFACE256 = default(IToken);
		IToken IDENT257 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationBody258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT255_tree = default(CommonTree);
		CommonTree INTERFACE256_tree = default(CommonTree);
		CommonTree IDENT257_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AT=new RewriteRuleITokenStream(adaptor,"token AT");
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(642, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:643:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:643:9: AT INTERFACE IDENT annotationBody
			{
			DebugLocation(643, 9);
			AT255=(IToken)Match(input,AT,Follow._AT_in_annotationTypeDeclaration8538); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AT.Add(AT255);

			DebugLocation(643, 12);
			INTERFACE256=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration8540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE256);

			DebugLocation(643, 22);
			IDENT257=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationTypeDeclaration8542); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT257);

			DebugLocation(643, 28);
			PushFollow(Follow._annotationBody_in_annotationTypeDeclaration8544);
			annotationBody258=annotationBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationBody.Add(annotationBody258.Tree);


			{
			// AST REWRITE
			// elements: IDENT, annotationBody, AT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 644:9: -> ^( AT IDENT annotationBody )
			{
				DebugLocation(644, 12);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:644:12: ^( AT IDENT annotationBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(644, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_AT.NextNode(), root_1);

				DebugLocation(644, 17);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(644, 30);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(644, 36);
				adaptor.AddChild(root_1, stream_annotationBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 68);
			LeaveRule("annotationTypeDeclaration", 68);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 68, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(645, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationBody();
	partial void LeaveRule_annotationBody();
	// $ANTLR start "annotationBody"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:647:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationBody()
	{
		EnterRule_annotationBody();
		EnterRule("annotationBody", 69);
		TraceIn("annotationBody", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY259 = default(IToken);
		IToken RCURLY261 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY259_tree = default(CommonTree);
		CommonTree RCURLY261_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "annotationBody");
		DebugLocation(647, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:648:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:648:9: LCURLY ( annotationScopeDeclarations )* RCURLY
			{
			DebugLocation(648, 9);
			LCURLY259=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationBody8587); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY259);

			DebugLocation(648, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:648:16: ( annotationScopeDeclarations )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==ABSTRACT||LA83_1==AT||LA83_1==BOOLEAN||LA83_1==BYTE||LA83_1==CHAR||LA83_1==CLASS||LA83_1==DOUBLE||LA83_1==ENUM||LA83_1==FINAL||LA83_1==FLOAT||LA83_1==GLOBAL||LA83_1==IDENT||LA83_1==INT||LA83_1==INTERFACE||LA83_1==LESS_THAN||LA83_1==LONG||LA83_1==NATIVE||LA83_1==OVERRIDE||LA83_1==PRIVATE||(LA83_1>=PROTECTED && LA83_1<=PUBLIC)||LA83_1==SHORT||LA83_1==STATIC||LA83_1==STRICTFP||(LA83_1>=SYNCHRONIZED && LA83_1<=TEST_METHOD)||LA83_1==TRANSIENT||(LA83_1>=VIRTUAL && LA83_1<=VOID)||LA83_1==VOLATILE||(LA83_1>=WITHOUT_SHARING && LA83_1<=WITH_SHARING)))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:648:16: annotationScopeDeclarations
					{
					DebugLocation(648, 16);
					PushFollow(Follow._annotationScopeDeclarations_in_annotationBody8589);
					annotationScopeDeclarations260=annotationScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotationScopeDeclarations.Add(annotationScopeDeclarations260.Tree);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }

			DebugLocation(648, 45);
			RCURLY261=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationBody8592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY261);



			{
			// AST REWRITE
			// elements: annotationScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 649:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
			{
				DebugLocation(649, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:649:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(649, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY259, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(649, 76);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:649:76: ( annotationScopeDeclarations )*
				while ( stream_annotationScopeDeclarations.HasNext )
				{
					DebugLocation(649, 76);
					adaptor.AddChild(root_1, stream_annotationScopeDeclarations.NextTree());

				}
				stream_annotationScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationBody", 69);
			LeaveRule("annotationBody", 69);
			LeaveRule_annotationBody();
			if (state.backtracking > 0) { Memoize(input, 69, annotationBody_StartIndex); }

		}
		DebugLocation(650, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationBody"); }
		return retval;

	}
	// $ANTLR end "annotationBody"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:652:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 70);
		TraceIn("annotationScopeDeclarations", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT264 = default(IToken);
		IToken LPAREN265 = default(IToken);
		IToken RPAREN266 = default(IToken);
		IToken SEMI268 = default(IToken);
		IToken SEMI270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT264_tree = default(CommonTree);
		CommonTree LPAREN265_tree = default(CommonTree);
		CommonTree RPAREN266_tree = default(CommonTree);
		CommonTree SEMI268_tree = default(CommonTree);
		CommonTree SEMI270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(652, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:653:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
			int alt86=2;
			try { DebugEnterDecision(86, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt86 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt86 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:653:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(653, 9);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations8634);
				modifierList262=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList262.Tree);
				DebugLocation(653, 22);
				PushFollow(Follow._type_in_annotationScopeDeclarations8636);
				type263=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type263.Tree);
				DebugLocation(654, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==IDENT))
				{
					int LA85_2 = input.LA(2);

					if ((LA85_2==LPAREN))
					{
						alt85 = 1;
					}
					else if ((LA85_2==ASSIGN||LA85_2==COMMA||LA85_2==LBRACK||LA85_2==SEMI))
					{
						alt85 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 85, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
					{
					DebugLocation(654, 13);
					IDENT264=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations8650); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT264);

					DebugLocation(654, 19);
					LPAREN265=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationScopeDeclarations8652); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN265);

					DebugLocation(654, 26);
					RPAREN266=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationScopeDeclarations8654); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN266);

					DebugLocation(654, 33);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:33: ( annotationDefaultValue )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, false);
					int LA84_1 = input.LA(1);

					if ((LA84_1==DEFAULT))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:33: annotationDefaultValue
						{
						DebugLocation(654, 33);
						PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations8656);
						annotationDefaultValue267=annotationDefaultValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationDefaultValue.Add(annotationDefaultValue267.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(654, 57);
					SEMI268=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8659); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI268);



					{
					// AST REWRITE
					// elements: IDENT, type, annotationDefaultValue, modifierList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 655:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
					{
						DebugLocation(655, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:655:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(655, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

						DebugLocation(655, 42);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(655, 55);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(655, 60);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(655, 66);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:655:66: ( annotationDefaultValue )?
						if (stream_annotationDefaultValue.HasNext)
						{
							DebugLocation(655, 66);
							adaptor.AddChild(root_1, stream_annotationDefaultValue.NextTree());

						}
						stream_annotationDefaultValue.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:656:13: classFieldDeclaratorList SEMI
					{
					DebugLocation(656, 13);
					PushFollow(Follow._classFieldDeclaratorList_in_annotationScopeDeclarations8701);
					classFieldDeclaratorList269=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList269.Tree);
					DebugLocation(656, 38);
					SEMI270=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8703); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI270);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 657:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(657, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:657:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(657, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(657, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(657, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(657, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(85); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:659:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(659, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations8748);
				typeDeclaration271=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration271.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 70);
			LeaveRule("annotationScopeDeclarations", 70);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 70, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(660, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:662:1: annotationDefaultValue : DEFAULT ^ annotationElementValue ;
	[GrammarRule("annotationDefaultValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 71);
		TraceIn("annotationDefaultValue", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationDefaultValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT272 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue273 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT272_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(662, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:663:5: ( DEFAULT ^ annotationElementValue )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:663:9: DEFAULT ^ annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(663, 16);
			DEFAULT272=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue8771); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT272_tree = (CommonTree)adaptor.Create(DEFAULT272);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT272_tree, root_0);
			}
			DebugLocation(663, 18);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue8774);
			annotationElementValue273=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue273.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationDefaultValue", 71);
			LeaveRule("annotationDefaultValue", 71);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 71, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(664, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return retval;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:668:1: blockStatement : ( localVariableDeclaration SEMI !| typeDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 72);
		TraceIn("blockStatement", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI275_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(668, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:669:5: ( localVariableDeclaration SEMI !| typeDeclaration | statement )
			int alt87=3;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((true))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((true))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case GLOBAL:
			case INTERFACE:
			case NATIVE:
			case OVERRIDE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TEST_METHOD:
			case TRANSIENT:
			case VIRTUAL:
			case VOLATILE:
			case WITHOUT_SHARING:
			case WITH_SHARING:
				{
				alt87 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((true))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BREAK:
			case CHARACTER_LITERAL:
			case CONTINUE:
			case DEC:
			case DECIMAL_LITERAL:
			case DO:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case FOR:
			case HEX_LITERAL:
			case IF:
			case INC:
			case LCURLY:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case RETURN:
			case SEMI:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt87 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:669:9: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(669, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement8795);
				localVariableDeclaration274=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration274.Tree);
				DebugLocation(669, 38);
				SEMI275=(IToken)Match(input,SEMI,Follow._SEMI_in_blockStatement8797); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:670:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(670, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement8808);
				typeDeclaration276=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration276.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:671:9: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(671, 9);
				PushFollow(Follow._statement_in_blockStatement8818);
				statement277=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement277.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 72);
			LeaveRule("blockStatement", 72);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 72, blockStatement_StartIndex); }

		}
		DebugLocation(672, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_dmlOperation();
	partial void LeaveRule_dmlOperation();
	// $ANTLR start "dmlOperation"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:673:1: dmlOperation : dmlOperator expression SEMI ;
	[GrammarRule("dmlOperation")]
	private AstParserRuleReturnScope<CommonTree, IToken> dmlOperation()
	{
		EnterRule_dmlOperation();
		EnterRule("dmlOperation", 73);
		TraceIn("dmlOperation", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int dmlOperation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> dmlOperator278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression279 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI280_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dmlOperation");
		DebugLocation(673, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:674:4: ( dmlOperator expression SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:675:4: dmlOperator expression SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(675, 4);
			PushFollow(Follow._dmlOperator_in_dmlOperation8833);
			dmlOperator278=dmlOperator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, dmlOperator278.Tree);
			DebugLocation(675, 16);
			PushFollow(Follow._expression_in_dmlOperation8835);
			expression279=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression279.Tree);
			DebugLocation(675, 27);
			SEMI280=(IToken)Match(input,SEMI,Follow._SEMI_in_dmlOperation8837); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI280_tree = (CommonTree)adaptor.Create(SEMI280);
			adaptor.AddChild(root_0, SEMI280_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dmlOperation", 73);
			LeaveRule("dmlOperation", 73);
			LeaveRule_dmlOperation();
			if (state.backtracking > 0) { Memoize(input, 73, dmlOperation_StartIndex); }

		}
		DebugLocation(676, 0);
		} finally { DebugExitRule(GrammarFileName, "dmlOperation"); }
		return retval;

	}
	// $ANTLR end "dmlOperation"

	partial void EnterRule_dmlOperator();
	partial void LeaveRule_dmlOperator();
	// $ANTLR start "dmlOperator"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:677:1: dmlOperator : ( ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) );
	[GrammarRule("dmlOperator")]
	private AstParserRuleReturnScope<CommonTree, IToken> dmlOperator()
	{
		EnterRule_dmlOperator();
		EnterRule("dmlOperator", 74);
		TraceIn("dmlOperator", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int dmlOperator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT281 = default(IToken);
		IToken IDENT282 = default(IToken);
		IToken IDENT283 = default(IToken);
		IToken IDENT284 = default(IToken);

		CommonTree IDENT281_tree = default(CommonTree);
		CommonTree IDENT282_tree = default(CommonTree);
		CommonTree IDENT283_tree = default(CommonTree);
		CommonTree IDENT284_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dmlOperator");
		DebugLocation(677, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:678:5: ( ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) )
			int alt88=4;
			try { DebugEnterDecision(88, false);
			int LA88_1 = input.LA(1);

			if ((LA88_1==IDENT))
			{
				int LA88_2 = input.LA(2);

				if (((EvaluatePredicate(synpred124_Java_fragment)&&(input.LT(1).Text == "insert"))))
				{
					alt88 = 1;
				}
				else if (((EvaluatePredicate(synpred125_Java_fragment)&&(input.LT(1).Text == "update"))))
				{
					alt88 = 2;
				}
				else if ((((input.LT(1).Text == "delete")&&EvaluatePredicate(synpred126_Java_fragment))))
				{
					alt88 = 3;
				}
				else if (((input.LT(1).Text == "upsert")))
				{
					alt88 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(679, 5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:8: {...}? IDENT
				{
				DebugLocation(679, 8);
				if (!((input.LT(1).Text == "insert")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"insert\"");
				}
				DebugLocation(679, 40);
				IDENT281=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT281_tree = (CommonTree)adaptor.Create(IDENT281);
				adaptor.AddChild(root_0, IDENT281_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(680, 5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:8: {...}? IDENT
				{
				DebugLocation(680, 8);
				if (!((input.LT(1).Text == "update")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"update\"");
				}
				DebugLocation(680, 40);
				IDENT282=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8869); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT282_tree = (CommonTree)adaptor.Create(IDENT282);
				adaptor.AddChild(root_0, IDENT282_tree);
				}

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(681, 5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:8: {...}? IDENT
				{
				DebugLocation(681, 8);
				if (!((input.LT(1).Text == "delete")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"delete\"");
				}
				DebugLocation(681, 40);
				IDENT283=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8882); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT283_tree = (CommonTree)adaptor.Create(IDENT283);
				adaptor.AddChild(root_0, IDENT283_tree);
				}

				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:682:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(682, 5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:682:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:682:8: {...}? IDENT
				{
				DebugLocation(682, 8);
				if (!((input.LT(1).Text == "upsert")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"upsert\"");
				}
				DebugLocation(682, 40);
				IDENT284=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8895); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT284_tree = (CommonTree)adaptor.Create(IDENT284);
				adaptor.AddChild(root_0, IDENT284_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dmlOperator", 74);
			LeaveRule("dmlOperator", 74);
			LeaveRule_dmlOperator();
			if (state.backtracking > 0) { Memoize(input, 74, dmlOperator_StartIndex); }

		}
		DebugLocation(683, 0);
		} finally { DebugExitRule(GrammarFileName, "dmlOperator"); }
		return retval;

	}
	// $ANTLR end "dmlOperator"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:685:1: block : LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 75);
		TraceIn("block", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY285 = default(IToken);
		IToken RCURLY287 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY285_tree = default(CommonTree);
		CommonTree RCURLY287_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(685, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:686:5: ( LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:686:9: LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY
			{
			DebugLocation(686, 9);
			LCURLY285=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block8916); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY285);

			DebugLocation(687, 5);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:687:5: ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:688:2: ( blockStatement )*
			{
			DebugLocation(688, 2);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:688:2: ( blockStatement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==ABSTRACT||LA89_1==AT||(LA89_1>=BOOLEAN && LA89_1<=BYTE)||(LA89_1>=CHAR && LA89_1<=CLASS)||(LA89_1>=CONTINUE && LA89_1<=DECIMAL_LITERAL)||LA89_1==DO||LA89_1==DOUBLE||LA89_1==ENUM||(LA89_1>=FALSE && LA89_1<=FINAL)||(LA89_1>=FLOAT && LA89_1<=FLOATING_POINT_LITERAL)||LA89_1==FOR||LA89_1==GLOBAL||(LA89_1>=HEX_LITERAL && LA89_1<=IF)||LA89_1==INC||LA89_1==INT||LA89_1==INTERFACE||LA89_1==LCURLY||LA89_1==LESS_THAN||LA89_1==LOGICAL_NOT||(LA89_1>=LONG && LA89_1<=LPAREN)||LA89_1==MINUS||(LA89_1>=NATIVE && LA89_1<=NOT)||LA89_1==NULL||LA89_1==OCTAL_LITERAL||LA89_1==OVERRIDE||LA89_1==PLUS||LA89_1==PRIVATE||(LA89_1>=PROTECTED && LA89_1<=PUBLIC)||LA89_1==RETURN||LA89_1==SEMI||(LA89_1>=SHORT && LA89_1<=SOQL_LITERAL)||LA89_1==STATIC||(LA89_1>=STRICTFP && LA89_1<=SUPER)||LA89_1==SWITCH||(LA89_1>=SYNCHRONIZED && LA89_1<=THIS)||LA89_1==THROW||(LA89_1>=TRANSIENT && LA89_1<=TRY)||(LA89_1>=VIRTUAL && LA89_1<=VOID)||(LA89_1>=VOLATILE && LA89_1<=WITH_SHARING)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:688:2: blockStatement
					{
					DebugLocation(688, 2);
					PushFollow(Follow._blockStatement_in_block8926);
					blockStatement286=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_blockStatement.Add(blockStatement286.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }



			{
			// AST REWRITE
			// elements: blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 688:17: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
			{
				DebugLocation(688, 21);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:688:21: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(688, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK_SCOPE, LCURLY285, "BLOCK_SCOPE"), root_1);

				DebugLocation(688, 59);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:688:59: ( blockStatement )*
				while ( stream_blockStatement.HasNext )
				{
					DebugLocation(688, 59);
					adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				}
				stream_blockStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(690, 6);
			RCURLY287=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block8950); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY287);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 75);
			LeaveRule("block", 75);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 75, block_StartIndex); }

		}
		DebugLocation(691, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:696:5: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 76);
		TraceIn("localVariableDeclaration", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(696, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:697:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:697:9: localModifierList type classFieldDeclaratorList
			{
			DebugLocation(697, 9);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration8980);
			localModifierList288=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList288.Tree);
			DebugLocation(697, 27);
			PushFollow(Follow._type_in_localVariableDeclaration8982);
			type289=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type289.Tree);
			DebugLocation(697, 32);
			PushFollow(Follow._classFieldDeclaratorList_in_localVariableDeclaration8984);
			classFieldDeclaratorList290=classFieldDeclaratorList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList290.Tree);


			{
			// AST REWRITE
			// elements: classFieldDeclaratorList, type, localModifierList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 698:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
			{
				DebugLocation(698, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:698:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(698, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(698, 31);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(698, 49);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(698, 54);
				adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 76);
			LeaveRule("localVariableDeclaration", 76);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 76, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(699, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:702:1: statement : ( block | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | dmlOperation | expression SEMI !|{...}? expression | SEMI );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 77);
		TraceIn("statement", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IF292 = default(IToken);
		IToken ELSE294 = default(IToken);
		IToken FOR295 = default(IToken);
		IToken LPAREN296 = default(IToken);
		IToken SEMI298 = default(IToken);
		IToken SEMI300 = default(IToken);
		IToken RPAREN302 = default(IToken);
		IToken IDENT306 = default(IToken);
		IToken COLON307 = default(IToken);
		IToken RPAREN309 = default(IToken);
		IToken WHILE311 = default(IToken);
		IToken DO314 = default(IToken);
		IToken WHILE316 = default(IToken);
		IToken SEMI318 = default(IToken);
		IToken TRY319 = default(IToken);
		IToken SWITCH324 = default(IToken);
		IToken LCURLY326 = default(IToken);
		IToken RCURLY328 = default(IToken);
		IToken SYNCHRONIZED329 = default(IToken);
		IToken RETURN332 = default(IToken);
		IToken SEMI334 = default(IToken);
		IToken THROW335 = default(IToken);
		IToken SEMI337 = default(IToken);
		IToken BREAK338 = default(IToken);
		IToken IDENT339 = default(IToken);
		IToken SEMI340 = default(IToken);
		IToken CONTINUE341 = default(IToken);
		IToken IDENT342 = default(IToken);
		IToken SEMI343 = default(IToken);
		IToken IDENT344 = default(IToken);
		IToken COLON345 = default(IToken);
		IToken SEMI349 = default(IToken);
		IToken SEMI351 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ifStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forInit297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forCondition299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forUpdater301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> catches321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> dmlOperation347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression348 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression350 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IF292_tree = default(CommonTree);
		CommonTree ELSE294_tree = default(CommonTree);
		CommonTree FOR295_tree = default(CommonTree);
		CommonTree LPAREN296_tree = default(CommonTree);
		CommonTree SEMI298_tree = default(CommonTree);
		CommonTree SEMI300_tree = default(CommonTree);
		CommonTree RPAREN302_tree = default(CommonTree);
		CommonTree IDENT306_tree = default(CommonTree);
		CommonTree COLON307_tree = default(CommonTree);
		CommonTree RPAREN309_tree = default(CommonTree);
		CommonTree WHILE311_tree = default(CommonTree);
		CommonTree DO314_tree = default(CommonTree);
		CommonTree WHILE316_tree = default(CommonTree);
		CommonTree SEMI318_tree = default(CommonTree);
		CommonTree TRY319_tree = default(CommonTree);
		CommonTree SWITCH324_tree = default(CommonTree);
		CommonTree LCURLY326_tree = default(CommonTree);
		CommonTree RCURLY328_tree = default(CommonTree);
		CommonTree SYNCHRONIZED329_tree = default(CommonTree);
		CommonTree RETURN332_tree = default(CommonTree);
		CommonTree SEMI334_tree = default(CommonTree);
		CommonTree THROW335_tree = default(CommonTree);
		CommonTree SEMI337_tree = default(CommonTree);
		CommonTree BREAK338_tree = default(CommonTree);
		CommonTree IDENT339_tree = default(CommonTree);
		CommonTree SEMI340_tree = default(CommonTree);
		CommonTree CONTINUE341_tree = default(CommonTree);
		CommonTree IDENT342_tree = default(CommonTree);
		CommonTree SEMI343_tree = default(CommonTree);
		CommonTree IDENT344_tree = default(CommonTree);
		CommonTree COLON345_tree = default(CommonTree);
		CommonTree SEMI349_tree = default(CommonTree);
		CommonTree SEMI351_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SYNCHRONIZED=new RewriteRuleITokenStream(adaptor,"token SYNCHRONIZED");
		RewriteRuleITokenStream stream_THROW=new RewriteRuleITokenStream(adaptor,"token THROW");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleITokenStream stream_CONTINUE=new RewriteRuleITokenStream(adaptor,"token CONTINUE");
		RewriteRuleITokenStream stream_RETURN=new RewriteRuleITokenStream(adaptor,"token RETURN");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_BREAK=new RewriteRuleITokenStream(adaptor,"token BREAK");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_TRY=new RewriteRuleITokenStream(adaptor,"token TRY");
		RewriteRuleITokenStream stream_SWITCH=new RewriteRuleITokenStream(adaptor,"token SWITCH");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(702, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:703:5: ( block | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | dmlOperation | expression SEMI !|{...}? expression | SEMI )
			int alt97=17;
			try { DebugEnterDecision(97, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt97 = 1;
				}
				break;
			case IF:
				{
				alt97 = 2;
				}
				break;
			case FOR:
				{
				alt97 = 3;
				}
				break;
			case WHILE:
				{
				alt97 = 4;
				}
				break;
			case DO:
				{
				alt97 = 5;
				}
				break;
			case TRY:
				{
				alt97 = 6;
				}
				break;
			case SWITCH:
				{
				alt97 = 7;
				}
				break;
			case SYNCHRONIZED:
				{
				alt97 = 8;
				}
				break;
			case RETURN:
				{
				alt97 = 9;
				}
				break;
			case THROW:
				{
				alt97 = 10;
				}
				break;
			case BREAK:
				{
				alt97 = 11;
				}
				break;
			case CONTINUE:
				{
				alt97 = 12;
				}
				break;
			case IDENT:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred147_Java_fragment)))
				{
					alt97 = 13;
				}
				else if (((EvaluatePredicate(synpred148_Java_fragment)&&((input.LT(1).Text == "upsert")||(input.LT(1).Text == "insert")||(input.LT(1).Text == "delete")||(input.LT(1).Text == "update")))))
				{
					alt97 = 14;
				}
				else if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PLUS:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INC:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEC:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NOT:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOGICAL_NOT:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NEW:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LESS_THAN:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case THIS:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt97 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred150_Java_fragment))))
				{
					alt97 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SEMI:
				{
				alt97 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:703:9: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(703, 9);
				PushFollow(Follow._block_in_statement9037);
				block291=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block291.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:704:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				{
				DebugLocation(704, 9);
				IF292=(IToken)Match(input,IF,Follow._IF_in_statement9047); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF292);

				DebugLocation(704, 12);
				PushFollow(Follow._parenthesizedExpression_in_statement9049);
				parenthesizedExpression293=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression293.Tree);
				DebugLocation(704, 42);
				PushFollow(Follow._statement_in_statement9053);
				ifStat=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(ifStat.Tree);
				DebugLocation(705, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:705:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==ELSE))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred129_Java_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA90_1==EOF||LA90_1==ABSTRACT||LA90_1==AT||(LA90_1>=BOOLEAN && LA90_1<=CASE)||(LA90_1>=CHAR && LA90_1<=CLASS)||(LA90_1>=CONTINUE && LA90_1<=DEFAULT)||LA90_1==DO||LA90_1==DOUBLE||LA90_1==ENUM||(LA90_1>=FALSE && LA90_1<=FINAL)||(LA90_1>=FLOAT && LA90_1<=FLOATING_POINT_LITERAL)||LA90_1==FOR||LA90_1==GLOBAL||(LA90_1>=HEX_LITERAL && LA90_1<=IF)||LA90_1==INC||LA90_1==INT||LA90_1==INTERFACE||LA90_1==LCURLY||LA90_1==LESS_THAN||LA90_1==LOGICAL_NOT||(LA90_1>=LONG && LA90_1<=LPAREN)||LA90_1==MINUS||(LA90_1>=NATIVE && LA90_1<=NOT)||LA90_1==NULL||LA90_1==OCTAL_LITERAL||LA90_1==OVERRIDE||LA90_1==PLUS||LA90_1==PRIVATE||(LA90_1>=PROTECTED && LA90_1<=PUBLIC)||(LA90_1>=RCURLY && LA90_1<=RETURN)||LA90_1==SEMI||(LA90_1>=SHORT && LA90_1<=SOQL_LITERAL)||LA90_1==STATIC||(LA90_1>=STRICTFP && LA90_1<=SUPER)||LA90_1==SWITCH||(LA90_1>=SYNCHRONIZED && LA90_1<=THIS)||LA90_1==THROW||(LA90_1>=TRANSIENT && LA90_1<=TRY)||(LA90_1>=VIRTUAL && LA90_1<=VOID)||(LA90_1>=VOLATILE && LA90_1<=WITH_SHARING)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:705:13: ELSE elseStat= statement
					{
					DebugLocation(705, 13);
					ELSE294=(IToken)Match(input,ELSE,Follow._ELSE_in_statement9068); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE294);

					DebugLocation(705, 26);
					PushFollow(Follow._statement_in_statement9072);
					elseStat=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(elseStat.Tree);


					{
					// AST REWRITE
					// elements: IF, parenthesizedExpression, ifStat, elseStat
					// token labels: 
					// rule labels: ifStat, elseStat, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
					RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 705:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
					{
						DebugLocation(705, 81);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:705:81: ^( IF parenthesizedExpression $ifStat $elseStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(705, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(705, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(705, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());
						DebugLocation(705, 119);
						adaptor.AddChild(root_1, stream_elseStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:706:77: 
					{

					{
					// AST REWRITE
					// elements: ifStat, parenthesizedExpression, IF
					// token labels: 
					// rule labels: ifStat, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 706:77: -> ^( IF parenthesizedExpression $ifStat)
					{
						DebugLocation(706, 81);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:706:81: ^( IF parenthesizedExpression $ifStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(706, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(706, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(706, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:708:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				{
				DebugLocation(708, 9);
				FOR295=(IToken)Match(input,FOR,Follow._FOR_in_statement9238); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FOR.Add(FOR295);

				DebugLocation(708, 13);
				LPAREN296=(IToken)Match(input,LPAREN,Follow._LPAREN_in_statement9240); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN296);

				DebugLocation(709, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:709:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				switch (input.LA(1))
				{
				case FINAL:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred131_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case AT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred131_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred131_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred131_Java_fragment)))
					{
						alt91 = 1;
					}
					else if ((true))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DEC:
				case DECIMAL_LITERAL:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case INC:
				case LESS_THAN:
				case LOGICAL_NOT:
				case LPAREN:
				case MINUS:
				case NEW:
				case NOT:
				case NULL:
				case OCTAL_LITERAL:
				case PLUS:
				case SEMI:
				case SOQL_LITERAL:
				case STRING_LITERAL:
				case SUPER:
				case THIS:
				case TRUE:
				case VOID:
					{
					alt91 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:709:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
					{
					DebugLocation(709, 13);
					PushFollow(Follow._forInit_in_statement9255);
					forInit297=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forInit.Add(forInit297.Tree);
					DebugLocation(709, 21);
					SEMI298=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9257); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI298);

					DebugLocation(709, 26);
					PushFollow(Follow._forCondition_in_statement9259);
					forCondition299=forCondition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forCondition.Add(forCondition299.Tree);
					DebugLocation(709, 39);
					SEMI300=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9261); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI300);

					DebugLocation(709, 44);
					PushFollow(Follow._forUpdater_in_statement9263);
					forUpdater301=forUpdater();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forUpdater.Add(forUpdater301.Tree);
					DebugLocation(709, 55);
					RPAREN302=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9265); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN302);

					DebugLocation(709, 62);
					PushFollow(Follow._statement_in_statement9267);
					statement303=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement303.Tree);


					{
					// AST REWRITE
					// elements: forInit, FOR, forCondition, statement, forUpdater
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 709:77: -> ^( FOR forInit forCondition forUpdater statement )
					{
						DebugLocation(709, 81);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:709:81: ^( FOR forInit forCondition forUpdater statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(709, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_FOR.NextNode(), root_1);

						DebugLocation(709, 87);
						adaptor.AddChild(root_1, stream_forInit.NextTree());
						DebugLocation(709, 95);
						adaptor.AddChild(root_1, stream_forCondition.NextTree());
						DebugLocation(709, 108);
						adaptor.AddChild(root_1, stream_forUpdater.NextTree());
						DebugLocation(709, 119);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:710:13: localModifierList type IDENT COLON expression RPAREN statement
					{
					DebugLocation(710, 13);
					PushFollow(Follow._localModifierList_in_statement9302);
					localModifierList304=localModifierList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifierList.Add(localModifierList304.Tree);
					DebugLocation(710, 31);
					PushFollow(Follow._type_in_statement9304);
					type305=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type305.Tree);
					DebugLocation(710, 36);
					IDENT306=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9306); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT306);

					DebugLocation(710, 42);
					COLON307=(IToken)Match(input,COLON,Follow._COLON_in_statement9308); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(COLON307);

					DebugLocation(710, 48);
					PushFollow(Follow._expression_in_statement9310);
					expression308=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression308.Tree);
					DebugLocation(710, 59);
					RPAREN309=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9312); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN309);

					DebugLocation(710, 66);
					PushFollow(Follow._statement_in_statement9314);
					statement310=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement310.Tree);


					{
					// AST REWRITE
					// elements: statement, type, IDENT, expression, localModifierList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 710:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
					{
						DebugLocation(710, 81);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:710:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(710, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_EACH, FOR295, "FOR_EACH"), root_1);

						DebugLocation(710, 110);
						adaptor.AddChild(root_1, stream_localModifierList.NextTree());
						DebugLocation(710, 128);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(710, 133);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(710, 139);
						adaptor.AddChild(root_1, stream_expression.NextTree());
						DebugLocation(710, 150);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:712:9: WHILE parenthesizedExpression statement
				{
				DebugLocation(712, 9);
				WHILE311=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9354); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE311);

				DebugLocation(712, 15);
				PushFollow(Follow._parenthesizedExpression_in_statement9356);
				parenthesizedExpression312=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression312.Tree);
				DebugLocation(712, 39);
				PushFollow(Follow._statement_in_statement9358);
				statement313=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement313.Tree);


				{
				// AST REWRITE
				// elements: WHILE, statement, parenthesizedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 712:77: -> ^( WHILE parenthesizedExpression statement )
				{
					DebugLocation(712, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:712:81: ^( WHILE parenthesizedExpression statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(712, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

					DebugLocation(712, 89);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(712, 113);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:713:9: DO statement WHILE parenthesizedExpression SEMI
				{
				DebugLocation(713, 9);
				DO314=(IToken)Match(input,DO,Follow._DO_in_statement9407); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DO.Add(DO314);

				DebugLocation(713, 12);
				PushFollow(Follow._statement_in_statement9409);
				statement315=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement315.Tree);
				DebugLocation(713, 22);
				WHILE316=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9411); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE316);

				DebugLocation(713, 28);
				PushFollow(Follow._parenthesizedExpression_in_statement9413);
				parenthesizedExpression317=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression317.Tree);
				DebugLocation(713, 52);
				SEMI318=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9415); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI318);



				{
				// AST REWRITE
				// elements: DO, parenthesizedExpression, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 713:77: -> ^( DO statement parenthesizedExpression )
				{
					DebugLocation(713, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:713:81: ^( DO statement parenthesizedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(713, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DO.NextNode(), root_1);

					DebugLocation(713, 86);
					adaptor.AddChild(root_1, stream_statement.NextTree());
					DebugLocation(713, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:9: TRY block ( catches ( finallyClause )? | finallyClause )
				{
				DebugLocation(714, 9);
				TRY319=(IToken)Match(input,TRY,Follow._TRY_in_statement9456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRY.Add(TRY319);

				DebugLocation(714, 13);
				PushFollow(Follow._block_in_statement9458);
				block320=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block320.Tree);
				DebugLocation(714, 19);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:19: ( catches ( finallyClause )? | finallyClause )
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==CATCH))
				{
					alt93 = 1;
				}
				else if ((LA93_1==FINALLY))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:20: catches ( finallyClause )?
					{
					DebugLocation(714, 20);
					PushFollow(Follow._catches_in_statement9461);
					catches321=catches();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catches.Add(catches321.Tree);
					DebugLocation(714, 28);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:28: ( finallyClause )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_1 = input.LA(1);

					if ((LA92_1==FINALLY))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:28: finallyClause
						{
						DebugLocation(714, 28);
						PushFollow(Follow._finallyClause_in_statement9463);
						finallyClause322=finallyClause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_finallyClause.Add(finallyClause322.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:45: finallyClause
					{
					DebugLocation(714, 45);
					PushFollow(Follow._finallyClause_in_statement9468);
					finallyClause323=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_finallyClause.Add(finallyClause323.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }



				{
				// AST REWRITE
				// elements: TRY, block, finallyClause, catches
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 714:77: -> ^( TRY block ( catches )? ( finallyClause )? )
				{
					DebugLocation(714, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:81: ^( TRY block ( catches )? ( finallyClause )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(714, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRY.NextNode(), root_1);

					DebugLocation(714, 87);
					adaptor.AddChild(root_1, stream_block.NextTree());
					DebugLocation(714, 93);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:93: ( catches )?
					if (stream_catches.HasNext)
					{
						DebugLocation(714, 93);
						adaptor.AddChild(root_1, stream_catches.NextTree());

					}
					stream_catches.Reset();
					DebugLocation(714, 102);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:714:102: ( finallyClause )?
					if (stream_finallyClause.HasNext)
					{
						DebugLocation(714, 102);
						adaptor.AddChild(root_1, stream_finallyClause.NextTree());

					}
					stream_finallyClause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:715:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
				{
				DebugLocation(715, 9);
				SWITCH324=(IToken)Match(input,SWITCH,Follow._SWITCH_in_statement9511); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SWITCH.Add(SWITCH324);

				DebugLocation(715, 16);
				PushFollow(Follow._parenthesizedExpression_in_statement9513);
				parenthesizedExpression325=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression325.Tree);
				DebugLocation(715, 40);
				LCURLY326=(IToken)Match(input,LCURLY,Follow._LCURLY_in_statement9515); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LCURLY.Add(LCURLY326);

				DebugLocation(715, 47);
				PushFollow(Follow._switchBlockLabels_in_statement9517);
				switchBlockLabels327=switchBlockLabels();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchBlockLabels.Add(switchBlockLabels327.Tree);
				DebugLocation(715, 65);
				RCURLY328=(IToken)Match(input,RCURLY,Follow._RCURLY_in_statement9519); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RCURLY.Add(RCURLY328);



				{
				// AST REWRITE
				// elements: parenthesizedExpression, switchBlockLabels, SWITCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 715:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
					DebugLocation(715, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:715:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(715, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SWITCH.NextNode(), root_1);

					DebugLocation(715, 90);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(715, 114);
					adaptor.AddChild(root_1, stream_switchBlockLabels.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:716:9: SYNCHRONIZED parenthesizedExpression block
				{
				DebugLocation(716, 9);
				SYNCHRONIZED329=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement9545); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYNCHRONIZED.Add(SYNCHRONIZED329);

				DebugLocation(716, 22);
				PushFollow(Follow._parenthesizedExpression_in_statement9547);
				parenthesizedExpression330=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression330.Tree);
				DebugLocation(716, 46);
				PushFollow(Follow._block_in_statement9549);
				block331=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block331.Tree);


				{
				// AST REWRITE
				// elements: block, SYNCHRONIZED, parenthesizedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 716:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
				{
					DebugLocation(716, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:716:81: ^( SYNCHRONIZED parenthesizedExpression block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(716, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SYNCHRONIZED.NextNode(), root_1);

					DebugLocation(716, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(716, 120);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:717:9: RETURN ( expression )? SEMI
				{
				DebugLocation(717, 9);
				RETURN332=(IToken)Match(input,RETURN,Follow._RETURN_in_statement9595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RETURN.Add(RETURN332);

				DebugLocation(717, 16);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:717:16: ( expression )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==BOOLEAN||LA94_1==BYTE||(LA94_1>=CHAR && LA94_1<=CHARACTER_LITERAL)||(LA94_1>=DEC && LA94_1<=DECIMAL_LITERAL)||LA94_1==DOUBLE||LA94_1==FALSE||(LA94_1>=FLOAT && LA94_1<=FLOATING_POINT_LITERAL)||(LA94_1>=HEX_LITERAL && LA94_1<=IDENT)||LA94_1==INC||LA94_1==INT||LA94_1==LESS_THAN||LA94_1==LOGICAL_NOT||(LA94_1>=LONG && LA94_1<=LPAREN)||LA94_1==MINUS||(LA94_1>=NEW && LA94_1<=NOT)||LA94_1==NULL||LA94_1==OCTAL_LITERAL||LA94_1==PLUS||(LA94_1>=SHORT && LA94_1<=SOQL_LITERAL)||(LA94_1>=STRING_LITERAL && LA94_1<=SUPER)||LA94_1==THIS||LA94_1==TRUE||LA94_1==VOID))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:717:16: expression
					{
					DebugLocation(717, 16);
					PushFollow(Follow._expression_in_statement9597);
					expression333=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression333.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(717, 28);
				SEMI334=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI334);



				{
				// AST REWRITE
				// elements: expression, RETURN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 717:77: -> ^( RETURN ( expression )? )
				{
					DebugLocation(717, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:717:81: ^( RETURN ( expression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(717, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_RETURN.NextNode(), root_1);

					DebugLocation(717, 90);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:717:90: ( expression )?
					if (stream_expression.HasNext)
					{
						DebugLocation(717, 90);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:718:9: THROW expression SEMI
				{
				DebugLocation(718, 9);
				THROW335=(IToken)Match(input,THROW,Follow._THROW_in_statement9664); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THROW.Add(THROW335);

				DebugLocation(718, 15);
				PushFollow(Follow._expression_in_statement9666);
				expression336=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression336.Tree);
				DebugLocation(718, 26);
				SEMI337=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9668); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI337);



				{
				// AST REWRITE
				// elements: expression, THROW
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 718:77: -> ^( THROW expression )
				{
					DebugLocation(718, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:718:81: ^( THROW expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(718, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THROW.NextNode(), root_1);

					DebugLocation(718, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:719:9: BREAK ( IDENT )? SEMI
				{
				DebugLocation(719, 9);
				BREAK338=(IToken)Match(input,BREAK,Follow._BREAK_in_statement9733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BREAK.Add(BREAK338);

				DebugLocation(719, 15);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:719:15: ( IDENT )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==IDENT))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:719:15: IDENT
					{
					DebugLocation(719, 15);
					IDENT339=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9735); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT339);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(719, 22);
				SEMI340=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI340);



				{
				// AST REWRITE
				// elements: BREAK, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 719:77: -> ^( BREAK ( IDENT )? )
				{
					DebugLocation(719, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:719:81: ^( BREAK ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(719, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_BREAK.NextNode(), root_1);

					DebugLocation(719, 89);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:719:89: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(719, 89);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:720:9: CONTINUE ( IDENT )? SEMI
				{
				DebugLocation(720, 9);
				CONTINUE341=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement9808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTINUE.Add(CONTINUE341);

				DebugLocation(720, 18);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:720:18: ( IDENT )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==IDENT))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:720:18: IDENT
					{
					DebugLocation(720, 18);
					IDENT342=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9810); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT342);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(720, 25);
				SEMI343=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9813); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI343);



				{
				// AST REWRITE
				// elements: IDENT, CONTINUE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 720:77: -> ^( CONTINUE ( IDENT )? )
				{
					DebugLocation(720, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:720:81: ^( CONTINUE ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(720, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_CONTINUE.NextNode(), root_1);

					DebugLocation(720, 92);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:720:92: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(720, 92);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:721:9: IDENT COLON statement
				{
				DebugLocation(721, 9);
				IDENT344=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9880); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT344);

				DebugLocation(721, 15);
				COLON345=(IToken)Match(input,COLON,Follow._COLON_in_statement9882); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON345);

				DebugLocation(721, 21);
				PushFollow(Follow._statement_in_statement9884);
				statement346=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement346.Tree);


				{
				// AST REWRITE
				// elements: IDENT, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 721:77: -> ^( LABELED_STATEMENT IDENT statement )
				{
					DebugLocation(721, 81);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:721:81: ^( LABELED_STATEMENT IDENT statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(721, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

					DebugLocation(721, 101);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(721, 107);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:722:9: dmlOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(722, 9);
				PushFollow(Follow._dmlOperation_in_statement9951);
				dmlOperation347=dmlOperation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dmlOperation347.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:723:9: expression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(723, 9);
				PushFollow(Follow._expression_in_statement9961);
				expression348=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression348.Tree);
				DebugLocation(723, 24);
				SEMI349=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9963); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:724:8: {...}? expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(724, 8);
				if (!((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "input.LT(1).Text == \"system\" && input.LT(2).Text == \".\" && input.LT(3).Text == \"runas\"");
				}
				DebugLocation(724, 99);
				PushFollow(Follow._expression_in_statement9976);
				expression350=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression350.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:725:9: SEMI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(725, 9);
				SEMI351=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI351_tree = (CommonTree)adaptor.Create(SEMI351);
				adaptor.AddChild(root_0, SEMI351_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 77);
			LeaveRule("statement", 77);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 77, statement_StartIndex); }

		}
		DebugLocation(726, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:728:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<CommonTree, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 78);
		TraceIn("catches", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> catchClause352 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(728, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:729:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:729:9: ( catchClause )+
			{
			DebugLocation(729, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:729:9: ( catchClause )+
			int cnt98=0;
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==CATCH))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:729:9: catchClause
					{
					DebugLocation(729, 9);
					PushFollow(Follow._catchClause_in_catches10025);
					catchClause352=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catchClause.Add(catchClause352.Tree);

					}
					break;

				default:
					if (cnt98 >= 1)
						goto loop98;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee98 = new EarlyExitException( 98, input );
					DebugRecognitionException(eee98);
					throw eee98;
				}
				cnt98++;
			}
			loop98:
				;

			} finally { DebugExitSubRule(98); }



			{
			// AST REWRITE
			// elements: catchClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 730:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
				DebugLocation(730, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:730:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(730, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

				DebugLocation(730, 33);
				if (!(stream_catchClause.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_catchClause.HasNext )
				{
					DebugLocation(730, 33);
					adaptor.AddChild(root_1, stream_catchClause.NextTree());

				}
				stream_catchClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 78);
			LeaveRule("catches", 78);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 78, catches_StartIndex); }

		}
		DebugLocation(731, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:733:1: catchClause : CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 79);
		TraceIn("catchClause", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CATCH353 = default(IToken);
		IToken LPAREN354 = default(IToken);
		IToken RPAREN356 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl355 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block357 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CATCH353_tree = default(CommonTree);
		CommonTree LPAREN354_tree = default(CommonTree);
		CommonTree RPAREN356_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(733, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:734:5: ( CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:734:9: CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(734, 14);
			CATCH353=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause10067); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CATCH353_tree = (CommonTree)adaptor.Create(CATCH353);
			root_0 = (CommonTree)adaptor.BecomeRoot(CATCH353_tree, root_0);
			}
			DebugLocation(734, 22);
			LPAREN354=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause10070); if (state.failed) return retval;
			DebugLocation(734, 24);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause10073);
			formalParameterStandardDecl355=formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterStandardDecl355.Tree);
			DebugLocation(734, 58);
			RPAREN356=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause10075); if (state.failed) return retval;
			DebugLocation(734, 60);
			PushFollow(Follow._block_in_catchClause10078);
			block357=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block357.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 79);
			LeaveRule("catchClause", 79);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 79, catchClause_StartIndex); }

		}
		DebugLocation(735, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:737:1: finallyClause : FINALLY block -> block ;
	[GrammarRule("finallyClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 80);
		TraceIn("finallyClause", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINALLY358 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block359 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINALLY358_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FINALLY=new RewriteRuleITokenStream(adaptor,"token FINALLY");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(737, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:738:5: ( FINALLY block -> block )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:738:9: FINALLY block
			{
			DebugLocation(738, 9);
			FINALLY358=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause10097); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FINALLY.Add(FINALLY358);

			DebugLocation(738, 17);
			PushFollow(Follow._block_in_finallyClause10099);
			block359=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block359.Tree);


			{
			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 739:9: -> block
			{
				DebugLocation(739, 13);
				adaptor.AddChild(root_0, stream_block.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 80);
			LeaveRule("finallyClause", 80);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 80, finallyClause_StartIndex); }

		}
		DebugLocation(740, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:742:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
	[GrammarRule("switchBlockLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 81);
		TraceIn("switchBlockLabels", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel361 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
		RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(742, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:743:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:743:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
			{
			DebugLocation(743, 9);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10131);
			switchCaseLabels360=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels360.Tree);
			DebugLocation(743, 26);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:743:26: ( switchDefaultLabel )?
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==DEFAULT))
			{
				alt99 = 1;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:743:26: switchDefaultLabel
				{
				DebugLocation(743, 26);
				PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels10133);
				switchDefaultLabel361=switchDefaultLabel();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchDefaultLabel.Add(switchDefaultLabel361.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(99); }

			DebugLocation(743, 46);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10136);
			switchCaseLabels362=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels362.Tree);


			{
			// AST REWRITE
			// elements: switchCaseLabels, switchDefaultLabel, switchCaseLabels
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 744:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
			{
				DebugLocation(744, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:744:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(744, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

				DebugLocation(744, 39);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());
				DebugLocation(744, 56);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:744:56: ( switchDefaultLabel )?
				if (stream_switchDefaultLabel.HasNext)
				{
					DebugLocation(744, 56);
					adaptor.AddChild(root_1, stream_switchDefaultLabel.NextTree());

				}
				stream_switchDefaultLabel.Reset();
				DebugLocation(744, 76);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockLabels", 81);
			LeaveRule("switchBlockLabels", 81);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 81, switchBlockLabels_StartIndex); }

		}
		DebugLocation(745, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return retval;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabels();
	partial void LeaveRule_switchCaseLabels();
	// $ANTLR start "switchCaseLabels"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:747:1: switchCaseLabels : ( switchCaseLabel )* ;
	[GrammarRule("switchCaseLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels()
	{
		EnterRule_switchCaseLabels();
		EnterRule("switchCaseLabels", 82);
		TraceIn("switchCaseLabels", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel363 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseLabels");
		DebugLocation(747, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:5: ( ( switchCaseLabel )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:9: ( switchCaseLabel )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(748, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:9: ( switchCaseLabel )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_1 = input.LA(1);

				if ((LA100_1==CASE))
				{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred153_Java_fragment)))
					{
						alt100 = 1;
					}


				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:9: switchCaseLabel
					{
					DebugLocation(748, 9);
					PushFollow(Follow._switchCaseLabel_in_switchCaseLabels10181);
					switchCaseLabel363=switchCaseLabel();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchCaseLabel363.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabels", 82);
			LeaveRule("switchCaseLabels", 82);
			LeaveRule_switchCaseLabels();
			if (state.backtracking > 0) { Memoize(input, 82, switchCaseLabels_StartIndex); }

		}
		DebugLocation(749, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabels"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:751:1: switchCaseLabel : CASE ^ expression COLON ! ( blockStatement )* ;
	[GrammarRule("switchCaseLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 83);
		TraceIn("switchCaseLabel", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CASE364 = default(IToken);
		IToken COLON366 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CASE364_tree = default(CommonTree);
		CommonTree COLON366_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(751, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:752:5: ( CASE ^ expression COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:752:9: CASE ^ expression COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(752, 13);
			CASE364=(IToken)Match(input,CASE,Follow._CASE_in_switchCaseLabel10209); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CASE364_tree = (CommonTree)adaptor.Create(CASE364);
			root_0 = (CommonTree)adaptor.BecomeRoot(CASE364_tree, root_0);
			}
			DebugLocation(752, 15);
			PushFollow(Follow._expression_in_switchCaseLabel10212);
			expression365=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression365.Tree);
			DebugLocation(752, 31);
			COLON366=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseLabel10214); if (state.failed) return retval;
			DebugLocation(752, 33);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:752:33: ( blockStatement )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==ABSTRACT||LA101_1==AT||(LA101_1>=BOOLEAN && LA101_1<=BYTE)||(LA101_1>=CHAR && LA101_1<=CLASS)||(LA101_1>=CONTINUE && LA101_1<=DECIMAL_LITERAL)||LA101_1==DO||LA101_1==DOUBLE||LA101_1==ENUM||(LA101_1>=FALSE && LA101_1<=FINAL)||(LA101_1>=FLOAT && LA101_1<=FLOATING_POINT_LITERAL)||LA101_1==FOR||LA101_1==GLOBAL||(LA101_1>=HEX_LITERAL && LA101_1<=IF)||LA101_1==INC||LA101_1==INT||LA101_1==INTERFACE||LA101_1==LCURLY||LA101_1==LESS_THAN||LA101_1==LOGICAL_NOT||(LA101_1>=LONG && LA101_1<=LPAREN)||LA101_1==MINUS||(LA101_1>=NATIVE && LA101_1<=NOT)||LA101_1==NULL||LA101_1==OCTAL_LITERAL||LA101_1==OVERRIDE||LA101_1==PLUS||LA101_1==PRIVATE||(LA101_1>=PROTECTED && LA101_1<=PUBLIC)||LA101_1==RETURN||LA101_1==SEMI||(LA101_1>=SHORT && LA101_1<=SOQL_LITERAL)||LA101_1==STATIC||(LA101_1>=STRICTFP && LA101_1<=SUPER)||LA101_1==SWITCH||(LA101_1>=SYNCHRONIZED && LA101_1<=THIS)||LA101_1==THROW||(LA101_1>=TRANSIENT && LA101_1<=TRY)||(LA101_1>=VIRTUAL && LA101_1<=VOID)||(LA101_1>=VOLATILE && LA101_1<=WITH_SHARING)))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:752:33: blockStatement
					{
					DebugLocation(752, 33);
					PushFollow(Follow._blockStatement_in_switchCaseLabel10217);
					blockStatement367=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement367.Tree);

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabel", 83);
			LeaveRule("switchCaseLabel", 83);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 83, switchCaseLabel_StartIndex); }

		}
		DebugLocation(753, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:755:1: switchDefaultLabel : DEFAULT ^ COLON ! ( blockStatement )* ;
	[GrammarRule("switchDefaultLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 84);
		TraceIn("switchDefaultLabel", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchDefaultLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT368 = default(IToken);
		IToken COLON369 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement370 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT368_tree = default(CommonTree);
		CommonTree COLON369_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(755, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:756:5: ( DEFAULT ^ COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:756:9: DEFAULT ^ COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(756, 16);
			DEFAULT368=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel10241); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT368_tree = (CommonTree)adaptor.Create(DEFAULT368);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT368_tree, root_0);
			}
			DebugLocation(756, 23);
			COLON369=(IToken)Match(input,COLON,Follow._COLON_in_switchDefaultLabel10244); if (state.failed) return retval;
			DebugLocation(756, 25);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:756:25: ( blockStatement )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==ABSTRACT||LA102_1==AT||(LA102_1>=BOOLEAN && LA102_1<=BYTE)||(LA102_1>=CHAR && LA102_1<=CLASS)||(LA102_1>=CONTINUE && LA102_1<=DECIMAL_LITERAL)||LA102_1==DO||LA102_1==DOUBLE||LA102_1==ENUM||(LA102_1>=FALSE && LA102_1<=FINAL)||(LA102_1>=FLOAT && LA102_1<=FLOATING_POINT_LITERAL)||LA102_1==FOR||LA102_1==GLOBAL||(LA102_1>=HEX_LITERAL && LA102_1<=IF)||LA102_1==INC||LA102_1==INT||LA102_1==INTERFACE||LA102_1==LCURLY||LA102_1==LESS_THAN||LA102_1==LOGICAL_NOT||(LA102_1>=LONG && LA102_1<=LPAREN)||LA102_1==MINUS||(LA102_1>=NATIVE && LA102_1<=NOT)||LA102_1==NULL||LA102_1==OCTAL_LITERAL||LA102_1==OVERRIDE||LA102_1==PLUS||LA102_1==PRIVATE||(LA102_1>=PROTECTED && LA102_1<=PUBLIC)||LA102_1==RETURN||LA102_1==SEMI||(LA102_1>=SHORT && LA102_1<=SOQL_LITERAL)||LA102_1==STATIC||(LA102_1>=STRICTFP && LA102_1<=SUPER)||LA102_1==SWITCH||(LA102_1>=SYNCHRONIZED && LA102_1<=THIS)||LA102_1==THROW||(LA102_1>=TRANSIENT && LA102_1<=TRY)||(LA102_1>=VIRTUAL && LA102_1<=VOID)||(LA102_1>=VOLATILE && LA102_1<=WITH_SHARING)))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:756:25: blockStatement
					{
					DebugLocation(756, 25);
					PushFollow(Follow._blockStatement_in_switchDefaultLabel10247);
					blockStatement370=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement370.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchDefaultLabel", 84);
			LeaveRule("switchDefaultLabel", 84);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 84, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(757, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return retval;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:759:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 85);
		TraceIn("forInit", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration371 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList372 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(759, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:760:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
			int alt103=3;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case AT:
			case FINAL:
				{
				alt103 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred156_Java_fragment)))
				{
					alt103 = 1;
				}
				else if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred156_Java_fragment)))
				{
					alt103 = 1;
				}
				else if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt103 = 2;
				}
				break;
			case SEMI:
				{
				alt103 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:760:9: localVariableDeclaration
				{
				DebugLocation(760, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit10271);
				localVariableDeclaration371=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_localVariableDeclaration.Add(localVariableDeclaration371.Tree);


				{
				// AST REWRITE
				// elements: localVariableDeclaration
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 760:37: -> ^( FOR_INIT localVariableDeclaration )
				{
					DebugLocation(760, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:760:41: ^( FOR_INIT localVariableDeclaration )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(760, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(760, 52);
					adaptor.AddChild(root_1, stream_localVariableDeclaration.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:761:9: expressionList
				{
				DebugLocation(761, 9);
				PushFollow(Follow._expressionList_in_forInit10293);
				expressionList372=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList372.Tree);


				{
				// AST REWRITE
				// elements: expressionList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 761:37: -> ^( FOR_INIT expressionList )
				{
					DebugLocation(761, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:761:41: ^( FOR_INIT expressionList )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(761, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(761, 52);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:762:37: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 762:37: -> ^( FOR_INIT )
				{
					DebugLocation(762, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:762:41: ^( FOR_INIT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(762, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 85);
			LeaveRule("forInit", 85);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 85, forInit_StartIndex); }

		}
		DebugLocation(763, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:765:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 86);
		TraceIn("forCondition", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expression373 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(765, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:766:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:766:9: ( expression )?
			{
			DebugLocation(766, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:766:9: ( expression )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_1 = input.LA(1);

			if ((LA104_1==BOOLEAN||LA104_1==BYTE||(LA104_1>=CHAR && LA104_1<=CHARACTER_LITERAL)||(LA104_1>=DEC && LA104_1<=DECIMAL_LITERAL)||LA104_1==DOUBLE||LA104_1==FALSE||(LA104_1>=FLOAT && LA104_1<=FLOATING_POINT_LITERAL)||(LA104_1>=HEX_LITERAL && LA104_1<=IDENT)||LA104_1==INC||LA104_1==INT||LA104_1==LESS_THAN||LA104_1==LOGICAL_NOT||(LA104_1>=LONG && LA104_1<=LPAREN)||LA104_1==MINUS||(LA104_1>=NEW && LA104_1<=NOT)||LA104_1==NULL||LA104_1==OCTAL_LITERAL||LA104_1==PLUS||(LA104_1>=SHORT && LA104_1<=SOQL_LITERAL)||(LA104_1>=STRING_LITERAL && LA104_1<=SUPER)||LA104_1==THIS||LA104_1==TRUE||LA104_1==VOID))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:766:9: expression
				{
				DebugLocation(766, 9);
				PushFollow(Follow._expression_in_forCondition10381);
				expression373=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression373.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 767:9: -> ^( FOR_CONDITION ( expression )? )
			{
				DebugLocation(767, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:767:13: ^( FOR_CONDITION ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(767, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);

				DebugLocation(767, 29);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:767:29: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(767, 29);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 86);
			LeaveRule("forCondition", 86);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 86, forCondition_StartIndex); }

		}
		DebugLocation(768, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:770:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
	[GrammarRule("forUpdater")]
	private AstParserRuleReturnScope<CommonTree, IToken> forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 87);
		TraceIn("forUpdater", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdater_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expressionList374 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(770, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:771:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:771:9: ( expressionList )?
			{
			DebugLocation(771, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:771:9: ( expressionList )?
			int alt105=2;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			int LA105_1 = input.LA(1);

			if ((LA105_1==BOOLEAN||LA105_1==BYTE||(LA105_1>=CHAR && LA105_1<=CHARACTER_LITERAL)||(LA105_1>=DEC && LA105_1<=DECIMAL_LITERAL)||LA105_1==DOUBLE||LA105_1==FALSE||(LA105_1>=FLOAT && LA105_1<=FLOATING_POINT_LITERAL)||(LA105_1>=HEX_LITERAL && LA105_1<=IDENT)||LA105_1==INC||LA105_1==INT||LA105_1==LESS_THAN||LA105_1==LOGICAL_NOT||(LA105_1>=LONG && LA105_1<=LPAREN)||LA105_1==MINUS||(LA105_1>=NEW && LA105_1<=NOT)||LA105_1==NULL||LA105_1==OCTAL_LITERAL||LA105_1==PLUS||(LA105_1>=SHORT && LA105_1<=SOQL_LITERAL)||(LA105_1>=STRING_LITERAL && LA105_1<=SUPER)||LA105_1==THIS||LA105_1==TRUE||LA105_1==VOID))
			{
				alt105 = 1;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:771:9: expressionList
				{
				DebugLocation(771, 9);
				PushFollow(Follow._expressionList_in_forUpdater10423);
				expressionList374=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList374.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 772:9: -> ^( FOR_UPDATE ( expressionList )? )
			{
				DebugLocation(772, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:772:13: ^( FOR_UPDATE ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(772, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_UPDATE, "FOR_UPDATE"), root_1);

				DebugLocation(772, 26);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:772:26: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(772, 26);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdater", 87);
			LeaveRule("forUpdater", 87);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 87, forUpdater_StartIndex); }

		}
		DebugLocation(773, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return retval;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:777:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 88);
		TraceIn("parenthesizedExpression", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parenthesizedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN375 = default(IToken);
		IToken RPAREN377 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression376 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN375_tree = default(CommonTree);
		CommonTree RPAREN377_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(777, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:778:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:778:9: LPAREN expression RPAREN
			{
			DebugLocation(778, 9);
			LPAREN375=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenthesizedExpression10463); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN375);

			DebugLocation(778, 16);
			PushFollow(Follow._expression_in_parenthesizedExpression10465);
			expression376=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression376.Tree);
			DebugLocation(778, 27);
			RPAREN377=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenthesizedExpression10467); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN377);



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 779:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
			{
				DebugLocation(779, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:779:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(779, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENTESIZED_EXPR, LPAREN375, "PARENTESIZED_EXPR"), root_1);

				DebugLocation(779, 63);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenthesizedExpression", 88);
			LeaveRule("parenthesizedExpression", 88);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 88, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(780, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return retval;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:782:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 89);
		TraceIn("expressionList", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA379 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression378 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression380 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA379_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(782, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:783:5: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:783:9: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(783, 9);
			PushFollow(Follow._expression_in_expressionList10508);
			expression378=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression378.Tree);
			DebugLocation(783, 20);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:783:20: ( COMMA ! expression )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==COMMA))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:783:21: COMMA ! expression
					{
					DebugLocation(783, 26);
					COMMA379=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList10511); if (state.failed) return retval;
					DebugLocation(783, 28);
					PushFollow(Follow._expression_in_expressionList10514);
					expression380=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression380.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 89);
			LeaveRule("expressionList", 89);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 89, expressionList_StartIndex); }

		}
		DebugLocation(784, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:786:1: expression : ( assignmentExpression -> ^( EXPR assignmentExpression ) ) ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 90);
		TraceIn("expression", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(786, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:787:5: ( ( assignmentExpression -> ^( EXPR assignmentExpression ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:788:2: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			{
			DebugLocation(788, 2);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:788:2: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:788:3: assignmentExpression
			{
			DebugLocation(788, 3);
			PushFollow(Follow._assignmentExpression_in_expression10538);
			assignmentExpression381=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression381.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 788:25: -> ^( EXPR assignmentExpression )
			{
				DebugLocation(788, 29);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:788:29: ^( EXPR assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(788, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(788, 36);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 90);
			LeaveRule("expression", 90);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 90, expression_StartIndex); }

		}
		DebugLocation(789, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:791:1: assignmentExpression : conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 91);
		TraceIn("assignmentExpression", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN383 = default(IToken);
		IToken PLUS_ASSIGN384 = default(IToken);
		IToken MINUS_ASSIGN385 = default(IToken);
		IToken STAR_ASSIGN386 = default(IToken);
		IToken DIV_ASSIGN387 = default(IToken);
		IToken AND_ASSIGN388 = default(IToken);
		IToken OR_ASSIGN389 = default(IToken);
		IToken XOR_ASSIGN390 = default(IToken);
		IToken MOD_ASSIGN391 = default(IToken);
		IToken SHIFT_LEFT_ASSIGN392 = default(IToken);
		IToken SHIFT_RIGHT_ASSIGN393 = default(IToken);
		IToken BIT_SHIFT_RIGHT_ASSIGN394 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression382 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN383_tree = default(CommonTree);
		CommonTree PLUS_ASSIGN384_tree = default(CommonTree);
		CommonTree MINUS_ASSIGN385_tree = default(CommonTree);
		CommonTree STAR_ASSIGN386_tree = default(CommonTree);
		CommonTree DIV_ASSIGN387_tree = default(CommonTree);
		CommonTree AND_ASSIGN388_tree = default(CommonTree);
		CommonTree OR_ASSIGN389_tree = default(CommonTree);
		CommonTree XOR_ASSIGN390_tree = default(CommonTree);
		CommonTree MOD_ASSIGN391_tree = default(CommonTree);
		CommonTree SHIFT_LEFT_ASSIGN392_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT_ASSIGN393_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT_ASSIGN394_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(791, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:792:5: ( conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:792:9: conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(792, 9);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression10568);
			conditionalExpression382=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression382.Tree);
			DebugLocation(793, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:793:9: ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==AND_ASSIGN||LA108_1==ASSIGN||LA108_1==BIT_SHIFT_RIGHT_ASSIGN||LA108_1==DIV_ASSIGN||LA108_1==MINUS_ASSIGN||LA108_1==MOD_ASSIGN||LA108_1==OR_ASSIGN||LA108_1==PLUS_ASSIGN||LA108_1==SHIFT_LEFT_ASSIGN||LA108_1==SHIFT_RIGHT_ASSIGN||LA108_1==STAR_ASSIGN||LA108_1==XOR_ASSIGN))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:793:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression
				{
				DebugLocation(793, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:793:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^)
				int alt107=12;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				switch (input.LA(1))
				{
				case ASSIGN:
					{
					alt107 = 1;
					}
					break;
				case PLUS_ASSIGN:
					{
					alt107 = 2;
					}
					break;
				case MINUS_ASSIGN:
					{
					alt107 = 3;
					}
					break;
				case STAR_ASSIGN:
					{
					alt107 = 4;
					}
					break;
				case DIV_ASSIGN:
					{
					alt107 = 5;
					}
					break;
				case AND_ASSIGN:
					{
					alt107 = 6;
					}
					break;
				case OR_ASSIGN:
					{
					alt107 = 7;
					}
					break;
				case XOR_ASSIGN:
					{
					alt107 = 8;
					}
					break;
				case MOD_ASSIGN:
					{
					alt107 = 9;
					}
					break;
				case SHIFT_LEFT_ASSIGN:
					{
					alt107 = 10;
					}
					break;
				case SHIFT_RIGHT_ASSIGN:
					{
					alt107 = 11;
					}
					break;
				case BIT_SHIFT_RIGHT_ASSIGN:
					{
					alt107 = 12;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 107, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:793:17: ASSIGN ^
					{
					DebugLocation(793, 23);
					ASSIGN383=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assignmentExpression10587); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ASSIGN383_tree = (CommonTree)adaptor.Create(ASSIGN383);
					root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN383_tree, root_0);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:794:17: PLUS_ASSIGN ^
					{
					DebugLocation(794, 28);
					PLUS_ASSIGN384=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_assignmentExpression10606); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PLUS_ASSIGN384_tree = (CommonTree)adaptor.Create(PLUS_ASSIGN384);
					root_0 = (CommonTree)adaptor.BecomeRoot(PLUS_ASSIGN384_tree, root_0);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:795:17: MINUS_ASSIGN ^
					{
					DebugLocation(795, 29);
					MINUS_ASSIGN385=(IToken)Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_assignmentExpression10625); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS_ASSIGN385_tree = (CommonTree)adaptor.Create(MINUS_ASSIGN385);
					root_0 = (CommonTree)adaptor.BecomeRoot(MINUS_ASSIGN385_tree, root_0);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:796:17: STAR_ASSIGN ^
					{
					DebugLocation(796, 28);
					STAR_ASSIGN386=(IToken)Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_assignmentExpression10644); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STAR_ASSIGN386_tree = (CommonTree)adaptor.Create(STAR_ASSIGN386);
					root_0 = (CommonTree)adaptor.BecomeRoot(STAR_ASSIGN386_tree, root_0);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:797:17: DIV_ASSIGN ^
					{
					DebugLocation(797, 27);
					DIV_ASSIGN387=(IToken)Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_assignmentExpression10663); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DIV_ASSIGN387_tree = (CommonTree)adaptor.Create(DIV_ASSIGN387);
					root_0 = (CommonTree)adaptor.BecomeRoot(DIV_ASSIGN387_tree, root_0);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:798:17: AND_ASSIGN ^
					{
					DebugLocation(798, 27);
					AND_ASSIGN388=(IToken)Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_assignmentExpression10682); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND_ASSIGN388_tree = (CommonTree)adaptor.Create(AND_ASSIGN388);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND_ASSIGN388_tree, root_0);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:799:17: OR_ASSIGN ^
					{
					DebugLocation(799, 26);
					OR_ASSIGN389=(IToken)Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_assignmentExpression10701); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR_ASSIGN389_tree = (CommonTree)adaptor.Create(OR_ASSIGN389);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR_ASSIGN389_tree, root_0);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:800:17: XOR_ASSIGN ^
					{
					DebugLocation(800, 27);
					XOR_ASSIGN390=(IToken)Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_assignmentExpression10720); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR_ASSIGN390_tree = (CommonTree)adaptor.Create(XOR_ASSIGN390);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR_ASSIGN390_tree, root_0);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:801:17: MOD_ASSIGN ^
					{
					DebugLocation(801, 27);
					MOD_ASSIGN391=(IToken)Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_assignmentExpression10739); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MOD_ASSIGN391_tree = (CommonTree)adaptor.Create(MOD_ASSIGN391);
					root_0 = (CommonTree)adaptor.BecomeRoot(MOD_ASSIGN391_tree, root_0);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:802:17: SHIFT_LEFT_ASSIGN ^
					{
					DebugLocation(802, 34);
					SHIFT_LEFT_ASSIGN392=(IToken)Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_assignmentExpression10758); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_LEFT_ASSIGN392_tree = (CommonTree)adaptor.Create(SHIFT_LEFT_ASSIGN392);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT_ASSIGN392_tree, root_0);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:803:17: SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(803, 35);
					SHIFT_RIGHT_ASSIGN393=(IToken)Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_assignmentExpression10777); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_RIGHT_ASSIGN393_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT_ASSIGN393);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT_ASSIGN393_tree, root_0);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:804:17: BIT_SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(804, 39);
					BIT_SHIFT_RIGHT_ASSIGN394=(IToken)Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10796); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BIT_SHIFT_RIGHT_ASSIGN394_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT_ASSIGN394);
					root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT_ASSIGN394_tree, root_0);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(806, 9);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression10818);
				assignmentExpression395=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression395.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 91);
			LeaveRule("assignmentExpression", 91);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 91, assignmentExpression_StartIndex); }

		}
		DebugLocation(807, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:809:1: conditionalExpression : logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 92);
		TraceIn("conditionalExpression", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION397 = default(IToken);
		IToken COLON399 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression398 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression400 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION397_tree = default(CommonTree);
		CommonTree COLON399_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(809, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:810:5: ( logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:810:9: logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(810, 9);
			PushFollow(Follow._logicalOrExpression_in_conditionalExpression10843);
			logicalOrExpression396=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOrExpression396.Tree);
			DebugLocation(810, 29);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:810:29: ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_1 = input.LA(1);

			if ((LA109_1==QUESTION))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:810:30: QUESTION ^ assignmentExpression COLON ! conditionalExpression
				{
				DebugLocation(810, 38);
				QUESTION397=(IToken)Match(input,QUESTION,Follow._QUESTION_in_conditionalExpression10846); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION397_tree = (CommonTree)adaptor.Create(QUESTION397);
				root_0 = (CommonTree)adaptor.BecomeRoot(QUESTION397_tree, root_0);
				}
				DebugLocation(810, 40);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression10849);
				assignmentExpression398=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression398.Tree);
				DebugLocation(810, 66);
				COLON399=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression10851); if (state.failed) return retval;
				DebugLocation(810, 68);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression10854);
				conditionalExpression400=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression400.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 92);
			LeaveRule("conditionalExpression", 92);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 92, conditionalExpression_StartIndex); }

		}
		DebugLocation(811, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:813:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 93);
		TraceIn("logicalOrExpression", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR402 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression403 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR402_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(813, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:814:5: ( logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:814:9: logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(814, 9);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10875);
			logicalAndExpression401=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression401.Tree);
			DebugLocation(814, 30);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:814:30: ( LOGICAL_OR ^ logicalAndExpression )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==LOGICAL_OR))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:814:31: LOGICAL_OR ^ logicalAndExpression
					{
					DebugLocation(814, 41);
					LOGICAL_OR402=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_logicalOrExpression10878); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_OR402_tree = (CommonTree)adaptor.Create(LOGICAL_OR402);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR402_tree, root_0);
					}
					DebugLocation(814, 43);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10881);
					logicalAndExpression403=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression403.Tree);

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 93);
			LeaveRule("logicalOrExpression", 93);
			LeaveRule_logicalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 93, logicalOrExpression_StartIndex); }

		}
		DebugLocation(815, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:817:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 94);
		TraceIn("logicalAndExpression", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND405 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression404 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression406 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND405_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(817, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:818:5: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:818:9: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(818, 9);
			PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10902);
			inclusiveOrExpression404=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression404.Tree);
			DebugLocation(818, 31);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:818:31: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==LOGICAL_AND))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:818:32: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(818, 43);
					LOGICAL_AND405=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_logicalAndExpression10905); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_AND405_tree = (CommonTree)adaptor.Create(LOGICAL_AND405);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND405_tree, root_0);
					}
					DebugLocation(818, 45);
					PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression10908);
					inclusiveOrExpression406=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression406.Tree);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 94);
			LeaveRule("logicalAndExpression", 94);
			LeaveRule_logicalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 94, logicalAndExpression_StartIndex); }

		}
		DebugLocation(819, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:821:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 95);
		TraceIn("inclusiveOrExpression", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken OR408 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression407 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression409 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR408_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(821, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:822:5: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:822:9: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(822, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10929);
			exclusiveOrExpression407=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression407.Tree);
			DebugLocation(822, 31);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:822:31: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==OR))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:822:32: OR ^ exclusiveOrExpression
					{
					DebugLocation(822, 34);
					OR408=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression10932); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR408_tree = (CommonTree)adaptor.Create(OR408);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR408_tree, root_0);
					}
					DebugLocation(822, 36);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression10935);
					exclusiveOrExpression409=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression409.Tree);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 95);
			LeaveRule("inclusiveOrExpression", 95);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 95, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(823, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:825:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 96);
		TraceIn("exclusiveOrExpression", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken XOR411 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression412 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR411_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(825, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:826:5: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:826:9: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(826, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression10956);
			andExpression410=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression410.Tree);
			DebugLocation(826, 23);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:826:23: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==XOR))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:826:24: XOR ^ andExpression
					{
					DebugLocation(826, 27);
					XOR411=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression10959); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR411_tree = (CommonTree)adaptor.Create(XOR411);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR411_tree, root_0);
					}
					DebugLocation(826, 29);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression10962);
					andExpression412=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression412.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 96);
			LeaveRule("exclusiveOrExpression", 96);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 96, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(827, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:829:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 97);
		TraceIn("andExpression", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AND414 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression415 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND414_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(829, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:830:5: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:830:9: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(830, 9);
			PushFollow(Follow._equalityExpression_in_andExpression10983);
			equalityExpression413=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression413.Tree);
			DebugLocation(830, 28);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:830:28: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==AND))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:830:29: AND ^ equalityExpression
					{
					DebugLocation(830, 32);
					AND414=(IToken)Match(input,AND,Follow._AND_in_andExpression10986); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND414_tree = (CommonTree)adaptor.Create(AND414);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND414_tree, root_0);
					}
					DebugLocation(830, 34);
					PushFollow(Follow._equalityExpression_in_andExpression10989);
					equalityExpression415=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression415.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 97);
			LeaveRule("andExpression", 97);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 97, andExpression_StartIndex); }

		}
		DebugLocation(831, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:833:1: equalityExpression : instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 98);
		TraceIn("equalityExpression", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EQUAL417 = default(IToken);
		IToken NOT_EQUAL418 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression416 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression419 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EQUAL417_tree = default(CommonTree);
		CommonTree NOT_EQUAL418_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(833, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:834:5: ( instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:834:9: instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(834, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression11010);
			instanceOfExpression416=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression416.Tree);
			DebugLocation(835, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:835:9: ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==EQUAL||LA116_1==NOT_EQUAL))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:835:13: ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression
					{
					DebugLocation(835, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:835:13: ( EQUAL ^| NOT_EQUAL ^)
					int alt115=2;
					try { DebugEnterSubRule(115);
					try { DebugEnterDecision(115, false);
					int LA115_1 = input.LA(1);

					if ((LA115_1==EQUAL))
					{
						alt115 = 1;
					}
					else if ((LA115_1==NOT_EQUAL))
					{
						alt115 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 115, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(115); }
					switch (alt115)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:835:17: EQUAL ^
						{
						DebugLocation(835, 22);
						EQUAL417=(IToken)Match(input,EQUAL,Follow._EQUAL_in_equalityExpression11029); if (state.failed) return retval;
						if (state.backtracking == 0) {
						EQUAL417_tree = (CommonTree)adaptor.Create(EQUAL417);
						root_0 = (CommonTree)adaptor.BecomeRoot(EQUAL417_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:836:17: NOT_EQUAL ^
						{
						DebugLocation(836, 26);
						NOT_EQUAL418=(IToken)Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_equalityExpression11048); if (state.failed) return retval;
						if (state.backtracking == 0) {
						NOT_EQUAL418_tree = (CommonTree)adaptor.Create(NOT_EQUAL418);
						root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EQUAL418_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(115); }

					DebugLocation(838, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression11078);
					instanceOfExpression419=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression419.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 98);
			LeaveRule("equalityExpression", 98);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 98, equalityExpression_StartIndex); }

		}
		DebugLocation(840, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:842:1: instanceOfExpression : relationalExpression ( INSTANCEOF ^ type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 99);
		TraceIn("instanceOfExpression", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INSTANCEOF421 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INSTANCEOF421_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(842, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:843:5: ( relationalExpression ( INSTANCEOF ^ type )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:843:9: relationalExpression ( INSTANCEOF ^ type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(843, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression11108);
			relationalExpression420=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression420.Tree);
			DebugLocation(843, 30);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:843:30: ( INSTANCEOF ^ type )?
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			int LA117_1 = input.LA(1);

			if ((LA117_1==INSTANCEOF))
			{
				alt117 = 1;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:843:31: INSTANCEOF ^ type
				{
				DebugLocation(843, 41);
				INSTANCEOF421=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression11111); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INSTANCEOF421_tree = (CommonTree)adaptor.Create(INSTANCEOF421);
				root_0 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF421_tree, root_0);
				}
				DebugLocation(843, 43);
				PushFollow(Follow._type_in_instanceOfExpression11114);
				type422=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type422.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 99);
			LeaveRule("instanceOfExpression", 99);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 99, instanceOfExpression_StartIndex); }

		}
		DebugLocation(844, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:846:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 100);
		TraceIn("relationalExpression", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_OR_EQUAL424 = default(IToken);
		IToken GREATER_OR_EQUAL425 = default(IToken);
		IToken LESS_THAN426 = default(IToken);
		IToken GREATER_THAN427 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression428 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_OR_EQUAL424_tree = default(CommonTree);
		CommonTree GREATER_OR_EQUAL425_tree = default(CommonTree);
		CommonTree LESS_THAN426_tree = default(CommonTree);
		CommonTree GREATER_THAN427_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(846, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:847:5: ( shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:847:9: shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(847, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression11135);
			shiftExpression423=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression423.Tree);
			DebugLocation(848, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				try
				{
					alt119 = dfa119.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression
					{
					DebugLocation(848, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^)
					int alt118=4;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					switch (input.LA(1))
					{
					case LESS_OR_EQUAL:
						{
						alt118 = 1;
						}
						break;
					case GREATER_OR_EQUAL:
						{
						alt118 = 2;
						}
						break;
					case LESS_THAN:
						{
						alt118 = 3;
						}
						break;
					case GREATER_THAN:
						{
						alt118 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 118, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:17: LESS_OR_EQUAL ^
						{
						DebugLocation(848, 30);
						LESS_OR_EQUAL424=(IToken)Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_relationalExpression11154); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_OR_EQUAL424_tree = (CommonTree)adaptor.Create(LESS_OR_EQUAL424);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_OR_EQUAL424_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:849:17: GREATER_OR_EQUAL ^
						{
						DebugLocation(849, 33);
						GREATER_OR_EQUAL425=(IToken)Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_relationalExpression11173); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_OR_EQUAL425_tree = (CommonTree)adaptor.Create(GREATER_OR_EQUAL425);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_OR_EQUAL425_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:850:17: LESS_THAN ^
						{
						DebugLocation(850, 26);
						LESS_THAN426=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_relationalExpression11192); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_THAN426_tree = (CommonTree)adaptor.Create(LESS_THAN426);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_THAN426_tree, root_0);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:851:17: GREATER_THAN ^
						{
						DebugLocation(851, 29);
						GREATER_THAN427=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_relationalExpression11211); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_THAN427_tree = (CommonTree)adaptor.Create(GREATER_THAN427);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_THAN427_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(853, 13);
					PushFollow(Follow._shiftExpression_in_relationalExpression11240);
					shiftExpression428=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression428.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 100);
			LeaveRule("relationalExpression", 100);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 100, relationalExpression_StartIndex); }

		}
		DebugLocation(855, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:857:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 101);
		TraceIn("shiftExpression", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken BIT_SHIFT_RIGHT430 = default(IToken);
		IToken SHIFT_RIGHT431 = default(IToken);
		IToken SHIFT_LEFT432 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression429 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression433 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree BIT_SHIFT_RIGHT430_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT431_tree = default(CommonTree);
		CommonTree SHIFT_LEFT432_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(857, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:858:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:858:9: additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(858, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression11274);
			additiveExpression429=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression429.Tree);
			DebugLocation(859, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:859:9: ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==BIT_SHIFT_RIGHT||LA121_1==SHIFT_LEFT||LA121_1==SHIFT_RIGHT))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:859:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression
					{
					DebugLocation(859, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:859:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^)
					int alt120=3;
					try { DebugEnterSubRule(120);
					try { DebugEnterDecision(120, false);
					switch (input.LA(1))
					{
					case BIT_SHIFT_RIGHT:
						{
						alt120 = 1;
						}
						break;
					case SHIFT_RIGHT:
						{
						alt120 = 2;
						}
						break;
					case SHIFT_LEFT:
						{
						alt120 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:859:17: BIT_SHIFT_RIGHT ^
						{
						DebugLocation(859, 32);
						BIT_SHIFT_RIGHT430=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_shiftExpression11292); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BIT_SHIFT_RIGHT430_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT430);
						root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT430_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:860:17: SHIFT_RIGHT ^
						{
						DebugLocation(860, 28);
						SHIFT_RIGHT431=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_shiftExpression11311); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_RIGHT431_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT431);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT431_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:861:17: SHIFT_LEFT ^
						{
						DebugLocation(861, 27);
						SHIFT_LEFT432=(IToken)Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_shiftExpression11330); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_LEFT432_tree = (CommonTree)adaptor.Create(SHIFT_LEFT432);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT432_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(120); }

					DebugLocation(863, 13);
					PushFollow(Follow._additiveExpression_in_shiftExpression11359);
					additiveExpression433=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression433.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 101);
			LeaveRule("shiftExpression", 101);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 101, shiftExpression_StartIndex); }

		}
		DebugLocation(865, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:867:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 102);
		TraceIn("additiveExpression", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS435 = default(IToken);
		IToken MINUS436 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression434 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression437 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS435_tree = default(CommonTree);
		CommonTree MINUS436_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(867, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:868:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:868:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(868, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression11389);
			multiplicativeExpression434=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression434.Tree);
			DebugLocation(869, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				try
				{
					alt123 = dfa123.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:13: ( PLUS ^| MINUS ^) multiplicativeExpression
					{
					DebugLocation(869, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:13: ( PLUS ^| MINUS ^)
					int alt122=2;
					try { DebugEnterSubRule(122);
					try { DebugEnterDecision(122, false);
					int LA122_1 = input.LA(1);

					if ((LA122_1==PLUS))
					{
						alt122 = 1;
					}
					else if ((LA122_1==MINUS))
					{
						alt122 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(122); }
					switch (alt122)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:17: PLUS ^
						{
						DebugLocation(869, 21);
						PLUS435=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression11407); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS435_tree = (CommonTree)adaptor.Create(PLUS435);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS435_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:870:17: MINUS ^
						{
						DebugLocation(870, 22);
						MINUS436=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression11426); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS436_tree = (CommonTree)adaptor.Create(MINUS436);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS436_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(122); }

					DebugLocation(872, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression11455);
					multiplicativeExpression437=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression437.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 102);
			LeaveRule("additiveExpression", 102);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 102, additiveExpression_StartIndex); }

		}
		DebugLocation(874, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:876:1: multiplicativeExpression : unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 103);
		TraceIn("multiplicativeExpression", 103);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken STAR439 = default(IToken);
		IToken DIV440 = default(IToken);
		IToken MOD441 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression442 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STAR439_tree = default(CommonTree);
		CommonTree DIV440_tree = default(CommonTree);
		CommonTree MOD441_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(876, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:877:5: ( unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:877:9: unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(877, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression11485);
			unaryExpression438=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression438.Tree);
			DebugLocation(878, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:878:9: ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==DIV||LA125_1==MOD||LA125_1==STAR))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:878:13: ( STAR ^| DIV ^| MOD ^) unaryExpression
					{
					DebugLocation(878, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:878:13: ( STAR ^| DIV ^| MOD ^)
					int alt124=3;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					switch (input.LA(1))
					{
					case STAR:
						{
						alt124 = 1;
						}
						break;
					case DIV:
						{
						alt124 = 2;
						}
						break;
					case MOD:
						{
						alt124 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:878:17: STAR ^
						{
						DebugLocation(878, 21);
						STAR439=(IToken)Match(input,STAR,Follow._STAR_in_multiplicativeExpression11504); if (state.failed) return retval;
						if (state.backtracking == 0) {
						STAR439_tree = (CommonTree)adaptor.Create(STAR439);
						root_0 = (CommonTree)adaptor.BecomeRoot(STAR439_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:879:17: DIV ^
						{
						DebugLocation(879, 20);
						DIV440=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression11523); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DIV440_tree = (CommonTree)adaptor.Create(DIV440);
						root_0 = (CommonTree)adaptor.BecomeRoot(DIV440_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:880:17: MOD ^
						{
						DebugLocation(880, 20);
						MOD441=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression11542); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MOD441_tree = (CommonTree)adaptor.Create(MOD441);
						root_0 = (CommonTree)adaptor.BecomeRoot(MOD441_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(124); }

					DebugLocation(882, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression11571);
					unaryExpression442=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression442.Tree);

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 103);
			LeaveRule("multiplicativeExpression", 103);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 103, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(884, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:886:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 104);
		TraceIn("unaryExpression", 104);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS443 = default(IToken);
		IToken MINUS445 = default(IToken);
		IToken INC447 = default(IToken);
		IToken DEC449 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression444 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression446 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression450 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus451 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS443_tree = default(CommonTree);
		CommonTree MINUS445_tree = default(CommonTree);
		CommonTree INC447_tree = default(CommonTree);
		CommonTree DEC449_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(886, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:887:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
			int alt126=5;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt126 = 1;
				}
				break;
			case MINUS:
				{
				alt126 = 2;
				}
				break;
			case INC:
				{
				alt126 = 3;
				}
				break;
			case DEC:
				{
				alt126 = 4;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt126 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:887:9: PLUS unaryExpression
				{
				DebugLocation(887, 9);
				PLUS443=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression11605); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(PLUS443);

				DebugLocation(887, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression11607);
				unaryExpression444=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression444.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 887:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
				{
					DebugLocation(887, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:887:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(887, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_PLUS, PLUS443, "UNARY_PLUS"), root_1);

					DebugLocation(887, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:888:9: MINUS unaryExpression
				{
				DebugLocation(888, 9);
				MINUS445=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression11634); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS445);

				DebugLocation(888, 15);
				PushFollow(Follow._unaryExpression_in_unaryExpression11636);
				unaryExpression446=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression446.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 888:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
				{
					DebugLocation(888, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:888:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(888, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_MINUS, MINUS445, "UNARY_MINUS"), root_1);

					DebugLocation(888, 78);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:889:9: INC postfixedExpression
				{
				DebugLocation(889, 9);
				INC447=(IToken)Match(input,INC,Follow._INC_in_unaryExpression11662); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC447);

				DebugLocation(889, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11664);
				postfixedExpression448=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression448.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 889:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
				{
					DebugLocation(889, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:889:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(889, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_INC, INC447, "PRE_INC"), root_1);

					DebugLocation(889, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:890:9: DEC postfixedExpression
				{
				DebugLocation(890, 9);
				DEC449=(IToken)Match(input,DEC,Follow._DEC_in_unaryExpression11688); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC449);

				DebugLocation(890, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11690);
				postfixedExpression450=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression450.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 890:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
				{
					DebugLocation(890, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:890:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(890, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_DEC, DEC449, "PRE_DEC"), root_1);

					DebugLocation(890, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:891:9: unaryExpressionNotPlusMinus
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(891, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression11714);
				unaryExpressionNotPlusMinus451=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus451.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 104);
			LeaveRule("unaryExpression", 104);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 104, unaryExpression_StartIndex); }

		}
		DebugLocation(892, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:894:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 105);
		TraceIn("unaryExpressionNotPlusMinus", 105);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NOT452 = default(IToken);
		IToken LOGICAL_NOT454 = default(IToken);
		IToken LPAREN456 = default(IToken);
		IToken RPAREN458 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression453 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression455 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression460 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NOT452_tree = default(CommonTree);
		CommonTree LOGICAL_NOT454_tree = default(CommonTree);
		CommonTree LPAREN456_tree = default(CommonTree);
		CommonTree RPAREN458_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LOGICAL_NOT=new RewriteRuleITokenStream(adaptor,"token LOGICAL_NOT");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(894, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:895:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
			int alt127=4;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				alt127 = 1;
				}
				break;
			case LOGICAL_NOT:
				{
				alt127 = 2;
				}
				break;
			case LPAREN:
				{
				int LA127_2 = input.LA(2);

				if ((EvaluatePredicate(synpred200_Java_fragment)))
				{
					alt127 = 3;
				}
				else if ((true))
				{
					alt127 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt127 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:895:9: NOT unaryExpression
				{
				DebugLocation(895, 9);
				NOT452=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpressionNotPlusMinus11733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT452);

				DebugLocation(895, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11735);
				unaryExpression453=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression453.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression, NOT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 895:57: -> ^( NOT unaryExpression )
				{
					DebugLocation(895, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:895:61: ^( NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(895, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NOT.NextNode(), root_1);

					DebugLocation(895, 67);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:896:9: LOGICAL_NOT unaryExpression
				{
				DebugLocation(896, 9);
				LOGICAL_NOT454=(IToken)Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_unaryExpressionNotPlusMinus11782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGICAL_NOT.Add(LOGICAL_NOT454);

				DebugLocation(896, 21);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11784);
				unaryExpression455=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression455.Tree);


				{
				// AST REWRITE
				// elements: LOGICAL_NOT, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 896:57: -> ^( LOGICAL_NOT unaryExpression )
				{
					DebugLocation(896, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:896:61: ^( LOGICAL_NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(896, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_LOGICAL_NOT.NextNode(), root_1);

					DebugLocation(896, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:897:9: LPAREN type RPAREN unaryExpression
				{
				DebugLocation(897, 9);
				LPAREN456=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpressionNotPlusMinus11823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN456);

				DebugLocation(897, 16);
				PushFollow(Follow._type_in_unaryExpressionNotPlusMinus11825);
				type457=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type457.Tree);
				DebugLocation(897, 21);
				RPAREN458=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpressionNotPlusMinus11827); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN458);

				DebugLocation(897, 28);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11829);
				unaryExpression459=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression459.Tree);


				{
				// AST REWRITE
				// elements: type, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 897:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
				{
					DebugLocation(897, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:897:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(897, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, LPAREN456, "CAST_EXPR"), root_1);

					DebugLocation(897, 95);
					adaptor.AddChild(root_1, stream_type.NextTree());
					DebugLocation(897, 100);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:898:9: postfixedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(898, 9);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionNotPlusMinus11864);
				postfixedExpression460=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixedExpression460.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 105);
			LeaveRule("unaryExpressionNotPlusMinus", 105);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 105, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(899, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_postfixedExpression();
	partial void LeaveRule_postfixedExpression();
	// $ANTLR start "postfixedExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:901:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
	[GrammarRule("postfixedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression()
	{
		EnterRule_postfixedExpression();
		EnterRule("postfixedExpression", 106);
		TraceIn("postfixedExpression", 106);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken IDENT463 = default(IToken);
		IToken THIS465 = default(IToken);
		IToken SUPER467 = default(IToken);
		IToken IDENT468 = default(IToken);
		IToken LBRACK471 = default(IToken);
		IToken RBRACK473 = default(IToken);
		IToken INC474 = default(IToken);
		IToken DEC475 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression461 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression472 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree IDENT463_tree = default(CommonTree);
		CommonTree THIS465_tree = default(CommonTree);
		CommonTree SUPER467_tree = default(CommonTree);
		CommonTree IDENT468_tree = default(CommonTree);
		CommonTree LBRACK471_tree = default(CommonTree);
		CommonTree RBRACK473_tree = default(CommonTree);
		CommonTree INC474_tree = default(CommonTree);
		CommonTree DEC475_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "postfixedExpression");
		DebugLocation(901, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:903:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:903:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			{
			DebugLocation(903, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:903:9: ( primaryExpression -> primaryExpression )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:903:13: primaryExpression
			{
			DebugLocation(903, 13);
			PushFollow(Follow._primaryExpression_in_postfixedExpression11900);
			primaryExpression461=primaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExpression.Add(primaryExpression461.Tree);


			{
			// AST REWRITE
			// elements: primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 903:53: -> primaryExpression
			{
				DebugLocation(903, 57);
				adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(906, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:906:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=3;
				try { DebugEnterDecision(132, false);
				int LA132_1 = input.LA(1);

				if ((LA132_1==DOT))
				{
					alt132 = 1;
				}
				else if ((LA132_1==LBRACK))
				{
					alt132 = 2;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:906:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					{
					DebugLocation(906, 21);
					outerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression11962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(outerDot);

					DebugLocation(907, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					int alt131=5;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					switch (input.LA(1))
					{
					case IDENT:
					case LESS_THAN:
						{
						alt131 = 1;
						}
						break;
					case THIS:
						{
						alt131 = 2;
						}
						break;
					case SUPER:
						{
						int LA131_2 = input.LA(2);

						if ((LA131_2==DOT))
						{
							alt131 = 4;
						}
						else if ((LA131_2==LPAREN))
						{
							alt131 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 131, 3, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case NEW:
						{
						alt131 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						{
						DebugLocation(907, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:21: ( genericTypeArgumentListSimplified )? IDENT
						{
						DebugLocation(907, 21);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:21: ( genericTypeArgumentListSimplified )?
						int alt128=2;
						try { DebugEnterSubRule(128);
						try { DebugEnterDecision(128, false);
						int LA128_1 = input.LA(1);

						if ((LA128_1==LESS_THAN))
						{
							alt128 = 1;
						}
						} finally { DebugExitDecision(128); }
						switch (alt128)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:907:21: genericTypeArgumentListSimplified
							{
							DebugLocation(907, 21);
							PushFollow(Follow._genericTypeArgumentListSimplified_in_postfixedExpression12012);
							genericTypeArgumentListSimplified462=genericTypeArgumentListSimplified();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified462.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(128); }

						DebugLocation(909, 21);
						IDENT463=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12094); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT463);



						{
						// AST REWRITE
						// elements: DOT, IDENT, postfixedExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 909:53: -> ^( DOT $postfixedExpression IDENT )
						{
							DebugLocation(909, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:909:57: ^( DOT $postfixedExpression IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(909, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(909, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(909, 84);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(911, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						int alt129=2;
						try { DebugEnterSubRule(129);
						try { DebugEnterDecision(129, false);
						try
						{
							alt129 = dfa129.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(129); }
						switch (alt129)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:21: arguments
							{
							DebugLocation(911, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12173);
							arguments464=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments464.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, arguments, genericTypeArgumentListSimplified
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 911:52: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
							{
								DebugLocation(911, 56);
								// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:56: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(911, 58);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(911, 71);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(911, 91);
								// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:91: ( genericTypeArgumentListSimplified )?
								if (stream_genericTypeArgumentListSimplified.HasNext)
								{
									DebugLocation(911, 91);
									adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

								}
								stream_genericTypeArgumentListSimplified.Reset();
								DebugLocation(911, 126);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(129); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:913:17: THIS
						{
						DebugLocation(913, 17);
						THIS465=(IToken)Match(input,THIS,Follow._THIS_in_postfixedExpression12246); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_THIS.Add(THIS465);



						{
						// AST REWRITE
						// elements: postfixedExpression, THIS, DOT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 913:53: -> ^( DOT $postfixedExpression THIS )
						{
							DebugLocation(913, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:913:57: ^( DOT $postfixedExpression THIS )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(913, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(913, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(913, 84);
							adaptor.AddChild(root_1, stream_THIS.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:914:17: Super= SUPER arguments
						{
						DebugLocation(914, 22);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12309); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(914, 29);
						PushFollow(Follow._arguments_in_postfixedExpression12311);
						arguments466=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments466.Tree);


						{
						// AST REWRITE
						// elements: postfixedExpression, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 914:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
						{
							DebugLocation(914, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:914:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(914, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(914, 121);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(914, 141);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:915:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						{
						DebugLocation(915, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:915:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:915:21: SUPER innerDot= DOT IDENT
						{
						DebugLocation(915, 21);
						SUPER467=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12364); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER467);

						DebugLocation(915, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression12368); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(915, 40);
						IDENT468=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12370); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT468);



						{
						// AST REWRITE
						// elements: SUPER, innerDot, IDENT, outerDot, postfixedExpression
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 915:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
						{
							DebugLocation(915, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:915:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(915, 60);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_1);

							DebugLocation(915, 69);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:915:69: ^( $outerDot $postfixedExpression SUPER )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(915, 72);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_2);

							DebugLocation(915, 82);
							adaptor.AddChild(root_2, stream_retval.NextTree());
							DebugLocation(915, 102);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(915, 109);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(917, 17);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:917:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						int alt130=2;
						try { DebugEnterSubRule(130);
						try { DebugEnterDecision(130, false);
						try
						{
							alt130 = dfa130.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(130); }
						switch (alt130)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:917:21: arguments
							{
							DebugLocation(917, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12437);
							arguments469=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments469.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 917:53: -> ^( METHOD_CALL $postfixedExpression arguments )
							{
								DebugLocation(917, 57);
								// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:917:57: ^( METHOD_CALL $postfixedExpression arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(917, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(917, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(917, 92);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(130); }


						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:919:17: innerNewExpression
						{
						DebugLocation(919, 17);
						PushFollow(Follow._innerNewExpression_in_postfixedExpression12508);
						innerNewExpression470=innerNewExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression470.Tree);


						{
						// AST REWRITE
						// elements: DOT, innerNewExpression, postfixedExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 919:53: -> ^( DOT $postfixedExpression innerNewExpression )
						{
							DebugLocation(919, 57);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:919:57: ^( DOT $postfixedExpression innerNewExpression )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(919, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(919, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(919, 84);
							adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(131); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:921:13: LBRACK expression RBRACK
					{
					DebugLocation(921, 13);
					LBRACK471=(IToken)Match(input,LBRACK,Follow._LBRACK_in_postfixedExpression12565); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LBRACK.Add(LBRACK471);

					DebugLocation(921, 20);
					PushFollow(Follow._expression_in_postfixedExpression12567);
					expression472=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression472.Tree);
					DebugLocation(921, 31);
					RBRACK473=(IToken)Match(input,RBRACK,Follow._RBRACK_in_postfixedExpression12569); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RBRACK.Add(RBRACK473);



					{
					// AST REWRITE
					// elements: postfixedExpression, expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 921:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
					{
						DebugLocation(921, 57);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:921:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(921, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

						DebugLocation(921, 81);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(921, 101);
						adaptor.AddChild(root_1, stream_expression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(924, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:924:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			int alt133=3;
			try { DebugEnterSubRule(133);
			try { DebugEnterDecision(133, false);
			try
			{
				alt133 = dfa133.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:924:13: INC
				{
				DebugLocation(924, 13);
				INC474=(IToken)Match(input,INC,Follow._INC_in_postfixedExpression12630); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC474);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 924:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
				{
					DebugLocation(924, 20);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:924:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(924, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_INC, INC474, "POST_INC"), root_1);

					DebugLocation(924, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:925:13: DEC
				{
				DebugLocation(925, 13);
				DEC475=(IToken)Match(input,DEC,Follow._DEC_in_postfixedExpression12654); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC475);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 925:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
				{
					DebugLocation(925, 20);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:925:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(925, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_DEC, DEC475, "POST_DEC"), root_1);

					DebugLocation(925, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixedExpression", 106);
			LeaveRule("postfixedExpression", 106);
			LeaveRule_postfixedExpression();
			if (state.backtracking > 0) { Memoize(input, 106, postfixedExpression_StartIndex); }

		}
		DebugLocation(927, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixedExpression"); }
		return retval;

	}
	// $ANTLR end "postfixedExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:929:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | genericTypeArgumentListSimplified DOT CLASS | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 107);
		TraceIn("primaryExpression", 107);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SUPER481 = default(IToken);
		IToken DOT483 = default(IToken);
		IToken IDENT484 = default(IToken);
		IToken IDENT486 = default(IToken);
		IToken THIS488 = default(IToken);
		IToken THIS490 = default(IToken);
		IToken SUPER492 = default(IToken);
		IToken SUPER494 = default(IToken);
		IToken DOT495 = default(IToken);
		IToken IDENT496 = default(IToken);
		IToken DOT500 = default(IToken);
		IToken CLASS501 = default(IToken);
		IToken DOT503 = default(IToken);
		IToken CLASS504 = default(IToken);
		IToken VOID505 = default(IToken);
		IToken DOT506 = default(IToken);
		IToken CLASS507 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newExpression478 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments485 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments487 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments489 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified502 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SUPER481_tree = default(CommonTree);
		CommonTree DOT483_tree = default(CommonTree);
		CommonTree IDENT484_tree = default(CommonTree);
		CommonTree IDENT486_tree = default(CommonTree);
		CommonTree THIS488_tree = default(CommonTree);
		CommonTree THIS490_tree = default(CommonTree);
		CommonTree SUPER492_tree = default(CommonTree);
		CommonTree SUPER494_tree = default(CommonTree);
		CommonTree DOT495_tree = default(CommonTree);
		CommonTree IDENT496_tree = default(CommonTree);
		CommonTree DOT500_tree = default(CommonTree);
		CommonTree CLASS501_tree = default(CommonTree);
		CommonTree DOT503_tree = default(CommonTree);
		CommonTree CLASS504_tree = default(CommonTree);
		CommonTree VOID505_tree = default(CommonTree);
		CommonTree DOT506_tree = default(CommonTree);
		CommonTree CLASS507_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(929, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:930:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | genericTypeArgumentListSimplified DOT CLASS | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
			int alt139=11;
			try { DebugEnterDecision(139, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt139 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt139 = 2;
				}
				break;
			case NEW:
				{
				alt139 = 3;
				}
				break;
			case IDENT:
				{
				alt139 = 4;
				}
				break;
			case LESS_THAN:
				{
				int LA139_2 = input.LA(2);

				if ((EvaluatePredicate(synpred219_Java_fragment)))
				{
					alt139 = 5;
				}
				else if ((EvaluatePredicate(synpred227_Java_fragment)))
				{
					alt139 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case THIS:
				{
				alt139 = 6;
				}
				break;
			case SUPER:
				{
				int LA139_2 = input.LA(2);

				if ((EvaluatePredicate(synpred222_Java_fragment)))
				{
					alt139 = 7;
				}
				else if ((EvaluatePredicate(synpred224_Java_fragment)))
				{
					alt139 = 8;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt139 = 9;
				}
				break;
			case VOID:
				{
				alt139 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:930:9: parenthesizedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(930, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression12702);
				parenthesizedExpression476=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parenthesizedExpression476.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:931:9: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(931, 9);
				PushFollow(Follow._literal_in_primaryExpression12712);
				literal477=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal477.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:932:9: newExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(932, 9);
				PushFollow(Follow._newExpression_in_primaryExpression12722);
				newExpression478=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression478.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:933:9: qualifiedIdentExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(933, 9);
				PushFollow(Follow._qualifiedIdentExpression_in_primaryExpression12732);
				qualifiedIdentExpression479=qualifiedIdentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentExpression479.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:934:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				{
				DebugLocation(934, 9);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_primaryExpression12742);
				genericTypeArgumentListSimplified480=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified480.Tree);
				DebugLocation(935, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:935:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				int alt135=3;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				switch (input.LA(1))
				{
				case SUPER:
					{
					alt135 = 1;
					}
					break;
				case IDENT:
					{
					alt135 = 2;
					}
					break;
				case THIS:
					{
					alt135 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 135, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:935:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(935, 13);
					SUPER481=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression12757); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(SUPER481);

					DebugLocation(936, 13);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:936:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt134=2;
					try { DebugEnterSubRule(134);
					try { DebugEnterDecision(134, false);
					int LA134_1 = input.LA(1);

					if ((LA134_1==LPAREN))
					{
						alt134 = 1;
					}
					else if ((LA134_1==DOT))
					{
						alt134 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:936:17: arguments
						{
						DebugLocation(936, 17);
						PushFollow(Follow._arguments_in_primaryExpression12775);
						arguments482=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments482.Tree);


						{
						// AST REWRITE
						// elements: genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 936:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(936, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:936:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(936, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER481, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(936, 120);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(936, 154);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:937:17: DOT IDENT arguments
						{
						DebugLocation(937, 17);
						DOT483=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression12835); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(DOT483);

						DebugLocation(937, 21);
						IDENT484=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12837); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT484);

						DebugLocation(937, 27);
						PushFollow(Follow._arguments_in_primaryExpression12839);
						arguments485=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments485.Tree);


						{
						// AST REWRITE
						// elements: SUPER, DOT, arguments, IDENT, genericTypeArgumentListSimplified
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 937:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(937, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:937:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(937, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(937, 75);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:937:75: ^( DOT SUPER IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(937, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(937, 81);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());
							DebugLocation(937, 87);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(937, 94);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(937, 128);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(134); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:939:13: IDENT arguments
					{
					DebugLocation(939, 13);
					IDENT486=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12906); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT486);

					DebugLocation(939, 19);
					PushFollow(Follow._arguments_in_primaryExpression12908);
					arguments487=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments487.Tree);


					{
					// AST REWRITE
					// elements: IDENT, genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 939:55: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(939, 59);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:939:59: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(939, 61);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(939, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(939, 79);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(939, 113);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:940:13: THIS arguments
					{
					DebugLocation(940, 13);
					THIS488=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression12961); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS488);

					DebugLocation(940, 18);
					PushFollow(Follow._arguments_in_primaryExpression12963);
					arguments489=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments489.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 940:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(940, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:940:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(940, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS488, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(940, 117);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(940, 151);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:943:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				{
				DebugLocation(943, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:943:9: ( THIS -> THIS )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:943:13: THIS
				{
				DebugLocation(943, 13);
				THIS490=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression13036); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THIS.Add(THIS490);



				{
				// AST REWRITE
				// elements: THIS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 943:57: -> THIS
				{
					DebugLocation(943, 61);
					adaptor.AddChild(root_0, stream_THIS.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(945, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:945:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, false);
				try
				{
					alt136 = dfa136.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:945:13: arguments
					{
					DebugLocation(945, 13);
					PushFollow(Follow._arguments_in_primaryExpression13104);
					arguments491=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments491.Tree);


					{
					// AST REWRITE
					// elements: arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 945:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
					{
						DebugLocation(945, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:945:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(945, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS490, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(945, 117);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(136); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:947:9: SUPER arguments
				{
				DebugLocation(947, 9);
				SUPER492=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13169); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER492);

				DebugLocation(947, 15);
				PushFollow(Follow._arguments_in_primaryExpression13171);
				arguments493=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments493.Tree);


				{
				// AST REWRITE
				// elements: arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 947:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
				{
					DebugLocation(947, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:947:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(947, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER492, "SUPER_CONSTRUCTOR_CALL"), root_1);

					DebugLocation(947, 120);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				{
				DebugLocation(948, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:9: ( SUPER DOT IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:13: SUPER DOT IDENT
				{
				DebugLocation(948, 13);
				SUPER494=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13227); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER494);

				DebugLocation(948, 19);
				DOT495=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13229); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT495);

				DebugLocation(948, 23);
				IDENT496=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression13231); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT496);


				}

				DebugLocation(950, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				try
				{
					alt137 = dfa137.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:13: arguments
					{
					DebugLocation(950, 13);
					PushFollow(Follow._arguments_in_primaryExpression13255);
					arguments497=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments497.Tree);


					{
					// AST REWRITE
					// elements: DOT, SUPER, arguments, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 950:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
					{
						DebugLocation(950, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(950, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(950, 75);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:75: ^( DOT SUPER IDENT )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(950, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

						DebugLocation(950, 81);
						adaptor.AddChild(root_2, stream_SUPER.NextNode());
						DebugLocation(950, 87);
						adaptor.AddChild(root_2, stream_IDENT.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(950, 94);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:951:57: 
					{

					{
					// AST REWRITE
					// elements: DOT, IDENT, SUPER
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 951:57: -> ^( DOT SUPER IDENT )
					{
						DebugLocation(951, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:951:61: ^( DOT SUPER IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(951, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(951, 67);
						adaptor.AddChild(root_1, stream_SUPER.NextNode());
						DebugLocation(951, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(137); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:953:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
				{
				DebugLocation(953, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:953:9: ( primitiveType -> primitiveType )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:953:13: primitiveType
				{
				DebugLocation(953, 13);
				PushFollow(Follow._primitiveType_in_primaryExpression13397);
				primitiveType498=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType498.Tree);


				{
				// AST REWRITE
				// elements: primitiveType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 953:57: -> primitiveType
				{
					DebugLocation(953, 61);
					adaptor.AddChild(root_0, stream_primitiveType.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(955, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:955:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_1 = input.LA(1);

					if ((LA138_1==LBRACK))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch ( alt138 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:955:13: arrayDeclarator
						{
						DebugLocation(955, 13);
						PushFollow(Follow._arrayDeclarator_in_primaryExpression13456);
						arrayDeclarator499=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator499.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 955:57: -> ^( arrayDeclarator $primaryExpression)
						{
							DebugLocation(955, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:955:61: ^( arrayDeclarator $primaryExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(955, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(955, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						goto loop138;
					}
				}

				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(957, 9);
				DOT500=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13519); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT500);

				DebugLocation(957, 13);
				CLASS501=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13521); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS501);



				{
				// AST REWRITE
				// elements: primaryExpression, CLASS, DOT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 957:57: -> ^( DOT $primaryExpression CLASS )
				{
					DebugLocation(957, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:957:61: ^( DOT $primaryExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(957, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(957, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(957, 86);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:958:8: genericTypeArgumentListSimplified DOT CLASS
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(958, 8);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_primaryExpression13580);
				genericTypeArgumentListSimplified502=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentListSimplified502.Tree);
				DebugLocation(958, 42);
				DOT503=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT503_tree = (CommonTree)adaptor.Create(DOT503);
				adaptor.AddChild(root_0, DOT503_tree);
				}
				DebugLocation(958, 46);
				CLASS504=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLASS504_tree = (CommonTree)adaptor.Create(CLASS504);
				adaptor.AddChild(root_0, CLASS504_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:959:9: VOID DOT CLASS
				{
				DebugLocation(959, 9);
				VOID505=(IToken)Match(input,VOID,Follow._VOID_in_primaryExpression13595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VOID.Add(VOID505);

				DebugLocation(959, 14);
				DOT506=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT506);

				DebugLocation(959, 18);
				CLASS507=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13599); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS507);



				{
				// AST REWRITE
				// elements: CLASS, DOT, VOID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 959:57: -> ^( DOT VOID CLASS )
				{
					DebugLocation(959, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:959:61: ^( DOT VOID CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(959, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(959, 67);
					adaptor.AddChild(root_1, stream_VOID.NextNode());
					DebugLocation(959, 72);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 107);
			LeaveRule("primaryExpression", 107);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 107, primaryExpression_StartIndex); }

		}
		DebugLocation(960, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_qualifiedIdentExpression();
	partial void LeaveRule_qualifiedIdentExpression();
	// $ANTLR start "qualifiedIdentExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:962:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
	[GrammarRule("qualifiedIdentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression()
	{
		EnterRule_qualifiedIdentExpression();
		EnterRule("qualifiedIdentExpression", 108);
		TraceIn("qualifiedIdentExpression", 108);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken DOT510 = default(IToken);
		IToken CLASS511 = default(IToken);
		IToken CLASS514 = default(IToken);
		IToken SUPER517 = default(IToken);
		IToken IDENT518 = default(IToken);
		IToken IDENT520 = default(IToken);
		IToken THIS522 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier508 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments512 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block513 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression524 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree DOT510_tree = default(CommonTree);
		CommonTree CLASS511_tree = default(CommonTree);
		CommonTree CLASS514_tree = default(CommonTree);
		CommonTree SUPER517_tree = default(CommonTree);
		CommonTree IDENT518_tree = default(CommonTree);
		CommonTree IDENT520_tree = default(CommonTree);
		CommonTree THIS522_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentExpression");
		DebugLocation(962, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:964:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:964:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			{
			DebugLocation(964, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:964:9: ( qualifiedIdentifier -> qualifiedIdentifier )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:964:13: qualifiedIdentifier
			{
			DebugLocation(964, 13);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentExpression13679);
			qualifiedIdentifier508=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentifier.Add(qualifiedIdentifier508.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 964:61: -> qualifiedIdentifier
			{
				DebugLocation(964, 65);
				adaptor.AddChild(root_0, stream_qualifiedIdentifier.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(967, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			int alt144=4;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			try
			{
				alt144 = dfa144.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				{
				DebugLocation(967, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
				int cnt140=0;
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					int LA140_1 = input.LA(1);

					if ((LA140_1==LBRACK))
					{
						alt140 = 1;
					}


					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:17: arrayDeclarator
						{
						DebugLocation(967, 17);
						PushFollow(Follow._arrayDeclarator_in_qualifiedIdentExpression13749);
						arrayDeclarator509=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator509.Tree);


						{
						// AST REWRITE
						// elements: qualifiedIdentExpression, arrayDeclarator
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 967:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
						{
							DebugLocation(967, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:61: ^( arrayDeclarator $qualifiedIdentExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(967, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(967, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						if (cnt140 >= 1)
							goto loop140;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee140 = new EarlyExitException( 140, input );
						DebugRecognitionException(eee140);
						throw eee140;
					}
					cnt140++;
				}
				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(969, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:969:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:969:17: DOT CLASS
				{
				DebugLocation(969, 17);
				DOT510=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13817); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT510);

				DebugLocation(969, 21);
				CLASS511=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13819); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS511);



				{
				// AST REWRITE
				// elements: DOT, CLASS, qualifiedIdentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 969:57: -> ^( DOT $qualifiedIdentExpression CLASS )
				{
					DebugLocation(969, 61);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:969:61: ^( DOT $qualifiedIdentExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(969, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(969, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(969, 93);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:13: arguments ( block )?
				{
				DebugLocation(971, 13);
				PushFollow(Follow._arguments_in_qualifiedIdentExpression13889);
				arguments512=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments512.Tree);
				DebugLocation(971, 23);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: ( block )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				try
				{
					alt141 = dfa141.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: block
					{
					DebugLocation(971, 23);
					PushFollow(Follow._block_in_qualifiedIdentExpression13891);
					block513=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_block.Add(block513.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(141); }



				{
				// AST REWRITE
				// elements: qualifiedIdentifier, arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 971:63: -> ^( METHOD_CALL qualifiedIdentifier arguments )
				{
					DebugLocation(971, 67);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:67: ^( METHOD_CALL qualifiedIdentifier arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(971, 69);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(971, 81);
					adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
					DebugLocation(971, 101);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:972:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				{
				DebugLocation(972, 21);
				outerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13952); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(outerDot);

				DebugLocation(973, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:973:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				int alt143=5;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, false);
				switch (input.LA(1))
				{
				case CLASS:
					{
					alt143 = 1;
					}
					break;
				case LESS_THAN:
					{
					alt143 = 2;
					}
					break;
				case THIS:
					{
					alt143 = 3;
					}
					break;
				case SUPER:
					{
					alt143 = 4;
					}
					break;
				case NEW:
					{
					alt143 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:973:17: CLASS
					{
					DebugLocation(973, 17);
					CLASS514=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13970); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLASS.Add(CLASS514);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 973:57: -> ^( DOT qualifiedIdentifier CLASS )
					{
						DebugLocation(973, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:973:61: ^( DOT qualifiedIdentifier CLASS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(973, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(973, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(973, 87);
						adaptor.AddChild(root_1, stream_CLASS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:974:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(974, 17);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_qualifiedIdentExpression14033);
					genericTypeArgumentListSimplified515=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified515.Tree);
					DebugLocation(975, 17);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:975:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt142=3;
					try { DebugEnterSubRule(142);
					try { DebugEnterDecision(142, false);
					int LA142_1 = input.LA(1);

					if ((LA142_1==SUPER))
					{
						int LA142_2 = input.LA(2);

						if ((LA142_2==DOT))
						{
							alt142 = 2;
						}
						else if ((LA142_2==LPAREN))
						{
							alt142 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 142, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA142_1==IDENT))
					{
						alt142 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(142); }
					switch (alt142)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:975:21: Super= SUPER arguments
						{
						DebugLocation(975, 26);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14058); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(975, 33);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14060);
						arguments516=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments516.Tree);


						{
						// AST REWRITE
						// elements: qualifiedIdentifier, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 975:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(975, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:975:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(975, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(975, 120);
							adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
							DebugLocation(975, 140);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(975, 174);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:976:21: SUPER innerDot= DOT IDENT arguments
						{
						DebugLocation(976, 21);
						SUPER517=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14110); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER517);

						DebugLocation(976, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression14114); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(976, 40);
						IDENT518=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14116); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT518);

						DebugLocation(976, 46);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14118);
						arguments519=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments519.Tree);


						{
						// AST REWRITE
						// elements: outerDot, innerDot, SUPER, genericTypeArgumentListSimplified, qualifiedIdentifier, arguments, IDENT
						// token labels: innerDot, outerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 976:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(976, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:976:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(976, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(976, 75);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:976:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(976, 78);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_2);

							DebugLocation(976, 87);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:976:87: ^( $outerDot qualifiedIdentifier SUPER )
							{
							CommonTree root_3 = (CommonTree)adaptor.Nil();
							DebugLocation(976, 90);
							root_3 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_3);

							DebugLocation(976, 99);
							adaptor.AddChild(root_3, stream_qualifiedIdentifier.NextTree());
							DebugLocation(976, 119);
							adaptor.AddChild(root_3, stream_SUPER.NextNode());

							adaptor.AddChild(root_2, root_3);
							}
							DebugLocation(976, 126);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(976, 133);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(976, 167);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:977:21: IDENT arguments
						{
						DebugLocation(977, 21);
						IDENT520=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14168); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT520);

						DebugLocation(977, 27);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14170);
						arguments521=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments521.Tree);


						{
						// AST REWRITE
						// elements: DOT, qualifiedIdentifier, genericTypeArgumentListSimplified, arguments, IDENT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 977:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(977, 61);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:977:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(977, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(977, 75);
							// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:977:75: ^( DOT qualifiedIdentifier IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(977, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(977, 81);
							adaptor.AddChild(root_2, stream_qualifiedIdentifier.NextTree());
							DebugLocation(977, 101);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(977, 108);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(977, 142);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(142); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:979:17: THIS
					{
					DebugLocation(979, 17);
					THIS522=(IToken)Match(input,THIS,Follow._THIS_in_qualifiedIdentExpression14245); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS522);



					{
					// AST REWRITE
					// elements: THIS, DOT, qualifiedIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 979:57: -> ^( DOT qualifiedIdentifier THIS )
					{
						DebugLocation(979, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:979:61: ^( DOT qualifiedIdentifier THIS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(979, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(979, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(979, 87);
						adaptor.AddChild(root_1, stream_THIS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:980:17: Super= SUPER arguments
					{
					DebugLocation(980, 22);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14311); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(Super);

					DebugLocation(980, 29);
					PushFollow(Follow._arguments_in_qualifiedIdentExpression14313);
					arguments523=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments523.Tree);


					{
					// AST REWRITE
					// elements: qualifiedIdentifier, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 980:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
					{
						DebugLocation(980, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:980:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(980, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(980, 120);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(980, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:981:17: innerNewExpression
					{
					DebugLocation(981, 17);
					PushFollow(Follow._innerNewExpression_in_qualifiedIdentExpression14361);
					innerNewExpression524=innerNewExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression524.Tree);


					{
					// AST REWRITE
					// elements: qualifiedIdentifier, DOT, innerNewExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 981:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
					{
						DebugLocation(981, 61);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:981:61: ^( DOT qualifiedIdentifier innerNewExpression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(981, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(981, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(981, 87);
						adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(143); }


				}
				break;

			}
			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentExpression", 108);
			LeaveRule("qualifiedIdentExpression", 108);
			LeaveRule_qualifiedIdentExpression();
			if (state.backtracking > 0) { Memoize(input, 108, qualifiedIdentExpression_StartIndex); }

		}
		DebugLocation(984, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentExpression"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentExpression"

	partial void EnterRule_mapDeclaration();
	partial void LeaveRule_mapDeclaration();
	// $ANTLR start "mapDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:985:1: mapDeclaration : LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY ;
	[GrammarRule("mapDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> mapDeclaration()
	{
		EnterRule_mapDeclaration();
		EnterRule("mapDeclaration", 109);
		TraceIn("mapDeclaration", 109);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mapDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY525 = default(IToken);
		IToken string_literal527 = default(IToken);
		IToken COMMA529 = default(IToken);
		IToken string_literal531 = default(IToken);
		IToken RCURLY533 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression532 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY525_tree = default(CommonTree);
		CommonTree string_literal527_tree = default(CommonTree);
		CommonTree COMMA529_tree = default(CommonTree);
		CommonTree string_literal531_tree = default(CommonTree);
		CommonTree RCURLY533_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mapDeclaration");
		DebugLocation(985, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:986:2: ( LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:987:2: LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(987, 2);
			LCURLY525=(IToken)Match(input,LCURLY,Follow._LCURLY_in_mapDeclaration14431); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LCURLY525_tree = (CommonTree)adaptor.Create(LCURLY525);
			adaptor.AddChild(root_0, LCURLY525_tree);
			}
			DebugLocation(987, 9);
			PushFollow(Follow._expression_in_mapDeclaration14433);
			expression526=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression526.Tree);
			DebugLocation(987, 20);
			string_literal527=(IToken)Match(input,192,Follow._192_in_mapDeclaration14435); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal527_tree = (CommonTree)adaptor.Create(string_literal527);
			adaptor.AddChild(root_0, string_literal527_tree);
			}
			DebugLocation(987, 25);
			PushFollow(Follow._expression_in_mapDeclaration14437);
			expression528=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression528.Tree);
			DebugLocation(987, 36);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:987:36: ( COMMA expression '=>' expression )*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_1 = input.LA(1);

				if ((LA145_1==COMMA))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:987:37: COMMA expression '=>' expression
					{
					DebugLocation(987, 37);
					COMMA529=(IToken)Match(input,COMMA,Follow._COMMA_in_mapDeclaration14440); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA529_tree = (CommonTree)adaptor.Create(COMMA529);
					adaptor.AddChild(root_0, COMMA529_tree);
					}
					DebugLocation(987, 44);
					PushFollow(Follow._expression_in_mapDeclaration14443);
					expression530=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression530.Tree);
					DebugLocation(987, 55);
					string_literal531=(IToken)Match(input,192,Follow._192_in_mapDeclaration14445); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal531_tree = (CommonTree)adaptor.Create(string_literal531);
					adaptor.AddChild(root_0, string_literal531_tree);
					}
					DebugLocation(987, 60);
					PushFollow(Follow._expression_in_mapDeclaration14447);
					expression532=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression532.Tree);

					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }

			DebugLocation(987, 74);
			RCURLY533=(IToken)Match(input,RCURLY,Follow._RCURLY_in_mapDeclaration14452); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RCURLY533_tree = (CommonTree)adaptor.Create(RCURLY533);
			adaptor.AddChild(root_0, RCURLY533_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mapDeclaration", 109);
			LeaveRule("mapDeclaration", 109);
			LeaveRule_mapDeclaration();
			if (state.backtracking > 0) { Memoize(input, 109, mapDeclaration_StartIndex); }

		}
		DebugLocation(988, 0);
		} finally { DebugExitRule(GrammarFileName, "mapDeclaration"); }
		return retval;

	}
	// $ANTLR end "mapDeclaration"

	partial void EnterRule_setDeclaration();
	partial void LeaveRule_setDeclaration();
	// $ANTLR start "setDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:989:1: setDeclaration : LCURLY ( expression )? ( COMMA expression )* RCURLY ;
	[GrammarRule("setDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> setDeclaration()
	{
		EnterRule_setDeclaration();
		EnterRule("setDeclaration", 110);
		TraceIn("setDeclaration", 110);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int setDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY534 = default(IToken);
		IToken COMMA536 = default(IToken);
		IToken RCURLY538 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression537 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY534_tree = default(CommonTree);
		CommonTree COMMA536_tree = default(CommonTree);
		CommonTree RCURLY538_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "setDeclaration");
		DebugLocation(989, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:990:2: ( LCURLY ( expression )? ( COMMA expression )* RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:991:2: LCURLY ( expression )? ( COMMA expression )* RCURLY
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(991, 2);
			LCURLY534=(IToken)Match(input,LCURLY,Follow._LCURLY_in_setDeclaration14462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LCURLY534_tree = (CommonTree)adaptor.Create(LCURLY534);
			adaptor.AddChild(root_0, LCURLY534_tree);
			}
			DebugLocation(991, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:991:9: ( expression )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==BOOLEAN||LA146_1==BYTE||(LA146_1>=CHAR && LA146_1<=CHARACTER_LITERAL)||(LA146_1>=DEC && LA146_1<=DECIMAL_LITERAL)||LA146_1==DOUBLE||LA146_1==FALSE||(LA146_1>=FLOAT && LA146_1<=FLOATING_POINT_LITERAL)||(LA146_1>=HEX_LITERAL && LA146_1<=IDENT)||LA146_1==INC||LA146_1==INT||LA146_1==LESS_THAN||LA146_1==LOGICAL_NOT||(LA146_1>=LONG && LA146_1<=LPAREN)||LA146_1==MINUS||(LA146_1>=NEW && LA146_1<=NOT)||LA146_1==NULL||LA146_1==OCTAL_LITERAL||LA146_1==PLUS||(LA146_1>=SHORT && LA146_1<=SOQL_LITERAL)||(LA146_1>=STRING_LITERAL && LA146_1<=SUPER)||LA146_1==THIS||LA146_1==TRUE||LA146_1==VOID))
			{
				alt146 = 1;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:991:9: expression
				{
				DebugLocation(991, 9);
				PushFollow(Follow._expression_in_setDeclaration14464);
				expression535=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression535.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(991, 21);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:991:21: ( COMMA expression )*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=2;
				try { DebugEnterDecision(147, false);
				int LA147_1 = input.LA(1);

				if ((LA147_1==COMMA))
				{
					alt147 = 1;
				}


				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:991:22: COMMA expression
					{
					DebugLocation(991, 22);
					COMMA536=(IToken)Match(input,COMMA,Follow._COMMA_in_setDeclaration14468); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA536_tree = (CommonTree)adaptor.Create(COMMA536);
					adaptor.AddChild(root_0, COMMA536_tree);
					}
					DebugLocation(991, 29);
					PushFollow(Follow._expression_in_setDeclaration14471);
					expression537=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression537.Tree);

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }

			DebugLocation(991, 43);
			RCURLY538=(IToken)Match(input,RCURLY,Follow._RCURLY_in_setDeclaration14476); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RCURLY538_tree = (CommonTree)adaptor.Create(RCURLY538);
			adaptor.AddChild(root_0, RCURLY538_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setDeclaration", 110);
			LeaveRule("setDeclaration", 110);
			LeaveRule_setDeclaration();
			if (state.backtracking > 0) { Memoize(input, 110, setDeclaration_StartIndex); }

		}
		DebugLocation(992, 0);
		} finally { DebugExitRule(GrammarFileName, "setDeclaration"); }
		return retval;

	}
	// $ANTLR end "setDeclaration"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:993:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 111);
		TraceIn("newExpression", 111);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW539 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType540 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction541 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified543 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mapDeclaration544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setDeclaration545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments547 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody548 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW539_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
		RewriteRuleSubtreeStream stream_mapDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule mapDeclaration");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_setDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule setDeclaration");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(993, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:994:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:994:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			{
			DebugLocation(994, 9);
			NEW539=(IToken)Match(input,NEW,Follow._NEW_in_newExpression14490); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW539);

			DebugLocation(995, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:995:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			int alt151=2;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==BOOLEAN||LA151_1==BYTE||LA151_1==CHAR||LA151_1==DOUBLE||LA151_1==FLOAT||LA151_1==INT||LA151_1==LONG||LA151_1==SHORT))
			{
				alt151 = 1;
			}
			else if ((LA151_1==IDENT||LA151_1==LESS_THAN))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:996:13: primitiveType newArrayConstruction
				{
				DebugLocation(996, 13);
				PushFollow(Follow._primitiveType_in_newExpression14519);
				primitiveType540=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType540.Tree);
				DebugLocation(996, 27);
				PushFollow(Follow._newArrayConstruction_in_newExpression14521);
				newArrayConstruction541=newArrayConstruction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction541.Tree);


				{
				// AST REWRITE
				// elements: newArrayConstruction, primitiveType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 997:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
				{
					DebugLocation(997, 17);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:997:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(997, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW539, "STATIC_ARRAY_CREATOR"), root_1);

					DebugLocation(997, 70);
					adaptor.AddChild(root_1, stream_primitiveType.NextTree());
					DebugLocation(997, 84);
					adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:998:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				{
				DebugLocation(998, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:998:13: ( genericTypeArgumentListSimplified )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				int LA148_1 = input.LA(1);

				if ((LA148_1==LESS_THAN))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:998:13: genericTypeArgumentListSimplified
					{
					DebugLocation(998, 13);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_newExpression14565);
					genericTypeArgumentListSimplified542=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified542.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(998, 48);
				PushFollow(Follow._qualifiedTypeIdentSimplified_in_newExpression14568);
				qualifiedTypeIdentSimplified543=qualifiedTypeIdentSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified543.Tree);
				DebugLocation(999, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:999:13: ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				int alt150=4;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				switch (input.LA(1))
				{
				case LCURLY:
					{
					int LA150_2 = input.LA(2);

					if ((EvaluatePredicate(synpred244_Java_fragment)))
					{
						alt150 = 1;
					}
					else if ((EvaluatePredicate(synpred245_Java_fragment)))
					{
						alt150 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 150, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case LBRACK:
					{
					alt150 = 3;
					}
					break;
				case LPAREN:
					{
					alt150 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 150, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1001:10: mapDeclaration
					{
					DebugLocation(1001, 10);
					PushFollow(Follow._mapDeclaration_in_newExpression14606);
					mapDeclaration544=mapDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mapDeclaration.Add(mapDeclaration544.Tree);


					{
					// AST REWRITE
					// elements: mapDeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1001:25: -> ^( MAP_INITIALIZER mapDeclaration )
					{
						DebugLocation(1001, 28);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1001:28: ^( MAP_INITIALIZER mapDeclaration )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1001, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MAP_INITIALIZER, "MAP_INITIALIZER"), root_1);

						DebugLocation(1001, 46);
						adaptor.AddChild(root_1, stream_mapDeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1002:10: setDeclaration
					{
					DebugLocation(1002, 10);
					PushFollow(Follow._setDeclaration_in_newExpression14625);
					setDeclaration545=setDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setDeclaration.Add(setDeclaration545.Tree);


					{
					// AST REWRITE
					// elements: setDeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1002:25: -> ^( SET_INITIALIZER setDeclaration )
					{
						DebugLocation(1002, 28);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1002:28: ^( SET_INITIALIZER setDeclaration )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1002, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SET_INITIALIZER, "SET_INITIALIZER"), root_1);

						DebugLocation(1002, 46);
						adaptor.AddChild(root_1, stream_setDeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1003:15: newArrayConstruction
					{
					DebugLocation(1003, 15);
					PushFollow(Follow._newArrayConstruction_in_newExpression14649);
					newArrayConstruction546=newArrayConstruction();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction546.Tree);


					{
					// AST REWRITE
					// elements: qualifiedTypeIdentSimplified, newArrayConstruction, genericTypeArgumentListSimplified
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1004:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
					{
						DebugLocation(1004, 21);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1004:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1004, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW539, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1004, 74);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1004:74: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1004, 74);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1004, 109);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1004, 138);
						adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1005:17: arguments ( classBody )?
					{
					DebugLocation(1005, 17);
					PushFollow(Follow._arguments_in_newExpression14714);
					arguments547=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments547.Tree);
					DebugLocation(1005, 27);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1005:27: ( classBody )?
					int alt149=2;
					try { DebugEnterSubRule(149);
					try { DebugEnterDecision(149, false);
					try
					{
						alt149 = dfa149.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1005:27: classBody
						{
						DebugLocation(1005, 27);
						PushFollow(Follow._classBody_in_newExpression14716);
						classBody548=classBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_classBody.Add(classBody548.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(149); }



					{
					// AST REWRITE
					// elements: qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified, arguments, classBody
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1006:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
					{
						DebugLocation(1006, 21);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1006:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1006, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW539, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1006, 76);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1006:76: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1006, 76);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1006, 111);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1006, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());
						DebugLocation(1006, 150);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1006:150: ( classBody )?
						if (stream_classBody.HasNext)
						{
							DebugLocation(1006, 150);
							adaptor.AddChild(root_1, stream_classBody.NextTree());

						}
						stream_classBody.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(150); }


				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 111);
			LeaveRule("newExpression", 111);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 111, newExpression_StartIndex); }

		}
		DebugLocation(1009, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1011:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
	[GrammarRule("innerNewExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 112);
		TraceIn("innerNewExpression", 112);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerNewExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW549 = default(IToken);
		IToken IDENT551 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified550 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments552 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody553 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW549_tree = default(CommonTree);
		CommonTree IDENT551_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(1011, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
			{
			DebugLocation(1012, 9);
			NEW549=(IToken)Match(input,NEW,Follow._NEW_in_innerNewExpression14813); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW549);

			DebugLocation(1012, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:13: ( genericTypeArgumentListSimplified )?
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_1 = input.LA(1);

			if ((LA152_1==LESS_THAN))
			{
				alt152 = 1;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:13: genericTypeArgumentListSimplified
				{
				DebugLocation(1012, 13);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_innerNewExpression14815);
				genericTypeArgumentListSimplified550=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified550.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(152); }

			DebugLocation(1012, 48);
			IDENT551=(IToken)Match(input,IDENT,Follow._IDENT_in_innerNewExpression14818); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT551);

			DebugLocation(1012, 54);
			PushFollow(Follow._arguments_in_innerNewExpression14820);
			arguments552=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments552.Tree);
			DebugLocation(1012, 64);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:64: ( classBody )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			try
			{
				alt153 = dfa153.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:64: classBody
				{
				DebugLocation(1012, 64);
				PushFollow(Follow._classBody_in_innerNewExpression14822);
				classBody553=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classBody.Add(classBody553.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(153); }



			{
			// AST REWRITE
			// elements: classBody, genericTypeArgumentListSimplified, arguments, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1013:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
			{
				DebugLocation(1013, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1013:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1013, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW549, "STATIC_ARRAY_CREATOR"), root_1);

				DebugLocation(1013, 68);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1013:68: ( genericTypeArgumentListSimplified )?
				if (stream_genericTypeArgumentListSimplified.HasNext)
				{
					DebugLocation(1013, 68);
					adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

				}
				stream_genericTypeArgumentListSimplified.Reset();
				DebugLocation(1013, 103);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(1013, 109);
				adaptor.AddChild(root_1, stream_arguments.NextTree());
				DebugLocation(1013, 119);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1013:119: ( classBody )?
				if (stream_classBody.HasNext)
				{
					DebugLocation(1013, 119);
					adaptor.AddChild(root_1, stream_classBody.NextTree());

				}
				stream_classBody.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerNewExpression", 112);
			LeaveRule("innerNewExpression", 112);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 112, innerNewExpression_StartIndex); }

		}
		DebugLocation(1014, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return retval;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1016:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 113);
		TraceIn("newArrayConstruction", 113);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newArrayConstruction_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK556 = default(IToken);
		IToken RBRACK558 = default(IToken);
		IToken LBRACK559 = default(IToken);
		IToken RBRACK561 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer555 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression560 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList562 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LBRACK556_tree = default(CommonTree);
		CommonTree RBRACK558_tree = default(CommonTree);
		CommonTree LBRACK559_tree = default(CommonTree);
		CommonTree RBRACK561_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(1016, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1017:5: ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? )
			int alt156=2;
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==LBRACK))
			{
				int LA156_2 = input.LA(2);

				if ((LA156_2==RBRACK))
				{
					alt156 = 1;
				}
				else if ((LA156_2==BOOLEAN||LA156_2==BYTE||(LA156_2>=CHAR && LA156_2<=CHARACTER_LITERAL)||(LA156_2>=DEC && LA156_2<=DECIMAL_LITERAL)||LA156_2==DOUBLE||LA156_2==FALSE||(LA156_2>=FLOAT && LA156_2<=FLOATING_POINT_LITERAL)||(LA156_2>=HEX_LITERAL && LA156_2<=IDENT)||LA156_2==INC||LA156_2==INT||LA156_2==LESS_THAN||LA156_2==LOGICAL_NOT||(LA156_2>=LONG && LA156_2<=LPAREN)||LA156_2==MINUS||(LA156_2>=NEW && LA156_2<=NOT)||LA156_2==NULL||LA156_2==OCTAL_LITERAL||LA156_2==PLUS||(LA156_2>=SHORT && LA156_2<=SOQL_LITERAL)||(LA156_2>=STRING_LITERAL && LA156_2<=SUPER)||LA156_2==THIS||LA156_2==TRUE||LA156_2==VOID))
				{
					alt156 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 156, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1017:9: arrayDeclaratorList arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1017, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14868);
				arrayDeclaratorList554=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList554.Tree);
				DebugLocation(1017, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction14870);
				arrayInitializer555=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer555.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:9: LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1018, 15);
				LBRACK556=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14880); if (state.failed) return retval;
				DebugLocation(1018, 17);
				PushFollow(Follow._expression_in_newArrayConstruction14883);
				expression557=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression557.Tree);
				DebugLocation(1018, 34);
				RBRACK558=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14885); if (state.failed) return retval;
				DebugLocation(1018, 36);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:36: ( LBRACK ! expression RBRACK !)*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					try
					{
						alt154 = dfa154.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:37: LBRACK ! expression RBRACK !
						{
						DebugLocation(1018, 43);
						LBRACK559=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14889); if (state.failed) return retval;
						DebugLocation(1018, 45);
						PushFollow(Follow._expression_in_newArrayConstruction14892);
						expression560=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression560.Tree);
						DebugLocation(1018, 62);
						RBRACK561=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14894); if (state.failed) return retval;

						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(1018, 66);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:66: ( arrayDeclaratorList )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==LBRACK))
				{
					int LA155_2 = input.LA(2);

					if ((LA155_2==RBRACK))
					{
						alt155 = 1;
					}
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:66: arrayDeclaratorList
					{
					DebugLocation(1018, 66);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14899);
					arrayDeclaratorList562=arrayDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList562.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newArrayConstruction", 113);
			LeaveRule("newArrayConstruction", 113);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 113, newArrayConstruction_StartIndex); }

		}
		DebugLocation(1019, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return retval;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1021:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 114);
		TraceIn("arguments", 114);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN563 = default(IToken);
		IToken RPAREN565 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList564 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN563_tree = default(CommonTree);
		CommonTree RPAREN565_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1021, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1022:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1022:9: LPAREN ( expressionList )? RPAREN
			{
			DebugLocation(1022, 9);
			LPAREN563=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments14919); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN563);

			DebugLocation(1022, 16);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1022:16: ( expressionList )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==BOOLEAN||LA157_1==BYTE||(LA157_1>=CHAR && LA157_1<=CHARACTER_LITERAL)||(LA157_1>=DEC && LA157_1<=DECIMAL_LITERAL)||LA157_1==DOUBLE||LA157_1==FALSE||(LA157_1>=FLOAT && LA157_1<=FLOATING_POINT_LITERAL)||(LA157_1>=HEX_LITERAL && LA157_1<=IDENT)||LA157_1==INC||LA157_1==INT||LA157_1==LESS_THAN||LA157_1==LOGICAL_NOT||(LA157_1>=LONG && LA157_1<=LPAREN)||LA157_1==MINUS||(LA157_1>=NEW && LA157_1<=NOT)||LA157_1==NULL||LA157_1==OCTAL_LITERAL||LA157_1==PLUS||(LA157_1>=SHORT && LA157_1<=SOQL_LITERAL)||(LA157_1>=STRING_LITERAL && LA157_1<=SUPER)||LA157_1==THIS||LA157_1==TRUE||LA157_1==VOID))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1022:16: expressionList
				{
				DebugLocation(1022, 16);
				PushFollow(Follow._expressionList_in_arguments14921);
				expressionList564=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList564.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1022, 32);
			RPAREN565=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments14924); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN565);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1023:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
			{
				DebugLocation(1023, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1023:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1023, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, LPAREN563, "ARGUMENT_LIST"), root_1);

				DebugLocation(1023, 55);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1023:55: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(1023, 55);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 114);
			LeaveRule("arguments", 114);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 114, arguments_StartIndex); }

		}
		DebugLocation(1024, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1026:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | SOQL_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 115);
		TraceIn("literal", 115);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set566 = default(IToken);

		CommonTree set566_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1026, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1027:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | SOQL_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1027, 5);

			set566=(IToken)input.LT(1);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==SOQL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set566));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 115);
			LeaveRule("literal", 115);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 115, literal_StartIndex); }

		}
		DebugLocation(1037, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_propertyDeclaration();
	partial void LeaveRule_propertyDeclaration();
	// $ANTLR start "propertyDeclaration"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1039:1: propertyDeclaration : ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) );
	[GrammarRule("propertyDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> propertyDeclaration()
	{
		EnterRule_propertyDeclaration();
		EnterRule("propertyDeclaration", 116);
		TraceIn("propertyDeclaration", 116);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int propertyDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal567 = default(IToken);
		IToken SEMI570 = default(IToken);
		IToken SEMI574 = default(IToken);
		IToken char_literal576 = default(IToken);
		IToken char_literal577 = default(IToken);
		IToken SEMI580 = default(IToken);
		IToken SEMI584 = default(IToken);
		IToken char_literal586 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifier568 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> getRule569 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block571 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setRule573 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block575 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier578 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setRule579 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block581 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> getRule583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block585 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal567_tree = default(CommonTree);
		CommonTree SEMI570_tree = default(CommonTree);
		CommonTree SEMI574_tree = default(CommonTree);
		CommonTree char_literal576_tree = default(CommonTree);
		CommonTree char_literal577_tree = default(CommonTree);
		CommonTree SEMI580_tree = default(CommonTree);
		CommonTree SEMI584_tree = default(CommonTree);
		CommonTree char_literal586_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "propertyDeclaration");
		DebugLocation(1039, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1040:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) )
			int alt168=2;
			try { DebugEnterDecision(168, false);
			int LA168_1 = input.LA(1);

			if ((LA168_1==LCURLY))
			{
				int LA168_2 = input.LA(2);

				if ((EvaluatePredicate(synpred268_Java_fragment)))
				{
					alt168 = 1;
				}
				else if ((true))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 168, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1041, 2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
				{
				DebugLocation(1041, 3);
				char_literal567=(IToken)Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration15068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal567_tree = (CommonTree)adaptor.Create(char_literal567);
				adaptor.AddChild(root_0, char_literal567_tree);
				}
				DebugLocation(1041, 7);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:7: ( modifier )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, false);
				int LA158_1 = input.LA(1);

				if ((LA158_1==ABSTRACT||LA158_1==AT||LA158_1==FINAL||LA158_1==GLOBAL||LA158_1==NATIVE||LA158_1==OVERRIDE||LA158_1==PRIVATE||(LA158_1>=PROTECTED && LA158_1<=PUBLIC)||LA158_1==STATIC||LA158_1==STRICTFP||(LA158_1>=SYNCHRONIZED && LA158_1<=TEST_METHOD)||LA158_1==TRANSIENT||LA158_1==VIRTUAL||LA158_1==VOLATILE||(LA158_1>=WITHOUT_SHARING && LA158_1<=WITH_SHARING)))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:7: modifier
					{
					DebugLocation(1041, 7);
					PushFollow(Follow._modifier_in_propertyDeclaration15070);
					modifier568=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier568.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(1041, 17);
				PushFollow(Follow._getRule_in_propertyDeclaration15073);
				getRule569=getRule();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, getRule569.Tree);
				DebugLocation(1041, 25);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:25: ( SEMI | block )
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, false);
				int LA159_1 = input.LA(1);

				if ((LA159_1==SEMI))
				{
					alt159 = 1;
				}
				else if ((LA159_1==LCURLY))
				{
					alt159 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 159, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:26: SEMI
					{
					DebugLocation(1041, 26);
					SEMI570=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15076); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI570_tree = (CommonTree)adaptor.Create(SEMI570);
					adaptor.AddChild(root_0, SEMI570_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:31: block
					{
					DebugLocation(1041, 31);
					PushFollow(Follow._block_in_propertyDeclaration15078);
					block571=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block571.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(159); }

				DebugLocation(1041, 38);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:38: ( ( modifier )? setRule ( SEMI | block ) )?
				int alt162=2;
				try { DebugEnterSubRule(162);
				try { DebugEnterDecision(162, false);
				int LA162_1 = input.LA(1);

				if ((LA162_1==ABSTRACT||LA162_1==AT||LA162_1==FINAL||LA162_1==GLOBAL||LA162_1==IDENT||LA162_1==NATIVE||LA162_1==OVERRIDE||LA162_1==PRIVATE||(LA162_1>=PROTECTED && LA162_1<=PUBLIC)||LA162_1==STATIC||LA162_1==STRICTFP||(LA162_1>=SYNCHRONIZED && LA162_1<=TEST_METHOD)||LA162_1==TRANSIENT||LA162_1==VIRTUAL||LA162_1==VOLATILE||(LA162_1>=WITHOUT_SHARING && LA162_1<=WITH_SHARING)))
				{
					alt162 = 1;
				}
				} finally { DebugExitDecision(162); }
				switch (alt162)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: ( modifier )? setRule ( SEMI | block )
					{
					DebugLocation(1041, 39);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: ( modifier )?
					int alt160=2;
					try { DebugEnterSubRule(160);
					try { DebugEnterDecision(160, false);
					int LA160_1 = input.LA(1);

					if ((LA160_1==ABSTRACT||LA160_1==AT||LA160_1==FINAL||LA160_1==GLOBAL||LA160_1==NATIVE||LA160_1==OVERRIDE||LA160_1==PRIVATE||(LA160_1>=PROTECTED && LA160_1<=PUBLIC)||LA160_1==STATIC||LA160_1==STRICTFP||(LA160_1>=SYNCHRONIZED && LA160_1<=TEST_METHOD)||LA160_1==TRANSIENT||LA160_1==VIRTUAL||LA160_1==VOLATILE||(LA160_1>=WITHOUT_SHARING && LA160_1<=WITH_SHARING)))
					{
						alt160 = 1;
					}
					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: modifier
						{
						DebugLocation(1041, 39);
						PushFollow(Follow._modifier_in_propertyDeclaration15082);
						modifier572=modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifier572.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(160); }

					DebugLocation(1041, 49);
					PushFollow(Follow._setRule_in_propertyDeclaration15085);
					setRule573=setRule();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, setRule573.Tree);
					DebugLocation(1041, 57);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:57: ( SEMI | block )
					int alt161=2;
					try { DebugEnterSubRule(161);
					try { DebugEnterDecision(161, false);
					int LA161_1 = input.LA(1);

					if ((LA161_1==SEMI))
					{
						alt161 = 1;
					}
					else if ((LA161_1==LCURLY))
					{
						alt161 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(161); }
					switch (alt161)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:58: SEMI
						{
						DebugLocation(1041, 58);
						SEMI574=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15088); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SEMI574_tree = (CommonTree)adaptor.Create(SEMI574);
						adaptor.AddChild(root_0, SEMI574_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:63: block
						{
						DebugLocation(1041, 63);
						PushFollow(Follow._block_in_propertyDeclaration15090);
						block575=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, block575.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(161); }


					}
					break;

				}
				} finally { DebugExitSubRule(162); }

				DebugLocation(1041, 72);
				char_literal576=(IToken)Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration15095); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal576_tree = (CommonTree)adaptor.Create(char_literal576);
				adaptor.AddChild(root_0, char_literal576_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1042, 4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:5: '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}'
				{
				DebugLocation(1042, 5);
				char_literal577=(IToken)Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration15102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal577_tree = (CommonTree)adaptor.Create(char_literal577);
				adaptor.AddChild(root_0, char_literal577_tree);
				}
				DebugLocation(1042, 9);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:9: ( modifier )?
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_1 = input.LA(1);

				if ((LA163_1==ABSTRACT||LA163_1==AT||LA163_1==FINAL||LA163_1==GLOBAL||LA163_1==NATIVE||LA163_1==OVERRIDE||LA163_1==PRIVATE||(LA163_1>=PROTECTED && LA163_1<=PUBLIC)||LA163_1==STATIC||LA163_1==STRICTFP||(LA163_1>=SYNCHRONIZED && LA163_1<=TEST_METHOD)||LA163_1==TRANSIENT||LA163_1==VIRTUAL||LA163_1==VOLATILE||(LA163_1>=WITHOUT_SHARING && LA163_1<=WITH_SHARING)))
				{
					alt163 = 1;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:9: modifier
					{
					DebugLocation(1042, 9);
					PushFollow(Follow._modifier_in_propertyDeclaration15104);
					modifier578=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier578.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(163); }

				DebugLocation(1042, 19);
				PushFollow(Follow._setRule_in_propertyDeclaration15107);
				setRule579=setRule();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, setRule579.Tree);
				DebugLocation(1042, 27);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:27: ( SEMI | block )
				int alt164=2;
				try { DebugEnterSubRule(164);
				try { DebugEnterDecision(164, false);
				int LA164_1 = input.LA(1);

				if ((LA164_1==SEMI))
				{
					alt164 = 1;
				}
				else if ((LA164_1==LCURLY))
				{
					alt164 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 164, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(164); }
				switch (alt164)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:28: SEMI
					{
					DebugLocation(1042, 28);
					SEMI580=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15110); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI580_tree = (CommonTree)adaptor.Create(SEMI580);
					adaptor.AddChild(root_0, SEMI580_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:33: block
					{
					DebugLocation(1042, 33);
					PushFollow(Follow._block_in_propertyDeclaration15112);
					block581=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block581.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(164); }

				DebugLocation(1042, 40);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:40: ( ( modifier )? getRule ( SEMI | block ) )?
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_1 = input.LA(1);

				if ((LA167_1==ABSTRACT||LA167_1==AT||LA167_1==FINAL||LA167_1==GLOBAL||LA167_1==IDENT||LA167_1==NATIVE||LA167_1==OVERRIDE||LA167_1==PRIVATE||(LA167_1>=PROTECTED && LA167_1<=PUBLIC)||LA167_1==STATIC||LA167_1==STRICTFP||(LA167_1>=SYNCHRONIZED && LA167_1<=TEST_METHOD)||LA167_1==TRANSIENT||LA167_1==VIRTUAL||LA167_1==VOLATILE||(LA167_1>=WITHOUT_SHARING && LA167_1<=WITH_SHARING)))
				{
					alt167 = 1;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:41: ( modifier )? getRule ( SEMI | block )
					{
					DebugLocation(1042, 41);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:41: ( modifier )?
					int alt165=2;
					try { DebugEnterSubRule(165);
					try { DebugEnterDecision(165, false);
					int LA165_1 = input.LA(1);

					if ((LA165_1==ABSTRACT||LA165_1==AT||LA165_1==FINAL||LA165_1==GLOBAL||LA165_1==NATIVE||LA165_1==OVERRIDE||LA165_1==PRIVATE||(LA165_1>=PROTECTED && LA165_1<=PUBLIC)||LA165_1==STATIC||LA165_1==STRICTFP||(LA165_1>=SYNCHRONIZED && LA165_1<=TEST_METHOD)||LA165_1==TRANSIENT||LA165_1==VIRTUAL||LA165_1==VOLATILE||(LA165_1>=WITHOUT_SHARING && LA165_1<=WITH_SHARING)))
					{
						alt165 = 1;
					}
					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:41: modifier
						{
						DebugLocation(1042, 41);
						PushFollow(Follow._modifier_in_propertyDeclaration15116);
						modifier582=modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifier582.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(165); }

					DebugLocation(1042, 51);
					PushFollow(Follow._getRule_in_propertyDeclaration15119);
					getRule583=getRule();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, getRule583.Tree);
					DebugLocation(1042, 59);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:59: ( SEMI | block )
					int alt166=2;
					try { DebugEnterSubRule(166);
					try { DebugEnterDecision(166, false);
					int LA166_1 = input.LA(1);

					if ((LA166_1==SEMI))
					{
						alt166 = 1;
					}
					else if ((LA166_1==LCURLY))
					{
						alt166 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 166, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(166); }
					switch (alt166)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:60: SEMI
						{
						DebugLocation(1042, 60);
						SEMI584=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15122); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SEMI584_tree = (CommonTree)adaptor.Create(SEMI584);
						adaptor.AddChild(root_0, SEMI584_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1042:65: block
						{
						DebugLocation(1042, 65);
						PushFollow(Follow._block_in_propertyDeclaration15124);
						block585=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, block585.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(166); }


					}
					break;

				}
				} finally { DebugExitSubRule(167); }

				DebugLocation(1042, 75);
				char_literal586=(IToken)Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration15130); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal586_tree = (CommonTree)adaptor.Create(char_literal586);
				adaptor.AddChild(root_0, char_literal586_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyDeclaration", 116);
			LeaveRule("propertyDeclaration", 116);
			LeaveRule_propertyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 116, propertyDeclaration_StartIndex); }

		}
		DebugLocation(1044, 0);
		} finally { DebugExitRule(GrammarFileName, "propertyDeclaration"); }
		return retval;

	}
	// $ANTLR end "propertyDeclaration"

	partial void EnterRule_getRule();
	partial void LeaveRule_getRule();
	// $ANTLR start "getRule"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1045:1: getRule :{...}? IDENT ;
	[GrammarRule("getRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> getRule()
	{
		EnterRule_getRule();
		EnterRule("getRule", 117);
		TraceIn("getRule", 117);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int getRule_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT587 = default(IToken);

		CommonTree IDENT587_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "getRule");
		DebugLocation(1045, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1046:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1047:5: {...}? IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1047, 5);
			if (!((input.LT(1).Text == "get")))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "getRule", "input.LT(1).Text == \"get\"");
			}
			DebugLocation(1047, 34);
			IDENT587=(IToken)Match(input,IDENT,Follow._IDENT_in_getRule15147); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT587_tree = (CommonTree)adaptor.Create(IDENT587);
			adaptor.AddChild(root_0, IDENT587_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("getRule", 117);
			LeaveRule("getRule", 117);
			LeaveRule_getRule();
			if (state.backtracking > 0) { Memoize(input, 117, getRule_StartIndex); }

		}
		DebugLocation(1048, 0);
		} finally { DebugExitRule(GrammarFileName, "getRule"); }
		return retval;

	}
	// $ANTLR end "getRule"

	partial void EnterRule_setRule();
	partial void LeaveRule_setRule();
	// $ANTLR start "setRule"
	// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1049:1: setRule :{...}? IDENT ;
	[GrammarRule("setRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> setRule()
	{
		EnterRule_setRule();
		EnterRule("setRule", 118);
		TraceIn("setRule", 118);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int setRule_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT588 = default(IToken);

		CommonTree IDENT588_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "setRule");
		DebugLocation(1049, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1050:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1051:5: {...}? IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1051, 5);
			if (!((input.LT(1).Text== "set")))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "setRule", "input.LT(1).Text== \"set\"");
			}
			DebugLocation(1051, 33);
			IDENT588=(IToken)Match(input,IDENT,Follow._IDENT_in_setRule15161); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT588_tree = (CommonTree)adaptor.Create(IDENT588);
			adaptor.AddChild(root_0, IDENT588_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setRule", 118);
			LeaveRule("setRule", 118);
			LeaveRule_setRule();
			if (state.backtracking > 0) { Memoize(input, 118, setRule_StartIndex); }

		}
		DebugLocation(1052, 0);
		} finally { DebugExitRule(GrammarFileName, "setRule"); }
		return retval;

	}
	// $ANTLR end "setRule"

	partial void EnterRule_synpred14_Java_fragment();
	partial void LeaveRule_synpred14_Java_fragment();

	// $ANTLR start synpred14_Java
	private void synpred14_Java_fragment()
	{
		EnterRule_synpred14_Java_fragment();
		EnterRule("synpred14_Java_fragment", 132);
		TraceIn("synpred14_Java_fragment", 132);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:307:9: ( GREATER_THAN )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:307:9: GREATER_THAN
			{
			DebugLocation(307, 9);
			Match(input,GREATER_THAN,Follow._GREATER_THAN_in_synpred14_Java5191); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Java_fragment", 132);
			LeaveRule("synpred14_Java_fragment", 132);
			LeaveRule_synpred14_Java_fragment();
		}
	}
	// $ANTLR end synpred14_Java

	partial void EnterRule_synpred15_Java_fragment();
	partial void LeaveRule_synpred15_Java_fragment();

	// $ANTLR start synpred15_Java
	private void synpred15_Java_fragment()
	{
		EnterRule_synpred15_Java_fragment();
		EnterRule("synpred15_Java_fragment", 133);
		TraceIn("synpred15_Java_fragment", 133);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:308:9: ( SHIFT_RIGHT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:308:9: SHIFT_RIGHT
			{
			DebugLocation(308, 9);
			Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_synpred15_Java5201); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Java_fragment", 133);
			LeaveRule("synpred15_Java_fragment", 133);
			LeaveRule_synpred15_Java_fragment();
		}
	}
	// $ANTLR end synpred15_Java

	partial void EnterRule_synpred16_Java_fragment();
	partial void LeaveRule_synpred16_Java_fragment();

	// $ANTLR start synpred16_Java
	private void synpred16_Java_fragment()
	{
		EnterRule_synpred16_Java_fragment();
		EnterRule("synpred16_Java_fragment", 134);
		TraceIn("synpred16_Java_fragment", 134);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:309:9: ( BIT_SHIFT_RIGHT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:309:9: BIT_SHIFT_RIGHT
			{
			DebugLocation(309, 9);
			Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_synpred16_Java5211); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Java_fragment", 134);
			LeaveRule("synpred16_Java_fragment", 134);
			LeaveRule_synpred16_Java_fragment();
		}
	}
	// $ANTLR end synpred16_Java

	partial void EnterRule_synpred17_Java_fragment();
	partial void LeaveRule_synpred17_Java_fragment();

	// $ANTLR start synpred17_Java
	private void synpred17_Java_fragment()
	{
		EnterRule_synpred17_Java_fragment();
		EnterRule("synpred17_Java_fragment", 135);
		TraceIn("synpred17_Java_fragment", 135);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:15: ( bound )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:314:15: bound
			{
			DebugLocation(314, 15);
			PushFollow(Follow._bound_in_synpred17_Java5241);
			bound();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Java_fragment", 135);
			LeaveRule("synpred17_Java_fragment", 135);
			LeaveRule_synpred17_Java_fragment();
		}
	}
	// $ANTLR end synpred17_Java

	partial void EnterRule_synpred32_Java_fragment();
	partial void LeaveRule_synpred32_Java_fragment();

	// $ANTLR start synpred32_Java
	private void synpred32_Java_fragment()
	{
		EnterRule_synpred32_Java_fragment();
		EnterRule("synpred32_Java_fragment", 150);
		TraceIn("synpred32_Java_fragment", 150);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:371:9: ( STATIC block )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:371:9: STATIC block
			{
			DebugLocation(371, 9);
			Match(input,STATIC,Follow._STATIC_in_synpred32_Java5773); if (state.failed) return;
			DebugLocation(371, 16);
			PushFollow(Follow._block_in_synpred32_Java5775);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_Java_fragment", 150);
			LeaveRule("synpred32_Java_fragment", 150);
			LeaveRule_synpred32_Java_fragment();
		}
	}
	// $ANTLR end synpred32_Java

	partial void EnterRule_synpred34_Java_fragment();
	partial void LeaveRule_synpred34_Java_fragment();

	// $ANTLR start synpred34_Java
	private void synpred34_Java_fragment()
	{
		EnterRule_synpred34_Java_fragment();
		EnterRule("synpred34_Java_fragment", 152);
		TraceIn("synpred34_Java_fragment", 152);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:17: ( type IDENT propertyDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:17: type IDENT propertyDeclaration
			{
			DebugLocation(375, 17);
			PushFollow(Follow._type_in_synpred34_Java5848);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(375, 22);
			Match(input,IDENT,Follow._IDENT_in_synpred34_Java5850); if (state.failed) return;
			DebugLocation(375, 28);
			PushFollow(Follow._propertyDeclaration_in_synpred34_Java5852);
			propertyDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_Java_fragment", 152);
			LeaveRule("synpred34_Java_fragment", 152);
			LeaveRule_synpred34_Java_fragment();
		}
	}
	// $ANTLR end synpred34_Java

	partial void EnterRule_synpred38_Java_fragment();
	partial void LeaveRule_synpred38_Java_fragment();

	// $ANTLR start synpred38_Java
	private void synpred38_Java_fragment()
	{
		EnterRule_synpred38_Java_fragment();
		EnterRule("synpred38_Java_fragment", 156);
		TraceIn("synpred38_Java_fragment", 156);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:17: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
			{
			DebugLocation(376, 17);
			PushFollow(Follow._type_in_synpred38_Java5878);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(376, 22);
			Match(input,IDENT,Follow._IDENT_in_synpred38_Java5880); if (state.failed) return;
			DebugLocation(376, 28);
			PushFollow(Follow._formalParameterList_in_synpred38_Java5882);
			formalParameterList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(376, 48);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: ( arrayDeclaratorList )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_1 = input.LA(1);

			if ((LA169_1==LBRACK))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: arrayDeclaratorList
				{
				DebugLocation(376, 48);
				PushFollow(Follow._arrayDeclaratorList_in_synpred38_Java5884);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(376, 69);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: ( throwsClause )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_1 = input.LA(1);

			if ((LA170_1==THROWS))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: throwsClause
				{
				DebugLocation(376, 69);
				PushFollow(Follow._throwsClause_in_synpred38_Java5887);
				throwsClause();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(170); }

			DebugLocation(376, 83);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:83: ( block | SEMI )
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			int LA171_1 = input.LA(1);

			if ((LA171_1==LCURLY))
			{
				alt171 = 1;
			}
			else if ((LA171_1==SEMI))
			{
				alt171 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 171, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:84: block
				{
				DebugLocation(376, 84);
				PushFollow(Follow._block_in_synpred38_Java5891);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:92: SEMI
				{
				DebugLocation(376, 92);
				Match(input,SEMI,Follow._SEMI_in_synpred38_Java5895); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }


			}

		}
		finally
		{
			TraceOut("synpred38_Java_fragment", 156);
			LeaveRule("synpred38_Java_fragment", 156);
			LeaveRule_synpred38_Java_fragment();
		}
	}
	// $ANTLR end synpred38_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	private void synpred43_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 161);
		TraceIn("synpred43_Java_fragment", 161);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			{
			DebugLocation(373, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )?
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			int LA174_1 = input.LA(1);

			if ((LA174_1==LESS_THAN))
			{
				alt174 = 1;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: genericTypeParameterList
				{
				DebugLocation(373, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred43_Java5812);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(374, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:374:13: ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			int alt181=4;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred34_Java_fragment)))
				{
					alt181 = 1;
				}
				else if ((EvaluatePredicate(synpred38_Java_fragment)))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred34_Java_fragment)))
				{
					alt181 = 1;
				}
				else if ((EvaluatePredicate(synpred38_Java_fragment)))
				{
					alt181 = 2;
				}
				else if ((true))
				{
					alt181 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				alt181 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:17: type IDENT propertyDeclaration
				{
				DebugLocation(375, 17);
				PushFollow(Follow._type_in_synpred43_Java5848);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(375, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred43_Java5850); if (state.failed) return;
				DebugLocation(375, 28);
				PushFollow(Follow._propertyDeclaration_in_synpred43_Java5852);
				propertyDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(376, 17);
				PushFollow(Follow._type_in_synpred43_Java5878);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(376, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred43_Java5880); if (state.failed) return;
				DebugLocation(376, 28);
				PushFollow(Follow._formalParameterList_in_synpred43_Java5882);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(376, 48);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: ( arrayDeclaratorList )?
				int alt175=2;
				try { DebugEnterSubRule(175);
				try { DebugEnterDecision(175, false);
				int LA175_1 = input.LA(1);

				if ((LA175_1==LBRACK))
				{
					alt175 = 1;
				}
				} finally { DebugExitDecision(175); }
				switch (alt175)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: arrayDeclaratorList
					{
					DebugLocation(376, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred43_Java5884);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(175); }

				DebugLocation(376, 69);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: ( throwsClause )?
				int alt176=2;
				try { DebugEnterSubRule(176);
				try { DebugEnterDecision(176, false);
				int LA176_1 = input.LA(1);

				if ((LA176_1==THROWS))
				{
					alt176 = 1;
				}
				} finally { DebugExitDecision(176); }
				switch (alt176)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: throwsClause
					{
					DebugLocation(376, 69);
					PushFollow(Follow._throwsClause_in_synpred43_Java5887);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(176); }

				DebugLocation(376, 83);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:83: ( block | SEMI )
				int alt177=2;
				try { DebugEnterSubRule(177);
				try { DebugEnterDecision(177, false);
				int LA177_1 = input.LA(1);

				if ((LA177_1==LCURLY))
				{
					alt177 = 1;
				}
				else if ((LA177_1==SEMI))
				{
					alt177 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 177, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(177); }
				switch (alt177)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:84: block
					{
					DebugLocation(376, 84);
					PushFollow(Follow._block_in_synpred43_Java5891);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:92: SEMI
					{
					DebugLocation(376, 92);
					Match(input,SEMI,Follow._SEMI_in_synpred43_Java5895); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(177); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(378, 17);
				Match(input,VOID,Follow._VOID_in_synpred43_Java5957); if (state.failed) return;
				DebugLocation(378, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred43_Java5959); if (state.failed) return;
				DebugLocation(378, 28);
				PushFollow(Follow._formalParameterList_in_synpred43_Java5961);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(378, 48);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: ( throwsClause )?
				int alt178=2;
				try { DebugEnterSubRule(178);
				try { DebugEnterDecision(178, false);
				int LA178_1 = input.LA(1);

				if ((LA178_1==THROWS))
				{
					alt178 = 1;
				}
				} finally { DebugExitDecision(178); }
				switch (alt178)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: throwsClause
					{
					DebugLocation(378, 48);
					PushFollow(Follow._throwsClause_in_synpred43_Java5963);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(178); }

				DebugLocation(378, 62);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:62: ( block | SEMI )
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_1 = input.LA(1);

				if ((LA179_1==LCURLY))
				{
					alt179 = 1;
				}
				else if ((LA179_1==SEMI))
				{
					alt179 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 179, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:63: block
					{
					DebugLocation(378, 63);
					PushFollow(Follow._block_in_synpred43_Java5967);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:71: SEMI
					{
					DebugLocation(378, 71);
					Match(input,SEMI,Follow._SEMI_in_synpred43_Java5971); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(179); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:17: ident= IDENT formalParameterList ( throwsClause )? block
				{
				DebugLocation(380, 22);
				ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred43_Java6030); if (state.failed) return;
				DebugLocation(380, 29);
				PushFollow(Follow._formalParameterList_in_synpred43_Java6032);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(380, 49);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: ( throwsClause )?
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_1 = input.LA(1);

				if ((LA180_1==THROWS))
				{
					alt180 = 1;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: throwsClause
					{
					DebugLocation(380, 49);
					PushFollow(Follow._throwsClause_in_synpred43_Java6034);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(180); }

				DebugLocation(380, 63);
				PushFollow(Follow._block_in_synpred43_Java6037);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(181); }


			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 161);
			LeaveRule("synpred43_Java_fragment", 161);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred44_Java_fragment();
	partial void LeaveRule_synpred44_Java_fragment();

	// $ANTLR start synpred44_Java
	private void synpred44_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred44_Java_fragment();
		EnterRule("synpred44_Java_fragment", 162);
		TraceIn("synpred44_Java_fragment", 162);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:372:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:372:9: modifierList ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			{
			DebugLocation(372, 9);
			PushFollow(Follow._modifierList_in_synpred44_Java5798);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(373, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:9: ( ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt190 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA190_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 190, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA190_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 190, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 190, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )? ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				{
				DebugLocation(373, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: ( genericTypeParameterList )?
				int alt182=2;
				try { DebugEnterSubRule(182);
				try { DebugEnterDecision(182, false);
				int LA182_1 = input.LA(1);

				if ((LA182_1==LESS_THAN))
				{
					alt182 = 1;
				}
				} finally { DebugExitDecision(182); }
				switch (alt182)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:373:13: genericTypeParameterList
					{
					DebugLocation(373, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred44_Java5812);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(182); }

				DebugLocation(374, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:374:13: ( type IDENT propertyDeclaration | type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				int alt189=4;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				switch (input.LA(1))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA189_2 = input.LA(2);

					if ((EvaluatePredicate(synpred34_Java_fragment)))
					{
						alt189 = 1;
					}
					else if ((EvaluatePredicate(synpred38_Java_fragment)))
					{
						alt189 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 189, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA189_2 = input.LA(2);

					if ((EvaluatePredicate(synpred34_Java_fragment)))
					{
						alt189 = 1;
					}
					else if ((EvaluatePredicate(synpred38_Java_fragment)))
					{
						alt189 = 2;
					}
					else if ((true))
					{
						alt189 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 189, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VOID:
					{
					alt189 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 189, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:375:17: type IDENT propertyDeclaration
					{
					DebugLocation(375, 17);
					PushFollow(Follow._type_in_synpred44_Java5848);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(375, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred44_Java5850); if (state.failed) return;
					DebugLocation(375, 28);
					PushFollow(Follow._propertyDeclaration_in_synpred44_Java5852);
					propertyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(376, 17);
					PushFollow(Follow._type_in_synpred44_Java5878);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(376, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred44_Java5880); if (state.failed) return;
					DebugLocation(376, 28);
					PushFollow(Follow._formalParameterList_in_synpred44_Java5882);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(376, 48);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: ( arrayDeclaratorList )?
					int alt183=2;
					try { DebugEnterSubRule(183);
					try { DebugEnterDecision(183, false);
					int LA183_1 = input.LA(1);

					if ((LA183_1==LBRACK))
					{
						alt183 = 1;
					}
					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:48: arrayDeclaratorList
						{
						DebugLocation(376, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred44_Java5884);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(183); }

					DebugLocation(376, 69);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: ( throwsClause )?
					int alt184=2;
					try { DebugEnterSubRule(184);
					try { DebugEnterDecision(184, false);
					int LA184_1 = input.LA(1);

					if ((LA184_1==THROWS))
					{
						alt184 = 1;
					}
					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:69: throwsClause
						{
						DebugLocation(376, 69);
						PushFollow(Follow._throwsClause_in_synpred44_Java5887);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(184); }

					DebugLocation(376, 83);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:83: ( block | SEMI )
					int alt185=2;
					try { DebugEnterSubRule(185);
					try { DebugEnterDecision(185, false);
					int LA185_1 = input.LA(1);

					if ((LA185_1==LCURLY))
					{
						alt185 = 1;
					}
					else if ((LA185_1==SEMI))
					{
						alt185 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 185, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(185); }
					switch (alt185)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:84: block
						{
						DebugLocation(376, 84);
						PushFollow(Follow._block_in_synpred44_Java5891);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:376:92: SEMI
						{
						DebugLocation(376, 92);
						Match(input,SEMI,Follow._SEMI_in_synpred44_Java5895); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(185); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(378, 17);
					Match(input,VOID,Follow._VOID_in_synpred44_Java5957); if (state.failed) return;
					DebugLocation(378, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred44_Java5959); if (state.failed) return;
					DebugLocation(378, 28);
					PushFollow(Follow._formalParameterList_in_synpred44_Java5961);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(378, 48);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: ( throwsClause )?
					int alt186=2;
					try { DebugEnterSubRule(186);
					try { DebugEnterDecision(186, false);
					int LA186_1 = input.LA(1);

					if ((LA186_1==THROWS))
					{
						alt186 = 1;
					}
					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:48: throwsClause
						{
						DebugLocation(378, 48);
						PushFollow(Follow._throwsClause_in_synpred44_Java5963);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(186); }

					DebugLocation(378, 62);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:62: ( block | SEMI )
					int alt187=2;
					try { DebugEnterSubRule(187);
					try { DebugEnterDecision(187, false);
					int LA187_1 = input.LA(1);

					if ((LA187_1==LCURLY))
					{
						alt187 = 1;
					}
					else if ((LA187_1==SEMI))
					{
						alt187 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 187, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(187); }
					switch (alt187)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:63: block
						{
						DebugLocation(378, 63);
						PushFollow(Follow._block_in_synpred44_Java5967);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:378:71: SEMI
						{
						DebugLocation(378, 71);
						Match(input,SEMI,Follow._SEMI_in_synpred44_Java5971); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(187); }


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:17: ident= IDENT formalParameterList ( throwsClause )? block
					{
					DebugLocation(380, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred44_Java6030); if (state.failed) return;
					DebugLocation(380, 29);
					PushFollow(Follow._formalParameterList_in_synpred44_Java6032);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(380, 49);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: ( throwsClause )?
					int alt188=2;
					try { DebugEnterSubRule(188);
					try { DebugEnterDecision(188, false);
					int LA188_1 = input.LA(1);

					if ((LA188_1==THROWS))
					{
						alt188 = 1;
					}
					} finally { DebugExitDecision(188); }
					switch (alt188)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:380:49: throwsClause
						{
						DebugLocation(380, 49);
						PushFollow(Follow._throwsClause_in_synpred44_Java6034);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(188); }

					DebugLocation(380, 63);
					PushFollow(Follow._block_in_synpred44_Java6037);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(189); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:383:13: type classFieldDeclaratorList SEMI
				{
				DebugLocation(383, 13);
				PushFollow(Follow._type_in_synpred44_Java6101);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(383, 18);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred44_Java6103);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(383, 43);
				Match(input,SEMI,Follow._SEMI_in_synpred44_Java6105); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(190); }


			}

		}
		finally
		{
			TraceOut("synpred44_Java_fragment", 162);
			LeaveRule("synpred44_Java_fragment", 162);
			LeaveRule_synpred44_Java_fragment();
		}
	}
	// $ANTLR end synpred44_Java

	partial void EnterRule_synpred45_Java_fragment();
	partial void LeaveRule_synpred45_Java_fragment();

	// $ANTLR start synpred45_Java
	private void synpred45_Java_fragment()
	{
		EnterRule_synpred45_Java_fragment();
		EnterRule("synpred45_Java_fragment", 163);
		TraceIn("synpred45_Java_fragment", 163);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:386:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:386:9: typeDeclaration
			{
			DebugLocation(386, 9);
			PushFollow(Follow._typeDeclaration_in_synpred45_Java6150);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_Java_fragment", 163);
			LeaveRule("synpred45_Java_fragment", 163);
			LeaveRule_synpred45_Java_fragment();
		}
	}
	// $ANTLR end synpred45_Java

	partial void EnterRule_synpred51_Java_fragment();
	partial void LeaveRule_synpred51_Java_fragment();

	// $ANTLR start synpred51_Java
	private void synpred51_Java_fragment()
	{
		EnterRule_synpred51_Java_fragment();
		EnterRule("synpred51_Java_fragment", 169);
		TraceIn("synpred51_Java_fragment", 169);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			{
			DebugLocation(392, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )?
			int alt193=2;
			try { DebugEnterSubRule(193);
			try { DebugEnterDecision(193, false);
			int LA193_1 = input.LA(1);

			if ((LA193_1==LESS_THAN))
			{
				alt193 = 1;
			}
			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: genericTypeParameterList
				{
				DebugLocation(392, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred51_Java6194);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(193); }

			DebugLocation(393, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_1 = input.LA(1);

			if ((LA197_1==BOOLEAN||LA197_1==BYTE||LA197_1==CHAR||LA197_1==DOUBLE||LA197_1==FLOAT||LA197_1==IDENT||LA197_1==INT||LA197_1==LONG||LA197_1==SHORT))
			{
				alt197 = 1;
			}
			else if ((LA197_1==VOID))
			{
				alt197 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 197, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
				{
				DebugLocation(393, 17);
				PushFollow(Follow._type_in_synpred51_Java6213);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(393, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred51_Java6215); if (state.failed) return;
				DebugLocation(393, 28);
				PushFollow(Follow._formalParameterList_in_synpred51_Java6217);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(393, 48);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: ( arrayDeclaratorList )?
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_1 = input.LA(1);

				if ((LA194_1==LBRACK))
				{
					alt194 = 1;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: arrayDeclaratorList
					{
					DebugLocation(393, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred51_Java6219);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(194); }

				DebugLocation(393, 69);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: ( throwsClause )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_1 = input.LA(1);

				if ((LA195_1==THROWS))
				{
					alt195 = 1;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: throwsClause
					{
					DebugLocation(393, 69);
					PushFollow(Follow._throwsClause_in_synpred51_Java6222);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(393, 83);
				Match(input,SEMI,Follow._SEMI_in_synpred51_Java6225); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
				{
				DebugLocation(395, 17);
				Match(input,VOID,Follow._VOID_in_synpred51_Java6283); if (state.failed) return;
				DebugLocation(395, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred51_Java6285); if (state.failed) return;
				DebugLocation(395, 28);
				PushFollow(Follow._formalParameterList_in_synpred51_Java6287);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(395, 48);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: ( throwsClause )?
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_1 = input.LA(1);

				if ((LA196_1==THROWS))
				{
					alt196 = 1;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: throwsClause
					{
					DebugLocation(395, 48);
					PushFollow(Follow._throwsClause_in_synpred51_Java6289);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(196); }

				DebugLocation(395, 62);
				Match(input,SEMI,Follow._SEMI_in_synpred51_Java6292); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred51_Java_fragment", 169);
			LeaveRule("synpred51_Java_fragment", 169);
			LeaveRule_synpred51_Java_fragment();
		}
	}
	// $ANTLR end synpred51_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	private void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 170);
		TraceIn("synpred52_Java_fragment", 170);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:391:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:391:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			{
			DebugLocation(391, 9);
			PushFollow(Follow._modifierList_in_synpred52_Java6180);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(392, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			int alt203=2;
			try { DebugEnterSubRule(203);
			try { DebugEnterDecision(203, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt203 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA203_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt203 = 1;
				}
				else if ((true))
				{
					alt203 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 203, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA203_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Java_fragment)))
				{
					alt203 = 1;
				}
				else if ((true))
				{
					alt203 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 203, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 203, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				{
				DebugLocation(392, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: ( genericTypeParameterList )?
				int alt198=2;
				try { DebugEnterSubRule(198);
				try { DebugEnterDecision(198, false);
				int LA198_1 = input.LA(1);

				if ((LA198_1==LESS_THAN))
				{
					alt198 = 1;
				}
				} finally { DebugExitDecision(198); }
				switch (alt198)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:392:13: genericTypeParameterList
					{
					DebugLocation(392, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred52_Java6194);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(198); }

				DebugLocation(393, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				int alt202=2;
				try { DebugEnterSubRule(202);
				try { DebugEnterDecision(202, false);
				int LA202_1 = input.LA(1);

				if ((LA202_1==BOOLEAN||LA202_1==BYTE||LA202_1==CHAR||LA202_1==DOUBLE||LA202_1==FLOAT||LA202_1==IDENT||LA202_1==INT||LA202_1==LONG||LA202_1==SHORT))
				{
					alt202 = 1;
				}
				else if ((LA202_1==VOID))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(202); }
				switch (alt202)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
					{
					DebugLocation(393, 17);
					PushFollow(Follow._type_in_synpred52_Java6213);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(393, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred52_Java6215); if (state.failed) return;
					DebugLocation(393, 28);
					PushFollow(Follow._formalParameterList_in_synpred52_Java6217);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(393, 48);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: ( arrayDeclaratorList )?
					int alt199=2;
					try { DebugEnterSubRule(199);
					try { DebugEnterDecision(199, false);
					int LA199_1 = input.LA(1);

					if ((LA199_1==LBRACK))
					{
						alt199 = 1;
					}
					} finally { DebugExitDecision(199); }
					switch (alt199)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:48: arrayDeclaratorList
						{
						DebugLocation(393, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred52_Java6219);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(199); }

					DebugLocation(393, 69);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: ( throwsClause )?
					int alt200=2;
					try { DebugEnterSubRule(200);
					try { DebugEnterDecision(200, false);
					int LA200_1 = input.LA(1);

					if ((LA200_1==THROWS))
					{
						alt200 = 1;
					}
					} finally { DebugExitDecision(200); }
					switch (alt200)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:393:69: throwsClause
						{
						DebugLocation(393, 69);
						PushFollow(Follow._throwsClause_in_synpred52_Java6222);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(200); }

					DebugLocation(393, 83);
					Match(input,SEMI,Follow._SEMI_in_synpred52_Java6225); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
					{
					DebugLocation(395, 17);
					Match(input,VOID,Follow._VOID_in_synpred52_Java6283); if (state.failed) return;
					DebugLocation(395, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred52_Java6285); if (state.failed) return;
					DebugLocation(395, 28);
					PushFollow(Follow._formalParameterList_in_synpred52_Java6287);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(395, 48);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: ( throwsClause )?
					int alt201=2;
					try { DebugEnterSubRule(201);
					try { DebugEnterDecision(201, false);
					int LA201_1 = input.LA(1);

					if ((LA201_1==THROWS))
					{
						alt201 = 1;
					}
					} finally { DebugExitDecision(201); }
					switch (alt201)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:395:48: throwsClause
						{
						DebugLocation(395, 48);
						PushFollow(Follow._throwsClause_in_synpred52_Java6289);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(201); }

					DebugLocation(395, 62);
					Match(input,SEMI,Follow._SEMI_in_synpred52_Java6292); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(202); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:398:13: type interfaceFieldDeclaratorList SEMI
				{
				DebugLocation(398, 13);
				PushFollow(Follow._type_in_synpred52_Java6355);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(398, 18);
				PushFollow(Follow._interfaceFieldDeclaratorList_in_synpred52_Java6357);
				interfaceFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(398, 47);
				Match(input,SEMI,Follow._SEMI_in_synpred52_Java6359); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(203); }


			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 170);
			LeaveRule("synpred52_Java_fragment", 170);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	private void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 171);
		TraceIn("synpred53_Java_fragment", 171);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:401:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:401:9: typeDeclaration
			{
			DebugLocation(401, 9);
			PushFollow(Follow._typeDeclaration_in_synpred53_Java6404);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 171);
			LeaveRule("synpred53_Java_fragment", 171);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred59_Java_fragment();
	partial void LeaveRule_synpred59_Java_fragment();

	// $ANTLR start synpred59_Java
	private void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 177);
		TraceIn("synpred59_Java_fragment", 177);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:9: ( arrayDeclarator )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:440:9: arrayDeclarator
			{
			DebugLocation(440, 9);
			PushFollow(Follow._arrayDeclarator_in_synpred59_Java6710);
			arrayDeclarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 177);
			LeaveRule("synpred59_Java_fragment", 177);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java

	partial void EnterRule_synpred83_Java_fragment();
	partial void LeaveRule_synpred83_Java_fragment();

	// $ANTLR start synpred83_Java
	private void synpred83_Java_fragment()
	{
		EnterRule_synpred83_Java_fragment();
		EnterRule("synpred83_Java_fragment", 201);
		TraceIn("synpred83_Java_fragment", 201);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:23: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:495:23: arrayDeclaratorList
			{
			DebugLocation(495, 23);
			PushFollow(Follow._arrayDeclaratorList_in_synpred83_Java7171);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred83_Java_fragment", 201);
			LeaveRule("synpred83_Java_fragment", 201);
			LeaveRule_synpred83_Java_fragment();
		}
	}
	// $ANTLR end synpred83_Java

	partial void EnterRule_synpred84_Java_fragment();
	partial void LeaveRule_synpred84_Java_fragment();

	// $ANTLR start synpred84_Java
	private void synpred84_Java_fragment()
	{
		EnterRule_synpred84_Java_fragment();
		EnterRule("synpred84_Java_fragment", 202);
		TraceIn("synpred84_Java_fragment", 202);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:28: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:500:28: arrayDeclaratorList
			{
			DebugLocation(500, 28);
			PushFollow(Follow._arrayDeclaratorList_in_synpred84_Java7220);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_Java_fragment", 202);
			LeaveRule("synpred84_Java_fragment", 202);
			LeaveRule_synpred84_Java_fragment();
		}
	}
	// $ANTLR end synpred84_Java

	partial void EnterRule_synpred86_Java_fragment();
	partial void LeaveRule_synpred86_Java_fragment();

	// $ANTLR start synpred86_Java
	private void synpred86_Java_fragment()
	{
		EnterRule_synpred86_Java_fragment();
		EnterRule("synpred86_Java_fragment", 204);
		TraceIn("synpred86_Java_fragment", 204);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:20: ( DOT typeIdent )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:510:20: DOT typeIdent
			{
			DebugLocation(510, 20);
			Match(input,DOT,Follow._DOT_in_synpred86_Java7305); if (state.failed) return;
			DebugLocation(510, 24);
			PushFollow(Follow._typeIdent_in_synpred86_Java7307);
			typeIdent();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_Java_fragment", 204);
			LeaveRule("synpred86_Java_fragment", 204);
			LeaveRule_synpred86_Java_fragment();
		}
	}
	// $ANTLR end synpred86_Java

	partial void EnterRule_synpred88_Java_fragment();
	partial void LeaveRule_synpred88_Java_fragment();

	// $ANTLR start synpred88_Java
	private void synpred88_Java_fragment()
	{
		EnterRule_synpred88_Java_fragment();
		EnterRule("synpred88_Java_fragment", 206);
		TraceIn("synpred88_Java_fragment", 206);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:16: ( genericTypeArgumentList )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:520:16: genericTypeArgumentList
			{
			DebugLocation(520, 16);
			PushFollow(Follow._genericTypeArgumentList_in_synpred88_Java7395);
			genericTypeArgumentList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred88_Java_fragment", 206);
			LeaveRule("synpred88_Java_fragment", 206);
			LeaveRule_synpred88_Java_fragment();
		}
	}
	// $ANTLR end synpred88_Java

	partial void EnterRule_synpred97_Java_fragment();
	partial void LeaveRule_synpred97_Java_fragment();

	// $ANTLR start synpred97_Java
	private void synpred97_Java_fragment()
	{
		EnterRule_synpred97_Java_fragment();
		EnterRule("synpred97_Java_fragment", 215);
		TraceIn("synpred97_Java_fragment", 215);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:40: ( COMMA genericTypeArgument )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:540:40: COMMA genericTypeArgument
			{
			DebugLocation(540, 40);
			Match(input,COMMA,Follow._COMMA_in_synpred97_Java7538); if (state.failed) return;
			DebugLocation(540, 46);
			PushFollow(Follow._genericTypeArgument_in_synpred97_Java7540);
			genericTypeArgument();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_Java_fragment", 215);
			LeaveRule("synpred97_Java_fragment", 215);
			LeaveRule_synpred97_Java_fragment();
		}
	}
	// $ANTLR end synpred97_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	private void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 217);
		TraceIn("synpred99_Java_fragment", 217);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:546:18: ( genericWildcardBoundType )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:546:18: genericWildcardBoundType
			{
			DebugLocation(546, 18);
			PushFollow(Follow._genericWildcardBoundType_in_synpred99_Java7594);
			genericWildcardBoundType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 217);
			LeaveRule("synpred99_Java_fragment", 217);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred104_Java_fragment();
	partial void LeaveRule_synpred104_Java_fragment();

	// $ANTLR start synpred104_Java
	private void synpred104_Java_fragment()
	{
		EnterRule_synpred104_Java_fragment();
		EnterRule("synpred104_Java_fragment", 222);
		TraceIn("synpred104_Java_fragment", 222);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:42: ( COMMA formalParameterStandardDecl )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:42: COMMA formalParameterStandardDecl
			{
			DebugLocation(571, 42);
			Match(input,COMMA,Follow._COMMA_in_synpred104_Java7812); if (state.failed) return;
			DebugLocation(571, 48);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred104_Java7814);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred104_Java_fragment", 222);
			LeaveRule("synpred104_Java_fragment", 222);
			LeaveRule_synpred104_Java_fragment();
		}
	}
	// $ANTLR end synpred104_Java

	partial void EnterRule_synpred106_Java_fragment();
	partial void LeaveRule_synpred106_Java_fragment();

	// $ANTLR start synpred106_Java
	private void synpred106_Java_fragment()
	{
		EnterRule_synpred106_Java_fragment();
		EnterRule("synpred106_Java_fragment", 224);
		TraceIn("synpred106_Java_fragment", 224);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
			{
			DebugLocation(571, 13);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred106_Java7809);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(571, 41);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:41: ( COMMA formalParameterStandardDecl )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_1 = input.LA(1);

				if ((LA206_1==COMMA))
				{
					int LA206_2 = input.LA(2);

					if ((EvaluatePredicate(synpred104_Java_fragment)))
					{
						alt206 = 1;
					}


				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:42: COMMA formalParameterStandardDecl
					{
					DebugLocation(571, 42);
					Match(input,COMMA,Follow._COMMA_in_synpred106_Java7812); if (state.failed) return;
					DebugLocation(571, 48);
					PushFollow(Follow._formalParameterStandardDecl_in_synpred106_Java7814);
					formalParameterStandardDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }

			DebugLocation(571, 78);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:78: ( COMMA formalParameterVarArgDecl )?
			int alt207=2;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_1 = input.LA(1);

			if ((LA207_1==COMMA))
			{
				alt207 = 1;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:571:79: COMMA formalParameterVarArgDecl
				{
				DebugLocation(571, 79);
				Match(input,COMMA,Follow._COMMA_in_synpred106_Java7819); if (state.failed) return;
				DebugLocation(571, 85);
				PushFollow(Follow._formalParameterVarArgDecl_in_synpred106_Java7821);
				formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(207); }


			}

		}
		finally
		{
			TraceOut("synpred106_Java_fragment", 224);
			LeaveRule("synpred106_Java_fragment", 224);
			LeaveRule_synpred106_Java_fragment();
		}
	}
	// $ANTLR end synpred106_Java

	partial void EnterRule_synpred107_Java_fragment();
	partial void LeaveRule_synpred107_Java_fragment();

	// $ANTLR start synpred107_Java
	private void synpred107_Java_fragment()
	{
		EnterRule_synpred107_Java_fragment();
		EnterRule("synpred107_Java_fragment", 225);
		TraceIn("synpred107_Java_fragment", 225);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:574:13: ( formalParameterVarArgDecl )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:574:13: formalParameterVarArgDecl
			{
			DebugLocation(574, 13);
			PushFollow(Follow._formalParameterVarArgDecl_in_synpred107_Java7878);
			formalParameterVarArgDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_Java_fragment", 225);
			LeaveRule("synpred107_Java_fragment", 225);
			LeaveRule_synpred107_Java_fragment();
		}
	}
	// $ANTLR end synpred107_Java

	partial void EnterRule_synpred108_Java_fragment();
	partial void LeaveRule_synpred108_Java_fragment();

	// $ANTLR start synpred108_Java
	private void synpred108_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred108_Java_fragment();
		EnterRule("synpred108_Java_fragment", 226);
		TraceIn("synpred108_Java_fragment", 226);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:595:13: ( DOT ident= IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:595:13: DOT ident= IDENT
			{
			DebugLocation(595, 13);
			Match(input,DOT,Follow._DOT_in_synpred108_Java8123); if (state.failed) return;
			DebugLocation(595, 22);
			ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred108_Java8127); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_Java_fragment", 226);
			LeaveRule("synpred108_Java_fragment", 226);
			LeaveRule_synpred108_Java_fragment();
		}
	}
	// $ANTLR end synpred108_Java

	partial void EnterRule_synpred109_Java_fragment();
	partial void LeaveRule_synpred109_Java_fragment();

	// $ANTLR start synpred109_Java
	private void synpred109_Java_fragment()
	{
		EnterRule_synpred109_Java_fragment();
		EnterRule("synpred109_Java_fragment", 227);
		TraceIn("synpred109_Java_fragment", 227);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:9: ( annotation )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:602:9: annotation
			{
			DebugLocation(602, 9);
			PushFollow(Follow._annotation_in_synpred109_Java8180);
			annotation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_Java_fragment", 227);
			LeaveRule("synpred109_Java_fragment", 227);
			LeaveRule_synpred109_Java_fragment();
		}
	}
	// $ANTLR end synpred109_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	private void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 239);
		TraceIn("synpred121_Java_fragment", 239);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:653:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:653:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			{
			DebugLocation(653, 9);
			PushFollow(Follow._modifierList_in_synpred121_Java8634);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(653, 22);
			PushFollow(Follow._type_in_synpred121_Java8636);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(654, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_1 = input.LA(1);

			if ((LA212_1==IDENT))
			{
				int LA212_2 = input.LA(2);

				if ((LA212_2==LPAREN))
				{
					alt212 = 1;
				}
				else if ((LA212_2==ASSIGN||LA212_2==COMMA||LA212_2==LBRACK||LA212_2==SEMI))
				{
					alt212 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 212, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 212, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
				{
				DebugLocation(654, 13);
				Match(input,IDENT,Follow._IDENT_in_synpred121_Java8650); if (state.failed) return;
				DebugLocation(654, 19);
				Match(input,LPAREN,Follow._LPAREN_in_synpred121_Java8652); if (state.failed) return;
				DebugLocation(654, 26);
				Match(input,RPAREN,Follow._RPAREN_in_synpred121_Java8654); if (state.failed) return;
				DebugLocation(654, 33);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:33: ( annotationDefaultValue )?
				int alt211=2;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				int LA211_1 = input.LA(1);

				if ((LA211_1==DEFAULT))
				{
					alt211 = 1;
				}
				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:654:33: annotationDefaultValue
					{
					DebugLocation(654, 33);
					PushFollow(Follow._annotationDefaultValue_in_synpred121_Java8656);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(211); }

				DebugLocation(654, 57);
				Match(input,SEMI,Follow._SEMI_in_synpred121_Java8659); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:656:13: classFieldDeclaratorList SEMI
				{
				DebugLocation(656, 13);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred121_Java8701);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(656, 38);
				Match(input,SEMI,Follow._SEMI_in_synpred121_Java8703); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(212); }


			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 239);
			LeaveRule("synpred121_Java_fragment", 239);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred122_Java_fragment();
	partial void LeaveRule_synpred122_Java_fragment();

	// $ANTLR start synpred122_Java
	private void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 240);
		TraceIn("synpred122_Java_fragment", 240);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:669:9: ( localVariableDeclaration SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:669:9: localVariableDeclaration SEMI
			{
			DebugLocation(669, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred122_Java8795);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(669, 34);
			Match(input,SEMI,Follow._SEMI_in_synpred122_Java8797); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 240);
			LeaveRule("synpred122_Java_fragment", 240);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java

	partial void EnterRule_synpred123_Java_fragment();
	partial void LeaveRule_synpred123_Java_fragment();

	// $ANTLR start synpred123_Java
	private void synpred123_Java_fragment()
	{
		EnterRule_synpred123_Java_fragment();
		EnterRule("synpred123_Java_fragment", 241);
		TraceIn("synpred123_Java_fragment", 241);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:670:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:670:9: typeDeclaration
			{
			DebugLocation(670, 9);
			PushFollow(Follow._typeDeclaration_in_synpred123_Java8808);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred123_Java_fragment", 241);
			LeaveRule("synpred123_Java_fragment", 241);
			LeaveRule_synpred123_Java_fragment();
		}
	}
	// $ANTLR end synpred123_Java

	partial void EnterRule_synpred124_Java_fragment();
	partial void LeaveRule_synpred124_Java_fragment();

	// $ANTLR start synpred124_Java
	private void synpred124_Java_fragment()
	{
		EnterRule_synpred124_Java_fragment();
		EnterRule("synpred124_Java_fragment", 242);
		TraceIn("synpred124_Java_fragment", 242);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:5: ({...}? IDENT )
			{
			DebugLocation(679, 5);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:679:8: {...}? IDENT
			{
			DebugLocation(679, 8);
			if (!((input.LT(1).Text == "insert")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred124_Java", "input.LT(1).Text == \"insert\"");
			}
			DebugLocation(679, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred124_Java8856); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred124_Java_fragment", 242);
			LeaveRule("synpred124_Java_fragment", 242);
			LeaveRule_synpred124_Java_fragment();
		}
	}
	// $ANTLR end synpred124_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	private void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 243);
		TraceIn("synpred125_Java_fragment", 243);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:5: ({...}? IDENT )
			{
			DebugLocation(680, 5);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:680:8: {...}? IDENT
			{
			DebugLocation(680, 8);
			if (!((input.LT(1).Text == "update")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred125_Java", "input.LT(1).Text == \"update\"");
			}
			DebugLocation(680, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred125_Java8869); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 243);
			LeaveRule("synpred125_Java_fragment", 243);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred126_Java_fragment();
	partial void LeaveRule_synpred126_Java_fragment();

	// $ANTLR start synpred126_Java
	private void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 244);
		TraceIn("synpred126_Java_fragment", 244);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:5: ({...}? IDENT )
			{
			DebugLocation(681, 5);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:681:8: {...}? IDENT
			{
			DebugLocation(681, 8);
			if (!((input.LT(1).Text == "delete")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred126_Java", "input.LT(1).Text == \"delete\"");
			}
			DebugLocation(681, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred126_Java8882); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 244);
			LeaveRule("synpred126_Java_fragment", 244);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java

	partial void EnterRule_synpred129_Java_fragment();
	partial void LeaveRule_synpred129_Java_fragment();

	// $ANTLR start synpred129_Java
	private void synpred129_Java_fragment()
	{
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);

		EnterRule_synpred129_Java_fragment();
		EnterRule("synpred129_Java_fragment", 247);
		TraceIn("synpred129_Java_fragment", 247);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:705:13: ( ELSE elseStat= statement )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:705:13: ELSE elseStat= statement
			{
			DebugLocation(705, 13);
			Match(input,ELSE,Follow._ELSE_in_synpred129_Java9068); if (state.failed) return;
			DebugLocation(705, 26);
			PushFollow(Follow._statement_in_synpred129_Java9072);
			elseStat=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_Java_fragment", 247);
			LeaveRule("synpred129_Java_fragment", 247);
			LeaveRule_synpred129_Java_fragment();
		}
	}
	// $ANTLR end synpred129_Java

	partial void EnterRule_synpred131_Java_fragment();
	partial void LeaveRule_synpred131_Java_fragment();

	// $ANTLR start synpred131_Java
	private void synpred131_Java_fragment()
	{
		EnterRule_synpred131_Java_fragment();
		EnterRule("synpred131_Java_fragment", 249);
		TraceIn("synpred131_Java_fragment", 249);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:709:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:709:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
			{
			DebugLocation(709, 13);
			PushFollow(Follow._forInit_in_synpred131_Java9255);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(709, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred131_Java9257); if (state.failed) return;
			DebugLocation(709, 26);
			PushFollow(Follow._forCondition_in_synpred131_Java9259);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(709, 39);
			Match(input,SEMI,Follow._SEMI_in_synpred131_Java9261); if (state.failed) return;
			DebugLocation(709, 44);
			PushFollow(Follow._forUpdater_in_synpred131_Java9263);
			forUpdater();
			PopFollow();
			if (state.failed) return;
			DebugLocation(709, 55);
			Match(input,RPAREN,Follow._RPAREN_in_synpred131_Java9265); if (state.failed) return;
			DebugLocation(709, 62);
			PushFollow(Follow._statement_in_synpred131_Java9267);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred131_Java_fragment", 249);
			LeaveRule("synpred131_Java_fragment", 249);
			LeaveRule_synpred131_Java_fragment();
		}
	}
	// $ANTLR end synpred131_Java

	partial void EnterRule_synpred147_Java_fragment();
	partial void LeaveRule_synpred147_Java_fragment();

	// $ANTLR start synpred147_Java
	private void synpred147_Java_fragment()
	{
		EnterRule_synpred147_Java_fragment();
		EnterRule("synpred147_Java_fragment", 265);
		TraceIn("synpred147_Java_fragment", 265);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:721:9: ( IDENT COLON statement )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:721:9: IDENT COLON statement
			{
			DebugLocation(721, 9);
			Match(input,IDENT,Follow._IDENT_in_synpred147_Java9880); if (state.failed) return;
			DebugLocation(721, 15);
			Match(input,COLON,Follow._COLON_in_synpred147_Java9882); if (state.failed) return;
			DebugLocation(721, 21);
			PushFollow(Follow._statement_in_synpred147_Java9884);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred147_Java_fragment", 265);
			LeaveRule("synpred147_Java_fragment", 265);
			LeaveRule_synpred147_Java_fragment();
		}
	}
	// $ANTLR end synpred147_Java

	partial void EnterRule_synpred148_Java_fragment();
	partial void LeaveRule_synpred148_Java_fragment();

	// $ANTLR start synpred148_Java
	private void synpred148_Java_fragment()
	{
		EnterRule_synpred148_Java_fragment();
		EnterRule("synpred148_Java_fragment", 266);
		TraceIn("synpred148_Java_fragment", 266);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:722:9: ( dmlOperation )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:722:9: dmlOperation
			{
			DebugLocation(722, 9);
			PushFollow(Follow._dmlOperation_in_synpred148_Java9951);
			dmlOperation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_Java_fragment", 266);
			LeaveRule("synpred148_Java_fragment", 266);
			LeaveRule_synpred148_Java_fragment();
		}
	}
	// $ANTLR end synpred148_Java

	partial void EnterRule_synpred149_Java_fragment();
	partial void LeaveRule_synpred149_Java_fragment();

	// $ANTLR start synpred149_Java
	private void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 267);
		TraceIn("synpred149_Java_fragment", 267);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:723:9: ( expression SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:723:9: expression SEMI
			{
			DebugLocation(723, 9);
			PushFollow(Follow._expression_in_synpred149_Java9961);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(723, 20);
			Match(input,SEMI,Follow._SEMI_in_synpred149_Java9963); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 267);
			LeaveRule("synpred149_Java_fragment", 267);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java

	partial void EnterRule_synpred150_Java_fragment();
	partial void LeaveRule_synpred150_Java_fragment();

	// $ANTLR start synpred150_Java
	private void synpred150_Java_fragment()
	{
		EnterRule_synpred150_Java_fragment();
		EnterRule("synpred150_Java_fragment", 268);
		TraceIn("synpred150_Java_fragment", 268);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:724:8: ({...}? expression )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:724:8: {...}? expression
			{
			DebugLocation(724, 8);
			if (!((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred150_Java", "input.LT(1).Text == \"system\" && input.LT(2).Text == \".\" && input.LT(3).Text == \"runas\"");
			}
			DebugLocation(724, 99);
			PushFollow(Follow._expression_in_synpred150_Java9976);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred150_Java_fragment", 268);
			LeaveRule("synpred150_Java_fragment", 268);
			LeaveRule_synpred150_Java_fragment();
		}
	}
	// $ANTLR end synpred150_Java

	partial void EnterRule_synpred153_Java_fragment();
	partial void LeaveRule_synpred153_Java_fragment();

	// $ANTLR start synpred153_Java
	private void synpred153_Java_fragment()
	{
		EnterRule_synpred153_Java_fragment();
		EnterRule("synpred153_Java_fragment", 271);
		TraceIn("synpred153_Java_fragment", 271);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:9: ( switchCaseLabel )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:748:9: switchCaseLabel
			{
			DebugLocation(748, 9);
			PushFollow(Follow._switchCaseLabel_in_synpred153_Java10181);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Java_fragment", 271);
			LeaveRule("synpred153_Java_fragment", 271);
			LeaveRule_synpred153_Java_fragment();
		}
	}
	// $ANTLR end synpred153_Java

	partial void EnterRule_synpred156_Java_fragment();
	partial void LeaveRule_synpred156_Java_fragment();

	// $ANTLR start synpred156_Java
	private void synpred156_Java_fragment()
	{
		EnterRule_synpred156_Java_fragment();
		EnterRule("synpred156_Java_fragment", 274);
		TraceIn("synpred156_Java_fragment", 274);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:760:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:760:9: localVariableDeclaration
			{
			DebugLocation(760, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred156_Java10271);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred156_Java_fragment", 274);
			LeaveRule("synpred156_Java_fragment", 274);
			LeaveRule_synpred156_Java_fragment();
		}
	}
	// $ANTLR end synpred156_Java

	partial void EnterRule_synpred157_Java_fragment();
	partial void LeaveRule_synpred157_Java_fragment();

	// $ANTLR start synpred157_Java
	private void synpred157_Java_fragment()
	{
		EnterRule_synpred157_Java_fragment();
		EnterRule("synpred157_Java_fragment", 275);
		TraceIn("synpred157_Java_fragment", 275);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:761:9: ( expressionList )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:761:9: expressionList
			{
			DebugLocation(761, 9);
			PushFollow(Follow._expressionList_in_synpred157_Java10293);
			expressionList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Java_fragment", 275);
			LeaveRule("synpred157_Java_fragment", 275);
			LeaveRule_synpred157_Java_fragment();
		}
	}
	// $ANTLR end synpred157_Java

	partial void EnterRule_synpred185_Java_fragment();
	partial void LeaveRule_synpred185_Java_fragment();

	// $ANTLR start synpred185_Java
	private void synpred185_Java_fragment()
	{
		EnterRule_synpred185_Java_fragment();
		EnterRule("synpred185_Java_fragment", 303);
		TraceIn("synpred185_Java_fragment", 303);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:13: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:848:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
			{
			DebugLocation(848, 13);
			if ((input.LA(1)>=GREATER_OR_EQUAL && input.LA(1)<=GREATER_THAN)||(input.LA(1)>=LESS_OR_EQUAL && input.LA(1)<=LESS_THAN))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(853, 13);
			PushFollow(Follow._shiftExpression_in_synpred185_Java11240);
			shiftExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred185_Java_fragment", 303);
			LeaveRule("synpred185_Java_fragment", 303);
			LeaveRule_synpred185_Java_fragment();
		}
	}
	// $ANTLR end synpred185_Java

	partial void EnterRule_synpred190_Java_fragment();
	partial void LeaveRule_synpred190_Java_fragment();

	// $ANTLR start synpred190_Java
	private void synpred190_Java_fragment()
	{
		EnterRule_synpred190_Java_fragment();
		EnterRule("synpred190_Java_fragment", 308);
		TraceIn("synpred190_Java_fragment", 308);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:13: ( ( PLUS | MINUS ) multiplicativeExpression )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:869:13: ( PLUS | MINUS ) multiplicativeExpression
			{
			DebugLocation(869, 13);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(872, 13);
			PushFollow(Follow._multiplicativeExpression_in_synpred190_Java11455);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred190_Java_fragment", 308);
			LeaveRule("synpred190_Java_fragment", 308);
			LeaveRule_synpred190_Java_fragment();
		}
	}
	// $ANTLR end synpred190_Java

	partial void EnterRule_synpred200_Java_fragment();
	partial void LeaveRule_synpred200_Java_fragment();

	// $ANTLR start synpred200_Java
	private void synpred200_Java_fragment()
	{
		EnterRule_synpred200_Java_fragment();
		EnterRule("synpred200_Java_fragment", 318);
		TraceIn("synpred200_Java_fragment", 318);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:897:9: ( LPAREN type RPAREN unaryExpression )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:897:9: LPAREN type RPAREN unaryExpression
			{
			DebugLocation(897, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred200_Java11823); if (state.failed) return;
			DebugLocation(897, 16);
			PushFollow(Follow._type_in_synpred200_Java11825);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(897, 21);
			Match(input,RPAREN,Follow._RPAREN_in_synpred200_Java11827); if (state.failed) return;
			DebugLocation(897, 28);
			PushFollow(Follow._unaryExpression_in_synpred200_Java11829);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred200_Java_fragment", 318);
			LeaveRule("synpred200_Java_fragment", 318);
			LeaveRule_synpred200_Java_fragment();
		}
	}
	// $ANTLR end synpred200_Java

	partial void EnterRule_synpred202_Java_fragment();
	partial void LeaveRule_synpred202_Java_fragment();

	// $ANTLR start synpred202_Java
	private void synpred202_Java_fragment()
	{
		EnterRule_synpred202_Java_fragment();
		EnterRule("synpred202_Java_fragment", 320);
		TraceIn("synpred202_Java_fragment", 320);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:21: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:911:21: arguments
			{
			DebugLocation(911, 21);
			PushFollow(Follow._arguments_in_synpred202_Java12173);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Java_fragment", 320);
			LeaveRule("synpred202_Java_fragment", 320);
			LeaveRule_synpred202_Java_fragment();
		}
	}
	// $ANTLR end synpred202_Java

	partial void EnterRule_synpred206_Java_fragment();
	partial void LeaveRule_synpred206_Java_fragment();

	// $ANTLR start synpred206_Java
	private void synpred206_Java_fragment()
	{
		EnterRule_synpred206_Java_fragment();
		EnterRule("synpred206_Java_fragment", 324);
		TraceIn("synpred206_Java_fragment", 324);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:917:21: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:917:21: arguments
			{
			DebugLocation(917, 21);
			PushFollow(Follow._arguments_in_synpred206_Java12437);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Java_fragment", 324);
			LeaveRule("synpred206_Java_fragment", 324);
			LeaveRule_synpred206_Java_fragment();
		}
	}
	// $ANTLR end synpred206_Java

	partial void EnterRule_synpred210_Java_fragment();
	partial void LeaveRule_synpred210_Java_fragment();

	// $ANTLR start synpred210_Java
	private void synpred210_Java_fragment()
	{
		EnterRule_synpred210_Java_fragment();
		EnterRule("synpred210_Java_fragment", 328);
		TraceIn("synpred210_Java_fragment", 328);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:924:13: ( INC )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:924:13: INC
			{
			DebugLocation(924, 13);
			Match(input,INC,Follow._INC_in_synpred210_Java12630); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred210_Java_fragment", 328);
			LeaveRule("synpred210_Java_fragment", 328);
			LeaveRule_synpred210_Java_fragment();
		}
	}
	// $ANTLR end synpred210_Java

	partial void EnterRule_synpred211_Java_fragment();
	partial void LeaveRule_synpred211_Java_fragment();

	// $ANTLR start synpred211_Java
	private void synpred211_Java_fragment()
	{
		EnterRule_synpred211_Java_fragment();
		EnterRule("synpred211_Java_fragment", 329);
		TraceIn("synpred211_Java_fragment", 329);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:925:13: ( DEC )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:925:13: DEC
			{
			DebugLocation(925, 13);
			Match(input,DEC,Follow._DEC_in_synpred211_Java12654); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Java_fragment", 329);
			LeaveRule("synpred211_Java_fragment", 329);
			LeaveRule_synpred211_Java_fragment();
		}
	}
	// $ANTLR end synpred211_Java

	partial void EnterRule_synpred219_Java_fragment();
	partial void LeaveRule_synpred219_Java_fragment();

	// $ANTLR start synpred219_Java
	private void synpred219_Java_fragment()
	{
		EnterRule_synpred219_Java_fragment();
		EnterRule("synpred219_Java_fragment", 337);
		TraceIn("synpred219_Java_fragment", 337);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:934:9: ( genericTypeArgumentListSimplified ( SUPER ( arguments | DOT IDENT arguments ) | IDENT arguments | THIS arguments ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:934:9: genericTypeArgumentListSimplified ( SUPER ( arguments | DOT IDENT arguments ) | IDENT arguments | THIS arguments )
			{
			DebugLocation(934, 9);
			PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred219_Java12742);
			genericTypeArgumentListSimplified();
			PopFollow();
			if (state.failed) return;
			DebugLocation(935, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:935:9: ( SUPER ( arguments | DOT IDENT arguments ) | IDENT arguments | THIS arguments )
			int alt230=3;
			try { DebugEnterSubRule(230);
			try { DebugEnterDecision(230, false);
			switch (input.LA(1))
			{
			case SUPER:
				{
				alt230 = 1;
				}
				break;
			case IDENT:
				{
				alt230 = 2;
				}
				break;
			case THIS:
				{
				alt230 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:935:13: SUPER ( arguments | DOT IDENT arguments )
				{
				DebugLocation(935, 13);
				Match(input,SUPER,Follow._SUPER_in_synpred219_Java12757); if (state.failed) return;
				DebugLocation(936, 13);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:936:13: ( arguments | DOT IDENT arguments )
				int alt229=2;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, false);
				int LA229_1 = input.LA(1);

				if ((LA229_1==LPAREN))
				{
					alt229 = 1;
				}
				else if ((LA229_1==DOT))
				{
					alt229 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 229, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:936:17: arguments
					{
					DebugLocation(936, 17);
					PushFollow(Follow._arguments_in_synpred219_Java12775);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:937:17: DOT IDENT arguments
					{
					DebugLocation(937, 17);
					Match(input,DOT,Follow._DOT_in_synpred219_Java12835); if (state.failed) return;
					DebugLocation(937, 21);
					Match(input,IDENT,Follow._IDENT_in_synpred219_Java12837); if (state.failed) return;
					DebugLocation(937, 27);
					PushFollow(Follow._arguments_in_synpred219_Java12839);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:939:13: IDENT arguments
				{
				DebugLocation(939, 13);
				Match(input,IDENT,Follow._IDENT_in_synpred219_Java12906); if (state.failed) return;
				DebugLocation(939, 19);
				PushFollow(Follow._arguments_in_synpred219_Java12908);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:940:13: THIS arguments
				{
				DebugLocation(940, 13);
				Match(input,THIS,Follow._THIS_in_synpred219_Java12961); if (state.failed) return;
				DebugLocation(940, 18);
				PushFollow(Follow._arguments_in_synpred219_Java12963);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(230); }


			}

		}
		finally
		{
			TraceOut("synpred219_Java_fragment", 337);
			LeaveRule("synpred219_Java_fragment", 337);
			LeaveRule_synpred219_Java_fragment();
		}
	}
	// $ANTLR end synpred219_Java

	partial void EnterRule_synpred220_Java_fragment();
	partial void LeaveRule_synpred220_Java_fragment();

	// $ANTLR start synpred220_Java
	private void synpred220_Java_fragment()
	{
		EnterRule_synpred220_Java_fragment();
		EnterRule("synpred220_Java_fragment", 338);
		TraceIn("synpred220_Java_fragment", 338);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:945:13: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:945:13: arguments
			{
			DebugLocation(945, 13);
			PushFollow(Follow._arguments_in_synpred220_Java13104);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Java_fragment", 338);
			LeaveRule("synpred220_Java_fragment", 338);
			LeaveRule_synpred220_Java_fragment();
		}
	}
	// $ANTLR end synpred220_Java

	partial void EnterRule_synpred222_Java_fragment();
	partial void LeaveRule_synpred222_Java_fragment();

	// $ANTLR start synpred222_Java
	private void synpred222_Java_fragment()
	{
		EnterRule_synpred222_Java_fragment();
		EnterRule("synpred222_Java_fragment", 340);
		TraceIn("synpred222_Java_fragment", 340);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:947:9: ( SUPER arguments )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:947:9: SUPER arguments
			{
			DebugLocation(947, 9);
			Match(input,SUPER,Follow._SUPER_in_synpred222_Java13169); if (state.failed) return;
			DebugLocation(947, 15);
			PushFollow(Follow._arguments_in_synpred222_Java13171);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred222_Java_fragment", 340);
			LeaveRule("synpred222_Java_fragment", 340);
			LeaveRule_synpred222_Java_fragment();
		}
	}
	// $ANTLR end synpred222_Java

	partial void EnterRule_synpred223_Java_fragment();
	partial void LeaveRule_synpred223_Java_fragment();

	// $ANTLR start synpred223_Java
	private void synpred223_Java_fragment()
	{
		EnterRule_synpred223_Java_fragment();
		EnterRule("synpred223_Java_fragment", 341);
		TraceIn("synpred223_Java_fragment", 341);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:13: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:13: arguments
			{
			DebugLocation(950, 13);
			PushFollow(Follow._arguments_in_synpred223_Java13255);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred223_Java_fragment", 341);
			LeaveRule("synpred223_Java_fragment", 341);
			LeaveRule_synpred223_Java_fragment();
		}
	}
	// $ANTLR end synpred223_Java

	partial void EnterRule_synpred224_Java_fragment();
	partial void LeaveRule_synpred224_Java_fragment();

	// $ANTLR start synpred224_Java
	private void synpred224_Java_fragment()
	{
		EnterRule_synpred224_Java_fragment();
		EnterRule("synpred224_Java_fragment", 342);
		TraceIn("synpred224_Java_fragment", 342);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:9: ( ( SUPER DOT IDENT ) ( arguments |) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:9: ( SUPER DOT IDENT ) ( arguments |)
			{
			DebugLocation(948, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:9: ( SUPER DOT IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:948:13: SUPER DOT IDENT
			{
			DebugLocation(948, 13);
			Match(input,SUPER,Follow._SUPER_in_synpred224_Java13227); if (state.failed) return;
			DebugLocation(948, 19);
			Match(input,DOT,Follow._DOT_in_synpred224_Java13229); if (state.failed) return;
			DebugLocation(948, 23);
			Match(input,IDENT,Follow._IDENT_in_synpred224_Java13231); if (state.failed) return;

			}

			DebugLocation(950, 9);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:9: ( arguments |)
			int alt232=2;
			try { DebugEnterSubRule(232);
			try { DebugEnterDecision(232, false);
			int LA232_1 = input.LA(1);

			if ((LA232_1==LPAREN))
			{
				alt232 = 1;
			}
			else if ((LA232_1==EOF))
			{
				alt232 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 232, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:950:13: arguments
				{
				DebugLocation(950, 13);
				PushFollow(Follow._arguments_in_synpred224_Java13255);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:951:57: 
				{
				}
				break;

			}
			} finally { DebugExitSubRule(232); }


			}

		}
		finally
		{
			TraceOut("synpred224_Java_fragment", 342);
			LeaveRule("synpred224_Java_fragment", 342);
			LeaveRule_synpred224_Java_fragment();
		}
	}
	// $ANTLR end synpred224_Java

	partial void EnterRule_synpred227_Java_fragment();
	partial void LeaveRule_synpred227_Java_fragment();

	// $ANTLR start synpred227_Java
	private void synpred227_Java_fragment()
	{
		EnterRule_synpred227_Java_fragment();
		EnterRule("synpred227_Java_fragment", 345);
		TraceIn("synpred227_Java_fragment", 345);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:958:8: ( genericTypeArgumentListSimplified DOT CLASS )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:958:8: genericTypeArgumentListSimplified DOT CLASS
			{
			DebugLocation(958, 8);
			PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred227_Java13580);
			genericTypeArgumentListSimplified();
			PopFollow();
			if (state.failed) return;
			DebugLocation(958, 42);
			Match(input,DOT,Follow._DOT_in_synpred227_Java13582); if (state.failed) return;
			DebugLocation(958, 46);
			Match(input,CLASS,Follow._CLASS_in_synpred227_Java13584); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred227_Java_fragment", 345);
			LeaveRule("synpred227_Java_fragment", 345);
			LeaveRule_synpred227_Java_fragment();
		}
	}
	// $ANTLR end synpred227_Java

	partial void EnterRule_synpred229_Java_fragment();
	partial void LeaveRule_synpred229_Java_fragment();

	// $ANTLR start synpred229_Java
	private void synpred229_Java_fragment()
	{
		EnterRule_synpred229_Java_fragment();
		EnterRule("synpred229_Java_fragment", 347);
		TraceIn("synpred229_Java_fragment", 347);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:13: ( arrayDeclarator )+ ( DOT CLASS )
			{
			DebugLocation(967, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:13: ( arrayDeclarator )+
			int cnt234=0;
			try { DebugEnterSubRule(234);
			while (true)
			{
				int alt234=2;
				try { DebugEnterDecision(234, false);
				int LA234_1 = input.LA(1);

				if ((LA234_1==LBRACK))
				{
					alt234 = 1;
				}


				} finally { DebugExitDecision(234); }
				switch (alt234)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:967:17: arrayDeclarator
					{
					DebugLocation(967, 17);
					PushFollow(Follow._arrayDeclarator_in_synpred229_Java13749);
					arrayDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt234 >= 1)
						goto loop234;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee234 = new EarlyExitException( 234, input );
					DebugRecognitionException(eee234);
					throw eee234;
				}
				cnt234++;
			}
			loop234:
				;

			} finally { DebugExitSubRule(234); }

			DebugLocation(969, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:969:13: ( DOT CLASS )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:969:17: DOT CLASS
			{
			DebugLocation(969, 17);
			Match(input,DOT,Follow._DOT_in_synpred229_Java13817); if (state.failed) return;
			DebugLocation(969, 21);
			Match(input,CLASS,Follow._CLASS_in_synpred229_Java13819); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred229_Java_fragment", 347);
			LeaveRule("synpred229_Java_fragment", 347);
			LeaveRule_synpred229_Java_fragment();
		}
	}
	// $ANTLR end synpred229_Java

	partial void EnterRule_synpred230_Java_fragment();
	partial void LeaveRule_synpred230_Java_fragment();

	// $ANTLR start synpred230_Java
	private void synpred230_Java_fragment()
	{
		EnterRule_synpred230_Java_fragment();
		EnterRule("synpred230_Java_fragment", 348);
		TraceIn("synpred230_Java_fragment", 348);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: ( block )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: block
			{
			DebugLocation(971, 23);
			PushFollow(Follow._block_in_synpred230_Java13891);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_Java_fragment", 348);
			LeaveRule("synpred230_Java_fragment", 348);
			LeaveRule_synpred230_Java_fragment();
		}
	}
	// $ANTLR end synpred230_Java

	partial void EnterRule_synpred231_Java_fragment();
	partial void LeaveRule_synpred231_Java_fragment();

	// $ANTLR start synpred231_Java
	private void synpred231_Java_fragment()
	{
		EnterRule_synpred231_Java_fragment();
		EnterRule("synpred231_Java_fragment", 349);
		TraceIn("synpred231_Java_fragment", 349);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:13: ( arguments ( block )? )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:13: arguments ( block )?
			{
			DebugLocation(971, 13);
			PushFollow(Follow._arguments_in_synpred231_Java13889);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(971, 23);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: ( block )?
			int alt235=2;
			try { DebugEnterSubRule(235);
			try { DebugEnterDecision(235, false);
			int LA235_1 = input.LA(1);

			if ((LA235_1==LCURLY))
			{
				alt235 = 1;
			}
			} finally { DebugExitDecision(235); }
			switch (alt235)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:971:23: block
				{
				DebugLocation(971, 23);
				PushFollow(Follow._block_in_synpred231_Java13891);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(235); }


			}

		}
		finally
		{
			TraceOut("synpred231_Java_fragment", 349);
			LeaveRule("synpred231_Java_fragment", 349);
			LeaveRule_synpred231_Java_fragment();
		}
	}
	// $ANTLR end synpred231_Java

	partial void EnterRule_synpred238_Java_fragment();
	partial void LeaveRule_synpred238_Java_fragment();

	// $ANTLR start synpred238_Java
	private void synpred238_Java_fragment()
	{
		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);

		EnterRule_synpred238_Java_fragment();
		EnterRule("synpred238_Java_fragment", 356);
		TraceIn("synpred238_Java_fragment", 356);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:972:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:972:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			{
			DebugLocation(972, 21);
			outerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred238_Java13952); if (state.failed) return;
			DebugLocation(973, 13);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:973:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			int alt238=5;
			try { DebugEnterSubRule(238);
			try { DebugEnterDecision(238, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt238 = 1;
				}
				break;
			case LESS_THAN:
				{
				alt238 = 2;
				}
				break;
			case THIS:
				{
				alt238 = 3;
				}
				break;
			case SUPER:
				{
				alt238 = 4;
				}
				break;
			case NEW:
				{
				alt238 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 238, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(238); }
			switch (alt238)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:973:17: CLASS
				{
				DebugLocation(973, 17);
				Match(input,CLASS,Follow._CLASS_in_synpred238_Java13970); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:974:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				{
				DebugLocation(974, 17);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred238_Java14033);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;
				DebugLocation(975, 17);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:975:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				int alt237=3;
				try { DebugEnterSubRule(237);
				try { DebugEnterDecision(237, false);
				int LA237_1 = input.LA(1);

				if ((LA237_1==SUPER))
				{
					int LA237_2 = input.LA(2);

					if ((LA237_2==DOT))
					{
						alt237 = 2;
					}
					else if ((LA237_2==LPAREN))
					{
						alt237 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 237, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA237_1==IDENT))
				{
					alt237 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 237, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(237); }
				switch (alt237)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:975:21: Super= SUPER arguments
					{
					DebugLocation(975, 26);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred238_Java14058); if (state.failed) return;
					DebugLocation(975, 33);
					PushFollow(Follow._arguments_in_synpred238_Java14060);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:976:21: SUPER innerDot= DOT IDENT arguments
					{
					DebugLocation(976, 21);
					Match(input,SUPER,Follow._SUPER_in_synpred238_Java14110); if (state.failed) return;
					DebugLocation(976, 35);
					innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred238_Java14114); if (state.failed) return;
					DebugLocation(976, 40);
					Match(input,IDENT,Follow._IDENT_in_synpred238_Java14116); if (state.failed) return;
					DebugLocation(976, 46);
					PushFollow(Follow._arguments_in_synpred238_Java14118);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:977:21: IDENT arguments
					{
					DebugLocation(977, 21);
					Match(input,IDENT,Follow._IDENT_in_synpred238_Java14168); if (state.failed) return;
					DebugLocation(977, 27);
					PushFollow(Follow._arguments_in_synpred238_Java14170);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(237); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:979:17: THIS
				{
				DebugLocation(979, 17);
				Match(input,THIS,Follow._THIS_in_synpred238_Java14245); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:980:17: Super= SUPER arguments
				{
				DebugLocation(980, 22);
				Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred238_Java14311); if (state.failed) return;
				DebugLocation(980, 29);
				PushFollow(Follow._arguments_in_synpred238_Java14313);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:981:17: innerNewExpression
				{
				DebugLocation(981, 17);
				PushFollow(Follow._innerNewExpression_in_synpred238_Java14361);
				innerNewExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(238); }


			}

		}
		finally
		{
			TraceOut("synpred238_Java_fragment", 356);
			LeaveRule("synpred238_Java_fragment", 356);
			LeaveRule_synpred238_Java_fragment();
		}
	}
	// $ANTLR end synpred238_Java

	partial void EnterRule_synpred244_Java_fragment();
	partial void LeaveRule_synpred244_Java_fragment();

	// $ANTLR start synpred244_Java
	private void synpred244_Java_fragment()
	{
		EnterRule_synpred244_Java_fragment();
		EnterRule("synpred244_Java_fragment", 362);
		TraceIn("synpred244_Java_fragment", 362);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1001:10: ( mapDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1001:10: mapDeclaration
			{
			DebugLocation(1001, 10);
			PushFollow(Follow._mapDeclaration_in_synpred244_Java14606);
			mapDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred244_Java_fragment", 362);
			LeaveRule("synpred244_Java_fragment", 362);
			LeaveRule_synpred244_Java_fragment();
		}
	}
	// $ANTLR end synpred244_Java

	partial void EnterRule_synpred245_Java_fragment();
	partial void LeaveRule_synpred245_Java_fragment();

	// $ANTLR start synpred245_Java
	private void synpred245_Java_fragment()
	{
		EnterRule_synpred245_Java_fragment();
		EnterRule("synpred245_Java_fragment", 363);
		TraceIn("synpred245_Java_fragment", 363);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1002:10: ( setDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1002:10: setDeclaration
			{
			DebugLocation(1002, 10);
			PushFollow(Follow._setDeclaration_in_synpred245_Java14625);
			setDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred245_Java_fragment", 363);
			LeaveRule("synpred245_Java_fragment", 363);
			LeaveRule_synpred245_Java_fragment();
		}
	}
	// $ANTLR end synpred245_Java

	partial void EnterRule_synpred247_Java_fragment();
	partial void LeaveRule_synpred247_Java_fragment();

	// $ANTLR start synpred247_Java
	private void synpred247_Java_fragment()
	{
		EnterRule_synpred247_Java_fragment();
		EnterRule("synpred247_Java_fragment", 365);
		TraceIn("synpred247_Java_fragment", 365);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1005:27: ( classBody )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1005:27: classBody
			{
			DebugLocation(1005, 27);
			PushFollow(Follow._classBody_in_synpred247_Java14716);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred247_Java_fragment", 365);
			LeaveRule("synpred247_Java_fragment", 365);
			LeaveRule_synpred247_Java_fragment();
		}
	}
	// $ANTLR end synpred247_Java

	partial void EnterRule_synpred249_Java_fragment();
	partial void LeaveRule_synpred249_Java_fragment();

	// $ANTLR start synpred249_Java
	private void synpred249_Java_fragment()
	{
		EnterRule_synpred249_Java_fragment();
		EnterRule("synpred249_Java_fragment", 367);
		TraceIn("synpred249_Java_fragment", 367);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:64: ( classBody )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1012:64: classBody
			{
			DebugLocation(1012, 64);
			PushFollow(Follow._classBody_in_synpred249_Java14822);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Java_fragment", 367);
			LeaveRule("synpred249_Java_fragment", 367);
			LeaveRule_synpred249_Java_fragment();
		}
	}
	// $ANTLR end synpred249_Java

	partial void EnterRule_synpred251_Java_fragment();
	partial void LeaveRule_synpred251_Java_fragment();

	// $ANTLR start synpred251_Java
	private void synpred251_Java_fragment()
	{
		EnterRule_synpred251_Java_fragment();
		EnterRule("synpred251_Java_fragment", 369);
		TraceIn("synpred251_Java_fragment", 369);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:37: ( LBRACK expression RBRACK )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1018:37: LBRACK expression RBRACK
			{
			DebugLocation(1018, 37);
			Match(input,LBRACK,Follow._LBRACK_in_synpred251_Java14889); if (state.failed) return;
			DebugLocation(1018, 45);
			PushFollow(Follow._expression_in_synpred251_Java14892);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1018, 56);
			Match(input,RBRACK,Follow._RBRACK_in_synpred251_Java14894); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred251_Java_fragment", 369);
			LeaveRule("synpred251_Java_fragment", 369);
			LeaveRule_synpred251_Java_fragment();
		}
	}
	// $ANTLR end synpred251_Java

	partial void EnterRule_synpred268_Java_fragment();
	partial void LeaveRule_synpred268_Java_fragment();

	// $ANTLR start synpred268_Java
	private void synpred268_Java_fragment()
	{
		EnterRule_synpred268_Java_fragment();
		EnterRule("synpred268_Java_fragment", 386);
		TraceIn("synpred268_Java_fragment", 386);
		try
		{
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			{
			DebugLocation(1041, 2);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
			{
			DebugLocation(1041, 3);
			Match(input,LCURLY,Follow._LCURLY_in_synpred268_Java15068); if (state.failed) return;
			DebugLocation(1041, 7);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:7: ( modifier )?
			int alt241=2;
			try { DebugEnterSubRule(241);
			try { DebugEnterDecision(241, false);
			int LA241_1 = input.LA(1);

			if ((LA241_1==ABSTRACT||LA241_1==AT||LA241_1==FINAL||LA241_1==GLOBAL||LA241_1==NATIVE||LA241_1==OVERRIDE||LA241_1==PRIVATE||(LA241_1>=PROTECTED && LA241_1<=PUBLIC)||LA241_1==STATIC||LA241_1==STRICTFP||(LA241_1>=SYNCHRONIZED && LA241_1<=TEST_METHOD)||LA241_1==TRANSIENT||LA241_1==VIRTUAL||LA241_1==VOLATILE||(LA241_1>=WITHOUT_SHARING && LA241_1<=WITH_SHARING)))
			{
				alt241 = 1;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:7: modifier
				{
				DebugLocation(1041, 7);
				PushFollow(Follow._modifier_in_synpred268_Java15070);
				modifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(241); }

			DebugLocation(1041, 17);
			PushFollow(Follow._getRule_in_synpred268_Java15073);
			getRule();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1041, 25);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:25: ( SEMI | block )
			int alt242=2;
			try { DebugEnterSubRule(242);
			try { DebugEnterDecision(242, false);
			int LA242_1 = input.LA(1);

			if ((LA242_1==SEMI))
			{
				alt242 = 1;
			}
			else if ((LA242_1==LCURLY))
			{
				alt242 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 242, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:26: SEMI
				{
				DebugLocation(1041, 26);
				Match(input,SEMI,Follow._SEMI_in_synpred268_Java15076); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:31: block
				{
				DebugLocation(1041, 31);
				PushFollow(Follow._block_in_synpred268_Java15078);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(242); }

			DebugLocation(1041, 38);
			// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:38: ( ( modifier )? setRule ( SEMI | block ) )?
			int alt245=2;
			try { DebugEnterSubRule(245);
			try { DebugEnterDecision(245, false);
			int LA245_1 = input.LA(1);

			if ((LA245_1==ABSTRACT||LA245_1==AT||LA245_1==FINAL||LA245_1==GLOBAL||LA245_1==IDENT||LA245_1==NATIVE||LA245_1==OVERRIDE||LA245_1==PRIVATE||(LA245_1>=PROTECTED && LA245_1<=PUBLIC)||LA245_1==STATIC||LA245_1==STRICTFP||(LA245_1>=SYNCHRONIZED && LA245_1<=TEST_METHOD)||LA245_1==TRANSIENT||LA245_1==VIRTUAL||LA245_1==VOLATILE||(LA245_1>=WITHOUT_SHARING && LA245_1<=WITH_SHARING)))
			{
				alt245 = 1;
			}
			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: ( modifier )? setRule ( SEMI | block )
				{
				DebugLocation(1041, 39);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: ( modifier )?
				int alt243=2;
				try { DebugEnterSubRule(243);
				try { DebugEnterDecision(243, false);
				int LA243_1 = input.LA(1);

				if ((LA243_1==ABSTRACT||LA243_1==AT||LA243_1==FINAL||LA243_1==GLOBAL||LA243_1==NATIVE||LA243_1==OVERRIDE||LA243_1==PRIVATE||(LA243_1>=PROTECTED && LA243_1<=PUBLIC)||LA243_1==STATIC||LA243_1==STRICTFP||(LA243_1>=SYNCHRONIZED && LA243_1<=TEST_METHOD)||LA243_1==TRANSIENT||LA243_1==VIRTUAL||LA243_1==VOLATILE||(LA243_1>=WITHOUT_SHARING && LA243_1<=WITH_SHARING)))
				{
					alt243 = 1;
				}
				} finally { DebugExitDecision(243); }
				switch (alt243)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:39: modifier
					{
					DebugLocation(1041, 39);
					PushFollow(Follow._modifier_in_synpred268_Java15082);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(243); }

				DebugLocation(1041, 49);
				PushFollow(Follow._setRule_in_synpred268_Java15085);
				setRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1041, 57);
				// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:57: ( SEMI | block )
				int alt244=2;
				try { DebugEnterSubRule(244);
				try { DebugEnterDecision(244, false);
				int LA244_1 = input.LA(1);

				if ((LA244_1==SEMI))
				{
					alt244 = 1;
				}
				else if ((LA244_1==LCURLY))
				{
					alt244 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 244, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(244); }
				switch (alt244)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:58: SEMI
					{
					DebugLocation(1041, 58);
					Match(input,SEMI,Follow._SEMI_in_synpred268_Java15088); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\E1ektr0\\Downloads\\ApexParser (3)\\ApexParser\\ApexParser\\Java.g:1041:63: block
					{
					DebugLocation(1041, 63);
					PushFollow(Follow._block_in_synpred268_Java15090);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(244); }


				}
				break;

			}
			} finally { DebugExitSubRule(245); }

			DebugLocation(1041, 72);
			Match(input,RCURLY,Follow._RCURLY_in_synpred268_Java15095); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred268_Java_fragment", 386);
			LeaveRule("synpred268_Java_fragment", 386);
			LeaveRule_synpred268_Java_fragment();
		}
	}
	// $ANTLR end synpred268_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA119 dfa119;
	private DFA123 dfa123;
	private DFA129 dfa129;
	private DFA130 dfa130;
	private DFA133 dfa133;
	private DFA136 dfa136;
	private DFA137 dfa137;
	private DFA144 dfa144;
	private DFA141 dfa141;
	private DFA149 dfa149;
	private DFA153 dfa153;
	private DFA154 dfa154;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa119 = new DFA119( this, SpecialStateTransition119 );
		dfa123 = new DFA123( this, SpecialStateTransition123 );
		dfa129 = new DFA129( this, SpecialStateTransition129 );
		dfa130 = new DFA130( this, SpecialStateTransition130 );
		dfa133 = new DFA133( this, SpecialStateTransition133 );
		dfa136 = new DFA136( this, SpecialStateTransition136 );
		dfa137 = new DFA137( this, SpecialStateTransition137 );
		dfa144 = new DFA144( this, SpecialStateTransition144 );
		dfa141 = new DFA141( this, SpecialStateTransition141 );
		dfa149 = new DFA149( this, SpecialStateTransition149 );
		dfa153 = new DFA153( this, SpecialStateTransition153 );
		dfa154 = new DFA154( this, SpecialStateTransition154 );
	}

	private class DFA119 : DFA
	{
		private const string DFA119_eotS =
			"\x53\xFFFF";
		private const string DFA119_eofS =
			"\x1\x1\x52\xFFFF";
		private const string DFA119_minS =
			"\x1\x4\x45\xFFFF\x1\x0\xC\xFFFF";
		private const string DFA119_maxS =
			"\x1\xC0\x45\xFFFF\x1\x0\xC\xFFFF";
		private const string DFA119_acceptS =
			"\x1\xFFFF\x1\x2\x4E\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA119_specialS =
			"\x46\xFFFF\x1\x0\xC\xFFFF}>";
		private static readonly string[] DFA119_transitionS =
			{
				"\x3\x1\xD\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x3\xFFFF\x3\x1\x4"+
				"\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x2\x1\x2\xFFFF\x1\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x6\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\xA\xFFFF"+
				"\x1\x1\x2\x50\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x1\x50\x1\x46\x2\xFFFF\x5\x1\x2\xFFFF\x2\x1\x2\xFFFF\x6\x1\x1"+
				"\xFFFF\x4\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6"+
				"\x1\x2\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x3\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3\x1\x7\xFFFF\x2\x1\x1"+
				"\xFFFF\x4\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
		private static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
		private static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
		private static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
		private static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
		private static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
		private static readonly short[][] DFA119_transition;

		static DFA119()
		{
			int numStates = DFA119_transitionS.Length;
			DFA119_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA119_transition[i] = DFA.UnpackEncodedString(DFA119_transitionS[i]);
			}
		}

		public DFA119( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 119;
			this.eot = DFA119_eot;
			this.eof = DFA119_eof;
			this.min = DFA119_min;
			this.max = DFA119_max;
			this.accept = DFA119_accept;
			this.special = DFA119_special;
			this.transition = DFA119_transition;
		}

		public override string Description { get { return "()* loopback of 848:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition119(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA119_1 = input.LA(1);
		int index119_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred185_Java_fragment))) {s = 80;}

				else if ((true)) {s = 1;}

				input.Seek(index119_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 119, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA123 : DFA
	{
		private const string DFA123_eotS =
			"\x57\xFFFF";
		private const string DFA123_eofS =
			"\x1\x1\x56\xFFFF";
		private const string DFA123_minS =
			"\x1\x4\x43\xFFFF\x2\x0\x11\xFFFF";
		private const string DFA123_maxS =
			"\x1\xC0\x43\xFFFF\x2\x0\x11\xFFFF";
		private const string DFA123_acceptS =
			"\x1\xFFFF\x1\x2\x54\xFFFF\x1\x1";
		private const string DFA123_specialS =
			"\x44\xFFFF\x1\x0\x1\x1\x11\xFFFF}>";
		private static readonly string[] DFA123_transitionS =
			{
				"\x3\x1\xD\xFFFF\x4\x1\x1\xFFFF\x4\x1\x3\xFFFF\x3\x1\x4\xFFFF\x2\x1\x2"+
				"\xFFFF\x4\x1\x1\xFFFF\x2\x1\x2\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1"+
				"\x1\x6\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\xA\xFFFF\x3\x1\x1\xFFFF"+
				"\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x6\xFFFF\x3\x1\x2\xFFFF\x5\x1\x2"+
				"\xFFFF\x1\x45\x1\x1\x2\xFFFF\x6\x1\x1\xFFFF\x4\x1\x2\xFFFF\x1\x44\x1"+
				"\x1\x4\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x6\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x3\x1\x7\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA123_eot = DFA.UnpackEncodedString(DFA123_eotS);
		private static readonly short[] DFA123_eof = DFA.UnpackEncodedString(DFA123_eofS);
		private static readonly char[] DFA123_min = DFA.UnpackEncodedStringToUnsignedChars(DFA123_minS);
		private static readonly char[] DFA123_max = DFA.UnpackEncodedStringToUnsignedChars(DFA123_maxS);
		private static readonly short[] DFA123_accept = DFA.UnpackEncodedString(DFA123_acceptS);
		private static readonly short[] DFA123_special = DFA.UnpackEncodedString(DFA123_specialS);
		private static readonly short[][] DFA123_transition;

		static DFA123()
		{
			int numStates = DFA123_transitionS.Length;
			DFA123_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA123_transition[i] = DFA.UnpackEncodedString(DFA123_transitionS[i]);
			}
		}

		public DFA123( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 123;
			this.eot = DFA123_eot;
			this.eof = DFA123_eof;
			this.min = DFA123_min;
			this.max = DFA123_max;
			this.accept = DFA123_accept;
			this.special = DFA123_special;
			this.transition = DFA123_transition;
		}

		public override string Description { get { return "()* loopback of 869:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition123(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA123_1 = input.LA(1);
		int index123_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred190_Java_fragment))) {s = 86;}

				else if ((true)) {s = 1;}

				input.Seek(index123_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred190_Java_fragment))) {s = 86;}

				else if ((true)) {s = 1;}

				input.Seek(index123_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 123, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA129 : DFA
	{
		private const string DFA129_eotS =
			"\x5C\xFFFF";
		private const string DFA129_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA129_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA129_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA129_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA129_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA129_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1\x1\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA129_eot = DFA.UnpackEncodedString(DFA129_eotS);
		private static readonly short[] DFA129_eof = DFA.UnpackEncodedString(DFA129_eofS);
		private static readonly char[] DFA129_min = DFA.UnpackEncodedStringToUnsignedChars(DFA129_minS);
		private static readonly char[] DFA129_max = DFA.UnpackEncodedStringToUnsignedChars(DFA129_maxS);
		private static readonly short[] DFA129_accept = DFA.UnpackEncodedString(DFA129_acceptS);
		private static readonly short[] DFA129_special = DFA.UnpackEncodedString(DFA129_specialS);
		private static readonly short[][] DFA129_transition;

		static DFA129()
		{
			int numStates = DFA129_transitionS.Length;
			DFA129_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA129_transition[i] = DFA.UnpackEncodedString(DFA129_transitionS[i]);
			}
		}

		public DFA129( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 129;
			this.eot = DFA129_eot;
			this.eof = DFA129_eof;
			this.min = DFA129_min;
			this.max = DFA129_max;
			this.accept = DFA129_accept;
			this.special = DFA129_special;
			this.transition = DFA129_transition;
		}

		public override string Description { get { return "911:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition129(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA129_1 = input.LA(1);
		int index129_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred202_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index129_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 129, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x5C\xFFFF";
		private const string DFA130_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA130_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA130_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA130_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA130_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1\x1\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "917:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition130(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA130_1 = input.LA(1);
		int index130_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred206_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index130_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 130, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA133 : DFA
	{
		private const string DFA133_eotS =
			"\x5B\xFFFF";
		private const string DFA133_eofS =
			"\x1\x3\x5A\xFFFF";
		private const string DFA133_minS =
			"\x1\x4\x2\x0\x58\xFFFF";
		private const string DFA133_maxS =
			"\x1\xC0\x2\x0\x58\xFFFF";
		private const string DFA133_acceptS =
			"\x3\xFFFF\x1\x3\x55\xFFFF\x1\x1\x1\x2";
		private const string DFA133_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x58\xFFFF}>";
		private static readonly string[] DFA133_transitionS =
			{
				"\x3\x3\xD\xFFFF\x4\x3\x1\xFFFF\x4\x3\x3\xFFFF\x3\x3\x4\xFFFF\x2\x3\x2"+
				"\xFFFF\x1\x3\x1\x2\x5\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3"+
				"\x6\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\xA\xFFFF\x3\x3\x1\xFFFF"+
				"\x3\x3\x3\xFFFF\x1\x1\x2\x3\x1\xFFFF\x1\x3\x6\xFFFF\x3\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x3\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x2\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x9\x3\x1\xFFFF\x3\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x7\xFFFF\x2"+
				"\x3\x1\xFFFF\x4\x3\x1\xFFFF\x3\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA133_eot = DFA.UnpackEncodedString(DFA133_eotS);
		private static readonly short[] DFA133_eof = DFA.UnpackEncodedString(DFA133_eofS);
		private static readonly char[] DFA133_min = DFA.UnpackEncodedStringToUnsignedChars(DFA133_minS);
		private static readonly char[] DFA133_max = DFA.UnpackEncodedStringToUnsignedChars(DFA133_maxS);
		private static readonly short[] DFA133_accept = DFA.UnpackEncodedString(DFA133_acceptS);
		private static readonly short[] DFA133_special = DFA.UnpackEncodedString(DFA133_specialS);
		private static readonly short[][] DFA133_transition;

		static DFA133()
		{
			int numStates = DFA133_transitionS.Length;
			DFA133_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA133_transition[i] = DFA.UnpackEncodedString(DFA133_transitionS[i]);
			}
		}

		public DFA133( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 133;
			this.eot = DFA133_eot;
			this.eof = DFA133_eof;
			this.min = DFA133_min;
			this.max = DFA133_max;
			this.accept = DFA133_accept;
			this.special = DFA133_special;
			this.transition = DFA133_transition;
		}

		public override string Description { get { return "924:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition133(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA133_1 = input.LA(1);
		int index133_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred210_Java_fragment))) {s = 89;}

				else if ((true)) {s = 3;}

				input.Seek(index133_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred211_Java_fragment))) {s = 90;}

				else if ((true)) {s = 3;}

				input.Seek(index133_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 133, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA136 : DFA
	{
		private const string DFA136_eotS =
			"\x5C\xFFFF";
		private const string DFA136_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA136_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA136_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA136_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA136_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA136_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1\x1\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA136_eot = DFA.UnpackEncodedString(DFA136_eotS);
		private static readonly short[] DFA136_eof = DFA.UnpackEncodedString(DFA136_eofS);
		private static readonly char[] DFA136_min = DFA.UnpackEncodedStringToUnsignedChars(DFA136_minS);
		private static readonly char[] DFA136_max = DFA.UnpackEncodedStringToUnsignedChars(DFA136_maxS);
		private static readonly short[] DFA136_accept = DFA.UnpackEncodedString(DFA136_acceptS);
		private static readonly short[] DFA136_special = DFA.UnpackEncodedString(DFA136_specialS);
		private static readonly short[][] DFA136_transition;

		static DFA136()
		{
			int numStates = DFA136_transitionS.Length;
			DFA136_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA136_transition[i] = DFA.UnpackEncodedString(DFA136_transitionS[i]);
			}
		}

		public DFA136( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 136;
			this.eot = DFA136_eot;
			this.eof = DFA136_eof;
			this.min = DFA136_min;
			this.max = DFA136_max;
			this.accept = DFA136_accept;
			this.special = DFA136_special;
			this.transition = DFA136_transition;
		}

		public override string Description { get { return "945:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition136(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA136_1 = input.LA(1);
		int index136_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred220_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index136_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 136, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA137 : DFA
	{
		private const string DFA137_eotS =
			"\x5C\xFFFF";
		private const string DFA137_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA137_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA137_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA137_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA137_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA137_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1\x1\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA137_eot = DFA.UnpackEncodedString(DFA137_eotS);
		private static readonly short[] DFA137_eof = DFA.UnpackEncodedString(DFA137_eofS);
		private static readonly char[] DFA137_min = DFA.UnpackEncodedStringToUnsignedChars(DFA137_minS);
		private static readonly char[] DFA137_max = DFA.UnpackEncodedStringToUnsignedChars(DFA137_maxS);
		private static readonly short[] DFA137_accept = DFA.UnpackEncodedString(DFA137_acceptS);
		private static readonly short[] DFA137_special = DFA.UnpackEncodedString(DFA137_specialS);
		private static readonly short[][] DFA137_transition;

		static DFA137()
		{
			int numStates = DFA137_transitionS.Length;
			DFA137_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA137_transition[i] = DFA.UnpackEncodedString(DFA137_transitionS[i]);
			}
		}

		public DFA137( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 137;
			this.eot = DFA137_eot;
			this.eof = DFA137_eof;
			this.min = DFA137_min;
			this.max = DFA137_max;
			this.accept = DFA137_accept;
			this.special = DFA137_special;
			this.transition = DFA137_transition;
		}

		public override string Description { get { return "950:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition137(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA137_1 = input.LA(1);
		int index137_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred223_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index137_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 137, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA144 : DFA
	{
		private const string DFA144_eotS =
			"\x5E\xFFFF";
		private const string DFA144_eofS =
			"\x1\x4\x5D\xFFFF";
		private const string DFA144_minS =
			"\x1\x4\x3\x0\x5A\xFFFF";
		private const string DFA144_maxS =
			"\x1\xC0\x3\x0\x5A\xFFFF";
		private const string DFA144_acceptS =
			"\x4\xFFFF\x1\x4\x56\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA144_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x5A\xFFFF}>";
		private static readonly string[] DFA144_transitionS =
			{
				"\x3\x4\xD\xFFFF\x4\x4\x1\xFFFF\x4\x4\x3\xFFFF\x3\x4\x4\xFFFF\x2\x4\x2"+
				"\xFFFF\x7\x4\x1\x3\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\x6\xFFFF"+
				"\x2\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\xA\xFFFF\x3\x4\x1\xFFFF\x3\x4\x3"+
				"\xFFFF\x3\x4\x1\xFFFF\x1\x4\x5\xFFFF\x1\x1\x3\x4\x2\xFFFF\x4\x4\x1\x2"+
				"\x2\xFFFF\x3\x4\x1\xFFFF\x6\x4\x1\xFFFF\x4\x4\x2\xFFFF\x2\x4\x4\xFFFF"+
				"\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x6\x4\x1\xFFFF\x9\x4\x1\xFFFF\x3\x4\x1"+
				"\xFFFF\x1\x4\x1\xFFFF\x3\x4\x1\xFFFF\x1\x4\x2\xFFFF\x3\x4\x7\xFFFF\x2"+
				"\x4\x1\xFFFF\x4\x4\x1\xFFFF\x3\x4",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA144_eot = DFA.UnpackEncodedString(DFA144_eotS);
		private static readonly short[] DFA144_eof = DFA.UnpackEncodedString(DFA144_eofS);
		private static readonly char[] DFA144_min = DFA.UnpackEncodedStringToUnsignedChars(DFA144_minS);
		private static readonly char[] DFA144_max = DFA.UnpackEncodedStringToUnsignedChars(DFA144_maxS);
		private static readonly short[] DFA144_accept = DFA.UnpackEncodedString(DFA144_acceptS);
		private static readonly short[] DFA144_special = DFA.UnpackEncodedString(DFA144_specialS);
		private static readonly short[][] DFA144_transition;

		static DFA144()
		{
			int numStates = DFA144_transitionS.Length;
			DFA144_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA144_transition[i] = DFA.UnpackEncodedString(DFA144_transitionS[i]);
			}
		}

		public DFA144( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 144;
			this.eot = DFA144_eot;
			this.eof = DFA144_eof;
			this.min = DFA144_min;
			this.max = DFA144_max;
			this.accept = DFA144_accept;
			this.special = DFA144_special;
			this.transition = DFA144_transition;
		}

		public override string Description { get { return "967:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition144(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA144_1 = input.LA(1);
		int index144_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred229_Java_fragment))) {s = 91;}

				else if ((true)) {s = 4;}

				input.Seek(index144_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred231_Java_fragment))) {s = 92;}

				else if ((true)) {s = 4;}

				input.Seek(index144_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred238_Java_fragment))) {s = 93;}

				else if ((true)) {s = 4;}

				input.Seek(index144_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 144, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA141 : DFA
	{
		private const string DFA141_eotS =
			"\x5C\xFFFF";
		private const string DFA141_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA141_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA141_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA141_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA141_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA141_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF\x5\x2\x2\xFFFF"+
				"\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA141_eot = DFA.UnpackEncodedString(DFA141_eotS);
		private static readonly short[] DFA141_eof = DFA.UnpackEncodedString(DFA141_eofS);
		private static readonly char[] DFA141_min = DFA.UnpackEncodedStringToUnsignedChars(DFA141_minS);
		private static readonly char[] DFA141_max = DFA.UnpackEncodedStringToUnsignedChars(DFA141_maxS);
		private static readonly short[] DFA141_accept = DFA.UnpackEncodedString(DFA141_acceptS);
		private static readonly short[] DFA141_special = DFA.UnpackEncodedString(DFA141_specialS);
		private static readonly short[][] DFA141_transition;

		static DFA141()
		{
			int numStates = DFA141_transitionS.Length;
			DFA141_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA141_transition[i] = DFA.UnpackEncodedString(DFA141_transitionS[i]);
			}
		}

		public DFA141( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 141;
			this.eot = DFA141_eot;
			this.eof = DFA141_eof;
			this.min = DFA141_min;
			this.max = DFA141_max;
			this.accept = DFA141_accept;
			this.special = DFA141_special;
			this.transition = DFA141_transition;
		}

		public override string Description { get { return "971:23: ( block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition141(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA141_1 = input.LA(1);
		int index141_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred230_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index141_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 141, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA149 : DFA
	{
		private const string DFA149_eotS =
			"\x5C\xFFFF";
		private const string DFA149_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA149_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA149_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA149_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA149_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA149_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF\x5\x2\x2\xFFFF"+
				"\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA149_eot = DFA.UnpackEncodedString(DFA149_eotS);
		private static readonly short[] DFA149_eof = DFA.UnpackEncodedString(DFA149_eofS);
		private static readonly char[] DFA149_min = DFA.UnpackEncodedStringToUnsignedChars(DFA149_minS);
		private static readonly char[] DFA149_max = DFA.UnpackEncodedStringToUnsignedChars(DFA149_maxS);
		private static readonly short[] DFA149_accept = DFA.UnpackEncodedString(DFA149_acceptS);
		private static readonly short[] DFA149_special = DFA.UnpackEncodedString(DFA149_specialS);
		private static readonly short[][] DFA149_transition;

		static DFA149()
		{
			int numStates = DFA149_transitionS.Length;
			DFA149_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA149_transition[i] = DFA.UnpackEncodedString(DFA149_transitionS[i]);
			}
		}

		public DFA149( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 149;
			this.eot = DFA149_eot;
			this.eof = DFA149_eof;
			this.min = DFA149_min;
			this.max = DFA149_max;
			this.accept = DFA149_accept;
			this.special = DFA149_special;
			this.transition = DFA149_transition;
		}

		public override string Description { get { return "1005:27: ( classBody )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition149(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA149_1 = input.LA(1);
		int index149_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred247_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index149_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 149, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA153 : DFA
	{
		private const string DFA153_eotS =
			"\x5C\xFFFF";
		private const string DFA153_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA153_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA153_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA153_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA153_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA153_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF\x5\x2\x2\xFFFF"+
				"\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA153_eot = DFA.UnpackEncodedString(DFA153_eotS);
		private static readonly short[] DFA153_eof = DFA.UnpackEncodedString(DFA153_eofS);
		private static readonly char[] DFA153_min = DFA.UnpackEncodedStringToUnsignedChars(DFA153_minS);
		private static readonly char[] DFA153_max = DFA.UnpackEncodedStringToUnsignedChars(DFA153_maxS);
		private static readonly short[] DFA153_accept = DFA.UnpackEncodedString(DFA153_acceptS);
		private static readonly short[] DFA153_special = DFA.UnpackEncodedString(DFA153_specialS);
		private static readonly short[][] DFA153_transition;

		static DFA153()
		{
			int numStates = DFA153_transitionS.Length;
			DFA153_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA153_transition[i] = DFA.UnpackEncodedString(DFA153_transitionS[i]);
			}
		}

		public DFA153( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 153;
			this.eot = DFA153_eot;
			this.eof = DFA153_eof;
			this.min = DFA153_min;
			this.max = DFA153_max;
			this.accept = DFA153_accept;
			this.special = DFA153_special;
			this.transition = DFA153_transition;
		}

		public override string Description { get { return "1012:64: ( classBody )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition153(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA153_1 = input.LA(1);
		int index153_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred249_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index153_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 153, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA154 : DFA
	{
		private const string DFA154_eotS =
			"\x5C\xFFFF";
		private const string DFA154_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA154_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA154_maxS =
			"\x1\xC0\x1\x0\x5A\xFFFF";
		private const string DFA154_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA154_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA154_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x4\x2\x3\xFFFF\x3\x2\x4\xFFFF\x2\x2\x2"+
				"\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\x3\x2\x2\xFFFF\x5\x2\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
		private static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
		private static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
		private static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
		private static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
		private static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
		private static readonly short[][] DFA154_transition;

		static DFA154()
		{
			int numStates = DFA154_transitionS.Length;
			DFA154_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA154_transition[i] = DFA.UnpackEncodedString(DFA154_transitionS[i]);
			}
		}

		public DFA154( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 154;
			this.eot = DFA154_eot;
			this.eof = DFA154_eof;
			this.min = DFA154_min;
			this.max = DFA154_max;
			this.accept = DFA154_accept;
			this.special = DFA154_special;
			this.transition = DFA154_transition;
		}

		public override string Description { get { return "()* loopback of 1018:36: ( LBRACK ! expression RBRACK !)*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition154(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA154_1 = input.LA(1);
		int index154_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred251_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index154_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 154, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _compilationUnit_in_javaSource4578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationList_in_compilationUnit4614 = new BitSet(new ulong[]{0x80000400200012UL,0x80000084020002UL,0x1A401060A0081A03UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit4625 = new BitSet(new ulong[]{0x80000400200012UL,0x80000084020002UL,0x1A401060A0081A01UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit4637 = new BitSet(new ulong[]{0x80000400200012UL,0x80000084020002UL,0x1A401060A0081A01UL});
		public static readonly BitSet _typeDecls_in_compilationUnit4649 = new BitSet(new ulong[]{0x80000400200012UL,0x80000080020002UL,0x1A401060A0081A01UL});
		public static readonly BitSet _typeDeclaration_in_typeDecls4669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDecls4679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration4699 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration4702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration4704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration4730 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x20000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration4733 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration4736 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration4738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_importDeclaration4741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_typeDeclaration4765 = new BitSet(new ulong[]{0x80000400200000UL,0x80000000UL});
		public static readonly BitSet _classTypeDeclaration_in_typeDeclaration4780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceTypeDeclaration_in_typeDeclaration4795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumTypeDeclaration_in_typeDeclaration4810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_typeDeclaration4825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_classTypeDeclaration4860 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classTypeDeclaration4862 = new BitSet(new ulong[]{0x2000000000000000UL,0x14001000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classTypeDeclaration4864 = new BitSet(new ulong[]{0x2000000000000000UL,0x4001000000UL});
		public static readonly BitSet _classExtendsClause_in_classTypeDeclaration4867 = new BitSet(new ulong[]{0x0UL,0x4001000000UL});
		public static readonly BitSet _implementsClause_in_classTypeDeclaration4870 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_classTypeDeclaration4873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_classExtendsClause4926 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_classExtendsClause4928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_interfaceExtendsClause4972 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _typeList_in_interfaceExtendsClause4974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_implementsClause5018 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _typeList_in_implementsClause5020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeParameterList5065 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5067 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _COMMA_in_genericTypeParameterList5070 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5072 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeParameterList5076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_genericTypeListClosing5191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_genericTypeListClosing5201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_genericTypeListClosing5211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter5239 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _bound_in_genericTypeParameter5241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_bound5287 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_bound5289 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_bound5292 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_bound5294 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _ENUM_in_enumTypeDeclaration5335 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_enumTypeDeclaration5337 = new BitSet(new ulong[]{0x0UL,0x4001000000UL});
		public static readonly BitSet _implementsClause_in_enumTypeDeclaration5339 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _enumBody_in_enumTypeDeclaration5342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_enumBody5389 = new BitSet(new ulong[]{0x200000UL,0x400000UL});
		public static readonly BitSet _enumScopeDeclarations_in_enumBody5391 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_enumBody5393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstants_in_enumScopeDeclarations5430 = new BitSet(new ulong[]{0x10000000002UL,0x0UL,0x80000UL});
		public static readonly BitSet _COMMA_in_enumScopeDeclarations5433 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000UL});
		public static readonly BitSet _enumClassScopeDeclarations_in_enumScopeDeclarations5438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumClassScopeDeclarations5458 = new BitSet(new ulong[]{0x9000050A200012UL,0x804140A042000AUL,0x1AC01060A2081A01UL});
		public static readonly BitSet _classScopeDeclarations_in_enumClassScopeDeclarations5460 = new BitSet(new ulong[]{0x9000050A200012UL,0x804140A042000AUL,0x1AC01060A2081A01UL});
		public static readonly BitSet _enumConstant_in_enumConstants5499 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_enumConstants5502 = new BitSet(new ulong[]{0x200000UL,0x400000UL});
		public static readonly BitSet _enumConstant_in_enumConstants5505 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _annotationList_in_enumConstant5530 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_enumConstant5532 = new BitSet(new ulong[]{0x2UL,0x804000000000UL});
		public static readonly BitSet _arguments_in_enumConstant5535 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_enumConstant5538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_interfaceTypeDeclaration5563 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceTypeDeclaration5565 = new BitSet(new ulong[]{0x2000000000000000UL,0x14000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceTypeDeclaration5567 = new BitSet(new ulong[]{0x2000000000000000UL,0x4000000000UL});
		public static readonly BitSet _interfaceExtendsClause_in_interfaceTypeDeclaration5570 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _interfaceBody_in_interfaceTypeDeclaration5573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList5623 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_typeList5626 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_typeList5629 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _LCURLY_in_classBody5654 = new BitSet(new ulong[]{0x9000050A200010UL,0x804140A042000AUL,0x1AC01060A2091A01UL});
		public static readonly BitSet _classScopeDeclarations_in_classBody5656 = new BitSet(new ulong[]{0x9000050A200010UL,0x804140A042000AUL,0x1AC01060A2091A01UL});
		public static readonly BitSet _RCURLY_in_classBody5659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_interfaceBody5701 = new BitSet(new ulong[]{0x9000050A200010UL,0x804100A042000AUL,0x1AC01060A2091A01UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceBody5703 = new BitSet(new ulong[]{0x9000050A200010UL,0x804100A042000AUL,0x1AC01060A2091A01UL});
		public static readonly BitSet _RCURLY_in_interfaceBody5706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_classScopeDeclarations5744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classScopeDeclarations5773 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations5798 = new BitSet(new ulong[]{0x1000010A000000UL,0x410020400008UL,0x80000002000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations5812 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations5848 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _propertyDeclaration_in_classScopeDeclarations5852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations5878 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5880 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5882 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations5884 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5887 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_classScopeDeclarations5957 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5959 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5961 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5963 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations6030 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations6032 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations6034 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations6037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations6101 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_classScopeDeclarations6103 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations6150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations6180 = new BitSet(new ulong[]{0x1000010A000000UL,0x410020400008UL,0x80000002000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations6194 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6213 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6215 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6217 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations6219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6222 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_interfaceScopeDeclarations6283 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6285 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6355 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6357 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations6404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6434 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_classFieldDeclaratorList6437 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6439 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_classFieldDeclarator6478 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _ASSIGN_in_classFieldDeclarator6481 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _variableInitializer_in_classFieldDeclarator6483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6528 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaratorList6531 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6533 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_interfaceFieldDeclarator6572 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ASSIGN_in_interfaceFieldDeclarator6574 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _variableInitializer_in_interfaceFieldDeclarator6576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId6618 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId6621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer6641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer6651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator6674 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator6676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_arrayDeclaratorList6710 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _LCURLY_in_arrayInitializer6755 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D14028600019UL,0x80208306010008UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6758 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6761 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6763 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_arrayInitializer6772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROWS_in_throwsClause6814 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentList_in_throwsClause6816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifierList6853 = new BitSet(new ulong[]{0x200012UL,0x80000000020002UL,0x1A401060A0001A01UL});
		public static readonly BitSet _PUBLIC_in_modifier6894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OVERRIDE_in_modifier6904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIRTUAL_in_modifier6914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_SHARING_in_modifier6924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITHOUT_SHARING_in_modifier6932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier6942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier6952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier6962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier6972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier6982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier6992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier7002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier7012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier7022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_modifier7030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEST_METHOD_in_modifier7040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier7050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_localModifierList7069 = new BitSet(new ulong[]{0x200002UL,0x2UL});
		public static readonly BitSet _FINAL_in_localModifier7110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier7120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleType_in_type7139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectType_in_type7149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_simpleType7169 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_simpleType7171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdent_in_objectType7218 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectType7220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_objectTypeSimplified7260 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectTypeSimplified7262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7302 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdent7305 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7307 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7347 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdentSimplified7350 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7352 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _IDENT_in_typeIdent7392 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent7395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_typeIdentSimplified7415 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_typeIdentSimplified7418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentList7533 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2004000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7535 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentList7538 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2004000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7540 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentList7544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgument7582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument7592 = new BitSet(new ulong[]{0x2000000000000002UL,0x0UL,0x200000000UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument7594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_genericWildcardBoundType7636 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_genericWildcardBoundType7645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentListSimplified7664 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2004000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7666 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentListSimplified7669 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2004000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7671 = new BitSet(new ulong[]{0x10000400000UL,0x80000UL,0x800000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentListSimplified7675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgumentSimplified7717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgumentSimplified7727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7750 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_qualifiedIdentList7753 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7756 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _LPAREN_in_formalParameterList7781 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2040000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7809 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7812 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7814 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7819 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7821 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7878 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_formalParameterList7955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl7978 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl7980 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl7982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarArgDecl8026 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_formalParameterVarArgDecl8028 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _ELLIPSIS_in_formalParameterVarArgDecl8030 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarArgDecl8032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8080 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier8123 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8127 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _annotation_in_annotationList8180 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _AT_in_annotation8218 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation8221 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _annotationInit_in_annotation8223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_annotationInit8247 = new BitSet(new ulong[]{0x1030030A200000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit8249 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_annotationInit8251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8288 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_annotationInitializers8291 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8293 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers8323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_annotationInitializer8364 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ASSIGN_in_annotationInitializer8367 = new BitSet(new ulong[]{0x1030030A200000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer8370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueExpression_in_annotationElementValue8393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_annotationElementValue8403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueArrayInitializer_in_annotationElementValue8413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_annotationElementValueExpression8436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationElementValueArrayInitializer8476 = new BitSet(new ulong[]{0x1031030A200000UL,0x2B04D14028600019UL,0x80208306010008UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8479 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8482 = new BitSet(new ulong[]{0x1030030A200000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8484 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_annotationElementValueArrayInitializer8495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_annotationTypeDeclaration8538 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration8540 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_annotationTypeDeclaration8542 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _annotationBody_in_annotationTypeDeclaration8544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationBody8587 = new BitSet(new ulong[]{0x9000050A200010UL,0x804000A042000AUL,0x1A401060A2011A01UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationBody8589 = new BitSet(new ulong[]{0x9000050A200010UL,0x804000A042000AUL,0x1A401060A2011A01UL});
		public static readonly BitSet _RCURLY_in_annotationBody8592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations8634 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations8636 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations8650 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_annotationScopeDeclarations8652 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_annotationScopeDeclarations8654 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations8656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_annotationScopeDeclarations8701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations8748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue8771 = new BitSet(new ulong[]{0x1030030A200000UL,0x2B04D14028600019UL,0x80208306000008UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue8774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement8795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_blockStatement8797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement8808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement8818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperator_in_dmlOperation8833 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_dmlOperation8835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_dmlOperation8837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block8916 = new BitSet(new ulong[]{0x9238070E200010UL,0x2B84D140A8E2005BUL,0x1EC072EBA60B1A09UL});
		public static readonly BitSet _blockStatement_in_block8926 = new BitSet(new ulong[]{0x9238070E200010UL,0x2B84D140A8E2005BUL,0x1EC072EBA60B1A09UL});
		public static readonly BitSet _RCURLY_in_block8950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration8980 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration8982 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_localVariableDeclaration8984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement9037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement9047 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9049 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9053 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _ELSE_in_statement9068 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_statement9238 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_statement9240 = new BitSet(new ulong[]{0x1030030A200000UL,0x2B04D1002860001BUL,0x80208306080008UL});
		public static readonly BitSet _forInit_in_statement9255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9257 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306080008UL});
		public static readonly BitSet _forCondition_in_statement9259 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9261 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306040008UL});
		public static readonly BitSet _forUpdater_in_statement9263 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_statement9265 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_statement9302 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_statement9304 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_statement9306 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_statement9308 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_statement9310 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_statement9312 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement9354 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9356 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement9407 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _WHILE_in_statement9411 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_statement9456 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_statement9458 = new BitSet(new ulong[]{0x40000000UL,0x4UL});
		public static readonly BitSet _catches_in_statement9461 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _finallyClause_in_statement9463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_statement9468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement9511 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9513 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _LCURLY_in_statement9515 = new BitSet(new ulong[]{0x400010000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement9517 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_statement9519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement9545 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9547 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_statement9549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement9595 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306080008UL});
		public static readonly BitSet _expression_in_statement9597 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement9664 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_statement9666 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement9733 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x80000UL});
		public static readonly BitSet _IDENT_in_statement9735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement9808 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x80000UL});
		public static readonly BitSet _IDENT_in_statement9810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_statement9880 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_statement9882 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_statement9884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperation_in_statement9951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement9961 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement9963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement9976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement9986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches10025 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _CATCH_in_catchClause10067 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_catchClause10070 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause10073 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_catchClause10075 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_catchClause10078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause10097 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_finallyClause10099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10131 = new BitSet(new ulong[]{0x400010000000UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels10133 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_switchCaseLabels10181 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _CASE_in_switchCaseLabel10209 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_switchCaseLabel10212 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_switchCaseLabel10214 = new BitSet(new ulong[]{0x9238070E200012UL,0x2B84D140A8E2005BUL,0x1EC072EBA60A1A09UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel10217 = new BitSet(new ulong[]{0x9238070E200012UL,0x2B84D140A8E2005BUL,0x1EC072EBA60A1A09UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel10241 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_switchDefaultLabel10244 = new BitSet(new ulong[]{0x9238070E200012UL,0x2B84D140A8E2005BUL,0x1EC072EBA60A1A09UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel10247 = new BitSet(new ulong[]{0x9238070E200012UL,0x2B84D140A8E2005BUL,0x1EC072EBA60A1A09UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit10271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit10293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_forCondition10381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forUpdater10423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenthesizedExpression10463 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_parenthesizedExpression10465 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_parenthesizedExpression10467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList10508 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_expressionList10511 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_expressionList10514 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _assignmentExpression_in_expression10538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression10568 = new BitSet(new ulong[]{0x1000000900042UL,0x8048000000000000UL,0x8000000011400010UL});
		public static readonly BitSet _ASSIGN_in_assignmentExpression10587 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _PLUS_ASSIGN_in_assignmentExpression10606 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _MINUS_ASSIGN_in_assignmentExpression10625 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _STAR_ASSIGN_in_assignmentExpression10644 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _DIV_ASSIGN_in_assignmentExpression10663 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _AND_ASSIGN_in_assignmentExpression10682 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _OR_ASSIGN_in_assignmentExpression10701 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _XOR_ASSIGN_in_assignmentExpression10720 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _MOD_ASSIGN_in_assignmentExpression10739 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_assignmentExpression10758 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_assignmentExpression10777 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10796 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression10818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_conditionalExpression10843 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _QUESTION_in_conditionalExpression10846 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression10849 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression10851 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression10854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10875 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _LOGICAL_OR_in_logicalOrExpression10878 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10881 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10902 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _LOGICAL_AND_in_logicalAndExpression10905 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression10908 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10929 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression10932 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression10935 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10956 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression10959 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression10962 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression10983 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_andExpression10986 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _equalityExpression_in_andExpression10989 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression11010 = new BitSet(new ulong[]{0x200000000000002UL,0x400000000000000UL});
		public static readonly BitSet _EQUAL_in_equalityExpression11029 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _NOT_EQUAL_in_equalityExpression11048 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression11078 = new BitSet(new ulong[]{0x200000000000002UL,0x400000000000000UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression11108 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression11111 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_instanceOfExpression11114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11135 = new BitSet(new ulong[]{0x2UL,0x180000C0000UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_relationalExpression11154 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_relationalExpression11173 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _LESS_THAN_in_relationalExpression11192 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _GREATER_THAN_in_relationalExpression11211 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11240 = new BitSet(new ulong[]{0x2UL,0x180000C0000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11274 = new BitSet(new ulong[]{0x400002UL,0x0UL,0xA00000UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_shiftExpression11292 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _SHIFT_RIGHT_in_shiftExpression11311 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _SHIFT_LEFT_in_shiftExpression11330 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11359 = new BitSet(new ulong[]{0x400002UL,0x0UL,0xA00000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11389 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL,0x8UL});
		public static readonly BitSet _PLUS_in_additiveExpression11407 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _MINUS_in_additiveExpression11426 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11455 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL,0x8UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11485 = new BitSet(new ulong[]{0x800000000002UL,0x10000000000000UL,0x8000000UL});
		public static readonly BitSet _STAR_in_multiplicativeExpression11504 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression11523 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression11542 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11571 = new BitSet(new ulong[]{0x800000000002UL,0x10000000000000UL,0x8000000UL});
		public static readonly BitSet _PLUS_in_unaryExpression11605 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryExpression11634 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryExpression11662 = new BitSet(new ulong[]{0x1020030A000000UL,0x2900C10020600019UL,0x80208306000000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryExpression11688 = new BitSet(new ulong[]{0x1020030A000000UL,0x2900C10020600019UL,0x80208306000000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression11714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpressionNotPlusMinus11733 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGICAL_NOT_in_unaryExpressionNotPlusMinus11782 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpressionNotPlusMinus11823 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_unaryExpressionNotPlusMinus11825 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_unaryExpressionNotPlusMinus11827 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionNotPlusMinus11864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_postfixedExpression11900 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression11962 = new BitSet(new ulong[]{0x0UL,0x100010000400000UL,0x8200000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_postfixedExpression12012 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12094 = new BitSet(new ulong[]{0x4100000000002UL,0x802008000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12173 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _THIS_in_postfixedExpression12246 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12309 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12311 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12364 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression12368 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12370 = new BitSet(new ulong[]{0x4100000000002UL,0x802008000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12437 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _innerNewExpression_in_postfixedExpression12508 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _LBRACK_in_postfixedExpression12565 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_postfixedExpression12567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RBRACK_in_postfixedExpression12569 = new BitSet(new ulong[]{0x4100000000002UL,0x2008000000UL});
		public static readonly BitSet _INC_in_postfixedExpression12630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixedExpression12654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression12702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression12712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression12722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentExpression_in_primaryExpression12732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_primaryExpression12742 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x8200000000UL});
		public static readonly BitSet _SUPER_in_primaryExpression12757 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression12835 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_primaryExpression12837 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression12906 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression12961 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression13036 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13169 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13227 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13229 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_primaryExpression13231 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primaryExpression13397 = new BitSet(new ulong[]{0x4000000000000UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclarator_in_primaryExpression13456 = new BitSet(new ulong[]{0x4000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13519 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_primaryExpression13580 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13582 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primaryExpression13595 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13597 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentExpression13679 = new BitSet(new ulong[]{0x4000000000002UL,0x802000000000UL});
		public static readonly BitSet _arrayDeclarator_in_qualifiedIdentExpression13749 = new BitSet(new ulong[]{0x4000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13817 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13889 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _block_in_qualifiedIdentExpression13891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13952 = new BitSet(new ulong[]{0x400000000UL,0x100010000000000UL,0x8200000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_qualifiedIdentExpression14033 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x200000000UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14058 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14110 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression14114 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14116 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14168 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_qualifiedIdentExpression14245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14311 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_qualifiedIdentExpression14361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_mapDeclaration14431 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_mapDeclaration14433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _192_in_mapDeclaration14435 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_mapDeclaration14437 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_mapDeclaration14440 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_mapDeclaration14443 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _192_in_mapDeclaration14445 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_mapDeclaration14447 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_mapDeclaration14452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_setDeclaration14462 = new BitSet(new ulong[]{0x1031030A000000UL,0x2B04D10028600019UL,0x80208306010008UL});
		public static readonly BitSet _expression_in_setDeclaration14464 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_setDeclaration14468 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_setDeclaration14471 = new BitSet(new ulong[]{0x10000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_setDeclaration14476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression14490 = new BitSet(new ulong[]{0x1000010A000000UL,0x410020400008UL,0x2000000UL});
		public static readonly BitSet _primitiveType_in_newExpression14519 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_newExpression14565 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_newExpression14568 = new BitSet(new ulong[]{0x0UL,0x806000000000UL});
		public static readonly BitSet _mapDeclaration_in_newExpression14606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setDeclaration_in_newExpression14625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_newExpression14714 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_newExpression14716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_innerNewExpression14813 = new BitSet(new ulong[]{0x0UL,0x10000400000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_innerNewExpression14815 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression14818 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_innerNewExpression14820 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _classBody_in_innerNewExpression14822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14868 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction14870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14880 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_newArrayConstruction14883 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14885 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14889 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_newArrayConstruction14892 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14894 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments14919 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306040008UL});
		public static readonly BitSet _expressionList_in_arguments14921 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_arguments14924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration15068 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0001A01UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15070 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration15073 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15076 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _block_in_propertyDeclaration15078 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15082 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration15085 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _block_in_propertyDeclaration15090 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration15095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration15102 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0001A01UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15104 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration15107 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15110 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _block_in_propertyDeclaration15112 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15116 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration15119 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15122 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _block_in_propertyDeclaration15124 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration15130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_getRule15147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_setRule15161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_synpred14_Java5191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_synpred15_Java5201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_synpred16_Java5211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bound_in_synpred17_Java5241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_synpred32_Java5773 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred32_Java5775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred34_Java5848 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred34_Java5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _propertyDeclaration_in_synpred34_Java5852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred38_Java5878 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred38_Java5880 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred38_Java5882 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred38_Java5884 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred38_Java5887 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_synpred38_Java5891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred38_Java5895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred43_Java5812 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_synpred43_Java5848 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _propertyDeclaration_in_synpred43_Java5852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred43_Java5878 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5880 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5882 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred43_Java5884 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5887 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_synpred43_Java5891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred43_Java5957 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5959 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5961 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5963 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_synpred43_Java5967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred43_Java6030 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java6032 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000000000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java6034 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred43_Java6037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred44_Java5798 = new BitSet(new ulong[]{0x1000010A000000UL,0x410020400008UL,0x80000002000000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred44_Java5812 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_synpred44_Java5848 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred44_Java5850 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _propertyDeclaration_in_synpred44_Java5852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred44_Java5878 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred44_Java5880 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java5882 = new BitSet(new ulong[]{0x0UL,0x6000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred44_Java5884 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java5887 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_synpred44_Java5891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred44_Java5895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred44_Java5957 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred44_Java5959 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java5961 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java5963 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _block_in_synpred44_Java5967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred44_Java5971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred44_Java6030 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred44_Java6032 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x40000000000UL});
		public static readonly BitSet _throwsClause_in_synpred44_Java6034 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred44_Java6037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred44_Java6101 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred44_Java6103 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred44_Java6105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred45_Java6150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred51_Java6194 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_synpred51_Java6213 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred51_Java6215 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred51_Java6217 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred51_Java6219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred51_Java6222 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred51_Java6225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred51_Java6283 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred51_Java6285 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred51_Java6287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred51_Java6289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred51_Java6292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred52_Java6180 = new BitSet(new ulong[]{0x1000010A000000UL,0x410020400008UL,0x80000002000000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred52_Java6194 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x80000002000000UL});
		public static readonly BitSet _type_in_synpred52_Java6213 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred52_Java6215 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred52_Java6217 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x40000080000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred52_Java6219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred52_Java6222 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred52_Java6225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred52_Java6283 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred52_Java6285 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred52_Java6287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000080000UL});
		public static readonly BitSet _throwsClause_in_synpred52_Java6289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred52_Java6292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred52_Java6355 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_synpred52_Java6357 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred52_Java6359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred53_Java6404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred59_Java6710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred83_Java7171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred84_Java7220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred86_Java7305 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _typeIdent_in_synpred86_Java7307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentList_in_synpred88_Java7395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred97_Java7538 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2004000UL});
		public static readonly BitSet _genericTypeArgument_in_synpred97_Java7540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericWildcardBoundType_in_synpred99_Java7594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred104_Java7812 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred104_Java7814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred106_Java7809 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_synpred106_Java7812 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred106_Java7814 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _COMMA_in_synpred106_Java7819 = new BitSet(new ulong[]{0x1000010A200000UL,0x40002040000AUL,0x2000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred106_Java7821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred107_Java7878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred108_Java8123 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred108_Java8127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_synpred109_Java8180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred121_Java8634 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_synpred121_Java8636 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred121_Java8650 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _LPAREN_in_synpred121_Java8652 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_synpred121_Java8654 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _annotationDefaultValue_in_synpred121_Java8656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred121_Java8659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred121_Java8701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred121_Java8703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred122_Java8795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred122_Java8797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred123_Java8808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred124_Java8856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred125_Java8869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred126_Java8882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred129_Java9068 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_synpred129_Java9072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInit_in_synpred131_Java9255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred131_Java9257 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306080008UL});
		public static readonly BitSet _forCondition_in_synpred131_Java9259 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred131_Java9261 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306040008UL});
		public static readonly BitSet _forUpdater_in_synpred131_Java9263 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_synpred131_Java9265 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_synpred131_Java9267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred147_Java9880 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _COLON_in_synpred147_Java9882 = new BitSet(new ulong[]{0x1238030E000000UL,0x2B04D14028E00059UL,0x48062AB060A0008UL});
		public static readonly BitSet _statement_in_synpred147_Java9884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperation_in_synpred148_Java9951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred149_Java9961 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred149_Java9963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred150_Java9976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred153_Java10181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred156_Java10271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_synpred157_Java10293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred185_Java11150 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _shiftExpression_in_synpred185_Java11240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred190_Java11403 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred190_Java11455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred200_Java11823 = new BitSet(new ulong[]{0x1000010A000000UL,0x400020400008UL,0x2000000UL});
		public static readonly BitSet _type_in_synpred200_Java11825 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RPAREN_in_synpred200_Java11827 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _unaryExpression_in_synpred200_Java11829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred202_Java12173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred206_Java12437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_synpred210_Java12630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_synpred211_Java12654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred219_Java12742 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x8200000000UL});
		public static readonly BitSet _SUPER_in_synpred219_Java12757 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred219_Java12775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred219_Java12835 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred219_Java12837 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred219_Java12839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred219_Java12906 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred219_Java12908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred219_Java12961 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred219_Java12963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred220_Java13104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred222_Java13169 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred222_Java13171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred223_Java13255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred224_Java13227 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_synpred224_Java13229 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred224_Java13231 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred224_Java13255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred227_Java13580 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_synpred227_Java13582 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_synpred227_Java13584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred229_Java13749 = new BitSet(new ulong[]{0x4000000000000UL,0x2000000000UL});
		public static readonly BitSet _DOT_in_synpred229_Java13817 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _CLASS_in_synpred229_Java13819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_synpred230_Java13891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred231_Java13889 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _block_in_synpred231_Java13891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred238_Java13952 = new BitSet(new ulong[]{0x400000000UL,0x100010000000000UL,0x8200000000UL});
		public static readonly BitSet _CLASS_in_synpred238_Java13970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred238_Java14033 = new BitSet(new ulong[]{0x0UL,0x400000UL,0x200000000UL});
		public static readonly BitSet _SUPER_in_synpred238_Java14058 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred238_Java14060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred238_Java14110 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _DOT_in_synpred238_Java14114 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _IDENT_in_synpred238_Java14116 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred238_Java14118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred238_Java14168 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred238_Java14170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred238_Java14245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred238_Java14311 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arguments_in_synpred238_Java14313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_synpred238_Java14361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mapDeclaration_in_synpred244_Java14606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setDeclaration_in_synpred245_Java14625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classBody_in_synpred247_Java14716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classBody_in_synpred249_Java14822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred251_Java14889 = new BitSet(new ulong[]{0x1030030A000000UL,0x2B04D10028600019UL,0x80208306000008UL});
		public static readonly BitSet _expression_in_synpred251_Java14892 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _RBRACK_in_synpred251_Java14894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_synpred268_Java15068 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0001A01UL});
		public static readonly BitSet _modifier_in_synpred268_Java15070 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _getRule_in_synpred268_Java15073 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred268_Java15076 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _block_in_synpred268_Java15078 = new BitSet(new ulong[]{0x200010UL,0x80000000420002UL,0x1A401060A0011A01UL});
		public static readonly BitSet _modifier_in_synpred268_Java15082 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _setRule_in_synpred268_Java15085 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x80000UL});
		public static readonly BitSet _SEMI_in_synpred268_Java15088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _block_in_synpred268_Java15090 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _RCURLY_in_synpred268_Java15095 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

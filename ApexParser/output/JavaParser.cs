//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g 2014-06-17 12:10:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


//package com.habelitz.jsobjectizer.unmarshaller.antlrbridge.generated;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BROKEN_DECLARATION", "BROKEN_EXPRESSION", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "COMMENT", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GLOBAL", "GREATER_OR_EQUAL", "GREATER_THAN", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "MAP_INITIALIZER", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "OVERRIDE", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROPERTY_DECL", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SET_INITIALIZER", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SOQL_LITERAL", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "TEST_METHOD", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VIRTUAL", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WITHOUT_SHARING", "WITH_SHARING", "WS", "XOR", "XOR_ASSIGN", "'=>'"
	};
	public const int EOF=-1;
	public const int T__194=194;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSIGN=20;
	public const int AT=21;
	public const int BIT_SHIFT_RIGHT=22;
	public const int BIT_SHIFT_RIGHT_ASSIGN=23;
	public const int BLOCK_SCOPE=24;
	public const int BOOLEAN=25;
	public const int BREAK=26;
	public const int BROKEN_DECLARATION=27;
	public const int BROKEN_EXPRESSION=28;
	public const int BYTE=29;
	public const int CASE=30;
	public const int CAST_EXPR=31;
	public const int CATCH=32;
	public const int CATCH_CLAUSE_LIST=33;
	public const int CHAR=34;
	public const int CHARACTER_LITERAL=35;
	public const int CLASS=36;
	public const int CLASS_CONSTRUCTOR_CALL=37;
	public const int CLASS_INSTANCE_INITIALIZER=38;
	public const int CLASS_STATIC_INITIALIZER=39;
	public const int CLASS_TOP_LEVEL_SCOPE=40;
	public const int COLON=41;
	public const int COMMA=42;
	public const int COMMENT=43;
	public const int CONSTRUCTOR_DECL=44;
	public const int CONTINUE=45;
	public const int DEC=46;
	public const int DECIMAL_LITERAL=47;
	public const int DEFAULT=48;
	public const int DIV=49;
	public const int DIV_ASSIGN=50;
	public const int DO=51;
	public const int DOT=52;
	public const int DOTSTAR=53;
	public const int DOUBLE=54;
	public const int ELLIPSIS=55;
	public const int ELSE=56;
	public const int ENUM=57;
	public const int ENUM_TOP_LEVEL_SCOPE=58;
	public const int EQUAL=59;
	public const int ESCAPE_SEQUENCE=60;
	public const int EXPONENT=61;
	public const int EXPR=62;
	public const int EXTENDS=63;
	public const int EXTENDS_BOUND_LIST=64;
	public const int EXTENDS_CLAUSE=65;
	public const int FALSE=66;
	public const int FINAL=67;
	public const int FINALLY=68;
	public const int FLOAT=69;
	public const int FLOATING_POINT_LITERAL=70;
	public const int FLOAT_TYPE_SUFFIX=71;
	public const int FOR=72;
	public const int FORMAL_PARAM_LIST=73;
	public const int FORMAL_PARAM_STD_DECL=74;
	public const int FORMAL_PARAM_VARARG_DECL=75;
	public const int FOR_CONDITION=76;
	public const int FOR_EACH=77;
	public const int FOR_INIT=78;
	public const int FOR_UPDATE=79;
	public const int FUNCTION_METHOD_DECL=80;
	public const int GENERIC_TYPE_ARG_LIST=81;
	public const int GENERIC_TYPE_PARAM_LIST=82;
	public const int GLOBAL=83;
	public const int GREATER_OR_EQUAL=84;
	public const int GREATER_THAN=85;
	public const int HEX_DIGIT=86;
	public const int HEX_LITERAL=87;
	public const int IDENT=88;
	public const int IF=89;
	public const int IMPLEMENTS=90;
	public const int IMPLEMENTS_CLAUSE=91;
	public const int IMPORT=92;
	public const int INC=93;
	public const int INSTANCEOF=94;
	public const int INT=95;
	public const int INTEGER_TYPE_SUFFIX=96;
	public const int INTERFACE=97;
	public const int INTERFACE_TOP_LEVEL_SCOPE=98;
	public const int JAVA_ID_PART=99;
	public const int JAVA_ID_START=100;
	public const int JAVA_SOURCE=101;
	public const int LABELED_STATEMENT=102;
	public const int LBRACK=103;
	public const int LCURLY=104;
	public const int LESS_OR_EQUAL=105;
	public const int LESS_THAN=106;
	public const int LINE_COMMENT=107;
	public const int LOCAL_MODIFIER_LIST=108;
	public const int LOGICAL_AND=109;
	public const int LOGICAL_NOT=110;
	public const int LOGICAL_OR=111;
	public const int LONG=112;
	public const int LPAREN=113;
	public const int MAP_INITIALIZER=114;
	public const int METHOD_CALL=115;
	public const int MINUS=116;
	public const int MINUS_ASSIGN=117;
	public const int MOD=118;
	public const int MODIFIER_LIST=119;
	public const int MOD_ASSIGN=120;
	public const int NATIVE=121;
	public const int NEW=122;
	public const int NOT=123;
	public const int NOT_EQUAL=124;
	public const int NULL=125;
	public const int OCTAL_ESCAPE=126;
	public const int OCTAL_LITERAL=127;
	public const int OR=128;
	public const int OR_ASSIGN=129;
	public const int OVERRIDE=130;
	public const int PACKAGE=131;
	public const int PARENTESIZED_EXPR=132;
	public const int PLUS=133;
	public const int PLUS_ASSIGN=134;
	public const int POST_DEC=135;
	public const int POST_INC=136;
	public const int PRE_DEC=137;
	public const int PRE_INC=138;
	public const int PRIVATE=139;
	public const int PROPERTY_DECL=140;
	public const int PROTECTED=141;
	public const int PUBLIC=142;
	public const int QUALIFIED_TYPE_IDENT=143;
	public const int QUESTION=144;
	public const int RBRACK=145;
	public const int RCURLY=146;
	public const int RETURN=147;
	public const int RPAREN=148;
	public const int SEMI=149;
	public const int SET_INITIALIZER=150;
	public const int SHIFT_LEFT=151;
	public const int SHIFT_LEFT_ASSIGN=152;
	public const int SHIFT_RIGHT=153;
	public const int SHIFT_RIGHT_ASSIGN=154;
	public const int SHORT=155;
	public const int SOQL_LITERAL=156;
	public const int STAR=157;
	public const int STAR_ASSIGN=158;
	public const int STATIC=159;
	public const int STATIC_ARRAY_CREATOR=160;
	public const int STRICTFP=161;
	public const int STRING_LITERAL=162;
	public const int SUPER=163;
	public const int SUPER_CONSTRUCTOR_CALL=164;
	public const int SWITCH=165;
	public const int SWITCH_BLOCK_LABEL_LIST=166;
	public const int SYNCHRONIZED=167;
	public const int TEST_METHOD=168;
	public const int THIS=169;
	public const int THIS_CONSTRUCTOR_CALL=170;
	public const int THROW=171;
	public const int THROWS=172;
	public const int THROWS_CLAUSE=173;
	public const int TRANSIENT=174;
	public const int TRUE=175;
	public const int TRY=176;
	public const int TYPE=177;
	public const int UNARY_MINUS=178;
	public const int UNARY_PLUS=179;
	public const int UNICODE_ESCAPE=180;
	public const int VAR_DECLARATION=181;
	public const int VAR_DECLARATOR=182;
	public const int VAR_DECLARATOR_LIST=183;
	public const int VIRTUAL=184;
	public const int VOID=185;
	public const int VOID_METHOD_DECL=186;
	public const int VOLATILE=187;
	public const int WHILE=188;
	public const int WITHOUT_SHARING=189;
	public const int WITH_SHARING=190;
	public const int WS=191;
	public const int XOR=192;
	public const int XOR_ASSIGN=193;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[399+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g"; } }


	     private bool mMessageCollectionEnabled = true;
		    private List<string> mMessages;

		    public void enableErrorMessageCollection(bool pNewState) {
		        mMessageCollectionEnabled = pNewState;
		        if (mMessages == null && mMessageCollectionEnabled) {
		            mMessages = new List<string>();
		        }
		    }
		    
	        public override void EmitErrorMessage(string pMessage)
	        {
	            if (mMessageCollectionEnabled) {
		            mMessages.Add(pMessage);
		        } else {
		            base.EmitErrorMessage(pMessage);
		        }
		    }
		    
		    public List<string> getMessages() {
		        return mMessages;
		    }

		    public bool hasErrors() {
	            return mMessages.Count>0;
		    }



	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:246:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
	[GrammarRule("javaSource")]
	private AstParserRuleReturnScope<CommonTree, IToken> javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int javaSource_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> compilationUnit1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(246, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:247:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:247:9: compilationUnit
			{
			DebugLocation(247, 9);
			PushFollow(Follow._compilationUnit_in_javaSource4592);
			compilationUnit1=compilationUnit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_compilationUnit.Add(compilationUnit1.Tree);


			{
			// AST REWRITE
			// elements: compilationUnit
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:9: -> ^( JAVA_SOURCE compilationUnit )
			{
				DebugLocation(248, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:248:13: ^( JAVA_SOURCE compilationUnit )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

				DebugLocation(248, 27);
				adaptor.AddChild(root_1, stream_compilationUnit.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(249, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return retval;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:251:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
	[GrammarRule("compilationUnit")]
	private AstParserRuleReturnScope<CommonTree, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 2);
		TraceIn("compilationUnit", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationList2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> importDeclaration4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDecls5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(251, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:252:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:252:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(252, 9);
			PushFollow(Follow._annotationList_in_compilationUnit4628);
			annotationList2=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList2.Tree);
			DebugLocation(253, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:253:9: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:253:9: packageDeclaration
				{
				DebugLocation(253, 9);
				PushFollow(Follow._packageDeclaration_in_compilationUnit4639);
				packageDeclaration3=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(254, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:254:9: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:254:9: importDeclaration
					{
					DebugLocation(254, 9);
					PushFollow(Follow._importDeclaration_in_compilationUnit4651);
					importDeclaration4=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration4.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(255, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:255:9: ( typeDecls )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==ABSTRACT||LA3_1==AT||LA3_1==BOOLEAN||LA3_1==BYTE||LA3_1==CHAR||LA3_1==CLASS||LA3_1==DOUBLE||LA3_1==ENUM||LA3_1==FINAL||LA3_1==FLOAT||LA3_1==GLOBAL||LA3_1==IDENT||LA3_1==INT||LA3_1==INTERFACE||LA3_1==LESS_THAN||LA3_1==LONG||LA3_1==NATIVE||LA3_1==OVERRIDE||LA3_1==PRIVATE||(LA3_1>=PROTECTED && LA3_1<=PUBLIC)||LA3_1==SEMI||LA3_1==SHORT||LA3_1==STATIC||LA3_1==STRICTFP||(LA3_1>=SYNCHRONIZED && LA3_1<=TEST_METHOD)||LA3_1==TRANSIENT||(LA3_1>=VIRTUAL && LA3_1<=VOID)||LA3_1==VOLATILE||(LA3_1>=WITHOUT_SHARING && LA3_1<=WITH_SHARING)))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:255:9: typeDecls
					{
					DebugLocation(255, 9);
					PushFollow(Follow._typeDecls_in_compilationUnit4663);
					typeDecls5=typeDecls();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDecls5.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 2);
			LeaveRule("compilationUnit", 2);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 2, compilationUnit_StartIndex); }

		}
		DebugLocation(256, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_typeDecls();
	partial void LeaveRule_typeDecls();
	// $ANTLR start "typeDecls"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:258:1: typeDecls : ( typeDeclaration | SEMI !);
	[GrammarRule("typeDecls")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDecls()
	{
		EnterRule_typeDecls();
		EnterRule("typeDecls", 3);
		TraceIn("typeDecls", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDecls_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration6 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeDecls");
		DebugLocation(258, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:259:5: ( typeDeclaration | SEMI !)
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==ABSTRACT||LA4_1==AT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==GLOBAL||LA4_1==IDENT||LA4_1==INT||LA4_1==INTERFACE||LA4_1==LESS_THAN||LA4_1==LONG||LA4_1==NATIVE||LA4_1==OVERRIDE||LA4_1==PRIVATE||(LA4_1>=PROTECTED && LA4_1<=PUBLIC)||LA4_1==SHORT||LA4_1==STATIC||LA4_1==STRICTFP||(LA4_1>=SYNCHRONIZED && LA4_1<=TEST_METHOD)||LA4_1==TRANSIENT||(LA4_1>=VIRTUAL && LA4_1<=VOID)||LA4_1==VOLATILE||(LA4_1>=WITHOUT_SHARING && LA4_1<=WITH_SHARING)))
			{
				alt4 = 1;
			}
			else if ((LA4_1==SEMI))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:259:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 9);
				PushFollow(Follow._typeDeclaration_in_typeDecls4683);
				typeDeclaration6=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:260:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(260, 13);
				SEMI7=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDecls4693); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDecls", 3);
			LeaveRule("typeDecls", 3);
			LeaveRule_typeDecls();
			if (state.backtracking > 0) { Memoize(input, 3, typeDecls_StartIndex); }

		}
		DebugLocation(261, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDecls"); }
		return retval;

	}
	// $ANTLR end "typeDecls"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:263:1: packageDeclaration : PACKAGE ^ qualifiedIdentifier SEMI !;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 4);
		TraceIn("packageDeclaration", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PACKAGE8 = default(IToken);
		IToken SEMI10 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PACKAGE8_tree = default(CommonTree);
		CommonTree SEMI10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:264:5: ( PACKAGE ^ qualifiedIdentifier SEMI !)
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:264:9: PACKAGE ^ qualifiedIdentifier SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(264, 16);
			PACKAGE8=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration4713); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PACKAGE8_tree = (CommonTree)adaptor.Create(PACKAGE8);
			root_0 = (CommonTree)adaptor.BecomeRoot(PACKAGE8_tree, root_0);
			}
			DebugLocation(264, 18);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration4716);
			qualifiedIdentifier9=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier9.Tree);
			DebugLocation(264, 42);
			SEMI10=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration4718); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 4);
			LeaveRule("packageDeclaration", 4);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, packageDeclaration_StartIndex); }

		}
		DebugLocation(265, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:267:1: importDeclaration : IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !;
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 5);
		TraceIn("importDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPORT11 = default(IToken);
		IToken STATIC12 = default(IToken);
		IToken DOTSTAR14 = default(IToken);
		IToken SEMI15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPORT11_tree = default(CommonTree);
		CommonTree STATIC12_tree = default(CommonTree);
		CommonTree DOTSTAR14_tree = default(CommonTree);
		CommonTree SEMI15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(267, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:5: ( IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !)
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:9: IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(268, 15);
			IMPORT11=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration4744); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT11_tree = (CommonTree)adaptor.Create(IMPORT11);
			root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT11_tree, root_0);
			}
			DebugLocation(268, 17);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:17: ( STATIC )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==STATIC))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:17: STATIC
				{
				DebugLocation(268, 17);
				STATIC12=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration4747); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC12_tree = (CommonTree)adaptor.Create(STATIC12);
				adaptor.AddChild(root_0, STATIC12_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(268, 25);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration4750);
			qualifiedIdentifier13=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier13.Tree);
			DebugLocation(268, 45);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:45: ( DOTSTAR )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==DOTSTAR))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:268:45: DOTSTAR
				{
				DebugLocation(268, 45);
				DOTSTAR14=(IToken)Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration4752); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOTSTAR14_tree = (CommonTree)adaptor.Create(DOTSTAR14);
				adaptor.AddChild(root_0, DOTSTAR14_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(268, 58);
			SEMI15=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration4755); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 5);
			LeaveRule("importDeclaration", 5);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, importDeclaration_StartIndex); }

		}
		DebugLocation(269, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:271:1: typeDeclaration : modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 6);
		TraceIn("typeDeclaration", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifierList16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(271, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:272:5: ( modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:272:9: modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(272, 21);
			PushFollow(Follow._modifierList_in_typeDeclaration4779);
			modifierList16=modifierList();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(273, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:273:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
			int alt7=4;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt7 = 1;
				}
				break;
			case INTERFACE:
				{
				alt7 = 2;
				}
				break;
			case ENUM:
				{
				alt7 = 3;
				}
				break;
			case AT:
				{
				alt7 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:273:13: classTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(273, 13);
				PushFollow(Follow._classTypeDeclaration_in_typeDeclaration4794);
				classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classTypeDeclaration17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:274:13: interfaceTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(274, 13);
				PushFollow(Follow._interfaceTypeDeclaration_in_typeDeclaration4809);
				interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceTypeDeclaration18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:275:13: enumTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(275, 13);
				PushFollow(Follow._enumTypeDeclaration_in_typeDeclaration4824);
				enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumTypeDeclaration19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:276:13: annotationTypeDeclaration[$modifierList.tree]
				{
				DebugLocation(276, 13);
				PushFollow(Follow._annotationTypeDeclaration_in_typeDeclaration4839);
				annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.Tree):default(CommonTree)));
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 6);
			LeaveRule("typeDeclaration", 6);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, typeDeclaration_StartIndex); }

		}
		DebugLocation(278, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classTypeDeclaration();
	partial void LeaveRule_classTypeDeclaration();
	// $ANTLR start "classTypeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:280:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
	[GrammarRule("classTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> classTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_classTypeDeclaration();
		EnterRule("classTypeDeclaration", 7);
		TraceIn("classTypeDeclaration", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CLASS21 = default(IToken);
		IToken IDENT22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CLASS21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		try { DebugEnterRule(GrammarFileName, "classTypeDeclaration");
		DebugLocation(280, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
			{
			DebugLocation(281, 9);
			CLASS21=(IToken)Match(input,CLASS,Follow._CLASS_in_classTypeDeclaration4874); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLASS.Add(CLASS21);

			DebugLocation(281, 15);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_classTypeDeclaration4876); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT22);

			DebugLocation(281, 21);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:21: ( genericTypeParameterList )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==LESS_THAN))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:21: genericTypeParameterList
				{
				DebugLocation(281, 21);
				PushFollow(Follow._genericTypeParameterList_in_classTypeDeclaration4878);
				genericTypeParameterList23=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(281, 47);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:47: ( classExtendsClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==EXTENDS))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:47: classExtendsClause
				{
				DebugLocation(281, 47);
				PushFollow(Follow._classExtendsClause_in_classTypeDeclaration4881);
				classExtendsClause24=classExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classExtendsClause.Add(classExtendsClause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(281, 67);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:67: ( implementsClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==IMPLEMENTS))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:281:67: implementsClause
				{
				DebugLocation(281, 67);
				PushFollow(Follow._implementsClause_in_classTypeDeclaration4884);
				implementsClause25=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(281, 85);
			PushFollow(Follow._classBody_in_classTypeDeclaration4887);
			classBody26=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classBody.Add(classBody26.Tree);


			{
			// AST REWRITE
			// elements: classBody, IDENT, CLASS, classExtendsClause, genericTypeParameterList, implementsClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 282:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
			{
				DebugLocation(282, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:282:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(282, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CLASS.NextNode(), root_1);

				DebugLocation(282, 21);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(282, 34);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(282, 40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:282:40: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(282, 40);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(282, 66);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:282:66: ( classExtendsClause )?
				if (stream_classExtendsClause.HasNext)
				{
					DebugLocation(282, 66);
					adaptor.AddChild(root_1, stream_classExtendsClause.NextTree());

				}
				stream_classExtendsClause.Reset();
				DebugLocation(282, 86);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:282:86: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(282, 86);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(282, 104);
				adaptor.AddChild(root_1, stream_classBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classTypeDeclaration", 7);
			LeaveRule("classTypeDeclaration", 7);
			LeaveRule_classTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 7, classTypeDeclaration_StartIndex); }

		}
		DebugLocation(283, 4);
		} finally { DebugExitRule(GrammarFileName, "classTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "classTypeDeclaration"

	partial void EnterRule_classExtendsClause();
	partial void LeaveRule_classExtendsClause();
	// $ANTLR start "classExtendsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:285:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
	[GrammarRule("classExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> classExtendsClause()
	{
		EnterRule_classExtendsClause();
		EnterRule("classExtendsClause", 8);
		TraceIn("classExtendsClause", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS27 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "classExtendsClause");
		DebugLocation(285, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:286:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:286:9: EXTENDS type
			{
			DebugLocation(286, 9);
			EXTENDS27=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_classExtendsClause4940); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS27);

			DebugLocation(286, 17);
			PushFollow(Follow._type_in_classExtendsClause4942);
			type28=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type28.Tree);


			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
			{
				DebugLocation(287, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:287:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(287, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classExtendsClause", 8);
			LeaveRule("classExtendsClause", 8);
			LeaveRule_classExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 8, classExtendsClause_StartIndex); }

		}
		DebugLocation(288, 4);
		} finally { DebugExitRule(GrammarFileName, "classExtendsClause"); }
		return retval;

	}
	// $ANTLR end "classExtendsClause"

	partial void EnterRule_interfaceExtendsClause();
	partial void LeaveRule_interfaceExtendsClause();
	// $ANTLR start "interfaceExtendsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:290:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
	[GrammarRule("interfaceExtendsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause()
	{
		EnterRule_interfaceExtendsClause();
		EnterRule("interfaceExtendsClause", 9);
		TraceIn("interfaceExtendsClause", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtendsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "interfaceExtendsClause");
		DebugLocation(290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:291:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:291:9: EXTENDS typeList
			{
			DebugLocation(291, 9);
			EXTENDS29=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_interfaceExtendsClause4986); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS29);

			DebugLocation(291, 17);
			PushFollow(Follow._typeList_in_interfaceExtendsClause4988);
			typeList30=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList30.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 292:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
			{
				DebugLocation(292, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:292:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(292, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

				DebugLocation(292, 58);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtendsClause", 9);
			LeaveRule("interfaceExtendsClause", 9);
			LeaveRule_interfaceExtendsClause();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceExtendsClause_StartIndex); }

		}
		DebugLocation(293, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtendsClause"); }
		return retval;

	}
	// $ANTLR end "interfaceExtendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:295:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
	[GrammarRule("implementsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 10);
		TraceIn("implementsClause", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int implementsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IMPLEMENTS31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeList32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPLEMENTS31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IMPLEMENTS=new RewriteRuleITokenStream(adaptor,"token IMPLEMENTS");
		RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(295, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:296:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:296:9: IMPLEMENTS typeList
			{
			DebugLocation(296, 9);
			IMPLEMENTS31=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_implementsClause5032); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPLEMENTS.Add(IMPLEMENTS31);

			DebugLocation(296, 20);
			PushFollow(Follow._typeList_in_implementsClause5034);
			typeList32=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeList.Add(typeList32.Tree);


			{
			// AST REWRITE
			// elements: typeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
			{
				DebugLocation(297, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:297:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"), root_1);

				DebugLocation(297, 67);
				adaptor.AddChild(root_1, stream_typeList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implementsClause", 10);
			LeaveRule("implementsClause", 10);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 10, implementsClause_StartIndex); }

		}
		DebugLocation(298, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return retval;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:300:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 11);
		TraceIn("genericTypeParameterList", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN33 = default(IToken);
		IToken COMMA35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN33_tree = default(CommonTree);
		CommonTree COMMA35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(300, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:301:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:301:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
			{
			DebugLocation(301, 9);
			LESS_THAN33=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeParameterList5079); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN33);

			DebugLocation(301, 19);
			PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5081);
			genericTypeParameter34=genericTypeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter34.Tree);
			DebugLocation(301, 40);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:301:40: ( COMMA genericTypeParameter )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMA))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:301:41: COMMA genericTypeParameter
					{
					DebugLocation(301, 41);
					COMMA35=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeParameterList5084); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA35);

					DebugLocation(301, 47);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList5086);
					genericTypeParameter36=genericTypeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeParameter.Add(genericTypeParameter36.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(301, 70);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeParameterList5090);
			genericTypeListClosing37=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing37.Tree);


			{
			// AST REWRITE
			// elements: genericTypeParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
			{
				DebugLocation(302, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:302:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"), root_1);

				DebugLocation(302, 78);
				if (!(stream_genericTypeParameter.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeParameter.HasNext )
				{
					DebugLocation(302, 78);
					adaptor.AddChild(root_1, stream_genericTypeParameter.NextTree());

				}
				stream_genericTypeParameter.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameterList", 11);
			LeaveRule("genericTypeParameterList", 11);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 11, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(303, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeListClosing();
	partial void LeaveRule_genericTypeListClosing();
	// $ANTLR start "genericTypeListClosing"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:305:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |);
	[GrammarRule("genericTypeListClosing")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing()
	{
		EnterRule_genericTypeListClosing();
		EnterRule("genericTypeListClosing", 12);
		TraceIn("genericTypeListClosing", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeListClosing_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken GREATER_THAN38 = default(IToken);
		IToken SHIFT_RIGHT39 = default(IToken);
		IToken BIT_SHIFT_RIGHT40 = default(IToken);

		CommonTree GREATER_THAN38_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT39_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeListClosing");
		DebugLocation(305, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:309:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT |)
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case GREATER_THAN:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_Java_fragment)))
				{
					alt12 = 2;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_Java_fragment)))
				{
					alt12 = 3;
				}
				else if ((true))
				{
					alt12 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case EOF:
			case ABSTRACT:
			case AND:
			case AND_ASSIGN:
			case ASSIGN:
			case AT:
			case BIT_SHIFT_RIGHT_ASSIGN:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CHAR:
			case CHARACTER_LITERAL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONTINUE:
			case DEC:
			case DECIMAL_LITERAL:
			case DEFAULT:
			case DIV_ASSIGN:
			case DO:
			case DOT:
			case DOUBLE:
			case ELLIPSIS:
			case ELSE:
			case ENUM:
			case EQUAL:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case FOR:
			case GLOBAL:
			case HEX_LITERAL:
			case IDENT:
			case IF:
			case IMPLEMENTS:
			case INC:
			case INT:
			case INTERFACE:
			case LBRACK:
			case LCURLY:
			case LESS_THAN:
			case LOGICAL_AND:
			case LOGICAL_NOT:
			case LOGICAL_OR:
			case LONG:
			case LPAREN:
			case MINUS:
			case MINUS_ASSIGN:
			case MOD_ASSIGN:
			case NATIVE:
			case NEW:
			case NOT:
			case NOT_EQUAL:
			case NULL:
			case OCTAL_LITERAL:
			case OR:
			case OR_ASSIGN:
			case OVERRIDE:
			case PLUS:
			case PLUS_ASSIGN:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case QUESTION:
			case RBRACK:
			case RCURLY:
			case RETURN:
			case RPAREN:
			case SEMI:
			case SHIFT_LEFT_ASSIGN:
			case SHIFT_RIGHT_ASSIGN:
			case SHORT:
			case SOQL_LITERAL:
			case STAR_ASSIGN:
			case STATIC:
			case STRICTFP:
			case STRING_LITERAL:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case TEST_METHOD:
			case THIS:
			case THROW:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITHOUT_SHARING:
			case WITH_SHARING:
			case XOR:
			case XOR_ASSIGN:
			case 194:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:309:9: GREATER_THAN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(309, 9);
				GREATER_THAN38=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_genericTypeListClosing5205); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER_THAN38_tree = (CommonTree)adaptor.Create(GREATER_THAN38);
				adaptor.AddChild(root_0, GREATER_THAN38_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:310:9: SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 9);
				SHIFT_RIGHT39=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_genericTypeListClosing5215); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHIFT_RIGHT39_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT39);
				adaptor.AddChild(root_0, SHIFT_RIGHT39_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:311:9: BIT_SHIFT_RIGHT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(311, 9);
				BIT_SHIFT_RIGHT40=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_genericTypeListClosing5225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT40);
				adaptor.AddChild(root_0, BIT_SHIFT_RIGHT40_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:313:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeListClosing", 12);
			LeaveRule("genericTypeListClosing", 12);
			LeaveRule_genericTypeListClosing();
			if (state.backtracking > 0) { Memoize(input, 12, genericTypeListClosing_StartIndex); }

		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeListClosing"); }
		return retval;

	}
	// $ANTLR end "genericTypeListClosing"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:315:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 13);
		TraceIn("genericTypeParameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> bound42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(315, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:9: IDENT ( bound )?
			{
			DebugLocation(316, 9);
			IDENT41=(IToken)Match(input,IDENT,Follow._IDENT_in_genericTypeParameter5253); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT41);

			DebugLocation(316, 15);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:15: ( bound )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==EXTENDS))
			{
				int LA13_2 = input.LA(2);

				if ((LA13_2==BOOLEAN||LA13_2==BYTE||LA13_2==CHAR||LA13_2==DOUBLE||LA13_2==FLOAT||LA13_2==INT||LA13_2==LONG||LA13_2==SHORT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
				else if ((LA13_2==IDENT))
				{
					int LA13_3 = input.LA(3);

					if ((EvaluatePredicate(synpred17_Java_fragment)))
					{
						alt13 = 1;
					}
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:15: bound
				{
				DebugLocation(316, 15);
				PushFollow(Follow._bound_in_genericTypeParameter5255);
				bound42=bound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bound.Add(bound42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: IDENT, bound
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:9: -> ^( IDENT ( bound )? )
			{
				DebugLocation(317, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:317:13: ^( IDENT ( bound )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(317, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDENT.NextNode(), root_1);

				DebugLocation(317, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:317:21: ( bound )?
				if (stream_bound.HasNext)
				{
					DebugLocation(317, 21);
					adaptor.AddChild(root_1, stream_bound.NextTree());

				}
				stream_bound.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeParameter", 13);
			LeaveRule("genericTypeParameter", 13);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 13, genericTypeParameter_StartIndex); }

		}
		DebugLocation(318, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return retval;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:320:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
	[GrammarRule("bound")]
	private AstParserRuleReturnScope<CommonTree, IToken> bound()
	{
		EnterRule_bound();
		EnterRule("bound", 14);
		TraceIn("bound", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bound_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EXTENDS43 = default(IToken);
		IToken AND45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EXTENDS43_tree = default(CommonTree);
		CommonTree AND45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleITokenStream stream_EXTENDS=new RewriteRuleITokenStream(adaptor,"token EXTENDS");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(320, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:321:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:321:9: EXTENDS type ( AND type )*
			{
			DebugLocation(321, 9);
			EXTENDS43=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_bound5301); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXTENDS.Add(EXTENDS43);

			DebugLocation(321, 17);
			PushFollow(Follow._type_in_bound5303);
			type44=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type44.Tree);
			DebugLocation(321, 22);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:321:22: ( AND type )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==AND))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:321:23: AND type
					{
					DebugLocation(321, 23);
					AND45=(IToken)Match(input,AND,Follow._AND_in_bound5306); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND45);

					DebugLocation(321, 27);
					PushFollow(Follow._type_in_bound5308);
					type46=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type46.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 322:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
			{
				DebugLocation(322, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:322:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(322, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

				DebugLocation(322, 66);
				if (!(stream_type.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_type.HasNext )
				{
					DebugLocation(322, 66);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bound", 14);
			LeaveRule("bound", 14);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 14, bound_StartIndex); }

		}
		DebugLocation(323, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return retval;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTypeDeclaration();
	partial void LeaveRule_enumTypeDeclaration();
	// $ANTLR start "enumTypeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:325:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
	[GrammarRule("enumTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_enumTypeDeclaration();
		EnterRule("enumTypeDeclaration", 15);
		TraceIn("enumTypeDeclaration", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ENUM47 = default(IToken);
		IToken IDENT48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> implementsClause49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumBody50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ENUM47_tree = default(CommonTree);
		CommonTree IDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_ENUM=new RewriteRuleITokenStream(adaptor,"token ENUM");
		RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
		RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
		try { DebugEnterRule(GrammarFileName, "enumTypeDeclaration");
		DebugLocation(325, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:326:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:326:9: ENUM IDENT ( implementsClause )? enumBody
			{
			DebugLocation(326, 9);
			ENUM47=(IToken)Match(input,ENUM,Follow._ENUM_in_enumTypeDeclaration5349); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ENUM.Add(ENUM47);

			DebugLocation(326, 14);
			IDENT48=(IToken)Match(input,IDENT,Follow._IDENT_in_enumTypeDeclaration5351); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT48);

			DebugLocation(326, 20);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:326:20: ( implementsClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==IMPLEMENTS))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:326:20: implementsClause
				{
				DebugLocation(326, 20);
				PushFollow(Follow._implementsClause_in_enumTypeDeclaration5353);
				implementsClause49=implementsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_implementsClause.Add(implementsClause49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(326, 38);
			PushFollow(Follow._enumBody_in_enumTypeDeclaration5356);
			enumBody50=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumBody.Add(enumBody50.Tree);


			{
			// AST REWRITE
			// elements: ENUM, IDENT, implementsClause, enumBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
			{
				DebugLocation(327, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:327:13: ^( ENUM IDENT ( implementsClause )? enumBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_ENUM.NextNode(), root_1);

				DebugLocation(327, 20);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(327, 33);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(327, 39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:327:39: ( implementsClause )?
				if (stream_implementsClause.HasNext)
				{
					DebugLocation(327, 39);
					adaptor.AddChild(root_1, stream_implementsClause.NextTree());

				}
				stream_implementsClause.Reset();
				DebugLocation(327, 57);
				adaptor.AddChild(root_1, stream_enumBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumTypeDeclaration", 15);
			LeaveRule("enumTypeDeclaration", 15);
			LeaveRule_enumTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 15, enumTypeDeclaration_StartIndex); }

		}
		DebugLocation(328, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumTypeDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:330:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 16);
		TraceIn("enumBody", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY51 = default(IToken);
		IToken RCURLY53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY51_tree = default(CommonTree);
		CommonTree RCURLY53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(330, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:331:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:331:9: LCURLY enumScopeDeclarations RCURLY
			{
			DebugLocation(331, 9);
			LCURLY51=(IToken)Match(input,LCURLY,Follow._LCURLY_in_enumBody5403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY51);

			DebugLocation(331, 16);
			PushFollow(Follow._enumScopeDeclarations_in_enumBody5405);
			enumScopeDeclarations52=enumScopeDeclarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_enumScopeDeclarations.Add(enumScopeDeclarations52.Tree);
			DebugLocation(331, 38);
			RCURLY53=(IToken)Match(input,RCURLY,Follow._RCURLY_in_enumBody5407); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY53);



			{
			// AST REWRITE
			// elements: enumScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 332:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
			{
				DebugLocation(332, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:332:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(332, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(332, 69);
				adaptor.AddChild(root_1, stream_enumScopeDeclarations.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 16);
			LeaveRule("enumBody", 16);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 16, enumBody_StartIndex); }

		}
		DebugLocation(333, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumScopeDeclarations();
	partial void LeaveRule_enumScopeDeclarations();
	// $ANTLR start "enumScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:335:1: enumScopeDeclarations : enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? ;
	[GrammarRule("enumScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumScopeDeclarations()
	{
		EnterRule_enumScopeDeclarations();
		EnterRule("enumScopeDeclarations", 17);
		TraceIn("enumScopeDeclarations", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstants54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumScopeDeclarations");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:5: ( enumConstants ( COMMA !)? ( enumClassScopeDeclarations )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:9: enumConstants ( COMMA !)? ( enumClassScopeDeclarations )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(336, 9);
			PushFollow(Follow._enumConstants_in_enumScopeDeclarations5444);
			enumConstants54=enumConstants();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants54.Tree);
			DebugLocation(336, 23);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:23: ( COMMA !)?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==COMMA))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:24: COMMA !
				{
				DebugLocation(336, 29);
				COMMA55=(IToken)Match(input,COMMA,Follow._COMMA_in_enumScopeDeclarations5447); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(336, 33);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:33: ( enumClassScopeDeclarations )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==SEMI))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:336:33: enumClassScopeDeclarations
				{
				DebugLocation(336, 33);
				PushFollow(Follow._enumClassScopeDeclarations_in_enumScopeDeclarations5452);
				enumClassScopeDeclarations56=enumClassScopeDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumClassScopeDeclarations56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumScopeDeclarations", 17);
			LeaveRule("enumScopeDeclarations", 17);
			LeaveRule_enumScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 17, enumScopeDeclarations_StartIndex); }

		}
		DebugLocation(337, 4);
		} finally { DebugExitRule(GrammarFileName, "enumScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumScopeDeclarations"

	partial void EnterRule_enumClassScopeDeclarations();
	partial void LeaveRule_enumClassScopeDeclarations();
	// $ANTLR start "enumClassScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:339:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("enumClassScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumClassScopeDeclarations()
	{
		EnterRule_enumClassScopeDeclarations();
		EnterRule("enumClassScopeDeclarations", 18);
		TraceIn("enumClassScopeDeclarations", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumClassScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI57_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "enumClassScopeDeclarations");
		DebugLocation(339, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:340:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:340:9: SEMI ( classScopeDeclarations )*
			{
			DebugLocation(340, 9);
			SEMI57=(IToken)Match(input,SEMI,Follow._SEMI_in_enumClassScopeDeclarations5472); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMI.Add(SEMI57);

			DebugLocation(340, 14);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:340:14: ( classScopeDeclarations )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==ABSTRACT||LA18_1==AT||LA18_1==BOOLEAN||LA18_1==BYTE||LA18_1==CHAR||LA18_1==CLASS||LA18_1==DOUBLE||LA18_1==ENUM||LA18_1==FINAL||LA18_1==FLOAT||LA18_1==GLOBAL||LA18_1==IDENT||LA18_1==INT||LA18_1==INTERFACE||LA18_1==LCURLY||LA18_1==LESS_THAN||LA18_1==LONG||LA18_1==NATIVE||LA18_1==OVERRIDE||LA18_1==PRIVATE||(LA18_1>=PROTECTED && LA18_1<=PUBLIC)||LA18_1==SEMI||LA18_1==SHORT||LA18_1==STATIC||LA18_1==STRICTFP||(LA18_1>=SYNCHRONIZED && LA18_1<=TEST_METHOD)||LA18_1==TRANSIENT||(LA18_1>=VIRTUAL && LA18_1<=VOID)||LA18_1==VOLATILE||(LA18_1>=WITHOUT_SHARING && LA18_1<=WITH_SHARING)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:340:14: classScopeDeclarations
					{
					DebugLocation(340, 14);
					PushFollow(Follow._classScopeDeclarations_in_enumClassScopeDeclarations5474);
					classScopeDeclarations58=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations58.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(341, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:341:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(341, 69);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:341:69: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(341, 69);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumClassScopeDeclarations", 18);
			LeaveRule("enumClassScopeDeclarations", 18);
			LeaveRule_enumClassScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumClassScopeDeclarations_StartIndex); }

		}
		DebugLocation(342, 4);
		} finally { DebugExitRule(GrammarFileName, "enumClassScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumClassScopeDeclarations"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:344:1: enumConstants : enumConstant ( COMMA ! enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 19);
		TraceIn("enumConstants", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enumConstant61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(344, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:345:5: ( enumConstant ( COMMA ! enumConstant )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:345:9: enumConstant ( COMMA ! enumConstant )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(345, 9);
			PushFollow(Follow._enumConstant_in_enumConstants5513);
			enumConstant59=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant59.Tree);
			DebugLocation(345, 22);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:345:22: ( COMMA ! enumConstant )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					int LA19_2 = input.LA(2);

					if ((LA19_2==AT||LA19_2==IDENT))
					{
						alt19 = 1;
					}


				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:345:23: COMMA ! enumConstant
					{
					DebugLocation(345, 28);
					COMMA60=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants5516); if (state.failed) return retval;
					DebugLocation(345, 30);
					PushFollow(Follow._enumConstant_in_enumConstants5519);
					enumConstant61=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant61.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 19);
			LeaveRule("enumConstants", 19);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 19, enumConstants_StartIndex); }

		}
		DebugLocation(346, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:348:1: enumConstant : annotationList IDENT ^ ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<CommonTree, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 20);
		TraceIn("enumConstant", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationList62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(348, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:5: ( annotationList IDENT ^ ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:9: annotationList IDENT ^ ( arguments )? ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(349, 9);
			PushFollow(Follow._annotationList_in_enumConstant5544);
			annotationList62=annotationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationList62.Tree);
			DebugLocation(349, 29);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_enumConstant5546); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT63_tree, root_0);
			}
			DebugLocation(349, 31);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:31: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==LPAREN))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:31: arguments
				{
				DebugLocation(349, 31);
				PushFollow(Follow._arguments_in_enumConstant5549);
				arguments64=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(349, 42);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:42: ( classBody )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==LCURLY))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:349:42: classBody
				{
				DebugLocation(349, 42);
				PushFollow(Follow._classBody_in_enumConstant5552);
				classBody65=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 20);
			LeaveRule("enumConstant", 20);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 20, enumConstant_StartIndex); }

		}
		DebugLocation(350, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_interfaceTypeDeclaration();
	partial void LeaveRule_interfaceTypeDeclaration();
	// $ANTLR start "interfaceTypeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:352:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
	[GrammarRule("interfaceTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_interfaceTypeDeclaration();
		EnterRule("interfaceTypeDeclaration", 21);
		TraceIn("interfaceTypeDeclaration", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INTERFACE66 = default(IToken);
		IToken IDENT67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceExtendsClause69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceBody70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INTERFACE66_tree = default(CommonTree);
		CommonTree IDENT67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
		RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
		try { DebugEnterRule(GrammarFileName, "interfaceTypeDeclaration");
		DebugLocation(352, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
			{
			DebugLocation(353, 9);
			INTERFACE66=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceTypeDeclaration5577); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE66);

			DebugLocation(353, 19);
			IDENT67=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceTypeDeclaration5579); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT67);

			DebugLocation(353, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:25: ( genericTypeParameterList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==LESS_THAN))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:25: genericTypeParameterList
				{
				DebugLocation(353, 25);
				PushFollow(Follow._genericTypeParameterList_in_interfaceTypeDeclaration5581);
				genericTypeParameterList68=genericTypeParameterList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(353, 51);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:51: ( interfaceExtendsClause )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==EXTENDS))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:353:51: interfaceExtendsClause
				{
				DebugLocation(353, 51);
				PushFollow(Follow._interfaceExtendsClause_in_interfaceTypeDeclaration5584);
				interfaceExtendsClause69=interfaceExtendsClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(353, 75);
			PushFollow(Follow._interfaceBody_in_interfaceTypeDeclaration5587);
			interfaceBody70=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceBody.Add(interfaceBody70.Tree);


			{
			// AST REWRITE
			// elements: genericTypeParameterList, interfaceBody, interfaceExtendsClause, IDENT, INTERFACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 354:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
			{
				DebugLocation(354, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:354:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(354, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_INTERFACE.NextNode(), root_1);

				DebugLocation(354, 25);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(354, 38);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(354, 44);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:354:44: ( genericTypeParameterList )?
				if (stream_genericTypeParameterList.HasNext)
				{
					DebugLocation(354, 44);
					adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

				}
				stream_genericTypeParameterList.Reset();
				DebugLocation(354, 70);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:354:70: ( interfaceExtendsClause )?
				if (stream_interfaceExtendsClause.HasNext)
				{
					DebugLocation(354, 70);
					adaptor.AddChild(root_1, stream_interfaceExtendsClause.NextTree());

				}
				stream_interfaceExtendsClause.Reset();
				DebugLocation(354, 94);
				adaptor.AddChild(root_1, stream_interfaceBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceTypeDeclaration", 21);
			LeaveRule("interfaceTypeDeclaration", 21);
			LeaveRule_interfaceTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 21, interfaceTypeDeclaration_StartIndex); }

		}
		DebugLocation(355, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceTypeDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:357:1: typeList : type ( COMMA ! type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 22);
		TraceIn("typeList", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(357, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:358:5: ( type ( COMMA ! type )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:358:9: type ( COMMA ! type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(358, 9);
			PushFollow(Follow._type_in_typeList5637);
			type71=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type71.Tree);
			DebugLocation(358, 14);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:358:14: ( COMMA ! type )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==COMMA))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:358:15: COMMA ! type
					{
					DebugLocation(358, 20);
					COMMA72=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList5640); if (state.failed) return retval;
					DebugLocation(358, 22);
					PushFollow(Follow._type_in_typeList5643);
					type73=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type73.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 22);
			LeaveRule("typeList", 22);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 22, typeList_StartIndex); }

		}
		DebugLocation(359, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:361:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 23);
		TraceIn("classBody", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY74 = default(IToken);
		IToken RCURLY76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY74_tree = default(CommonTree);
		CommonTree RCURLY76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(361, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:362:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:362:9: LCURLY ( classScopeDeclarations )* RCURLY
			{
			DebugLocation(362, 9);
			LCURLY74=(IToken)Match(input,LCURLY,Follow._LCURLY_in_classBody5668); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY74);

			DebugLocation(362, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:362:16: ( classScopeDeclarations )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==ABSTRACT||LA25_1==AT||LA25_1==BOOLEAN||LA25_1==BYTE||LA25_1==CHAR||LA25_1==CLASS||LA25_1==DOUBLE||LA25_1==ENUM||LA25_1==FINAL||LA25_1==FLOAT||LA25_1==GLOBAL||LA25_1==IDENT||LA25_1==INT||LA25_1==INTERFACE||LA25_1==LCURLY||LA25_1==LESS_THAN||LA25_1==LONG||LA25_1==NATIVE||LA25_1==OVERRIDE||LA25_1==PRIVATE||(LA25_1>=PROTECTED && LA25_1<=PUBLIC)||LA25_1==SEMI||LA25_1==SHORT||LA25_1==STATIC||LA25_1==STRICTFP||(LA25_1>=SYNCHRONIZED && LA25_1<=TEST_METHOD)||LA25_1==TRANSIENT||(LA25_1>=VIRTUAL && LA25_1<=VOID)||LA25_1==VOLATILE||(LA25_1>=WITHOUT_SHARING && LA25_1<=WITH_SHARING)))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:362:16: classScopeDeclarations
					{
					DebugLocation(362, 16);
					PushFollow(Follow._classScopeDeclarations_in_classBody5670);
					classScopeDeclarations75=classScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classScopeDeclarations.Add(classScopeDeclarations75.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(362, 40);
			RCURLY76=(IToken)Match(input,RCURLY,Follow._RCURLY_in_classBody5673); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY76);



			{
			// AST REWRITE
			// elements: classScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 363:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
			{
				DebugLocation(363, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:363:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(363, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(363, 71);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:363:71: ( classScopeDeclarations )*
				while ( stream_classScopeDeclarations.HasNext )
				{
					DebugLocation(363, 71);
					adaptor.AddChild(root_1, stream_classScopeDeclarations.NextTree());

				}
				stream_classScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 23);
			LeaveRule("classBody", 23);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 23, classBody_StartIndex); }

		}
		DebugLocation(364, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:366:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 24);
		TraceIn("interfaceBody", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY77 = default(IToken);
		IToken RCURLY79 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY77_tree = default(CommonTree);
		CommonTree RCURLY79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(366, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:367:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:367:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
			{
			DebugLocation(367, 9);
			LCURLY77=(IToken)Match(input,LCURLY,Follow._LCURLY_in_interfaceBody5715); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY77);

			DebugLocation(367, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:367:16: ( interfaceScopeDeclarations )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==ABSTRACT||LA26_1==AT||LA26_1==BOOLEAN||LA26_1==BYTE||LA26_1==CHAR||LA26_1==CLASS||LA26_1==DOUBLE||LA26_1==ENUM||LA26_1==FINAL||LA26_1==FLOAT||LA26_1==GLOBAL||LA26_1==IDENT||LA26_1==INT||LA26_1==INTERFACE||LA26_1==LESS_THAN||LA26_1==LONG||LA26_1==NATIVE||LA26_1==OVERRIDE||LA26_1==PRIVATE||(LA26_1>=PROTECTED && LA26_1<=PUBLIC)||LA26_1==SEMI||LA26_1==SHORT||LA26_1==STATIC||LA26_1==STRICTFP||(LA26_1>=SYNCHRONIZED && LA26_1<=TEST_METHOD)||LA26_1==TRANSIENT||(LA26_1>=VIRTUAL && LA26_1<=VOID)||LA26_1==VOLATILE||(LA26_1>=WITHOUT_SHARING && LA26_1<=WITH_SHARING)))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:367:16: interfaceScopeDeclarations
					{
					DebugLocation(367, 16);
					PushFollow(Follow._interfaceScopeDeclarations_in_interfaceBody5717);
					interfaceScopeDeclarations78=interfaceScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceScopeDeclarations.Add(interfaceScopeDeclarations78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(367, 44);
			RCURLY79=(IToken)Match(input,RCURLY,Follow._RCURLY_in_interfaceBody5720); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY79);



			{
			// AST REWRITE
			// elements: interfaceScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 368:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
			{
				DebugLocation(368, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:368:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(368, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(368, 75);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:368:75: ( interfaceScopeDeclarations )*
				while ( stream_interfaceScopeDeclarations.HasNext )
				{
					DebugLocation(368, 75);
					adaptor.AddChild(root_1, stream_interfaceScopeDeclarations.NextTree());

				}
				stream_interfaceScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 24);
			LeaveRule("interfaceBody", 24);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 24, interfaceBody_StartIndex); }

		}
		DebugLocation(369, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:371:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) | type classFieldDeclaratorList ( DOT )? ( SEMI )? -> ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("classScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 25);
		TraceIn("classScopeDeclarations", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken STATIC81 = default(IToken);
		IToken IDENT85 = default(IToken);
		IToken IDENT89 = default(IToken);
		IToken SEMI94 = default(IToken);
		IToken VOID95 = default(IToken);
		IToken IDENT96 = default(IToken);
		IToken SEMI100 = default(IToken);
		IToken SEMI106 = default(IToken);
		IToken DOT109 = default(IToken);
		IToken SEMI110 = default(IToken);
		IToken SEMI112 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> propertyDeclaration86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ident_tree = default(CommonTree);
		CommonTree STATIC81_tree = default(CommonTree);
		CommonTree IDENT85_tree = default(CommonTree);
		CommonTree IDENT89_tree = default(CommonTree);
		CommonTree SEMI94_tree = default(CommonTree);
		CommonTree VOID95_tree = default(CommonTree);
		CommonTree IDENT96_tree = default(CommonTree);
		CommonTree SEMI100_tree = default(CommonTree);
		CommonTree SEMI106_tree = default(CommonTree);
		CommonTree DOT109_tree = default(CommonTree);
		CommonTree SEMI110_tree = default(CommonTree);
		CommonTree SEMI112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_STATIC=new RewriteRuleITokenStream(adaptor,"token STATIC");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_propertyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule propertyDeclaration");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(371, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:372:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) | type classFieldDeclaratorList ( DOT )? ( SEMI )? -> ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt38=5;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred32_Java_fragment)))
				{
					alt38 = 2;
				}
				else if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA38_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Java_fragment)))
				{
					alt38 = 3;
				}
				else if ((EvaluatePredicate(synpred48_Java_fragment)))
				{
					alt38 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt38 = 3;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt38 = 4;
				}
				break;
			case SEMI:
				{
				alt38 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:372:9: block
				{
				DebugLocation(372, 9);
				PushFollow(Follow._block_in_classScopeDeclarations5758);
				block80=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block80.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 372:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
				{
					DebugLocation(372, 29);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:372:29: ^( CLASS_INSTANCE_INITIALIZER block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(372, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

					DebugLocation(372, 58);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:373:9: STATIC block
				{
				DebugLocation(373, 9);
				STATIC81=(IToken)Match(input,STATIC,Follow._STATIC_in_classScopeDeclarations5787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATIC.Add(STATIC81);

				DebugLocation(373, 16);
				PushFollow(Follow._block_in_classScopeDeclarations5789);
				block82=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block82.Tree);


				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 373:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
				{
					DebugLocation(373, 29);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:373:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(373, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

					DebugLocation(373, 93);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:374:9: modifierList ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) | type classFieldDeclaratorList ( DOT )? ( SEMI )? -> ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(374, 9);
				PushFollow(Follow._modifierList_in_classScopeDeclarations5812);
				modifierList83=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList83.Tree);
				DebugLocation(375, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:375:9: ( type IDENT propertyDeclaration -> ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) | type classFieldDeclaratorList ( DOT )? ( SEMI )? -> ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt37=4;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				switch (input.LA(1))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred33_Java_fragment)))
					{
						alt37 = 1;
					}
					else if ((EvaluatePredicate(synpred43_Java_fragment)))
					{
						alt37 = 2;
					}
					else if ((EvaluatePredicate(synpred44_Java_fragment)))
					{
						alt37 = 3;
					}
					else if ((true))
					{
						alt37 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred33_Java_fragment)))
					{
						alt37 = 1;
					}
					else if ((EvaluatePredicate(synpred43_Java_fragment)))
					{
						alt37 = 2;
					}
					else if ((EvaluatePredicate(synpred44_Java_fragment)))
					{
						alt37 = 3;
					}
					else if ((true))
					{
						alt37 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case LESS_THAN:
				case VOID:
					{
					alt37 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:376:10: type IDENT propertyDeclaration
					{
					DebugLocation(376, 10);
					PushFollow(Follow._type_in_classScopeDeclarations5834);
					type84=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type84.Tree);
					DebugLocation(376, 15);
					IDENT85=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5836); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT85);

					DebugLocation(376, 21);
					PushFollow(Follow._propertyDeclaration_in_classScopeDeclarations5838);
					propertyDeclaration86=propertyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyDeclaration.Add(propertyDeclaration86.Tree);


					{
					// AST REWRITE
					// elements: modifierList, type, IDENT, propertyDeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 376:41: -> ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration )
					{
						DebugLocation(376, 44);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:376:44: ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(376, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_DECL, "PROPERTY_DECL"), root_1);

						DebugLocation(376, 60);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(376, 73);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(376, 78);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(376, 84);
						adaptor.AddChild(root_1, stream_propertyDeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					{
					DebugLocation(377, 7);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==LESS_THAN))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: genericTypeParameterList
						{
						DebugLocation(377, 7);
						PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations5860);
						genericTypeParameterList87=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList87.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(378, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:378:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
					int alt34=3;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						alt34 = 1;
						}
						break;
					case IDENT:
						{
						int LA34_2 = input.LA(2);

						if ((LA34_2==DOT||LA34_2==IDENT||LA34_2==LBRACK||LA34_2==LESS_THAN))
						{
							alt34 = 1;
						}
						else if ((LA34_2==LPAREN))
						{
							alt34 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 2, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case VOID:
						{
						alt34 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:14: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(379, 14);
						PushFollow(Follow._type_in_classScopeDeclarations5893);
						type88=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type88.Tree);
						DebugLocation(379, 19);
						IDENT89=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5895); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT89);

						DebugLocation(379, 25);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5897);
						formalParameterList90=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList90.Tree);
						DebugLocation(379, 45);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: ( arrayDeclaratorList )?
						int alt28=2;
						try { DebugEnterSubRule(28);
						try { DebugEnterDecision(28, false);
						int LA28_1 = input.LA(1);

						if ((LA28_1==LBRACK))
						{
							alt28 = 1;
						}
						} finally { DebugExitDecision(28); }
						switch (alt28)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: arrayDeclaratorList
							{
							DebugLocation(379, 45);
							PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations5899);
							arrayDeclaratorList91=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList91.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(28); }

						DebugLocation(379, 66);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: ( throwsClause )?
						int alt29=2;
						try { DebugEnterSubRule(29);
						try { DebugEnterDecision(29, false);
						int LA29_1 = input.LA(1);

						if ((LA29_1==THROWS))
						{
							alt29 = 1;
						}
						} finally { DebugExitDecision(29); }
						switch (alt29)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: throwsClause
							{
							DebugLocation(379, 66);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5902);
							throwsClause92=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause92.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(29); }

						DebugLocation(379, 80);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:80: ( block | SEMI )
						int alt30=2;
						try { DebugEnterSubRule(30);
						try { DebugEnterDecision(30, false);
						int LA30_1 = input.LA(1);

						if ((LA30_1==LCURLY))
						{
							alt30 = 1;
						}
						else if ((LA30_1==SEMI))
						{
							alt30 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(30); }
						switch (alt30)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:81: block
							{
							DebugLocation(379, 81);
							PushFollow(Follow._block_in_classScopeDeclarations5906);
							block93=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block93.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:89: SEMI
							{
							DebugLocation(379, 89);
							SEMI94=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5910); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI94);


							}
							break;

						}
						} finally { DebugExitSubRule(30); }



						{
						// AST REWRITE
						// elements: block, type, modifierList, genericTypeParameterList, IDENT, throwsClause, formalParameterList, arrayDeclaratorList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 380:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
						{
							DebugLocation(380, 21);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:380:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(380, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(380, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(380, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:380:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(380, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(380, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(380, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(380, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(380, 114);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:380:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(380, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(380, 135);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:380:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(380, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(380, 149);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:380:149: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(380, 149);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
						{
						DebugLocation(381, 17);
						VOID95=(IToken)Match(input,VOID,Follow._VOID_in_classScopeDeclarations5972); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID95);

						DebugLocation(381, 22);
						IDENT96=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations5974); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT96);

						DebugLocation(381, 28);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations5976);
						formalParameterList97=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList97.Tree);
						DebugLocation(381, 48);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: ( throwsClause )?
						int alt31=2;
						try { DebugEnterSubRule(31);
						try { DebugEnterDecision(31, false);
						int LA31_1 = input.LA(1);

						if ((LA31_1==THROWS))
						{
							alt31 = 1;
						}
						} finally { DebugExitDecision(31); }
						switch (alt31)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: throwsClause
							{
							DebugLocation(381, 48);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations5978);
							throwsClause98=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause98.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(31); }

						DebugLocation(381, 62);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:62: ( block | SEMI )
						int alt32=2;
						try { DebugEnterSubRule(32);
						try { DebugEnterDecision(32, false);
						int LA32_1 = input.LA(1);

						if ((LA32_1==LCURLY))
						{
							alt32 = 1;
						}
						else if ((LA32_1==SEMI))
						{
							alt32 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(32); }
						switch (alt32)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:63: block
							{
							DebugLocation(381, 63);
							PushFollow(Follow._block_in_classScopeDeclarations5982);
							block99=block();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_block.Add(block99.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:71: SEMI
							{
							DebugLocation(381, 71);
							SEMI100=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations5986); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(SEMI100);


							}
							break;

						}
						} finally { DebugExitSubRule(32); }



						{
						// AST REWRITE
						// elements: throwsClause, block, genericTypeParameterList, modifierList, IDENT, formalParameterList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 382:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
						{
							DebugLocation(382, 21);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:382:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(382, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(382, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(382, 53);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:382:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(382, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(382, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(382, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(382, 105);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:382:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(382, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(382, 119);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:382:119: ( block )?
							if (stream_block.HasNext)
							{
								DebugLocation(382, 119);
								adaptor.AddChild(root_1, stream_block.NextTree());

							}
							stream_block.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:17: ident= IDENT formalParameterList ( throwsClause )? block
						{
						DebugLocation(383, 22);
						ident=(IToken)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations6045); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(ident);

						DebugLocation(383, 29);
						PushFollow(Follow._formalParameterList_in_classScopeDeclarations6047);
						formalParameterList101=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList101.Tree);
						DebugLocation(383, 49);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: ( throwsClause )?
						int alt33=2;
						try { DebugEnterSubRule(33);
						try { DebugEnterDecision(33, false);
						int LA33_1 = input.LA(1);

						if ((LA33_1==THROWS))
						{
							alt33 = 1;
						}
						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: throwsClause
							{
							DebugLocation(383, 49);
							PushFollow(Follow._throwsClause_in_classScopeDeclarations6049);
							throwsClause102=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause102.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(33); }

						DebugLocation(383, 63);
						PushFollow(Follow._block_in_classScopeDeclarations6052);
						block103=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block103.Tree);


						{
						// AST REWRITE
						// elements: modifierList, block, formalParameterList, genericTypeParameterList, throwsClause
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 384:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
						{
							DebugLocation(384, 21);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:384:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(384, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

							DebugLocation(384, 68);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(384, 81);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:384:81: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(384, 81);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(384, 107);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(384, 127);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:384:127: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(384, 127);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();
							DebugLocation(384, 141);
							adaptor.AddChild(root_1, stream_block.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(34); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:387:13: type classFieldDeclaratorList SEMI
					{
					DebugLocation(387, 13);
					PushFollow(Follow._type_in_classScopeDeclarations6118);
					type104=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type104.Tree);
					DebugLocation(387, 18);
					PushFollow(Follow._classFieldDeclaratorList_in_classScopeDeclarations6120);
					classFieldDeclaratorList105=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList105.Tree);
					DebugLocation(387, 43);
					SEMI106=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6122); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI106);



					{
					// AST REWRITE
					// elements: modifierList, type, classFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 388:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(388, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:388:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(388, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(388, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(388, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:13: type classFieldDeclaratorList ( DOT )? ( SEMI )?
					{
					DebugLocation(389, 13);
					PushFollow(Follow._type_in_classScopeDeclarations6161);
					type107=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type107.Tree);
					DebugLocation(389, 18);
					PushFollow(Follow._classFieldDeclaratorList_in_classScopeDeclarations6163);
					classFieldDeclaratorList108=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList108.Tree);
					DebugLocation(389, 43);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:43: ( DOT )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==DOT))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:43: DOT
						{
						DebugLocation(389, 43);
						DOT109=(IToken)Match(input,DOT,Follow._DOT_in_classScopeDeclarations6165); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(DOT109);


						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(389, 48);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: ( SEMI )?
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					int LA36_1 = input.LA(1);

					if ((LA36_1==SEMI))
					{
						int LA36_2 = input.LA(2);

						if ((EvaluatePredicate(synpred46_Java_fragment)))
						{
							alt36 = 1;
						}
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: SEMI
						{
						DebugLocation(389, 48);
						SEMI110=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6168); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI110);


						}
						break;

					}
					} finally { DebugExitSubRule(36); }



					{
					// AST REWRITE
					// elements: type, classFieldDeclaratorList, modifierList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:13: -> ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(390, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:390:17: ^( BROKEN_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BROKEN_DECLARATION, "BROKEN_DECLARATION"), root_1);

						DebugLocation(390, 38);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(390, 51);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(390, 56);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:392:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(392, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations6214);
				typeDeclaration111=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration111.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:393:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(393, 13);
				SEMI112=(IToken)Match(input,SEMI,Follow._SEMI_in_classScopeDeclarations6224); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classScopeDeclarations", 25);
			LeaveRule("classScopeDeclarations", 25);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 25, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(394, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:396:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
	[GrammarRule("interfaceScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 26);
		TraceIn("interfaceScopeDeclarations", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT116 = default(IToken);
		IToken SEMI120 = default(IToken);
		IToken VOID121 = default(IToken);
		IToken IDENT122 = default(IToken);
		IToken SEMI125 = default(IToken);
		IToken SEMI128 = default(IToken);
		IToken SEMI130 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeParameterList114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterList123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> throwsClause124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT116_tree = default(CommonTree);
		CommonTree SEMI120_tree = default(CommonTree);
		CommonTree VOID121_tree = default(CommonTree);
		CommonTree IDENT122_tree = default(CommonTree);
		CommonTree SEMI125_tree = default(CommonTree);
		CommonTree SEMI128_tree = default(CommonTree);
		CommonTree SEMI130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(396, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:397:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Java_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred56_Java_fragment)))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt45 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt45 = 2;
				}
				break;
			case SEMI:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:397:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				{
				DebugLocation(397, 9);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations6244);
				modifierList113=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList113.Tree);
				DebugLocation(398, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				switch (input.LA(1))
				{
				case LESS_THAN:
				case VOID:
					{
					alt44 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA44_2 = input.LA(2);

					if ((EvaluatePredicate(synpred54_Java_fragment)))
					{
						alt44 = 1;
					}
					else if ((true))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA44_2 = input.LA(2);

					if ((EvaluatePredicate(synpred54_Java_fragment)))
					{
						alt44 = 1;
					}
					else if ((true))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					{
					DebugLocation(398, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )?
					int alt39=2;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==LESS_THAN))
					{
						alt39 = 1;
					}
					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: genericTypeParameterList
						{
						DebugLocation(398, 13);
						PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations6258);
						genericTypeParameterList114=genericTypeParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_genericTypeParameterList.Add(genericTypeParameterList114.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(399, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==BOOLEAN||LA43_1==BYTE||LA43_1==CHAR||LA43_1==DOUBLE||LA43_1==FLOAT||LA43_1==IDENT||LA43_1==INT||LA43_1==LONG||LA43_1==SHORT))
					{
						alt43 = 1;
					}
					else if ((LA43_1==VOID))
					{
						alt43 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
						{
						DebugLocation(399, 17);
						PushFollow(Follow._type_in_interfaceScopeDeclarations6277);
						type115=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(type115.Tree);
						DebugLocation(399, 22);
						IDENT116=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6279); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT116);

						DebugLocation(399, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6281);
						formalParameterList117=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList117.Tree);
						DebugLocation(399, 48);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: ( arrayDeclaratorList )?
						int alt40=2;
						try { DebugEnterSubRule(40);
						try { DebugEnterDecision(40, false);
						int LA40_1 = input.LA(1);

						if ((LA40_1==LBRACK))
						{
							alt40 = 1;
						}
						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: arrayDeclaratorList
							{
							DebugLocation(399, 48);
							PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations6283);
							arrayDeclaratorList118=arrayDeclaratorList();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList118.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(40); }

						DebugLocation(399, 69);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: ( throwsClause )?
						int alt41=2;
						try { DebugEnterSubRule(41);
						try { DebugEnterDecision(41, false);
						int LA41_1 = input.LA(1);

						if ((LA41_1==THROWS))
						{
							alt41 = 1;
						}
						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: throwsClause
							{
							DebugLocation(399, 69);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6286);
							throwsClause119=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause119.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(41); }

						DebugLocation(399, 83);
						SEMI120=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6289); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI120);



						{
						// AST REWRITE
						// elements: formalParameterList, throwsClause, genericTypeParameterList, type, arrayDeclaratorList, IDENT, modifierList
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 400:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
						{
							DebugLocation(400, 21);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:400:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(400, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

							DebugLocation(400, 44);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(400, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:400:57: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(400, 57);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(400, 83);
							adaptor.AddChild(root_1, stream_type.NextTree());
							DebugLocation(400, 88);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(400, 94);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(400, 114);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:400:114: ( arrayDeclaratorList )?
							if (stream_arrayDeclaratorList.HasNext)
							{
								DebugLocation(400, 114);
								adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

							}
							stream_arrayDeclaratorList.Reset();
							DebugLocation(400, 135);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:400:135: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(400, 135);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
						{
						DebugLocation(401, 17);
						VOID121=(IToken)Match(input,VOID,Follow._VOID_in_interfaceScopeDeclarations6347); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_VOID.Add(VOID121);

						DebugLocation(401, 22);
						IDENT122=(IToken)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations6349); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT122);

						DebugLocation(401, 28);
						PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations6351);
						formalParameterList123=formalParameterList();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterList.Add(formalParameterList123.Tree);
						DebugLocation(401, 48);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: ( throwsClause )?
						int alt42=2;
						try { DebugEnterSubRule(42);
						try { DebugEnterDecision(42, false);
						int LA42_1 = input.LA(1);

						if ((LA42_1==THROWS))
						{
							alt42 = 1;
						}
						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: throwsClause
							{
							DebugLocation(401, 48);
							PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations6353);
							throwsClause124=throwsClause();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_throwsClause.Add(throwsClause124.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(42); }

						DebugLocation(401, 62);
						SEMI125=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6356); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMI.Add(SEMI125);



						{
						// AST REWRITE
						// elements: throwsClause, formalParameterList, genericTypeParameterList, modifierList, IDENT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 402:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
						{
							DebugLocation(402, 21);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:402:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(402, 23);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

							DebugLocation(402, 40);
							adaptor.AddChild(root_1, stream_modifierList.NextTree());
							DebugLocation(402, 53);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:402:53: ( genericTypeParameterList )?
							if (stream_genericTypeParameterList.HasNext)
							{
								DebugLocation(402, 53);
								adaptor.AddChild(root_1, stream_genericTypeParameterList.NextTree());

							}
							stream_genericTypeParameterList.Reset();
							DebugLocation(402, 79);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());
							DebugLocation(402, 85);
							adaptor.AddChild(root_1, stream_formalParameterList.NextTree());
							DebugLocation(402, 105);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:402:105: ( throwsClause )?
							if (stream_throwsClause.HasNext)
							{
								DebugLocation(402, 105);
								adaptor.AddChild(root_1, stream_throwsClause.NextTree());

							}
							stream_throwsClause.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(43); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:404:13: type interfaceFieldDeclaratorList SEMI
					{
					DebugLocation(404, 13);
					PushFollow(Follow._type_in_interfaceScopeDeclarations6419);
					type126=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type126.Tree);
					DebugLocation(404, 18);
					PushFollow(Follow._interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6421);
					interfaceFieldDeclaratorList127=interfaceFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclaratorList.Add(interfaceFieldDeclaratorList127.Tree);
					DebugLocation(404, 47);
					SEMI128=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6423); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI128);



					{
					// AST REWRITE
					// elements: modifierList, type, interfaceFieldDeclaratorList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
					{
						DebugLocation(405, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:405:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(405, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(405, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(405, 53);
						adaptor.AddChild(root_1, stream_interfaceFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:407:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(407, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations6468);
				typeDeclaration129=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration129.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:408:9: SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 13);
				SEMI130=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceScopeDeclarations6478); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 26);
			LeaveRule("interfaceScopeDeclarations", 26);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 26, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(409, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_classFieldDeclaratorList();
	partial void LeaveRule_classFieldDeclaratorList();
	// $ANTLR start "classFieldDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:411:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
	[GrammarRule("classFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList()
	{
		EnterRule_classFieldDeclaratorList();
		EnterRule("classFieldDeclaratorList", 27);
		TraceIn("classFieldDeclaratorList", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclaratorList");
		DebugLocation(411, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:412:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:412:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
			{
			DebugLocation(412, 9);
			PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6498);
			classFieldDeclarator131=classFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator131.Tree);
			DebugLocation(412, 30);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:412:30: ( COMMA classFieldDeclarator )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==COMMA))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:412:31: COMMA classFieldDeclarator
					{
					DebugLocation(412, 31);
					COMMA132=(IToken)Match(input,COMMA,Follow._COMMA_in_classFieldDeclaratorList6501); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA132);

					DebugLocation(412, 37);
					PushFollow(Follow._classFieldDeclarator_in_classFieldDeclaratorList6503);
					classFieldDeclarator133=classFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclarator.Add(classFieldDeclarator133.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: classFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
			{
				DebugLocation(413, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:413:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(413, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(413, 35);
				if (!(stream_classFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_classFieldDeclarator.HasNext )
				{
					DebugLocation(413, 35);
					adaptor.AddChild(root_1, stream_classFieldDeclarator.NextTree());

				}
				stream_classFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclaratorList", 27);
			LeaveRule("classFieldDeclaratorList", 27);
			LeaveRule_classFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 27, classFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(414, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclaratorList"

	partial void EnterRule_classFieldDeclarator();
	partial void LeaveRule_classFieldDeclarator();
	// $ANTLR start "classFieldDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:416:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("classFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclarator()
	{
		EnterRule_classFieldDeclarator();
		EnterRule("classFieldDeclarator", 28);
		TraceIn("classFieldDeclarator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "classFieldDeclarator");
		DebugLocation(416, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:417:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:417:9: variableDeclaratorId ( ASSIGN variableInitializer )?
			{
			DebugLocation(417, 9);
			PushFollow(Follow._variableDeclaratorId_in_classFieldDeclarator6542);
			variableDeclaratorId134=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId134.Tree);
			DebugLocation(417, 30);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:417:30: ( ASSIGN variableInitializer )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==ASSIGN))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:417:31: ASSIGN variableInitializer
				{
				DebugLocation(417, 31);
				ASSIGN135=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_classFieldDeclarator6545); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN135);

				DebugLocation(417, 38);
				PushFollow(Follow._variableInitializer_in_classFieldDeclarator6547);
				variableInitializer136=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: variableInitializer, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
				DebugLocation(418, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:418:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(418, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(418, 51);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:418:51: ( variableInitializer )?
				if (stream_variableInitializer.HasNext)
				{
					DebugLocation(418, 51);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classFieldDeclarator", 28);
			LeaveRule("classFieldDeclarator", 28);
			LeaveRule_classFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, classFieldDeclarator_StartIndex); }

		}
		DebugLocation(419, 4);
		} finally { DebugExitRule(GrammarFileName, "classFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "classFieldDeclarator"

	partial void EnterRule_interfaceFieldDeclaratorList();
	partial void LeaveRule_interfaceFieldDeclaratorList();
	// $ANTLR start "interfaceFieldDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:421:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
	[GrammarRule("interfaceFieldDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclaratorList()
	{
		EnterRule_interfaceFieldDeclaratorList();
		EnterRule("interfaceFieldDeclaratorList", 29);
		TraceIn("interfaceFieldDeclaratorList", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaratorList");
		DebugLocation(421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:422:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:422:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
			{
			DebugLocation(422, 9);
			PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6592);
			interfaceFieldDeclarator137=interfaceFieldDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator137.Tree);
			DebugLocation(422, 34);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:422:34: ( COMMA interfaceFieldDeclarator )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==COMMA))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:422:35: COMMA interfaceFieldDeclarator
					{
					DebugLocation(422, 35);
					COMMA138=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaratorList6595); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA138);

					DebugLocation(422, 41);
					PushFollow(Follow._interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6597);
					interfaceFieldDeclarator139=interfaceFieldDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceFieldDeclarator.Add(interfaceFieldDeclarator139.Tree);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: interfaceFieldDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
			{
				DebugLocation(423, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:423:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

				DebugLocation(423, 35);
				if (!(stream_interfaceFieldDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_interfaceFieldDeclarator.HasNext )
				{
					DebugLocation(423, 35);
					adaptor.AddChild(root_1, stream_interfaceFieldDeclarator.NextTree());

				}
				stream_interfaceFieldDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaratorList", 29);
			LeaveRule("interfaceFieldDeclaratorList", 29);
			LeaveRule_interfaceFieldDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }

		}
		DebugLocation(424, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaratorList"

	partial void EnterRule_interfaceFieldDeclarator();
	partial void LeaveRule_interfaceFieldDeclarator();
	// $ANTLR start "interfaceFieldDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:426:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
	[GrammarRule("interfaceFieldDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> interfaceFieldDeclarator()
	{
		EnterRule_interfaceFieldDeclarator();
		EnterRule("interfaceFieldDeclarator", 30);
		TraceIn("interfaceFieldDeclarator", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclarator");
		DebugLocation(426, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:427:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:427:9: variableDeclaratorId ASSIGN variableInitializer
			{
			DebugLocation(427, 9);
			PushFollow(Follow._variableDeclaratorId_in_interfaceFieldDeclarator6636);
			variableDeclaratorId140=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId140.Tree);
			DebugLocation(427, 30);
			ASSIGN141=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_interfaceFieldDeclarator6638); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ASSIGN.Add(ASSIGN141);

			DebugLocation(427, 37);
			PushFollow(Follow._variableInitializer_in_interfaceFieldDeclarator6640);
			variableInitializer142=variableInitializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer142.Tree);


			{
			// AST REWRITE
			// elements: variableInitializer, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
			{
				DebugLocation(428, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:428:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(428, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

				DebugLocation(428, 30);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());
				DebugLocation(428, 51);
				adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclarator", 30);
			LeaveRule("interfaceFieldDeclarator", 30);
			LeaveRule_interfaceFieldDeclarator();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceFieldDeclarator_StartIndex); }

		}
		DebugLocation(429, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclarator"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:431:1: variableDeclaratorId : IDENT ^ ( arrayDeclaratorList )? ;
	[GrammarRule("variableDeclaratorId")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 31);
		TraceIn("variableDeclaratorId", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT143_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(431, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:432:5: ( IDENT ^ ( arrayDeclaratorList )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:432:9: IDENT ^ ( arrayDeclaratorList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(432, 14);
			IDENT143=(IToken)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId6682); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT143_tree = (CommonTree)adaptor.Create(IDENT143);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT143_tree, root_0);
			}
			DebugLocation(432, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:432:16: ( arrayDeclaratorList )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==LBRACK))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:432:16: arrayDeclaratorList
				{
				DebugLocation(432, 16);
				PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId6685);
				arrayDeclaratorList144=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList144.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaratorId", 31);
			LeaveRule("variableDeclaratorId", 31);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 31, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(433, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return retval;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:435:1: variableInitializer : ( arrayInitializer | expression | brokenExpression -> ^( BROKEN_EXPRESSION brokenExpression ) );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 32);
		TraceIn("variableInitializer", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> brokenExpression147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_brokenExpression=new RewriteRuleSubtreeStream(adaptor,"rule brokenExpression");
		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(435, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:436:5: ( arrayInitializer | expression | brokenExpression -> ^( BROKEN_EXPRESSION brokenExpression ) )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt50 = 1;
				}
				break;
			case PLUS:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INC:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEC:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NOT:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOGICAL_NOT:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NEW:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LESS_THAN:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case THIS:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				int LA50_2 = input.LA(2);

				if ((EvaluatePredicate(synpred62_Java_fragment)))
				{
					alt50 = 2;
				}
				else if ((true))
				{
					alt50 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:436:9: arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(436, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer6705);
				arrayInitializer145=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer145.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:437:9: expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(437, 9);
				PushFollow(Follow._expression_in_variableInitializer6715);
				expression146=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression146.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:438:9: brokenExpression
				{
				DebugLocation(438, 9);
				PushFollow(Follow._brokenExpression_in_variableInitializer6725);
				brokenExpression147=brokenExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_brokenExpression.Add(brokenExpression147.Tree);


				{
				// AST REWRITE
				// elements: brokenExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 438:26: -> ^( BROKEN_EXPRESSION brokenExpression )
				{
					DebugLocation(438, 29);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:438:29: ^( BROKEN_EXPRESSION brokenExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(438, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BROKEN_EXPRESSION, "BROKEN_EXPRESSION"), root_1);

					DebugLocation(438, 49);
					adaptor.AddChild(root_1, stream_brokenExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 32);
			LeaveRule("variableInitializer", 32);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 32, variableInitializer_StartIndex); }

		}
		DebugLocation(439, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:441:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
	[GrammarRule("arrayDeclarator")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 33);
		TraceIn("arrayDeclarator", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK148 = default(IToken);
		IToken RBRACK149 = default(IToken);

		CommonTree LBRACK148_tree = default(CommonTree);
		CommonTree RBRACK149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(441, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:442:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:442:9: LBRACK RBRACK
			{
			DebugLocation(442, 9);
			LBRACK148=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator6756); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACK.Add(LBRACK148);

			DebugLocation(442, 16);
			RBRACK149=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator6758); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACK.Add(RBRACK149);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 443:9: -> ^( ARRAY_DECLARATOR )
			{
				DebugLocation(443, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:443:13: ^( ARRAY_DECLARATOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(443, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclarator", 33);
			LeaveRule("arrayDeclarator", 33);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 33, arrayDeclarator_StartIndex); }

		}
		DebugLocation(444, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return retval;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:446:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
	[GrammarRule("arrayDeclaratorList")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 34);
		TraceIn("arrayDeclaratorList", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaratorList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(446, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:9: ( arrayDeclarator )+
			{
			DebugLocation(447, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:9: ( arrayDeclarator )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACK))
				{
					int LA51_2 = input.LA(2);

					if ((EvaluatePredicate(synpred63_Java_fragment)))
					{
						alt51 = 1;
					}


				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:9: arrayDeclarator
					{
					DebugLocation(447, 9);
					PushFollow(Follow._arrayDeclarator_in_arrayDeclaratorList6792);
					arrayDeclarator150=arrayDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator150.Tree);

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: arrayDeclarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 448:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
			{
				DebugLocation(448, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:448:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(448, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

				DebugLocation(448, 37);
				if (!(stream_arrayDeclarator.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_arrayDeclarator.HasNext )
				{
					DebugLocation(448, 37);
					adaptor.AddChild(root_1, stream_arrayDeclarator.NextTree());

				}
				stream_arrayDeclarator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaratorList", 34);
			LeaveRule("arrayDeclaratorList", 34);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 34, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(449, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:451:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 35);
		TraceIn("arrayInitializer", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY151 = default(IToken);
		IToken COMMA153 = default(IToken);
		IToken COMMA155 = default(IToken);
		IToken RCURLY156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableInitializer154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY151_tree = default(CommonTree);
		CommonTree COMMA153_tree = default(CommonTree);
		CommonTree COMMA155_tree = default(CommonTree);
		CommonTree RCURLY156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(451, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
			{
			DebugLocation(452, 9);
			LCURLY151=(IToken)Match(input,LCURLY,Follow._LCURLY_in_arrayInitializer6837); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY151);

			DebugLocation(452, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==BOOLEAN||LA54_1==BYTE||(LA54_1>=CHAR && LA54_1<=CHARACTER_LITERAL)||(LA54_1>=DEC && LA54_1<=DECIMAL_LITERAL)||LA54_1==DOUBLE||LA54_1==FALSE||(LA54_1>=FLOAT && LA54_1<=FLOATING_POINT_LITERAL)||(LA54_1>=HEX_LITERAL && LA54_1<=IDENT)||LA54_1==INC||LA54_1==INT||LA54_1==LCURLY||LA54_1==LESS_THAN||LA54_1==LOGICAL_NOT||(LA54_1>=LONG && LA54_1<=LPAREN)||LA54_1==MINUS||(LA54_1>=NEW && LA54_1<=NOT)||LA54_1==NULL||LA54_1==OCTAL_LITERAL||LA54_1==PLUS||(LA54_1>=SHORT && LA54_1<=SOQL_LITERAL)||(LA54_1>=STRING_LITERAL && LA54_1<=SUPER)||LA54_1==THIS||LA54_1==TRUE||LA54_1==VOID))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
				{
				DebugLocation(452, 17);
				PushFollow(Follow._variableInitializer_in_arrayInitializer6840);
				variableInitializer152=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer152.Tree);
				DebugLocation(452, 37);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:37: ( COMMA variableInitializer )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==COMMA))
					{
						int LA52_2 = input.LA(2);

						if ((LA52_2==BOOLEAN||LA52_2==BYTE||(LA52_2>=CHAR && LA52_2<=CHARACTER_LITERAL)||(LA52_2>=DEC && LA52_2<=DECIMAL_LITERAL)||LA52_2==DOUBLE||LA52_2==FALSE||(LA52_2>=FLOAT && LA52_2<=FLOATING_POINT_LITERAL)||(LA52_2>=HEX_LITERAL && LA52_2<=IDENT)||LA52_2==INC||LA52_2==INT||LA52_2==LCURLY||LA52_2==LESS_THAN||LA52_2==LOGICAL_NOT||(LA52_2>=LONG && LA52_2<=LPAREN)||LA52_2==MINUS||(LA52_2>=NEW && LA52_2<=NOT)||LA52_2==NULL||LA52_2==OCTAL_LITERAL||LA52_2==PLUS||(LA52_2>=SHORT && LA52_2<=SOQL_LITERAL)||(LA52_2>=STRING_LITERAL && LA52_2<=SUPER)||LA52_2==THIS||LA52_2==TRUE||LA52_2==VOID))
						{
							alt52 = 1;
						}


					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:38: COMMA variableInitializer
						{
						DebugLocation(452, 38);
						COMMA153=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6843); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA153);

						DebugLocation(452, 44);
						PushFollow(Follow._variableInitializer_in_arrayInitializer6845);
						variableInitializer154=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_variableInitializer.Add(variableInitializer154.Tree);

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(452, 66);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:66: ( COMMA )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==COMMA))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:452:66: COMMA
					{
					DebugLocation(452, 66);
					COMMA155=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer6849); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA155);


					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(452, 75);
			RCURLY156=(IToken)Match(input,RCURLY,Follow._RCURLY_in_arrayInitializer6854); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY156);



			{
			// AST REWRITE
			// elements: variableInitializer
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 453:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
			{
				DebugLocation(453, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:453:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(453, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_INITIALIZER, LCURLY151, "ARRAY_INITIALIZER"), root_1);

				DebugLocation(453, 63);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:453:63: ( variableInitializer )*
				while ( stream_variableInitializer.HasNext )
				{
					DebugLocation(453, 63);
					adaptor.AddChild(root_1, stream_variableInitializer.NextTree());

				}
				stream_variableInitializer.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 35);
			LeaveRule("arrayInitializer", 35);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 35, arrayInitializer_StartIndex); }

		}
		DebugLocation(454, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:456:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
	[GrammarRule("throwsClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 36);
		TraceIn("throwsClause", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int throwsClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken THROWS157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree THROWS157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THROWS=new RewriteRuleITokenStream(adaptor,"token THROWS");
		RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(456, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:457:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:457:9: THROWS qualifiedIdentList
			{
			DebugLocation(457, 9);
			THROWS157=(IToken)Match(input,THROWS,Follow._THROWS_in_throwsClause6896); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THROWS.Add(THROWS157);

			DebugLocation(457, 16);
			PushFollow(Follow._qualifiedIdentList_in_throwsClause6898);
			qualifiedIdentList158=qualifiedIdentList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentList.Add(qualifiedIdentList158.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 458:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
			{
				DebugLocation(458, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:458:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(458, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THROWS_CLAUSE, THROWS157, "THROWS_CLAUSE"), root_1);

				DebugLocation(458, 55);
				adaptor.AddChild(root_1, stream_qualifiedIdentList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwsClause", 36);
			LeaveRule("throwsClause", 36);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 36, throwsClause_StartIndex); }

		}
		DebugLocation(459, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return retval;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:461:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 37);
		TraceIn("modifierList", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> modifier159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(461, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:462:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:462:9: ( modifier )*
			{
			DebugLocation(462, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:462:9: ( modifier )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==AT))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==IDENT))
					{
						alt55 = 1;
					}


				}
				else if ((LA55_1==ABSTRACT||LA55_1==FINAL||LA55_1==GLOBAL||LA55_1==NATIVE||LA55_1==OVERRIDE||LA55_1==PRIVATE||(LA55_1>=PROTECTED && LA55_1<=PUBLIC)||LA55_1==STATIC||LA55_1==STRICTFP||(LA55_1>=SYNCHRONIZED && LA55_1<=TEST_METHOD)||LA55_1==TRANSIENT||LA55_1==VIRTUAL||LA55_1==VOLATILE||(LA55_1>=WITHOUT_SHARING && LA55_1<=WITH_SHARING)))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:462:9: modifier
					{
					DebugLocation(462, 9);
					PushFollow(Follow._modifier_in_modifierList6935);
					modifier159=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_modifier.Add(modifier159.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 463:9: -> ^( MODIFIER_LIST ( modifier )* )
			{
				DebugLocation(463, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:463:13: ^( MODIFIER_LIST ( modifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(463, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

				DebugLocation(463, 29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:463:29: ( modifier )*
				while ( stream_modifier.HasNext )
				{
					DebugLocation(463, 29);
					adaptor.AddChild(root_1, stream_modifier.NextTree());

				}
				stream_modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifierList", 37);
			LeaveRule("modifierList", 37);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 37, modifierList_StartIndex); }

		}
		DebugLocation(464, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return retval;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:466:1: modifier : ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier );
	[GrammarRule("modifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 38);
		TraceIn("modifier", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PUBLIC160 = default(IToken);
		IToken OVERRIDE161 = default(IToken);
		IToken VIRTUAL162 = default(IToken);
		IToken WITH_SHARING163 = default(IToken);
		IToken WITHOUT_SHARING164 = default(IToken);
		IToken PROTECTED165 = default(IToken);
		IToken PRIVATE166 = default(IToken);
		IToken STATIC167 = default(IToken);
		IToken ABSTRACT168 = default(IToken);
		IToken NATIVE169 = default(IToken);
		IToken SYNCHRONIZED170 = default(IToken);
		IToken TRANSIENT171 = default(IToken);
		IToken VOLATILE172 = default(IToken);
		IToken STRICTFP173 = default(IToken);
		IToken GLOBAL174 = default(IToken);
		IToken TEST_METHOD175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifier176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PUBLIC160_tree = default(CommonTree);
		CommonTree OVERRIDE161_tree = default(CommonTree);
		CommonTree VIRTUAL162_tree = default(CommonTree);
		CommonTree WITH_SHARING163_tree = default(CommonTree);
		CommonTree WITHOUT_SHARING164_tree = default(CommonTree);
		CommonTree PROTECTED165_tree = default(CommonTree);
		CommonTree PRIVATE166_tree = default(CommonTree);
		CommonTree STATIC167_tree = default(CommonTree);
		CommonTree ABSTRACT168_tree = default(CommonTree);
		CommonTree NATIVE169_tree = default(CommonTree);
		CommonTree SYNCHRONIZED170_tree = default(CommonTree);
		CommonTree TRANSIENT171_tree = default(CommonTree);
		CommonTree VOLATILE172_tree = default(CommonTree);
		CommonTree STRICTFP173_tree = default(CommonTree);
		CommonTree GLOBAL174_tree = default(CommonTree);
		CommonTree TEST_METHOD175_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(466, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:467:5: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			int alt56=17;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt56 = 1;
				}
				break;
			case OVERRIDE:
				{
				alt56 = 2;
				}
				break;
			case VIRTUAL:
				{
				alt56 = 3;
				}
				break;
			case WITH_SHARING:
				{
				alt56 = 4;
				}
				break;
			case WITHOUT_SHARING:
				{
				alt56 = 5;
				}
				break;
			case PROTECTED:
				{
				alt56 = 6;
				}
				break;
			case PRIVATE:
				{
				alt56 = 7;
				}
				break;
			case STATIC:
				{
				alt56 = 8;
				}
				break;
			case ABSTRACT:
				{
				alt56 = 9;
				}
				break;
			case NATIVE:
				{
				alt56 = 10;
				}
				break;
			case SYNCHRONIZED:
				{
				alt56 = 11;
				}
				break;
			case TRANSIENT:
				{
				alt56 = 12;
				}
				break;
			case VOLATILE:
				{
				alt56 = 13;
				}
				break;
			case STRICTFP:
				{
				alt56 = 14;
				}
				break;
			case GLOBAL:
				{
				alt56 = 15;
				}
				break;
			case TEST_METHOD:
				{
				alt56 = 16;
				}
				break;
			case AT:
			case FINAL:
				{
				alt56 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:467:9: PUBLIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(467, 9);
				PUBLIC160=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifier6976); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PUBLIC160_tree = (CommonTree)adaptor.Create(PUBLIC160);
				adaptor.AddChild(root_0, PUBLIC160_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:468:9: OVERRIDE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(468, 9);
				OVERRIDE161=(IToken)Match(input,OVERRIDE,Follow._OVERRIDE_in_modifier6986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OVERRIDE161_tree = (CommonTree)adaptor.Create(OVERRIDE161);
				adaptor.AddChild(root_0, OVERRIDE161_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:469:9: VIRTUAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 9);
				VIRTUAL162=(IToken)Match(input,VIRTUAL,Follow._VIRTUAL_in_modifier6996); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VIRTUAL162_tree = (CommonTree)adaptor.Create(VIRTUAL162);
				adaptor.AddChild(root_0, VIRTUAL162_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:470:9: WITH_SHARING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(470, 9);
				WITH_SHARING163=(IToken)Match(input,WITH_SHARING,Follow._WITH_SHARING_in_modifier7006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITH_SHARING163_tree = (CommonTree)adaptor.Create(WITH_SHARING163);
				adaptor.AddChild(root_0, WITH_SHARING163_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:471:7: WITHOUT_SHARING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(471, 7);
				WITHOUT_SHARING164=(IToken)Match(input,WITHOUT_SHARING,Follow._WITHOUT_SHARING_in_modifier7014); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITHOUT_SHARING164_tree = (CommonTree)adaptor.Create(WITHOUT_SHARING164);
				adaptor.AddChild(root_0, WITHOUT_SHARING164_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:472:9: PROTECTED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(472, 9);
				PROTECTED165=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifier7024); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PROTECTED165_tree = (CommonTree)adaptor.Create(PROTECTED165);
				adaptor.AddChild(root_0, PROTECTED165_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:473:9: PRIVATE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(473, 9);
				PRIVATE166=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifier7034); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIVATE166_tree = (CommonTree)adaptor.Create(PRIVATE166);
				adaptor.AddChild(root_0, PRIVATE166_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:474:9: STATIC
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(474, 9);
				STATIC167=(IToken)Match(input,STATIC,Follow._STATIC_in_modifier7044); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STATIC167_tree = (CommonTree)adaptor.Create(STATIC167);
				adaptor.AddChild(root_0, STATIC167_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:475:9: ABSTRACT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(475, 9);
				ABSTRACT168=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier7054); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ABSTRACT168_tree = (CommonTree)adaptor.Create(ABSTRACT168);
				adaptor.AddChild(root_0, ABSTRACT168_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:476:9: NATIVE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(476, 9);
				NATIVE169=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifier7064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NATIVE169_tree = (CommonTree)adaptor.Create(NATIVE169);
				adaptor.AddChild(root_0, NATIVE169_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:477:9: SYNCHRONIZED
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(477, 9);
				SYNCHRONIZED170=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier7074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SYNCHRONIZED170_tree = (CommonTree)adaptor.Create(SYNCHRONIZED170);
				adaptor.AddChild(root_0, SYNCHRONIZED170_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:478:9: TRANSIENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(478, 9);
				TRANSIENT171=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier7084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRANSIENT171_tree = (CommonTree)adaptor.Create(TRANSIENT171);
				adaptor.AddChild(root_0, TRANSIENT171_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:479:9: VOLATILE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(479, 9);
				VOLATILE172=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifier7094); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VOLATILE172_tree = (CommonTree)adaptor.Create(VOLATILE172);
				adaptor.AddChild(root_0, VOLATILE172_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:480:9: STRICTFP
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(480, 9);
				STRICTFP173=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifier7104); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRICTFP173_tree = (CommonTree)adaptor.Create(STRICTFP173);
				adaptor.AddChild(root_0, STRICTFP173_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:481:7: GLOBAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(481, 7);
				GLOBAL174=(IToken)Match(input,GLOBAL,Follow._GLOBAL_in_modifier7112); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GLOBAL174_tree = (CommonTree)adaptor.Create(GLOBAL174);
				adaptor.AddChild(root_0, GLOBAL174_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:482:9: TEST_METHOD
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(482, 9);
				TEST_METHOD175=(IToken)Match(input,TEST_METHOD,Follow._TEST_METHOD_in_modifier7122); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TEST_METHOD175_tree = (CommonTree)adaptor.Create(TEST_METHOD175);
				adaptor.AddChild(root_0, TEST_METHOD175_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:483:9: localModifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(483, 9);
				PushFollow(Follow._localModifier_in_modifier7132);
				localModifier176=localModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localModifier176.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 38);
			LeaveRule("modifier", 38);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 38, modifier_StartIndex); }

		}
		DebugLocation(484, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:486:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 39);
		TraceIn("localModifierList", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifierList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifier177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(486, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:487:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:487:9: ( localModifier )*
			{
			DebugLocation(487, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:487:9: ( localModifier )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==AT||LA57_1==FINAL))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:487:9: localModifier
					{
					DebugLocation(487, 9);
					PushFollow(Follow._localModifier_in_localModifierList7151);
					localModifier177=localModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifier.Add(localModifier177.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: localModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 488:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
				DebugLocation(488, 12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:488:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(488, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

				DebugLocation(488, 34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:488:34: ( localModifier )*
				while ( stream_localModifier.HasNext )
				{
					DebugLocation(488, 34);
					adaptor.AddChild(root_1, stream_localModifier.NextTree());

				}
				stream_localModifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifierList", 39);
			LeaveRule("localModifierList", 39);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 39, localModifierList_StartIndex); }

		}
		DebugLocation(489, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return retval;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:491:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 40);
		TraceIn("localModifier", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localModifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINAL178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotation179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINAL178_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(491, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:492:5: ( FINAL | annotation )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==FINAL))
			{
				alt58 = 1;
			}
			else if ((LA58_1==AT))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:492:9: FINAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(492, 9);
				FINAL178=(IToken)Match(input,FINAL,Follow._FINAL_in_localModifier7192); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FINAL178_tree = (CommonTree)adaptor.Create(FINAL178);
				adaptor.AddChild(root_0, FINAL178_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:493:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(493, 9);
				PushFollow(Follow._annotation_in_localModifier7202);
				annotation179=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation179.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localModifier", 40);
			LeaveRule("localModifier", 40);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 40, localModifier_StartIndex); }

		}
		DebugLocation(494, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return retval;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:496:1: type : ( simpleType | objectType );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 41);
		TraceIn("type", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> simpleType180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> objectType181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(496, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:497:5: ( simpleType | objectType )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==BOOLEAN||LA59_1==BYTE||LA59_1==CHAR||LA59_1==DOUBLE||LA59_1==FLOAT||LA59_1==INT||LA59_1==LONG||LA59_1==SHORT))
			{
				alt59 = 1;
			}
			else if ((LA59_1==IDENT))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:497:9: simpleType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(497, 9);
				PushFollow(Follow._simpleType_in_type7221);
				simpleType180=simpleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleType180.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:498:9: objectType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(498, 9);
				PushFollow(Follow._objectType_in_type7231);
				objectType181=objectType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectType181.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 41);
			LeaveRule("type", 41);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 41, type_StartIndex); }

		}
		DebugLocation(499, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_simpleType();
	partial void LeaveRule_simpleType();
	// $ANTLR start "simpleType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:501:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
	[GrammarRule("simpleType")]
	private AstParserRuleReturnScope<CommonTree, IToken> simpleType()
	{
		EnterRule_simpleType();
		EnterRule("simpleType", 42);
		TraceIn("simpleType", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> primitiveType182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		try { DebugEnterRule(GrammarFileName, "simpleType");
		DebugLocation(501, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:9: primitiveType ( arrayDeclaratorList )?
			{
			DebugLocation(502, 9);
			PushFollow(Follow._primitiveType_in_simpleType7251);
			primitiveType182=primitiveType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primitiveType.Add(primitiveType182.Tree);
			DebugLocation(502, 23);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:23: ( arrayDeclaratorList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==LBRACK))
			{
				int LA60_2 = input.LA(2);

				if ((LA60_2==RBRACK))
				{
					int LA60_3 = input.LA(3);

					if ((EvaluatePredicate(synpred87_Java_fragment)))
					{
						alt60 = 1;
					}
				}
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:23: arrayDeclaratorList
				{
				DebugLocation(502, 23);
				PushFollow(Follow._arrayDeclaratorList_in_simpleType7253);
				arrayDeclaratorList183=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }



			{
			// AST REWRITE
			// elements: arrayDeclaratorList, primitiveType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 503:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
			{
				DebugLocation(503, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:503:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(503, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(503, 20);
				adaptor.AddChild(root_1, stream_primitiveType.NextTree());
				DebugLocation(503, 34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:503:34: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(503, 34);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleType", 42);
			LeaveRule("simpleType", 42);
			LeaveRule_simpleType();
			if (state.backtracking > 0) { Memoize(input, 42, simpleType_StartIndex); }

		}
		DebugLocation(504, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleType"); }
		return retval;

	}
	// $ANTLR end "simpleType"

	partial void EnterRule_objectType();
	partial void LeaveRule_objectType();
	// $ANTLR start "objectType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:506:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectType")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectType()
	{
		EnterRule_objectType();
		EnterRule("objectType", 43);
		TraceIn("objectType", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
		try { DebugEnterRule(GrammarFileName, "objectType");
		DebugLocation(506, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:9: qualifiedTypeIdent ( arrayDeclaratorList )?
			{
			DebugLocation(507, 9);
			PushFollow(Follow._qualifiedTypeIdent_in_objectType7300);
			qualifiedTypeIdent184=qualifiedTypeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdent.Add(qualifiedTypeIdent184.Tree);
			DebugLocation(507, 28);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:28: ( arrayDeclaratorList )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==LBRACK))
			{
				int LA61_2 = input.LA(2);

				if ((EvaluatePredicate(synpred88_Java_fragment)))
				{
					alt61 = 1;
				}
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:28: arrayDeclaratorList
				{
				DebugLocation(507, 28);
				PushFollow(Follow._arrayDeclaratorList_in_objectType7302);
				arrayDeclaratorList185=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: arrayDeclaratorList, qualifiedTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 508:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
			{
				DebugLocation(508, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:508:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(508, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(508, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdent.NextTree());
				DebugLocation(508, 39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:508:39: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(508, 39);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectType", 43);
			LeaveRule("objectType", 43);
			LeaveRule_objectType();
			if (state.backtracking > 0) { Memoize(input, 43, objectType_StartIndex); }

		}
		DebugLocation(509, 4);
		} finally { DebugExitRule(GrammarFileName, "objectType"); }
		return retval;

	}
	// $ANTLR end "objectType"

	partial void EnterRule_objectTypeSimplified();
	partial void LeaveRule_objectTypeSimplified();
	// $ANTLR start "objectTypeSimplified"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:511:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
	[GrammarRule("objectTypeSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> objectTypeSimplified()
	{
		EnterRule_objectTypeSimplified();
		EnterRule("objectTypeSimplified", 44);
		TraceIn("objectTypeSimplified", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int objectTypeSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		try { DebugEnterRule(GrammarFileName, "objectTypeSimplified");
		DebugLocation(511, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:512:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:512:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
			{
			DebugLocation(512, 9);
			PushFollow(Follow._qualifiedTypeIdentSimplified_in_objectTypeSimplified7342);
			qualifiedTypeIdentSimplified186=qualifiedTypeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified186.Tree);
			DebugLocation(512, 38);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:512:38: ( arrayDeclaratorList )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LBRACK))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:512:38: arrayDeclaratorList
				{
				DebugLocation(512, 38);
				PushFollow(Follow._arrayDeclaratorList_in_objectTypeSimplified7344);
				arrayDeclaratorList187=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayDeclaratorList.Add(arrayDeclaratorList187.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 513:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
			{
				DebugLocation(513, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:513:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(513, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPE, "TYPE"), root_1);

				DebugLocation(513, 20);
				adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
				DebugLocation(513, 49);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:513:49: ( arrayDeclaratorList )?
				if (stream_arrayDeclaratorList.HasNext)
				{
					DebugLocation(513, 49);
					adaptor.AddChild(root_1, stream_arrayDeclaratorList.NextTree());

				}
				stream_arrayDeclaratorList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectTypeSimplified", 44);
			LeaveRule("objectTypeSimplified", 44);
			LeaveRule_objectTypeSimplified();
			if (state.backtracking > 0) { Memoize(input, 44, objectTypeSimplified_StartIndex); }

		}
		DebugLocation(514, 4);
		} finally { DebugExitRule(GrammarFileName, "objectTypeSimplified"); }
		return retval;

	}
	// $ANTLR end "objectTypeSimplified"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:516:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 45);
		TraceIn("qualifiedTypeIdent", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdent190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(516, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:9: typeIdent ( DOT typeIdent )*
			{
			DebugLocation(517, 9);
			PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7384);
			typeIdent188=typeIdent();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdent.Add(typeIdent188.Tree);
			DebugLocation(517, 19);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:19: ( DOT typeIdent )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_1 = input.LA(1);

				if ((LA63_1==DOT))
				{
					int LA63_2 = input.LA(2);

					if ((EvaluatePredicate(synpred90_Java_fragment)))
					{
						alt63 = 1;
					}


				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:20: DOT typeIdent
					{
					DebugLocation(517, 20);
					DOT189=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdent7387); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT189);

					DebugLocation(517, 24);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent7389);
					typeIdent190=typeIdent();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdent.Add(typeIdent190.Tree);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: typeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 518:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
				DebugLocation(518, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:518:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(518, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(518, 36);
				if (!(stream_typeIdent.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdent.HasNext )
				{
					DebugLocation(518, 36);
					adaptor.AddChild(root_1, stream_typeIdent.NextTree());

				}
				stream_typeIdent.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 45);
			LeaveRule("qualifiedTypeIdent", 45);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 45, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(519, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_qualifiedTypeIdentSimplified();
	partial void LeaveRule_qualifiedTypeIdentSimplified();
	// $ANTLR start "qualifiedTypeIdentSimplified"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:521:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
	[GrammarRule("qualifiedTypeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified()
	{
		EnterRule_qualifiedTypeIdentSimplified();
		EnterRule("qualifiedTypeIdentSimplified", 46);
		TraceIn("qualifiedTypeIdentSimplified", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedTypeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DOT192 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOT192_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdentSimplified");
		DebugLocation(521, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:522:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:522:9: typeIdentSimplified ( DOT typeIdentSimplified )*
			{
			DebugLocation(522, 9);
			PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7429);
			typeIdentSimplified191=typeIdentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified191.Tree);
			DebugLocation(522, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:522:29: ( DOT typeIdentSimplified )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:522:30: DOT typeIdentSimplified
					{
					DebugLocation(522, 30);
					DOT192=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedTypeIdentSimplified7432); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT192);

					DebugLocation(522, 34);
					PushFollow(Follow._typeIdentSimplified_in_qualifiedTypeIdentSimplified7434);
					typeIdentSimplified193=typeIdentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_typeIdentSimplified.Add(typeIdentSimplified193.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: typeIdentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 523:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
			{
				DebugLocation(523, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:523:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(523, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

				DebugLocation(523, 36);
				if (!(stream_typeIdentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_typeIdentSimplified.HasNext )
				{
					DebugLocation(523, 36);
					adaptor.AddChild(root_1, stream_typeIdentSimplified.NextTree());

				}
				stream_typeIdentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedTypeIdentSimplified", 46);
			LeaveRule("qualifiedTypeIdentSimplified", 46);
			LeaveRule_qualifiedTypeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }

		}
		DebugLocation(524, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "qualifiedTypeIdentSimplified"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:526:1: typeIdent : IDENT ^ ( genericTypeArgumentList )? ;
	[GrammarRule("typeIdent")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 47);
		TraceIn("typeIdent", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdent_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList195 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT194_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(526, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:5: ( IDENT ^ ( genericTypeArgumentList )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:9: IDENT ^ ( genericTypeArgumentList )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(527, 14);
			IDENT194=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdent7474); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT194_tree = (CommonTree)adaptor.Create(IDENT194);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT194_tree, root_0);
			}
			DebugLocation(527, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:16: ( genericTypeArgumentList )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==LESS_THAN))
			{
				switch (input.LA(2))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA65_3 = input.LA(3);

					if ((EvaluatePredicate(synpred92_Java_fragment)))
					{
						alt65 = 1;
					}
					}
					break;
				case IDENT:
					{
					int LA65_3 = input.LA(3);

					if ((EvaluatePredicate(synpred92_Java_fragment)))
					{
						alt65 = 1;
					}
					}
					break;
				case QUESTION:
					{
					int LA65_3 = input.LA(3);

					if ((EvaluatePredicate(synpred92_Java_fragment)))
					{
						alt65 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:16: genericTypeArgumentList
				{
				DebugLocation(527, 16);
				PushFollow(Follow._genericTypeArgumentList_in_typeIdent7477);
				genericTypeArgumentList195=genericTypeArgumentList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentList195.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdent", 47);
			LeaveRule("typeIdent", 47);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 47, typeIdent_StartIndex); }

		}
		DebugLocation(528, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return retval;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_typeIdentSimplified();
	partial void LeaveRule_typeIdentSimplified();
	// $ANTLR start "typeIdentSimplified"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:530:1: typeIdentSimplified : IDENT ^ ( genericTypeArgumentListSimplified )? ;
	[GrammarRule("typeIdentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> typeIdentSimplified()
	{
		EnterRule_typeIdentSimplified();
		EnterRule("typeIdentSimplified", 48);
		TraceIn("typeIdentSimplified", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeIdentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT196_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeIdentSimplified");
		DebugLocation(530, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:531:5: ( IDENT ^ ( genericTypeArgumentListSimplified )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:531:9: IDENT ^ ( genericTypeArgumentListSimplified )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(531, 14);
			IDENT196=(IToken)Match(input,IDENT,Follow._IDENT_in_typeIdentSimplified7497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT196_tree = (CommonTree)adaptor.Create(IDENT196);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT196_tree, root_0);
			}
			DebugLocation(531, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:531:16: ( genericTypeArgumentListSimplified )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==LESS_THAN))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:531:16: genericTypeArgumentListSimplified
				{
				DebugLocation(531, 16);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_typeIdentSimplified7500);
				genericTypeArgumentListSimplified197=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, genericTypeArgumentListSimplified197.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeIdentSimplified", 48);
			LeaveRule("typeIdentSimplified", 48);
			LeaveRule_typeIdentSimplified();
			if (state.backtracking > 0) { Memoize(input, 48, typeIdentSimplified_StartIndex); }

		}
		DebugLocation(532, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdentSimplified"); }
		return retval;

	}
	// $ANTLR end "typeIdentSimplified"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:534:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<CommonTree, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 49);
		TraceIn("primitiveType", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set198 = default(IToken);

		CommonTree set198_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(534, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:535:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(535, 5);

			set198=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set198));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 49);
			LeaveRule("primitiveType", 49);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 49, primitiveType_StartIndex); }

		}
		DebugLocation(544, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:546:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 50);
		TraceIn("genericTypeArgumentList", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN199 = default(IToken);
		IToken COMMA201 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN199_tree = default(CommonTree);
		CommonTree COMMA201_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(546, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
			{
			DebugLocation(547, 9);
			LESS_THAN199=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentList7615); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN199);

			DebugLocation(547, 19);
			PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7617);
			genericTypeArgument200=genericTypeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument200.Tree);
			DebugLocation(547, 39);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:39: ( COMMA genericTypeArgument )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==COMMA))
				{
					int LA67_2 = input.LA(2);

					if ((EvaluatePredicate(synpred101_Java_fragment)))
					{
						alt67 = 1;
					}


				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:40: COMMA genericTypeArgument
					{
					DebugLocation(547, 40);
					COMMA201=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentList7620); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA201);

					DebugLocation(547, 46);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList7622);
					genericTypeArgument202=genericTypeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgument.Add(genericTypeArgument202.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(547, 68);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentList7626);
			genericTypeListClosing203=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing203.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgument
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 548:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
			{
				DebugLocation(548, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:548:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(548, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN199, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(548, 74);
				if (!(stream_genericTypeArgument.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgument.HasNext )
				{
					DebugLocation(548, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgument.NextTree());

				}
				stream_genericTypeArgument.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentList", 50);
			LeaveRule("genericTypeArgumentList", 50);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 50, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(549, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:551:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 51);
		TraceIn("genericTypeArgument", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgument_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION205 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
		RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(551, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:552:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FLOAT||LA69_1==IDENT||LA69_1==INT||LA69_1==LONG||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==QUESTION))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:552:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(552, 9);
				PushFollow(Follow._type_in_genericTypeArgument7664);
				type204=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type204.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:553:9: QUESTION ( genericWildcardBoundType )?
				{
				DebugLocation(553, 9);
				QUESTION205=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument7674); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QUESTION.Add(QUESTION205);

				DebugLocation(553, 18);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:553:18: ( genericWildcardBoundType )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==EXTENDS))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==BOOLEAN||LA68_2==BYTE||LA68_2==CHAR||LA68_2==DOUBLE||LA68_2==FLOAT||LA68_2==INT||LA68_2==LONG||LA68_2==SHORT))
					{
						int LA68_3 = input.LA(3);

						if ((EvaluatePredicate(synpred103_Java_fragment)))
						{
							alt68 = 1;
						}
					}
					else if ((LA68_2==IDENT))
					{
						int LA68_3 = input.LA(3);

						if ((EvaluatePredicate(synpred103_Java_fragment)))
						{
							alt68 = 1;
						}
					}
				}
				else if ((LA68_1==SUPER))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==BOOLEAN||LA68_2==BYTE||LA68_2==CHAR||LA68_2==DOUBLE||LA68_2==FLOAT||LA68_2==IDENT||LA68_2==INT||LA68_2==LONG||LA68_2==SHORT))
					{
						alt68 = 1;
					}
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:553:18: genericWildcardBoundType
					{
					DebugLocation(553, 18);
					PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument7676);
					genericWildcardBoundType206=genericWildcardBoundType();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericWildcardBoundType.Add(genericWildcardBoundType206.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(68); }



				{
				// AST REWRITE
				// elements: genericWildcardBoundType, QUESTION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 554:9: -> ^( QUESTION ( genericWildcardBoundType )? )
				{
					DebugLocation(554, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:554:13: ^( QUESTION ( genericWildcardBoundType )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(554, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.NextNode(), root_1);

					DebugLocation(554, 24);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:554:24: ( genericWildcardBoundType )?
					if (stream_genericWildcardBoundType.HasNext)
					{
						DebugLocation(554, 24);
						adaptor.AddChild(root_1, stream_genericWildcardBoundType.NextTree());

					}
					stream_genericWildcardBoundType.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgument", 51);
			LeaveRule("genericTypeArgument", 51);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 51, genericTypeArgument_StartIndex); }

		}
		DebugLocation(555, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:557:1: genericWildcardBoundType : ( EXTENDS | SUPER ) ^ type ;
	[GrammarRule("genericWildcardBoundType")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 52);
		TraceIn("genericWildcardBoundType", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericWildcardBoundType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set207 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set207_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(557, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:558:5: ( ( EXTENDS | SUPER ) ^ type )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:558:9: ( EXTENDS | SUPER ) ^ type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(558, 26);

			set207=(IToken)input.LT(1);
			set207=(IToken)input.LT(1);
			if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set207), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(558, 28);
			PushFollow(Follow._type_in_genericWildcardBoundType7727);
			type208=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type208.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericWildcardBoundType", 52);
			LeaveRule("genericWildcardBoundType", 52);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 52, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(559, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return retval;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_genericTypeArgumentListSimplified();
	partial void LeaveRule_genericTypeArgumentListSimplified();
	// $ANTLR start "genericTypeArgumentListSimplified"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:561:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
	[GrammarRule("genericTypeArgumentListSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified()
	{
		EnterRule_genericTypeArgumentListSimplified();
		EnterRule("genericTypeArgumentListSimplified", 53);
		TraceIn("genericTypeArgumentListSimplified", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentListSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_THAN209 = default(IToken);
		IToken COMMA211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeListClosing213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_THAN209_tree = default(CommonTree);
		CommonTree COMMA211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
		RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentListSimplified");
		DebugLocation(561, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:562:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:562:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
			{
			DebugLocation(562, 9);
			LESS_THAN209=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_genericTypeArgumentListSimplified7746); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LESS_THAN.Add(LESS_THAN209);

			DebugLocation(562, 19);
			PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7748);
			genericTypeArgumentSimplified210=genericTypeArgumentSimplified();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified210.Tree);
			DebugLocation(562, 49);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:562:49: ( COMMA genericTypeArgumentSimplified )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==COMMA))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:562:50: COMMA genericTypeArgumentSimplified
					{
					DebugLocation(562, 50);
					COMMA211=(IToken)Match(input,COMMA,Follow._COMMA_in_genericTypeArgumentListSimplified7751); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA211);

					DebugLocation(562, 56);
					PushFollow(Follow._genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7753);
					genericTypeArgumentSimplified212=genericTypeArgumentSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentSimplified.Add(genericTypeArgumentSimplified212.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }

			DebugLocation(562, 88);
			PushFollow(Follow._genericTypeListClosing_in_genericTypeArgumentListSimplified7757);
			genericTypeListClosing213=genericTypeListClosing();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_genericTypeListClosing.Add(genericTypeListClosing213.Tree);


			{
			// AST REWRITE
			// elements: genericTypeArgumentSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 563:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
			{
				DebugLocation(563, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:563:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(563, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GENERIC_TYPE_ARG_LIST, LESS_THAN209, "GENERIC_TYPE_ARG_LIST"), root_1);

				DebugLocation(563, 74);
				if (!(stream_genericTypeArgumentSimplified.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_genericTypeArgumentSimplified.HasNext )
				{
					DebugLocation(563, 74);
					adaptor.AddChild(root_1, stream_genericTypeArgumentSimplified.NextTree());

				}
				stream_genericTypeArgumentSimplified.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentListSimplified", 53);
			LeaveRule("genericTypeArgumentListSimplified", 53);
			LeaveRule_genericTypeArgumentListSimplified();
			if (state.backtracking > 0) { Memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }

		}
		DebugLocation(564, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentListSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentListSimplified"

	partial void EnterRule_genericTypeArgumentSimplified();
	partial void LeaveRule_genericTypeArgumentSimplified();
	// $ANTLR start "genericTypeArgumentSimplified"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:566:1: genericTypeArgumentSimplified : ( type | QUESTION );
	[GrammarRule("genericTypeArgumentSimplified")]
	private AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentSimplified()
	{
		EnterRule_genericTypeArgumentSimplified();
		EnterRule("genericTypeArgumentSimplified", 54);
		TraceIn("genericTypeArgumentSimplified", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int genericTypeArgumentSimplified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION215 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type214 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION215_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentSimplified");
		DebugLocation(566, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:567:5: ( type | QUESTION )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==BOOLEAN||LA71_1==BYTE||LA71_1==CHAR||LA71_1==DOUBLE||LA71_1==FLOAT||LA71_1==IDENT||LA71_1==INT||LA71_1==LONG||LA71_1==SHORT))
			{
				alt71 = 1;
			}
			else if ((LA71_1==QUESTION))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:567:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(567, 9);
				PushFollow(Follow._type_in_genericTypeArgumentSimplified7799);
				type214=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type214.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:568:9: QUESTION
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(568, 9);
				QUESTION215=(IToken)Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgumentSimplified7809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION215_tree = (CommonTree)adaptor.Create(QUESTION215);
				adaptor.AddChild(root_0, QUESTION215_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("genericTypeArgumentSimplified", 54);
			LeaveRule("genericTypeArgumentSimplified", 54);
			LeaveRule_genericTypeArgumentSimplified();
			if (state.backtracking > 0) { Memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }

		}
		DebugLocation(569, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentSimplified"); }
		return retval;

	}
	// $ANTLR end "genericTypeArgumentSimplified"

	partial void EnterRule_qualifiedIdentList();
	partial void LeaveRule_qualifiedIdentList();
	// $ANTLR start "qualifiedIdentList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:571:1: qualifiedIdentList : qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* ;
	[GrammarRule("qualifiedIdentList")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentList()
	{
		EnterRule_qualifiedIdentList();
		EnterRule("qualifiedIdentList", 55);
		TraceIn("qualifiedIdentList", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA217_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentList");
		DebugLocation(571, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:572:5: ( qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:572:9: qualifiedIdentifier ( COMMA ! qualifiedIdentifier )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(572, 9);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7832);
			qualifiedIdentifier216=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier216.Tree);
			DebugLocation(572, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:572:29: ( COMMA ! qualifiedIdentifier )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_1 = input.LA(1);

				if ((LA72_1==COMMA))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:572:30: COMMA ! qualifiedIdentifier
					{
					DebugLocation(572, 35);
					COMMA217=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedIdentList7835); if (state.failed) return retval;
					DebugLocation(572, 37);
					PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentList7838);
					qualifiedIdentifier218=qualifiedIdentifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier218.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentList", 55);
			LeaveRule("qualifiedIdentList", 55);
			LeaveRule_qualifiedIdentList();
			if (state.backtracking > 0) { Memoize(input, 55, qualifiedIdentList_StartIndex); }

		}
		DebugLocation(573, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentList"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentList"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:575:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
	[GrammarRule("formalParameterList")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 56);
		TraceIn("formalParameterList", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN219 = default(IToken);
		IToken COMMA221 = default(IToken);
		IToken COMMA223 = default(IToken);
		IToken RPAREN226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN219_tree = default(CommonTree);
		CommonTree COMMA221_tree = default(CommonTree);
		CommonTree COMMA223_tree = default(CommonTree);
		CommonTree RPAREN226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
		RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(575, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:576:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:576:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
			{
			DebugLocation(576, 9);
			LPAREN219=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList7863); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN219);

			DebugLocation(577, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:577:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
			int alt75=3;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred110_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred111_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred110_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred111_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred110_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred111_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred110_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred111_Java_fragment)))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RPAREN:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
				{
				DebugLocation(578, 13);
				PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7891);
				formalParameterStandardDecl220=formalParameterStandardDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl220.Tree);
				DebugLocation(578, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:41: ( COMMA formalParameterStandardDecl )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==COMMA))
					{
						int LA73_2 = input.LA(2);

						if ((EvaluatePredicate(synpred108_Java_fragment)))
						{
							alt73 = 1;
						}


					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:42: COMMA formalParameterStandardDecl
						{
						DebugLocation(578, 42);
						COMMA221=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7894); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA221);

						DebugLocation(578, 48);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList7896);
						formalParameterStandardDecl222=formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_formalParameterStandardDecl.Add(formalParameterStandardDecl222.Tree);

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }

				DebugLocation(578, 78);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:78: ( COMMA formalParameterVarArgDecl )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==COMMA))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:79: COMMA formalParameterVarArgDecl
					{
					DebugLocation(578, 79);
					COMMA223=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList7901); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA223);

					DebugLocation(578, 85);
					PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7903);
					formalParameterVarArgDecl224=formalParameterVarArgDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl224.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }



				{
				// AST REWRITE
				// elements: formalParameterStandardDecl, formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 579:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
				{
					DebugLocation(579, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:579:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(579, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN219, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(579, 67);
					if (!(stream_formalParameterStandardDecl.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_formalParameterStandardDecl.HasNext )
					{
						DebugLocation(579, 67);
						adaptor.AddChild(root_1, stream_formalParameterStandardDecl.NextTree());

					}
					stream_formalParameterStandardDecl.Reset();
					DebugLocation(579, 96);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:579:96: ( formalParameterVarArgDecl )?
					if (stream_formalParameterVarArgDecl.HasNext)
					{
						DebugLocation(579, 96);
						adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					}
					stream_formalParameterVarArgDecl.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:581:13: formalParameterVarArgDecl
				{
				DebugLocation(581, 13);
				PushFollow(Follow._formalParameterVarArgDecl_in_formalParameterList7960);
				formalParameterVarArgDecl225=formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_formalParameterVarArgDecl.Add(formalParameterVarArgDecl225.Tree);


				{
				// AST REWRITE
				// elements: formalParameterVarArgDecl
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 582:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
				{
					DebugLocation(582, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:582:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(582, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN219, "FORMAL_PARAM_LIST"), root_1);

					DebugLocation(582, 67);
					adaptor.AddChild(root_1, stream_formalParameterVarArgDecl.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:584:13: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 584:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
				{
					DebugLocation(584, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:584:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(584, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_LIST, LPAREN219, "FORMAL_PARAM_LIST"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(586, 9);
			RPAREN226=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList8037); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN226);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 56);
			LeaveRule("formalParameterList", 56);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 56, formalParameterList_StartIndex); }

		}
		DebugLocation(587, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:589:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 57);
		TraceIn("formalParameterStandardDecl", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterStandardDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(589, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:590:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:590:9: localModifierList type variableDeclaratorId
			{
			DebugLocation(590, 9);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl8060);
			localModifierList227=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList227.Tree);
			DebugLocation(590, 27);
			PushFollow(Follow._type_in_formalParameterStandardDecl8062);
			type228=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type228.Tree);
			DebugLocation(590, 32);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl8064);
			variableDeclaratorId229=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId229.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, variableDeclaratorId, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 591:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(591, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:591:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(591, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

				DebugLocation(591, 37);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(591, 55);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(591, 60);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 57);
			LeaveRule("formalParameterStandardDecl", 57);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 57, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(592, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarArgDecl();
	partial void LeaveRule_formalParameterVarArgDecl();
	// $ANTLR start "formalParameterVarArgDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:594:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarArgDecl")]
	private AstParserRuleReturnScope<CommonTree, IToken> formalParameterVarArgDecl()
	{
		EnterRule_formalParameterVarArgDecl();
		EnterRule("formalParameterVarArgDecl", 58);
		TraceIn("formalParameterVarArgDecl", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterVarArgDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ELLIPSIS232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variableDeclaratorId233 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ELLIPSIS232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ELLIPSIS=new RewriteRuleITokenStream(adaptor,"token ELLIPSIS");
		RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "formalParameterVarArgDecl");
		DebugLocation(594, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:595:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:595:9: localModifierList type ELLIPSIS variableDeclaratorId
			{
			DebugLocation(595, 9);
			PushFollow(Follow._localModifierList_in_formalParameterVarArgDecl8108);
			localModifierList230=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList230.Tree);
			DebugLocation(595, 27);
			PushFollow(Follow._type_in_formalParameterVarArgDecl8110);
			type231=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type231.Tree);
			DebugLocation(595, 32);
			ELLIPSIS232=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_formalParameterVarArgDecl8112); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELLIPSIS.Add(ELLIPSIS232);

			DebugLocation(595, 41);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarArgDecl8114);
			variableDeclaratorId233=variableDeclaratorId();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaratorId.Add(variableDeclaratorId233.Tree);


			{
			// AST REWRITE
			// elements: localModifierList, type, variableDeclaratorId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 596:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
				DebugLocation(596, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:596:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(596, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

				DebugLocation(596, 40);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(596, 58);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(596, 63);
				adaptor.AddChild(root_1, stream_variableDeclaratorId.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterVarArgDecl", 58);
			LeaveRule("formalParameterVarArgDecl", 58);
			LeaveRule_formalParameterVarArgDecl();
			if (state.backtracking > 0) { Memoize(input, 58, formalParameterVarArgDecl_StartIndex); }

		}
		DebugLocation(597, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarArgDecl"); }
		return retval;

	}
	// $ANTLR end "formalParameterVarArgDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:599:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
	[GrammarRule("qualifiedIdentifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 59);
		TraceIn("qualifiedIdentifier", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ident = default(IToken);
		IToken IDENT234 = default(IToken);
		IToken DOT235 = default(IToken);

		CommonTree ident_tree = default(CommonTree);
		CommonTree IDENT234_tree = default(CommonTree);
		CommonTree DOT235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(599, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:600:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:600:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			{
			DebugLocation(600, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:600:9: ( IDENT -> IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:600:13: IDENT
			{
			DebugLocation(600, 13);
			IDENT234=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8162); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT234);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 600:33: -> IDENT
			{
				DebugLocation(600, 37);
				adaptor.AddChild(root_0, stream_IDENT.NextNode());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(602, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:602:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==DOT))
				{
					int LA76_2 = input.LA(2);

					if ((LA76_2==IDENT))
					{
						int LA76_3 = input.LA(3);

						if ((EvaluatePredicate(synpred112_Java_fragment)))
						{
							alt76 = 1;
						}


					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:602:13: DOT ident= IDENT
					{
					DebugLocation(602, 13);
					DOT235=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentifier8205); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT235);

					DebugLocation(602, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier8209); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(ident);



					{
					// AST REWRITE
					// elements: qualifiedIdentifier, DOT, ident
					// token labels: ident
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_ident=new RewriteRuleITokenStream(adaptor,"token ident",ident);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 602:33: -> ^( DOT $qualifiedIdentifier $ident)
					{
						DebugLocation(602, 37);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:602:37: ^( DOT $qualifiedIdentifier $ident)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(602, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(602, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(602, 65);
						adaptor.AddChild(root_1, stream_ident.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentifier", 59);
			LeaveRule("qualifiedIdentifier", 59);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 59, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(604, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:608:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 60);
		TraceIn("annotationList", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotation236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(608, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:9: ( annotation )*
			{
			DebugLocation(609, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:9: ( annotation )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==AT))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==IDENT))
					{
						int LA77_3 = input.LA(3);

						if ((EvaluatePredicate(synpred113_Java_fragment)))
						{
							alt77 = 1;
						}


					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:9: annotation
					{
					DebugLocation(609, 9);
					PushFollow(Follow._annotation_in_annotationList8262);
					annotation236=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotation.Add(annotation236.Tree);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: annotation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 610:9: -> ^( ANNOTATION_LIST ( annotation )* )
			{
				DebugLocation(610, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:610:13: ^( ANNOTATION_LIST ( annotation )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(610, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

				DebugLocation(610, 31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:610:31: ( annotation )*
				while ( stream_annotation.HasNext )
				{
					DebugLocation(610, 31);
					adaptor.AddChild(root_1, stream_annotation.NextTree());

				}
				stream_annotation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationList", 60);
			LeaveRule("annotationList", 60);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 60, annotationList_StartIndex); }

		}
		DebugLocation(611, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return retval;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:613:1: annotation : AT ^ qualifiedIdentifier ( annotationInit )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 61);
		TraceIn("annotation", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInit239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT237_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(613, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:614:5: ( AT ^ qualifiedIdentifier ( annotationInit )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:614:9: AT ^ qualifiedIdentifier ( annotationInit )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(614, 11);
			AT237=(IToken)Match(input,AT,Follow._AT_in_annotation8300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AT237_tree = (CommonTree)adaptor.Create(AT237);
			root_0 = (CommonTree)adaptor.BecomeRoot(AT237_tree, root_0);
			}
			DebugLocation(614, 13);
			PushFollow(Follow._qualifiedIdentifier_in_annotation8303);
			qualifiedIdentifier238=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentifier238.Tree);
			DebugLocation(614, 33);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:614:33: ( annotationInit )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_1 = input.LA(1);

			if ((LA78_1==LPAREN))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:614:33: annotationInit
				{
				DebugLocation(614, 33);
				PushFollow(Follow._annotationInit_in_annotation8305);
				annotationInit239=annotationInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationInit239.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 61);
			LeaveRule("annotation", 61);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 61, annotation_StartIndex); }

		}
		DebugLocation(615, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:617:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
	[GrammarRule("annotationInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 62);
		TraceIn("annotationInit", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN240 = default(IToken);
		IToken RPAREN242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN240_tree = default(CommonTree);
		CommonTree RPAREN242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(617, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:618:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:618:9: LPAREN annotationInitializers RPAREN
			{
			DebugLocation(618, 9);
			LPAREN240=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationInit8329); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN240);

			DebugLocation(618, 16);
			PushFollow(Follow._annotationInitializers_in_annotationInit8331);
			annotationInitializers241=annotationInitializers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationInitializers.Add(annotationInitializers241.Tree);
			DebugLocation(618, 39);
			RPAREN242=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationInit8333); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN242);



			{
			// AST REWRITE
			// elements: annotationInitializers
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 619:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
			{
				DebugLocation(619, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:619:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(619, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_BLOCK, LPAREN240, "ANNOTATION_INIT_BLOCK"), root_1);

				DebugLocation(619, 71);
				adaptor.AddChild(root_1, stream_annotationInitializers.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInit", 62);
			LeaveRule("annotationInit", 62);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 62, annotationInit_StartIndex); }

		}
		DebugLocation(620, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return retval;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:622:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 63);
		TraceIn("annotationInitializers", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA244_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(622, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:623:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==IDENT))
			{
				int LA80_2 = input.LA(2);

				if ((LA80_2==ASSIGN))
				{
					alt80 = 1;
				}
				else if ((LA80_2==AND||LA80_2==BIT_SHIFT_RIGHT||LA80_2==DEC||LA80_2==DIV||LA80_2==DOT||LA80_2==EQUAL||(LA80_2>=GREATER_OR_EQUAL && LA80_2<=GREATER_THAN)||(LA80_2>=INC && LA80_2<=INSTANCEOF)||LA80_2==LBRACK||(LA80_2>=LESS_OR_EQUAL && LA80_2<=LESS_THAN)||LA80_2==LOGICAL_AND||LA80_2==LOGICAL_OR||LA80_2==LPAREN||LA80_2==MINUS||LA80_2==MOD||LA80_2==NOT_EQUAL||LA80_2==OR||LA80_2==PLUS||LA80_2==QUESTION||LA80_2==RPAREN||LA80_2==SHIFT_LEFT||LA80_2==SHIFT_RIGHT||LA80_2==STAR||LA80_2==XOR))
				{
					alt80 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA80_1==AT||LA80_1==BOOLEAN||LA80_1==BYTE||(LA80_1>=CHAR && LA80_1<=CHARACTER_LITERAL)||(LA80_1>=DEC && LA80_1<=DECIMAL_LITERAL)||LA80_1==DOUBLE||LA80_1==FALSE||(LA80_1>=FLOAT && LA80_1<=FLOATING_POINT_LITERAL)||LA80_1==HEX_LITERAL||LA80_1==INC||LA80_1==INT||LA80_1==LCURLY||LA80_1==LESS_THAN||LA80_1==LOGICAL_NOT||(LA80_1>=LONG && LA80_1<=LPAREN)||LA80_1==MINUS||(LA80_1>=NEW && LA80_1<=NOT)||LA80_1==NULL||LA80_1==OCTAL_LITERAL||LA80_1==PLUS||(LA80_1>=SHORT && LA80_1<=SOQL_LITERAL)||(LA80_1>=STRING_LITERAL && LA80_1<=SUPER)||LA80_1==THIS||LA80_1==TRUE||LA80_1==VOID))
			{
				alt80 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:623:9: annotationInitializer ( COMMA annotationInitializer )*
				{
				DebugLocation(623, 9);
				PushFollow(Follow._annotationInitializer_in_annotationInitializers8370);
				annotationInitializer243=annotationInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer243.Tree);
				DebugLocation(623, 31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:623:31: ( COMMA annotationInitializer )*
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_1 = input.LA(1);

					if ((LA79_1==COMMA))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch ( alt79 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:623:32: COMMA annotationInitializer
						{
						DebugLocation(623, 32);
						COMMA244=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationInitializers8373); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA244);

						DebugLocation(623, 38);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers8375);
						annotationInitializer245=annotationInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationInitializer.Add(annotationInitializer245.Tree);

						}
						break;

					default:
						goto loop79;
					}
				}

				loop79:
					;

				} finally { DebugExitSubRule(79); }



				{
				// AST REWRITE
				// elements: annotationInitializer
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 624:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
					DebugLocation(624, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:624:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(624, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

					DebugLocation(624, 40);
					if (!(stream_annotationInitializer.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_annotationInitializer.HasNext )
					{
						DebugLocation(624, 40);
						adaptor.AddChild(root_1, stream_annotationInitializer.NextTree());

					}
					stream_annotationInitializer.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:625:9: annotationElementValue
				{
				DebugLocation(625, 9);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers8405);
				annotationElementValue246=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue246.Tree);


				{
				// AST REWRITE
				// elements: annotationElementValue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 626:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
					DebugLocation(626, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:626:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(626, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

					DebugLocation(626, 43);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializers", 63);
			LeaveRule("annotationInitializers", 63);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 63, annotationInitializers_StartIndex); }

		}
		DebugLocation(627, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return retval;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:629:1: annotationInitializer : IDENT ^ ASSIGN ! annotationElementValue ;
	[GrammarRule("annotationInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 64);
		TraceIn("annotationInitializer", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT247 = default(IToken);
		IToken ASSIGN248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT247_tree = default(CommonTree);
		CommonTree ASSIGN248_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(629, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:630:5: ( IDENT ^ ASSIGN ! annotationElementValue )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:630:9: IDENT ^ ASSIGN ! annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(630, 14);
			IDENT247=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationInitializer8446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT247_tree = (CommonTree)adaptor.Create(IDENT247);
			root_0 = (CommonTree)adaptor.BecomeRoot(IDENT247_tree, root_0);
			}
			DebugLocation(630, 22);
			ASSIGN248=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_annotationInitializer8449); if (state.failed) return retval;
			DebugLocation(630, 24);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer8452);
			annotationElementValue249=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue249.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationInitializer", 64);
			LeaveRule("annotationInitializer", 64);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 64, annotationInitializer_StartIndex); }

		}
		DebugLocation(631, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:633:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
	[GrammarRule("annotationElementValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 65);
		TraceIn("annotationElementValue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotation251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer252 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(633, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:634:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
			int alt81=3;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INC:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt81 = 1;
				}
				break;
			case AT:
				{
				alt81 = 2;
				}
				break;
			case LCURLY:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:634:9: annotationElementValueExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(634, 9);
				PushFollow(Follow._annotationElementValueExpression_in_annotationElementValue8475);
				annotationElementValueExpression250=annotationElementValueExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueExpression250.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:635:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(635, 9);
				PushFollow(Follow._annotation_in_annotationElementValue8485);
				annotation251=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation251.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:636:9: annotationElementValueArrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(636, 9);
				PushFollow(Follow._annotationElementValueArrayInitializer_in_annotationElementValue8495);
				annotationElementValueArrayInitializer252=annotationElementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValueArrayInitializer252.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValue", 65);
			LeaveRule("annotationElementValue", 65);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 65, annotationElementValue_StartIndex); }

		}
		DebugLocation(637, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return retval;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationElementValueExpression();
	partial void LeaveRule_annotationElementValueExpression();
	// $ANTLR start "annotationElementValueExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:639:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
	[GrammarRule("annotationElementValueExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueExpression()
	{
		EnterRule_annotationElementValueExpression();
		EnterRule("annotationElementValueExpression", 66);
		TraceIn("annotationElementValueExpression", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueExpression");
		DebugLocation(639, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:640:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:640:9: conditionalExpression
			{
			DebugLocation(640, 9);
			PushFollow(Follow._conditionalExpression_in_annotationElementValueExpression8518);
			conditionalExpression253=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_conditionalExpression.Add(conditionalExpression253.Tree);


			{
			// AST REWRITE
			// elements: conditionalExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 641:9: -> ^( EXPR conditionalExpression )
			{
				DebugLocation(641, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:641:13: ^( EXPR conditionalExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(641, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(641, 20);
				adaptor.AddChild(root_1, stream_conditionalExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueExpression", 66);
			LeaveRule("annotationElementValueExpression", 66);
			LeaveRule_annotationElementValueExpression();
			if (state.backtracking > 0) { Memoize(input, 66, annotationElementValueExpression_StartIndex); }

		}
		DebugLocation(642, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueExpression"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueExpression"

	partial void EnterRule_annotationElementValueArrayInitializer();
	partial void LeaveRule_annotationElementValueArrayInitializer();
	// $ANTLR start "annotationElementValueArrayInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:644:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
	[GrammarRule("annotationElementValueArrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationElementValueArrayInitializer()
	{
		EnterRule_annotationElementValueArrayInitializer();
		EnterRule("annotationElementValueArrayInitializer", 67);
		TraceIn("annotationElementValueArrayInitializer", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationElementValueArrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY254 = default(IToken);
		IToken COMMA256 = default(IToken);
		IToken COMMA258 = default(IToken);
		IToken RCURLY259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY254_tree = default(CommonTree);
		CommonTree COMMA256_tree = default(CommonTree);
		CommonTree COMMA258_tree = default(CommonTree);
		CommonTree RCURLY259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
		try { DebugEnterRule(GrammarFileName, "annotationElementValueArrayInitializer");
		DebugLocation(644, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
			{
			DebugLocation(645, 9);
			LCURLY254=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationElementValueArrayInitializer8558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY254);

			DebugLocation(645, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_1 = input.LA(1);

			if ((LA83_1==AT||LA83_1==BOOLEAN||LA83_1==BYTE||(LA83_1>=CHAR && LA83_1<=CHARACTER_LITERAL)||(LA83_1>=DEC && LA83_1<=DECIMAL_LITERAL)||LA83_1==DOUBLE||LA83_1==FALSE||(LA83_1>=FLOAT && LA83_1<=FLOATING_POINT_LITERAL)||(LA83_1>=HEX_LITERAL && LA83_1<=IDENT)||LA83_1==INC||LA83_1==INT||LA83_1==LCURLY||LA83_1==LESS_THAN||LA83_1==LOGICAL_NOT||(LA83_1>=LONG && LA83_1<=LPAREN)||LA83_1==MINUS||(LA83_1>=NEW && LA83_1<=NOT)||LA83_1==NULL||LA83_1==OCTAL_LITERAL||LA83_1==PLUS||(LA83_1>=SHORT && LA83_1<=SOQL_LITERAL)||(LA83_1>=STRING_LITERAL && LA83_1<=SUPER)||LA83_1==THIS||LA83_1==TRUE||LA83_1==VOID))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:17: annotationElementValue ( COMMA annotationElementValue )*
				{
				DebugLocation(645, 17);
				PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8561);
				annotationElementValue255=annotationElementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue255.Tree);
				DebugLocation(645, 40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:40: ( COMMA annotationElementValue )*
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_1 = input.LA(1);

					if ((LA82_1==COMMA))
					{
						int LA82_2 = input.LA(2);

						if ((LA82_2==AT||LA82_2==BOOLEAN||LA82_2==BYTE||(LA82_2>=CHAR && LA82_2<=CHARACTER_LITERAL)||(LA82_2>=DEC && LA82_2<=DECIMAL_LITERAL)||LA82_2==DOUBLE||LA82_2==FALSE||(LA82_2>=FLOAT && LA82_2<=FLOATING_POINT_LITERAL)||(LA82_2>=HEX_LITERAL && LA82_2<=IDENT)||LA82_2==INC||LA82_2==INT||LA82_2==LCURLY||LA82_2==LESS_THAN||LA82_2==LOGICAL_NOT||(LA82_2>=LONG && LA82_2<=LPAREN)||LA82_2==MINUS||(LA82_2>=NEW && LA82_2<=NOT)||LA82_2==NULL||LA82_2==OCTAL_LITERAL||LA82_2==PLUS||(LA82_2>=SHORT && LA82_2<=SOQL_LITERAL)||(LA82_2>=STRING_LITERAL && LA82_2<=SUPER)||LA82_2==THIS||LA82_2==TRUE||LA82_2==VOID))
						{
							alt82 = 1;
						}


					}


					} finally { DebugExitDecision(82); }
					switch ( alt82 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:41: COMMA annotationElementValue
						{
						DebugLocation(645, 41);
						COMMA256=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8564); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA256);

						DebugLocation(645, 47);
						PushFollow(Follow._annotationElementValue_in_annotationElementValueArrayInitializer8566);
						annotationElementValue257=annotationElementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationElementValue.Add(annotationElementValue257.Tree);

						}
						break;

					default:
						goto loop82;
					}
				}

				loop82:
					;

				} finally { DebugExitSubRule(82); }


				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(645, 74);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:74: ( COMMA )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==COMMA))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:645:75: COMMA
				{
				DebugLocation(645, 75);
				COMMA258=(IToken)Match(input,COMMA,Follow._COMMA_in_annotationElementValueArrayInitializer8573); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA258);


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(645, 83);
			RCURLY259=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationElementValueArrayInitializer8577); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY259);



			{
			// AST REWRITE
			// elements: annotationElementValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 646:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
			{
				DebugLocation(646, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:646:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(646, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY254, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

				DebugLocation(646, 90);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:646:90: ( annotationElementValue )*
				while ( stream_annotationElementValue.HasNext )
				{
					DebugLocation(646, 90);
					adaptor.AddChild(root_1, stream_annotationElementValue.NextTree());

				}
				stream_annotationElementValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationElementValueArrayInitializer", 67);
			LeaveRule("annotationElementValueArrayInitializer", 67);
			LeaveRule_annotationElementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(647, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "annotationElementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:649:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationTypeDeclaration(CommonTree modifiers)
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 68);
		TraceIn("annotationTypeDeclaration", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AT260 = default(IToken);
		IToken INTERFACE261 = default(IToken);
		IToken IDENT262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationBody263 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AT260_tree = default(CommonTree);
		CommonTree INTERFACE261_tree = default(CommonTree);
		CommonTree IDENT262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AT=new RewriteRuleITokenStream(adaptor,"token AT");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(649, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:650:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:650:9: AT INTERFACE IDENT annotationBody
			{
			DebugLocation(650, 9);
			AT260=(IToken)Match(input,AT,Follow._AT_in_annotationTypeDeclaration8620); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AT.Add(AT260);

			DebugLocation(650, 12);
			INTERFACE261=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration8622); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTERFACE.Add(INTERFACE261);

			DebugLocation(650, 22);
			IDENT262=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationTypeDeclaration8624); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT262);

			DebugLocation(650, 28);
			PushFollow(Follow._annotationBody_in_annotationTypeDeclaration8626);
			annotationBody263=annotationBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_annotationBody.Add(annotationBody263.Tree);


			{
			// AST REWRITE
			// elements: IDENT, annotationBody, AT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 651:9: -> ^( AT IDENT annotationBody )
			{
				DebugLocation(651, 12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:651:12: ^( AT IDENT annotationBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(651, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_AT.NextNode(), root_1);

				DebugLocation(651, 17);
				adaptor.AddChild(root_1, modifiers);
				DebugLocation(651, 30);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(651, 36);
				adaptor.AddChild(root_1, stream_annotationBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 68);
			LeaveRule("annotationTypeDeclaration", 68);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 68, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(652, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationBody();
	partial void LeaveRule_annotationBody();
	// $ANTLR start "annotationBody"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:654:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationBody()
	{
		EnterRule_annotationBody();
		EnterRule("annotationBody", 69);
		TraceIn("annotationBody", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY264 = default(IToken);
		IToken RCURLY266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY264_tree = default(CommonTree);
		CommonTree RCURLY266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
		try { DebugEnterRule(GrammarFileName, "annotationBody");
		DebugLocation(654, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:655:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:655:9: LCURLY ( annotationScopeDeclarations )* RCURLY
			{
			DebugLocation(655, 9);
			LCURLY264=(IToken)Match(input,LCURLY,Follow._LCURLY_in_annotationBody8669); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY264);

			DebugLocation(655, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:655:16: ( annotationScopeDeclarations )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==ABSTRACT||LA85_1==AT||LA85_1==BOOLEAN||LA85_1==BYTE||LA85_1==CHAR||LA85_1==CLASS||LA85_1==DOUBLE||LA85_1==ENUM||LA85_1==FINAL||LA85_1==FLOAT||LA85_1==GLOBAL||LA85_1==IDENT||LA85_1==INT||LA85_1==INTERFACE||LA85_1==LESS_THAN||LA85_1==LONG||LA85_1==NATIVE||LA85_1==OVERRIDE||LA85_1==PRIVATE||(LA85_1>=PROTECTED && LA85_1<=PUBLIC)||LA85_1==SHORT||LA85_1==STATIC||LA85_1==STRICTFP||(LA85_1>=SYNCHRONIZED && LA85_1<=TEST_METHOD)||LA85_1==TRANSIENT||(LA85_1>=VIRTUAL && LA85_1<=VOID)||LA85_1==VOLATILE||(LA85_1>=WITHOUT_SHARING && LA85_1<=WITH_SHARING)))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:655:16: annotationScopeDeclarations
					{
					DebugLocation(655, 16);
					PushFollow(Follow._annotationScopeDeclarations_in_annotationBody8671);
					annotationScopeDeclarations265=annotationScopeDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_annotationScopeDeclarations.Add(annotationScopeDeclarations265.Tree);

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(655, 45);
			RCURLY266=(IToken)Match(input,RCURLY,Follow._RCURLY_in_annotationBody8674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY266);



			{
			// AST REWRITE
			// elements: annotationScopeDeclarations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 656:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
			{
				DebugLocation(656, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:656:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(656, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY264, "CLASS_TOP_LEVEL_SCOPE"), root_1);

				DebugLocation(656, 76);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:656:76: ( annotationScopeDeclarations )*
				while ( stream_annotationScopeDeclarations.HasNext )
				{
					DebugLocation(656, 76);
					adaptor.AddChild(root_1, stream_annotationScopeDeclarations.NextTree());

				}
				stream_annotationScopeDeclarations.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationBody", 69);
			LeaveRule("annotationBody", 69);
			LeaveRule_annotationBody();
			if (state.backtracking > 0) { Memoize(input, 69, annotationBody_StartIndex); }

		}
		DebugLocation(657, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationBody"); }
		return retval;

	}
	// $ANTLR end "annotationBody"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:659:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 70);
		TraceIn("annotationScopeDeclarations", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationScopeDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT269 = default(IToken);
		IToken LPAREN270 = default(IToken);
		IToken RPAREN271 = default(IToken);
		IToken SEMI273 = default(IToken);
		IToken SEMI275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifierList267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT269_tree = default(CommonTree);
		CommonTree LPAREN270_tree = default(CommonTree);
		CommonTree RPAREN271_tree = default(CommonTree);
		CommonTree SEMI273_tree = default(CommonTree);
		CommonTree SEMI275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
		RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(659, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:660:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OVERRIDE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VIRTUAL:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITH_SHARING:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WITHOUT_SHARING:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case GLOBAL:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TEST_METHOD:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case IDENT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt88 = 1;
				}
				break;
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt88 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:660:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				{
				DebugLocation(660, 9);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations8716);
				modifierList267=modifierList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modifierList.Add(modifierList267.Tree);
				DebugLocation(660, 22);
				PushFollow(Follow._type_in_annotationScopeDeclarations8718);
				type268=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type268.Tree);
				DebugLocation(661, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==IDENT))
				{
					int LA87_2 = input.LA(2);

					if ((LA87_2==LPAREN))
					{
						alt87 = 1;
					}
					else if ((LA87_2==ASSIGN||LA87_2==COMMA||LA87_2==LBRACK||LA87_2==SEMI))
					{
						alt87 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 87, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
					{
					DebugLocation(661, 13);
					IDENT269=(IToken)Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations8732); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT269);

					DebugLocation(661, 19);
					LPAREN270=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationScopeDeclarations8734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN270);

					DebugLocation(661, 26);
					RPAREN271=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationScopeDeclarations8736); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN271);

					DebugLocation(661, 33);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:33: ( annotationDefaultValue )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					int LA86_1 = input.LA(1);

					if ((LA86_1==DEFAULT))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:33: annotationDefaultValue
						{
						DebugLocation(661, 33);
						PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations8738);
						annotationDefaultValue272=annotationDefaultValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_annotationDefaultValue.Add(annotationDefaultValue272.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(661, 57);
					SEMI273=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8741); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI273);



					{
					// AST REWRITE
					// elements: modifierList, IDENT, type, annotationDefaultValue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 662:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
					{
						DebugLocation(662, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:662:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(662, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

						DebugLocation(662, 42);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(662, 55);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(662, 60);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(662, 66);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:662:66: ( annotationDefaultValue )?
						if (stream_annotationDefaultValue.HasNext)
						{
							DebugLocation(662, 66);
							adaptor.AddChild(root_1, stream_annotationDefaultValue.NextTree());

						}
						stream_annotationDefaultValue.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:663:13: classFieldDeclaratorList SEMI
					{
					DebugLocation(663, 13);
					PushFollow(Follow._classFieldDeclaratorList_in_annotationScopeDeclarations8783);
					classFieldDeclaratorList274=classFieldDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList274.Tree);
					DebugLocation(663, 38);
					SEMI275=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationScopeDeclarations8785); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI275);



					{
					// AST REWRITE
					// elements: classFieldDeclaratorList, modifierList, type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 664:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
					{
						DebugLocation(664, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:664:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(664, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

						DebugLocation(664, 35);
						adaptor.AddChild(root_1, stream_modifierList.NextTree());
						DebugLocation(664, 48);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(664, 53);
						adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:666:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(666, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations8830);
				typeDeclaration276=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration276.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 70);
			LeaveRule("annotationScopeDeclarations", 70);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 70, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(667, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return retval;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:669:1: annotationDefaultValue : DEFAULT ^ annotationElementValue ;
	[GrammarRule("annotationDefaultValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 71);
		TraceIn("annotationDefaultValue", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationDefaultValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT277 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> annotationElementValue278 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT277_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(669, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:670:5: ( DEFAULT ^ annotationElementValue )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:670:9: DEFAULT ^ annotationElementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(670, 16);
			DEFAULT277=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue8853); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT277_tree = (CommonTree)adaptor.Create(DEFAULT277);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT277_tree, root_0);
			}
			DebugLocation(670, 18);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue8856);
			annotationElementValue278=annotationElementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationElementValue278.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationDefaultValue", 71);
			LeaveRule("annotationDefaultValue", 71);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 71, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(671, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return retval;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:675:1: blockStatement : ( localVariableDeclaration SEMI !| typeDeclaration | statement | brokenExpression -> ^( BROKEN_EXPRESSION brokenExpression ) );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 72);
		TraceIn("blockStatement", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> typeDeclaration281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> brokenExpression283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI280_tree = default(CommonTree);
		RewriteRuleSubtreeStream stream_brokenExpression=new RewriteRuleSubtreeStream(adaptor,"rule brokenExpression");
		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(675, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:676:5: ( localVariableDeclaration SEMI !| typeDeclaration | statement | brokenExpression -> ^( BROKEN_EXPRESSION brokenExpression ) )
			int alt89=4;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((EvaluatePredicate(synpred127_Java_fragment)))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((EvaluatePredicate(synpred127_Java_fragment)))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt89 = 1;
				}
				else if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case GLOBAL:
			case INTERFACE:
			case NATIVE:
			case OVERRIDE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TEST_METHOD:
			case TRANSIENT:
			case VIRTUAL:
			case VOLATILE:
			case WITHOUT_SHARING:
			case WITH_SHARING:
				{
				alt89 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Java_fragment)))
				{
					alt89 = 2;
				}
				else if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BREAK:
			case CONTINUE:
			case DO:
			case FOR:
			case IF:
			case LCURLY:
			case RETURN:
			case SEMI:
			case SWITCH:
			case THROW:
			case TRY:
			case WHILE:
				{
				alt89 = 3;
				}
				break;
			case PLUS:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 35, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 36, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INC:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 37, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEC:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 38, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NOT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 39, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOGICAL_NOT:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 40, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 41, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 42, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NEW:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 43, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LESS_THAN:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 44, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case THIS:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 45, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 46, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt89 = 3;
				}
				else if ((true))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 47, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:676:9: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(676, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement8877);
				localVariableDeclaration279=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration279.Tree);
				DebugLocation(676, 38);
				SEMI280=(IToken)Match(input,SEMI,Follow._SEMI_in_blockStatement8879); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:677:9: typeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(677, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement8890);
				typeDeclaration281=typeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration281.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:678:9: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(678, 9);
				PushFollow(Follow._statement_in_blockStatement8900);
				statement282=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement282.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:679:8: brokenExpression
				{
				DebugLocation(679, 8);
				PushFollow(Follow._brokenExpression_in_blockStatement8909);
				brokenExpression283=brokenExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_brokenExpression.Add(brokenExpression283.Tree);


				{
				// AST REWRITE
				// elements: brokenExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 679:25: -> ^( BROKEN_EXPRESSION brokenExpression )
				{
					DebugLocation(679, 28);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:679:28: ^( BROKEN_EXPRESSION brokenExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(679, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BROKEN_EXPRESSION, "BROKEN_EXPRESSION"), root_1);

					DebugLocation(679, 48);
					adaptor.AddChild(root_1, stream_brokenExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 72);
			LeaveRule("blockStatement", 72);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 72, blockStatement_StartIndex); }

		}
		DebugLocation(680, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_brokenExpression();
	partial void LeaveRule_brokenExpression();
	// $ANTLR start "brokenExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:681:1: brokenExpression : ( LPAREN )* expression ( DOT )? ( SEMI )? ;
	[GrammarRule("brokenExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> brokenExpression()
	{
		EnterRule_brokenExpression();
		EnterRule("brokenExpression", 73);
		TraceIn("brokenExpression", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int brokenExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN284 = default(IToken);
		IToken DOT286 = default(IToken);
		IToken SEMI287 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression285 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN284_tree = default(CommonTree);
		CommonTree DOT286_tree = default(CommonTree);
		CommonTree SEMI287_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "brokenExpression");
		DebugLocation(681, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:682:0: ( ( LPAREN )* expression ( DOT )? ( SEMI )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:0: ( LPAREN )* expression ( DOT )? ( SEMI )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(683, 0);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:0: ( LPAREN )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==LPAREN))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred129_Java_fragment)))
					{
						alt90 = 1;
					}


				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:0: LPAREN
					{
					DebugLocation(683, 1);
					LPAREN284=(IToken)Match(input,LPAREN,Follow._LPAREN_in_brokenExpression8929); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN284_tree = (CommonTree)adaptor.Create(LPAREN284);
					adaptor.AddChild(root_0, LPAREN284_tree);
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(683, 9);
			PushFollow(Follow._expression_in_brokenExpression8932);
			expression285=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression285.Tree);
			DebugLocation(683, 20);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:20: ( DOT )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_1 = input.LA(1);

			if ((LA91_1==DOT))
			{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred130_Java_fragment)))
				{
					alt91 = 1;
				}
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:20: DOT
				{
				DebugLocation(683, 20);
				DOT286=(IToken)Match(input,DOT,Follow._DOT_in_brokenExpression8934); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT286_tree = (CommonTree)adaptor.Create(DOT286);
				adaptor.AddChild(root_0, DOT286_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(91); }

			DebugLocation(683, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:25: ( SEMI )?
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_1 = input.LA(1);

			if ((LA92_1==SEMI))
			{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred131_Java_fragment)))
				{
					alt92 = 1;
				}
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:25: SEMI
				{
				DebugLocation(683, 25);
				SEMI287=(IToken)Match(input,SEMI,Follow._SEMI_in_brokenExpression8937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI287_tree = (CommonTree)adaptor.Create(SEMI287);
				adaptor.AddChild(root_0, SEMI287_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brokenExpression", 73);
			LeaveRule("brokenExpression", 73);
			LeaveRule_brokenExpression();
			if (state.backtracking > 0) { Memoize(input, 73, brokenExpression_StartIndex); }

		}
		DebugLocation(684, 0);
		} finally { DebugExitRule(GrammarFileName, "brokenExpression"); }
		return retval;

	}
	// $ANTLR end "brokenExpression"

	partial void EnterRule_dmlOperation();
	partial void LeaveRule_dmlOperation();
	// $ANTLR start "dmlOperation"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:685:1: dmlOperation : dmlOperator expression SEMI ;
	[GrammarRule("dmlOperation")]
	private AstParserRuleReturnScope<CommonTree, IToken> dmlOperation()
	{
		EnterRule_dmlOperation();
		EnterRule("dmlOperation", 74);
		TraceIn("dmlOperation", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int dmlOperation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SEMI290 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> dmlOperator288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI290_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dmlOperation");
		DebugLocation(685, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:686:4: ( dmlOperator expression SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:687:4: dmlOperator expression SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(687, 4);
			PushFollow(Follow._dmlOperator_in_dmlOperation8949);
			dmlOperator288=dmlOperator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, dmlOperator288.Tree);
			DebugLocation(687, 16);
			PushFollow(Follow._expression_in_dmlOperation8951);
			expression289=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression289.Tree);
			DebugLocation(687, 27);
			SEMI290=(IToken)Match(input,SEMI,Follow._SEMI_in_dmlOperation8953); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI290_tree = (CommonTree)adaptor.Create(SEMI290);
			adaptor.AddChild(root_0, SEMI290_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dmlOperation", 74);
			LeaveRule("dmlOperation", 74);
			LeaveRule_dmlOperation();
			if (state.backtracking > 0) { Memoize(input, 74, dmlOperation_StartIndex); }

		}
		DebugLocation(688, 0);
		} finally { DebugExitRule(GrammarFileName, "dmlOperation"); }
		return retval;

	}
	// $ANTLR end "dmlOperation"

	partial void EnterRule_dmlOperator();
	partial void LeaveRule_dmlOperator();
	// $ANTLR start "dmlOperator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:689:1: dmlOperator : ( ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) );
	[GrammarRule("dmlOperator")]
	private AstParserRuleReturnScope<CommonTree, IToken> dmlOperator()
	{
		EnterRule_dmlOperator();
		EnterRule("dmlOperator", 75);
		TraceIn("dmlOperator", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int dmlOperator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT291 = default(IToken);
		IToken IDENT292 = default(IToken);
		IToken IDENT293 = default(IToken);
		IToken IDENT294 = default(IToken);

		CommonTree IDENT291_tree = default(CommonTree);
		CommonTree IDENT292_tree = default(CommonTree);
		CommonTree IDENT293_tree = default(CommonTree);
		CommonTree IDENT294_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dmlOperator");
		DebugLocation(689, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:690:5: ( ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) | ({...}? IDENT ) )
			int alt93=4;
			try { DebugEnterDecision(93, false);
			int LA93_1 = input.LA(1);

			if ((LA93_1==IDENT))
			{
				int LA93_2 = input.LA(2);

				if ((((input.LT(1).Text == "insert")&&EvaluatePredicate(synpred132_Java_fragment))))
				{
					alt93 = 1;
				}
				else if ((((input.LT(1).Text == "update")&&EvaluatePredicate(synpred133_Java_fragment))))
				{
					alt93 = 2;
				}
				else if (((EvaluatePredicate(synpred134_Java_fragment)&&(input.LT(1).Text == "delete"))))
				{
					alt93 = 3;
				}
				else if (((input.LT(1).Text == "upsert")))
				{
					alt93 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(691, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:8: {...}? IDENT
				{
				DebugLocation(691, 8);
				if (!((input.LT(1).Text == "insert")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"insert\"");
				}
				DebugLocation(691, 40);
				IDENT291=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT291_tree = (CommonTree)adaptor.Create(IDENT291);
				adaptor.AddChild(root_0, IDENT291_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(692, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:8: {...}? IDENT
				{
				DebugLocation(692, 8);
				if (!((input.LT(1).Text == "update")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"update\"");
				}
				DebugLocation(692, 40);
				IDENT292=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT292_tree = (CommonTree)adaptor.Create(IDENT292);
				adaptor.AddChild(root_0, IDENT292_tree);
				}

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(693, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:8: {...}? IDENT
				{
				DebugLocation(693, 8);
				if (!((input.LT(1).Text == "delete")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"delete\"");
				}
				DebugLocation(693, 40);
				IDENT293=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator8998); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT293_tree = (CommonTree)adaptor.Create(IDENT293);
				adaptor.AddChild(root_0, IDENT293_tree);
				}

				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:694:5: ({...}? IDENT )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(694, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:694:5: ({...}? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:694:8: {...}? IDENT
				{
				DebugLocation(694, 8);
				if (!((input.LT(1).Text == "upsert")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "dmlOperator", "input.LT(1).Text == \"upsert\"");
				}
				DebugLocation(694, 40);
				IDENT294=(IToken)Match(input,IDENT,Follow._IDENT_in_dmlOperator9011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT294_tree = (CommonTree)adaptor.Create(IDENT294);
				adaptor.AddChild(root_0, IDENT294_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dmlOperator", 75);
			LeaveRule("dmlOperator", 75);
			LeaveRule_dmlOperator();
			if (state.backtracking > 0) { Memoize(input, 75, dmlOperator_StartIndex); }

		}
		DebugLocation(695, 0);
		} finally { DebugExitRule(GrammarFileName, "dmlOperator"); }
		return retval;

	}
	// $ANTLR end "dmlOperator"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:697:1: block : LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 76);
		TraceIn("block", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY295 = default(IToken);
		IToken RCURLY297 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY295_tree = default(CommonTree);
		CommonTree RCURLY297_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(697, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:698:5: ( LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:698:9: LCURLY ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ) RCURLY
			{
			DebugLocation(698, 9);
			LCURLY295=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block9032); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(LCURLY295);

			DebugLocation(699, 5);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:699:5: ( ( blockStatement )* -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:700:2: ( blockStatement )*
			{
			DebugLocation(700, 2);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:700:2: ( blockStatement )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==ABSTRACT||LA94_1==AT||(LA94_1>=BOOLEAN && LA94_1<=BREAK)||LA94_1==BYTE||(LA94_1>=CHAR && LA94_1<=CLASS)||(LA94_1>=CONTINUE && LA94_1<=DECIMAL_LITERAL)||LA94_1==DO||LA94_1==DOUBLE||LA94_1==ENUM||(LA94_1>=FALSE && LA94_1<=FINAL)||(LA94_1>=FLOAT && LA94_1<=FLOATING_POINT_LITERAL)||LA94_1==FOR||LA94_1==GLOBAL||(LA94_1>=HEX_LITERAL && LA94_1<=IF)||LA94_1==INC||LA94_1==INT||LA94_1==INTERFACE||LA94_1==LCURLY||LA94_1==LESS_THAN||LA94_1==LOGICAL_NOT||(LA94_1>=LONG && LA94_1<=LPAREN)||LA94_1==MINUS||(LA94_1>=NATIVE && LA94_1<=NOT)||LA94_1==NULL||LA94_1==OCTAL_LITERAL||LA94_1==OVERRIDE||LA94_1==PLUS||LA94_1==PRIVATE||(LA94_1>=PROTECTED && LA94_1<=PUBLIC)||LA94_1==RETURN||LA94_1==SEMI||(LA94_1>=SHORT && LA94_1<=SOQL_LITERAL)||LA94_1==STATIC||(LA94_1>=STRICTFP && LA94_1<=SUPER)||LA94_1==SWITCH||(LA94_1>=SYNCHRONIZED && LA94_1<=THIS)||LA94_1==THROW||(LA94_1>=TRANSIENT && LA94_1<=TRY)||(LA94_1>=VIRTUAL && LA94_1<=VOID)||(LA94_1>=VOLATILE && LA94_1<=WITH_SHARING)))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:700:2: blockStatement
					{
					DebugLocation(700, 2);
					PushFollow(Follow._blockStatement_in_block9042);
					blockStatement296=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_blockStatement.Add(blockStatement296.Tree);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }



			{
			// AST REWRITE
			// elements: blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 700:17: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
			{
				DebugLocation(700, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:700:21: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(700, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK_SCOPE, LCURLY295, "BLOCK_SCOPE"), root_1);

				DebugLocation(700, 59);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:700:59: ( blockStatement )*
				while ( stream_blockStatement.HasNext )
				{
					DebugLocation(700, 59);
					adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				}
				stream_blockStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(702, 6);
			RCURLY297=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block9066); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(RCURLY297);


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 76);
			LeaveRule("block", 76);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 76, block_StartIndex); }

		}
		DebugLocation(703, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:708:5: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 77);
		TraceIn("localVariableDeclaration", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localModifierList298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classFieldDeclaratorList300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(708, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:709:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:709:9: localModifierList type classFieldDeclaratorList
			{
			DebugLocation(709, 9);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration9096);
			localModifierList298=localModifierList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_localModifierList.Add(localModifierList298.Tree);
			DebugLocation(709, 27);
			PushFollow(Follow._type_in_localVariableDeclaration9098);
			type299=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type299.Tree);
			DebugLocation(709, 32);
			PushFollow(Follow._classFieldDeclaratorList_in_localVariableDeclaration9100);
			classFieldDeclaratorList300=classFieldDeclaratorList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classFieldDeclaratorList.Add(classFieldDeclaratorList300.Tree);


			{
			// AST REWRITE
			// elements: type, classFieldDeclaratorList, localModifierList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 710:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
			{
				DebugLocation(710, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:710:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(710, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(710, 31);
				adaptor.AddChild(root_1, stream_localModifierList.NextTree());
				DebugLocation(710, 49);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(710, 54);
				adaptor.AddChild(root_1, stream_classFieldDeclaratorList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 77);
			LeaveRule("localVariableDeclaration", 77);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 77, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(711, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:714:1: statement : ( block | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | dmlOperation | expression SEMI !|{...}? expression | SEMI );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 78);
		TraceIn("statement", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IF302 = default(IToken);
		IToken ELSE304 = default(IToken);
		IToken FOR305 = default(IToken);
		IToken LPAREN306 = default(IToken);
		IToken SEMI308 = default(IToken);
		IToken SEMI310 = default(IToken);
		IToken RPAREN312 = default(IToken);
		IToken IDENT316 = default(IToken);
		IToken COLON317 = default(IToken);
		IToken RPAREN319 = default(IToken);
		IToken WHILE321 = default(IToken);
		IToken DO324 = default(IToken);
		IToken WHILE326 = default(IToken);
		IToken SEMI328 = default(IToken);
		IToken TRY329 = default(IToken);
		IToken SWITCH334 = default(IToken);
		IToken LCURLY336 = default(IToken);
		IToken RCURLY338 = default(IToken);
		IToken SYNCHRONIZED339 = default(IToken);
		IToken RETURN342 = default(IToken);
		IToken SEMI344 = default(IToken);
		IToken THROW345 = default(IToken);
		IToken SEMI347 = default(IToken);
		IToken BREAK348 = default(IToken);
		IToken IDENT349 = default(IToken);
		IToken SEMI350 = default(IToken);
		IToken CONTINUE351 = default(IToken);
		IToken IDENT352 = default(IToken);
		IToken SEMI353 = default(IToken);
		IToken IDENT354 = default(IToken);
		IToken COLON355 = default(IToken);
		IToken SEMI359 = default(IToken);
		IToken SEMI361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ifStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forInit307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forCondition309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forUpdater311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localModifierList314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> catches331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> finallyClause333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression343 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> dmlOperation357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IF302_tree = default(CommonTree);
		CommonTree ELSE304_tree = default(CommonTree);
		CommonTree FOR305_tree = default(CommonTree);
		CommonTree LPAREN306_tree = default(CommonTree);
		CommonTree SEMI308_tree = default(CommonTree);
		CommonTree SEMI310_tree = default(CommonTree);
		CommonTree RPAREN312_tree = default(CommonTree);
		CommonTree IDENT316_tree = default(CommonTree);
		CommonTree COLON317_tree = default(CommonTree);
		CommonTree RPAREN319_tree = default(CommonTree);
		CommonTree WHILE321_tree = default(CommonTree);
		CommonTree DO324_tree = default(CommonTree);
		CommonTree WHILE326_tree = default(CommonTree);
		CommonTree SEMI328_tree = default(CommonTree);
		CommonTree TRY329_tree = default(CommonTree);
		CommonTree SWITCH334_tree = default(CommonTree);
		CommonTree LCURLY336_tree = default(CommonTree);
		CommonTree RCURLY338_tree = default(CommonTree);
		CommonTree SYNCHRONIZED339_tree = default(CommonTree);
		CommonTree RETURN342_tree = default(CommonTree);
		CommonTree SEMI344_tree = default(CommonTree);
		CommonTree THROW345_tree = default(CommonTree);
		CommonTree SEMI347_tree = default(CommonTree);
		CommonTree BREAK348_tree = default(CommonTree);
		CommonTree IDENT349_tree = default(CommonTree);
		CommonTree SEMI350_tree = default(CommonTree);
		CommonTree CONTINUE351_tree = default(CommonTree);
		CommonTree IDENT352_tree = default(CommonTree);
		CommonTree SEMI353_tree = default(CommonTree);
		CommonTree IDENT354_tree = default(CommonTree);
		CommonTree COLON355_tree = default(CommonTree);
		CommonTree SEMI359_tree = default(CommonTree);
		CommonTree SEMI361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SYNCHRONIZED=new RewriteRuleITokenStream(adaptor,"token SYNCHRONIZED");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_CONTINUE=new RewriteRuleITokenStream(adaptor,"token CONTINUE");
		RewriteRuleITokenStream stream_SWITCH=new RewriteRuleITokenStream(adaptor,"token SWITCH");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_RETURN=new RewriteRuleITokenStream(adaptor,"token RETURN");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_BREAK=new RewriteRuleITokenStream(adaptor,"token BREAK");
		RewriteRuleITokenStream stream_THROW=new RewriteRuleITokenStream(adaptor,"token THROW");
		RewriteRuleITokenStream stream_TRY=new RewriteRuleITokenStream(adaptor,"token TRY");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
		RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
		RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
		RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
		RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(714, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:715:5: ( block | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | dmlOperation | expression SEMI !|{...}? expression | SEMI )
			int alt102=17;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				alt102 = 1;
				}
				break;
			case IF:
				{
				alt102 = 2;
				}
				break;
			case FOR:
				{
				alt102 = 3;
				}
				break;
			case WHILE:
				{
				alt102 = 4;
				}
				break;
			case DO:
				{
				alt102 = 5;
				}
				break;
			case TRY:
				{
				alt102 = 6;
				}
				break;
			case SWITCH:
				{
				alt102 = 7;
				}
				break;
			case SYNCHRONIZED:
				{
				alt102 = 8;
				}
				break;
			case RETURN:
				{
				alt102 = 9;
				}
				break;
			case THROW:
				{
				alt102 = 10;
				}
				break;
			case BREAK:
				{
				alt102 = 11;
				}
				break;
			case CONTINUE:
				{
				alt102 = 12;
				}
				break;
			case IDENT:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred155_Java_fragment)))
				{
					alt102 = 13;
				}
				else if (((((input.LT(1).Text == "insert")||(input.LT(1).Text == "update")||(input.LT(1).Text == "upsert")||(input.LT(1).Text == "delete"))&&EvaluatePredicate(synpred156_Java_fragment))))
				{
					alt102 = 14;
				}
				else if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PLUS:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INC:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEC:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NOT:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LOGICAL_NOT:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NEW:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LESS_THAN:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case THIS:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt102 = 15;
				}
				else if ((((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")&&EvaluatePredicate(synpred158_Java_fragment))))
				{
					alt102 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SEMI:
				{
				alt102 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:715:9: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(715, 9);
				PushFollow(Follow._block_in_statement9153);
				block301=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block301.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:716:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				{
				DebugLocation(716, 9);
				IF302=(IToken)Match(input,IF,Follow._IF_in_statement9163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF302);

				DebugLocation(716, 12);
				PushFollow(Follow._parenthesizedExpression_in_statement9165);
				parenthesizedExpression303=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression303.Tree);
				DebugLocation(716, 42);
				PushFollow(Follow._statement_in_statement9169);
				ifStat=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(ifStat.Tree);
				DebugLocation(717, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:717:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==ELSE))
				{
					int LA95_2 = input.LA(2);

					if ((EvaluatePredicate(synpred137_Java_fragment)))
					{
						alt95 = 1;
					}
					else if ((true))
					{
						alt95 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 95, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA95_1==EOF||LA95_1==ABSTRACT||LA95_1==AT||(LA95_1>=BOOLEAN && LA95_1<=BREAK)||(LA95_1>=BYTE && LA95_1<=CASE)||(LA95_1>=CHAR && LA95_1<=CLASS)||(LA95_1>=CONTINUE && LA95_1<=DEFAULT)||LA95_1==DO||LA95_1==DOUBLE||LA95_1==ENUM||(LA95_1>=FALSE && LA95_1<=FINAL)||(LA95_1>=FLOAT && LA95_1<=FLOATING_POINT_LITERAL)||LA95_1==FOR||LA95_1==GLOBAL||(LA95_1>=HEX_LITERAL && LA95_1<=IF)||LA95_1==INC||LA95_1==INT||LA95_1==INTERFACE||LA95_1==LCURLY||LA95_1==LESS_THAN||LA95_1==LOGICAL_NOT||(LA95_1>=LONG && LA95_1<=LPAREN)||LA95_1==MINUS||(LA95_1>=NATIVE && LA95_1<=NOT)||LA95_1==NULL||LA95_1==OCTAL_LITERAL||LA95_1==OVERRIDE||LA95_1==PLUS||LA95_1==PRIVATE||(LA95_1>=PROTECTED && LA95_1<=PUBLIC)||(LA95_1>=RCURLY && LA95_1<=RETURN)||LA95_1==SEMI||(LA95_1>=SHORT && LA95_1<=SOQL_LITERAL)||LA95_1==STATIC||(LA95_1>=STRICTFP && LA95_1<=SUPER)||LA95_1==SWITCH||(LA95_1>=SYNCHRONIZED && LA95_1<=THIS)||LA95_1==THROW||(LA95_1>=TRANSIENT && LA95_1<=TRY)||(LA95_1>=VIRTUAL && LA95_1<=VOID)||(LA95_1>=VOLATILE && LA95_1<=WITH_SHARING)))
				{
					alt95 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:717:13: ELSE elseStat= statement
					{
					DebugLocation(717, 13);
					ELSE304=(IToken)Match(input,ELSE,Follow._ELSE_in_statement9184); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE304);

					DebugLocation(717, 26);
					PushFollow(Follow._statement_in_statement9188);
					elseStat=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(elseStat.Tree);


					{
					// AST REWRITE
					// elements: ifStat, parenthesizedExpression, elseStat, IF
					// token labels: 
					// rule labels: retval, ifStat, elseStat
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);
					RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 717:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
					{
						DebugLocation(717, 81);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:717:81: ^( IF parenthesizedExpression $ifStat $elseStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(717, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(717, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(717, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());
						DebugLocation(717, 119);
						adaptor.AddChild(root_1, stream_elseStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:718:77: 
					{

					{
					// AST REWRITE
					// elements: IF, parenthesizedExpression, ifStat
					// token labels: 
					// rule labels: retval, ifStat
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 718:77: -> ^( IF parenthesizedExpression $ifStat)
					{
						DebugLocation(718, 81);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:718:81: ^( IF parenthesizedExpression $ifStat)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(718, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(718, 86);
						adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
						DebugLocation(718, 111);
						adaptor.AddChild(root_1, stream_ifStat.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:720:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				{
				DebugLocation(720, 9);
				FOR305=(IToken)Match(input,FOR,Follow._FOR_in_statement9354); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FOR.Add(FOR305);

				DebugLocation(720, 13);
				LPAREN306=(IToken)Match(input,LPAREN,Follow._LPAREN_in_statement9356); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN306);

				DebugLocation(721, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:721:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				switch (input.LA(1))
				{
				case FINAL:
					{
					int LA96_2 = input.LA(2);

					if ((EvaluatePredicate(synpred139_Java_fragment)))
					{
						alt96 = 1;
					}
					else if ((true))
					{
						alt96 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 96, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case AT:
					{
					int LA96_2 = input.LA(2);

					if ((EvaluatePredicate(synpred139_Java_fragment)))
					{
						alt96 = 1;
					}
					else if ((true))
					{
						alt96 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 96, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA96_2 = input.LA(2);

					if ((EvaluatePredicate(synpred139_Java_fragment)))
					{
						alt96 = 1;
					}
					else if ((true))
					{
						alt96 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 96, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA96_2 = input.LA(2);

					if ((EvaluatePredicate(synpred139_Java_fragment)))
					{
						alt96 = 1;
					}
					else if ((true))
					{
						alt96 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 96, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DEC:
				case DECIMAL_LITERAL:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case INC:
				case LESS_THAN:
				case LOGICAL_NOT:
				case LPAREN:
				case MINUS:
				case NEW:
				case NOT:
				case NULL:
				case OCTAL_LITERAL:
				case PLUS:
				case SEMI:
				case SOQL_LITERAL:
				case STRING_LITERAL:
				case SUPER:
				case THIS:
				case TRUE:
				case VOID:
					{
					alt96 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:721:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
					{
					DebugLocation(721, 13);
					PushFollow(Follow._forInit_in_statement9371);
					forInit307=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forInit.Add(forInit307.Tree);
					DebugLocation(721, 21);
					SEMI308=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9373); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI308);

					DebugLocation(721, 26);
					PushFollow(Follow._forCondition_in_statement9375);
					forCondition309=forCondition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forCondition.Add(forCondition309.Tree);
					DebugLocation(721, 39);
					SEMI310=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9377); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI310);

					DebugLocation(721, 44);
					PushFollow(Follow._forUpdater_in_statement9379);
					forUpdater311=forUpdater();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_forUpdater.Add(forUpdater311.Tree);
					DebugLocation(721, 55);
					RPAREN312=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9381); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN312);

					DebugLocation(721, 62);
					PushFollow(Follow._statement_in_statement9383);
					statement313=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement313.Tree);


					{
					// AST REWRITE
					// elements: statement, FOR, forUpdater, forCondition, forInit
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 721:77: -> ^( FOR forInit forCondition forUpdater statement )
					{
						DebugLocation(721, 81);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:721:81: ^( FOR forInit forCondition forUpdater statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(721, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_FOR.NextNode(), root_1);

						DebugLocation(721, 87);
						adaptor.AddChild(root_1, stream_forInit.NextTree());
						DebugLocation(721, 95);
						adaptor.AddChild(root_1, stream_forCondition.NextTree());
						DebugLocation(721, 108);
						adaptor.AddChild(root_1, stream_forUpdater.NextTree());
						DebugLocation(721, 119);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:722:13: localModifierList type IDENT COLON expression RPAREN statement
					{
					DebugLocation(722, 13);
					PushFollow(Follow._localModifierList_in_statement9418);
					localModifierList314=localModifierList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_localModifierList.Add(localModifierList314.Tree);
					DebugLocation(722, 31);
					PushFollow(Follow._type_in_statement9420);
					type315=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type315.Tree);
					DebugLocation(722, 36);
					IDENT316=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9422); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT316);

					DebugLocation(722, 42);
					COLON317=(IToken)Match(input,COLON,Follow._COLON_in_statement9424); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(COLON317);

					DebugLocation(722, 48);
					PushFollow(Follow._expression_in_statement9426);
					expression318=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression318.Tree);
					DebugLocation(722, 59);
					RPAREN319=(IToken)Match(input,RPAREN,Follow._RPAREN_in_statement9428); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN319);

					DebugLocation(722, 66);
					PushFollow(Follow._statement_in_statement9430);
					statement320=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement320.Tree);


					{
					// AST REWRITE
					// elements: expression, type, localModifierList, IDENT, statement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 722:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
					{
						DebugLocation(722, 81);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:722:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(722, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_EACH, FOR305, "FOR_EACH"), root_1);

						DebugLocation(722, 110);
						adaptor.AddChild(root_1, stream_localModifierList.NextTree());
						DebugLocation(722, 128);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(722, 133);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(722, 139);
						adaptor.AddChild(root_1, stream_expression.NextTree());
						DebugLocation(722, 150);
						adaptor.AddChild(root_1, stream_statement.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:724:9: WHILE parenthesizedExpression statement
				{
				DebugLocation(724, 9);
				WHILE321=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9470); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE321);

				DebugLocation(724, 15);
				PushFollow(Follow._parenthesizedExpression_in_statement9472);
				parenthesizedExpression322=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression322.Tree);
				DebugLocation(724, 39);
				PushFollow(Follow._statement_in_statement9474);
				statement323=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement323.Tree);


				{
				// AST REWRITE
				// elements: WHILE, statement, parenthesizedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 724:77: -> ^( WHILE parenthesizedExpression statement )
				{
					DebugLocation(724, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:724:81: ^( WHILE parenthesizedExpression statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(724, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

					DebugLocation(724, 89);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(724, 113);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:725:9: DO statement WHILE parenthesizedExpression SEMI
				{
				DebugLocation(725, 9);
				DO324=(IToken)Match(input,DO,Follow._DO_in_statement9523); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DO.Add(DO324);

				DebugLocation(725, 12);
				PushFollow(Follow._statement_in_statement9525);
				statement325=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement325.Tree);
				DebugLocation(725, 22);
				WHILE326=(IToken)Match(input,WHILE,Follow._WHILE_in_statement9527); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHILE.Add(WHILE326);

				DebugLocation(725, 28);
				PushFollow(Follow._parenthesizedExpression_in_statement9529);
				parenthesizedExpression327=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression327.Tree);
				DebugLocation(725, 52);
				SEMI328=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9531); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI328);



				{
				// AST REWRITE
				// elements: DO, parenthesizedExpression, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 725:77: -> ^( DO statement parenthesizedExpression )
				{
					DebugLocation(725, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:725:81: ^( DO statement parenthesizedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(725, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DO.NextNode(), root_1);

					DebugLocation(725, 86);
					adaptor.AddChild(root_1, stream_statement.NextTree());
					DebugLocation(725, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:9: TRY block ( catches ( finallyClause )? | finallyClause )
				{
				DebugLocation(726, 9);
				TRY329=(IToken)Match(input,TRY,Follow._TRY_in_statement9572); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRY.Add(TRY329);

				DebugLocation(726, 13);
				PushFollow(Follow._block_in_statement9574);
				block330=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block330.Tree);
				DebugLocation(726, 19);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:19: ( catches ( finallyClause )? | finallyClause )
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==CATCH))
				{
					alt98 = 1;
				}
				else if ((LA98_1==FINALLY))
				{
					alt98 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:20: catches ( finallyClause )?
					{
					DebugLocation(726, 20);
					PushFollow(Follow._catches_in_statement9577);
					catches331=catches();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catches.Add(catches331.Tree);
					DebugLocation(726, 28);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:28: ( finallyClause )?
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_1 = input.LA(1);

					if ((LA97_1==FINALLY))
					{
						alt97 = 1;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:28: finallyClause
						{
						DebugLocation(726, 28);
						PushFollow(Follow._finallyClause_in_statement9579);
						finallyClause332=finallyClause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_finallyClause.Add(finallyClause332.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(97); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:45: finallyClause
					{
					DebugLocation(726, 45);
					PushFollow(Follow._finallyClause_in_statement9584);
					finallyClause333=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_finallyClause.Add(finallyClause333.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(98); }



				{
				// AST REWRITE
				// elements: TRY, finallyClause, catches, block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 726:77: -> ^( TRY block ( catches )? ( finallyClause )? )
				{
					DebugLocation(726, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:81: ^( TRY block ( catches )? ( finallyClause )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(726, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRY.NextNode(), root_1);

					DebugLocation(726, 87);
					adaptor.AddChild(root_1, stream_block.NextTree());
					DebugLocation(726, 93);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:93: ( catches )?
					if (stream_catches.HasNext)
					{
						DebugLocation(726, 93);
						adaptor.AddChild(root_1, stream_catches.NextTree());

					}
					stream_catches.Reset();
					DebugLocation(726, 102);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:726:102: ( finallyClause )?
					if (stream_finallyClause.HasNext)
					{
						DebugLocation(726, 102);
						adaptor.AddChild(root_1, stream_finallyClause.NextTree());

					}
					stream_finallyClause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:727:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
				{
				DebugLocation(727, 9);
				SWITCH334=(IToken)Match(input,SWITCH,Follow._SWITCH_in_statement9627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SWITCH.Add(SWITCH334);

				DebugLocation(727, 16);
				PushFollow(Follow._parenthesizedExpression_in_statement9629);
				parenthesizedExpression335=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression335.Tree);
				DebugLocation(727, 40);
				LCURLY336=(IToken)Match(input,LCURLY,Follow._LCURLY_in_statement9631); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LCURLY.Add(LCURLY336);

				DebugLocation(727, 47);
				PushFollow(Follow._switchBlockLabels_in_statement9633);
				switchBlockLabels337=switchBlockLabels();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchBlockLabels.Add(switchBlockLabels337.Tree);
				DebugLocation(727, 65);
				RCURLY338=(IToken)Match(input,RCURLY,Follow._RCURLY_in_statement9635); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RCURLY.Add(RCURLY338);



				{
				// AST REWRITE
				// elements: switchBlockLabels, parenthesizedExpression, SWITCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 727:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
					DebugLocation(727, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:727:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(727, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SWITCH.NextNode(), root_1);

					DebugLocation(727, 90);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(727, 114);
					adaptor.AddChild(root_1, stream_switchBlockLabels.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:728:9: SYNCHRONIZED parenthesizedExpression block
				{
				DebugLocation(728, 9);
				SYNCHRONIZED339=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement9661); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYNCHRONIZED.Add(SYNCHRONIZED339);

				DebugLocation(728, 22);
				PushFollow(Follow._parenthesizedExpression_in_statement9663);
				parenthesizedExpression340=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenthesizedExpression.Add(parenthesizedExpression340.Tree);
				DebugLocation(728, 46);
				PushFollow(Follow._block_in_statement9665);
				block341=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_block.Add(block341.Tree);


				{
				// AST REWRITE
				// elements: SYNCHRONIZED, block, parenthesizedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 728:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
				{
					DebugLocation(728, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:728:81: ^( SYNCHRONIZED parenthesizedExpression block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(728, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SYNCHRONIZED.NextNode(), root_1);

					DebugLocation(728, 96);
					adaptor.AddChild(root_1, stream_parenthesizedExpression.NextTree());
					DebugLocation(728, 120);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:729:9: RETURN ( expression )? SEMI
				{
				DebugLocation(729, 9);
				RETURN342=(IToken)Match(input,RETURN,Follow._RETURN_in_statement9711); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RETURN.Add(RETURN342);

				DebugLocation(729, 16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:729:16: ( expression )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==BOOLEAN||LA99_1==BYTE||(LA99_1>=CHAR && LA99_1<=CHARACTER_LITERAL)||(LA99_1>=DEC && LA99_1<=DECIMAL_LITERAL)||LA99_1==DOUBLE||LA99_1==FALSE||(LA99_1>=FLOAT && LA99_1<=FLOATING_POINT_LITERAL)||(LA99_1>=HEX_LITERAL && LA99_1<=IDENT)||LA99_1==INC||LA99_1==INT||LA99_1==LESS_THAN||LA99_1==LOGICAL_NOT||(LA99_1>=LONG && LA99_1<=LPAREN)||LA99_1==MINUS||(LA99_1>=NEW && LA99_1<=NOT)||LA99_1==NULL||LA99_1==OCTAL_LITERAL||LA99_1==PLUS||(LA99_1>=SHORT && LA99_1<=SOQL_LITERAL)||(LA99_1>=STRING_LITERAL && LA99_1<=SUPER)||LA99_1==THIS||LA99_1==TRUE||LA99_1==VOID))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:729:16: expression
					{
					DebugLocation(729, 16);
					PushFollow(Follow._expression_in_statement9713);
					expression343=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression343.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(729, 28);
				SEMI344=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9716); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI344);



				{
				// AST REWRITE
				// elements: RETURN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 729:77: -> ^( RETURN ( expression )? )
				{
					DebugLocation(729, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:729:81: ^( RETURN ( expression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(729, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_RETURN.NextNode(), root_1);

					DebugLocation(729, 90);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:729:90: ( expression )?
					if (stream_expression.HasNext)
					{
						DebugLocation(729, 90);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:730:9: THROW expression SEMI
				{
				DebugLocation(730, 9);
				THROW345=(IToken)Match(input,THROW,Follow._THROW_in_statement9780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THROW.Add(THROW345);

				DebugLocation(730, 15);
				PushFollow(Follow._expression_in_statement9782);
				expression346=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression346.Tree);
				DebugLocation(730, 26);
				SEMI347=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9784); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI347);



				{
				// AST REWRITE
				// elements: THROW, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 730:77: -> ^( THROW expression )
				{
					DebugLocation(730, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:730:81: ^( THROW expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(730, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THROW.NextNode(), root_1);

					DebugLocation(730, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:731:9: BREAK ( IDENT )? SEMI
				{
				DebugLocation(731, 9);
				BREAK348=(IToken)Match(input,BREAK,Follow._BREAK_in_statement9849); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BREAK.Add(BREAK348);

				DebugLocation(731, 15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:731:15: ( IDENT )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				int LA100_1 = input.LA(1);

				if ((LA100_1==IDENT))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:731:15: IDENT
					{
					DebugLocation(731, 15);
					IDENT349=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9851); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT349);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(731, 22);
				SEMI350=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI350);



				{
				// AST REWRITE
				// elements: IDENT, BREAK
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 731:77: -> ^( BREAK ( IDENT )? )
				{
					DebugLocation(731, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:731:81: ^( BREAK ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(731, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_BREAK.NextNode(), root_1);

					DebugLocation(731, 89);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:731:89: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(731, 89);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:732:9: CONTINUE ( IDENT )? SEMI
				{
				DebugLocation(732, 9);
				CONTINUE351=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement9924); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTINUE.Add(CONTINUE351);

				DebugLocation(732, 18);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:732:18: ( IDENT )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==IDENT))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:732:18: IDENT
					{
					DebugLocation(732, 18);
					IDENT352=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9926); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT352);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(732, 25);
				SEMI353=(IToken)Match(input,SEMI,Follow._SEMI_in_statement9929); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMI.Add(SEMI353);



				{
				// AST REWRITE
				// elements: IDENT, CONTINUE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 732:77: -> ^( CONTINUE ( IDENT )? )
				{
					DebugLocation(732, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:732:81: ^( CONTINUE ( IDENT )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(732, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_CONTINUE.NextNode(), root_1);

					DebugLocation(732, 92);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:732:92: ( IDENT )?
					if (stream_IDENT.HasNext)
					{
						DebugLocation(732, 92);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:733:9: IDENT COLON statement
				{
				DebugLocation(733, 9);
				IDENT354=(IToken)Match(input,IDENT,Follow._IDENT_in_statement9996); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT354);

				DebugLocation(733, 15);
				COLON355=(IToken)Match(input,COLON,Follow._COLON_in_statement9998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON355);

				DebugLocation(733, 21);
				PushFollow(Follow._statement_in_statement10000);
				statement356=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement356.Tree);


				{
				// AST REWRITE
				// elements: statement, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 733:77: -> ^( LABELED_STATEMENT IDENT statement )
				{
					DebugLocation(733, 81);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:733:81: ^( LABELED_STATEMENT IDENT statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(733, 83);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

					DebugLocation(733, 101);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(733, 107);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:734:9: dmlOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(734, 9);
				PushFollow(Follow._dmlOperation_in_statement10067);
				dmlOperation357=dmlOperation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dmlOperation357.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:735:9: expression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(735, 9);
				PushFollow(Follow._expression_in_statement10077);
				expression358=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression358.Tree);
				DebugLocation(735, 24);
				SEMI359=(IToken)Match(input,SEMI,Follow._SEMI_in_statement10079); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:736:8: {...}? expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(736, 8);
				if (!((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "input.LT(1).Text == \"system\" && input.LT(2).Text == \".\" && input.LT(3).Text == \"runas\"");
				}
				DebugLocation(736, 99);
				PushFollow(Follow._expression_in_statement10092);
				expression360=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression360.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:737:9: SEMI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(737, 9);
				SEMI361=(IToken)Match(input,SEMI,Follow._SEMI_in_statement10102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI361_tree = (CommonTree)adaptor.Create(SEMI361);
				adaptor.AddChild(root_0, SEMI361_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 78);
			LeaveRule("statement", 78);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 78, statement_StartIndex); }

		}
		DebugLocation(738, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:740:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<CommonTree, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 79);
		TraceIn("catches", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> catchClause362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(740, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:741:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:741:9: ( catchClause )+
			{
			DebugLocation(741, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:741:9: ( catchClause )+
			int cnt103=0;
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==CATCH))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:741:9: catchClause
					{
					DebugLocation(741, 9);
					PushFollow(Follow._catchClause_in_catches10141);
					catchClause362=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_catchClause.Add(catchClause362.Tree);

					}
					break;

				default:
					if (cnt103 >= 1)
						goto loop103;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee103 = new EarlyExitException( 103, input );
					DebugRecognitionException(eee103);
					throw eee103;
				}
				cnt103++;
			}
			loop103:
				;

			} finally { DebugExitSubRule(103); }



			{
			// AST REWRITE
			// elements: catchClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 742:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
				DebugLocation(742, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:742:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(742, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

				DebugLocation(742, 33);
				if (!(stream_catchClause.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_catchClause.HasNext )
				{
					DebugLocation(742, 33);
					adaptor.AddChild(root_1, stream_catchClause.NextTree());

				}
				stream_catchClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 79);
			LeaveRule("catches", 79);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 79, catches_StartIndex); }

		}
		DebugLocation(743, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:745:1: catchClause : CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 80);
		TraceIn("catchClause", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CATCH363 = default(IToken);
		IToken LPAREN364 = default(IToken);
		IToken RPAREN366 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> formalParameterStandardDecl365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CATCH363_tree = default(CommonTree);
		CommonTree LPAREN364_tree = default(CommonTree);
		CommonTree RPAREN366_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(745, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:746:5: ( CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:746:9: CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(746, 14);
			CATCH363=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause10183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CATCH363_tree = (CommonTree)adaptor.Create(CATCH363);
			root_0 = (CommonTree)adaptor.BecomeRoot(CATCH363_tree, root_0);
			}
			DebugLocation(746, 22);
			LPAREN364=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause10186); if (state.failed) return retval;
			DebugLocation(746, 24);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause10189);
			formalParameterStandardDecl365=formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterStandardDecl365.Tree);
			DebugLocation(746, 58);
			RPAREN366=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause10191); if (state.failed) return retval;
			DebugLocation(746, 60);
			PushFollow(Follow._block_in_catchClause10194);
			block367=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block367.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 80);
			LeaveRule("catchClause", 80);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 80, catchClause_StartIndex); }

		}
		DebugLocation(747, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:749:1: finallyClause : FINALLY block -> block ;
	[GrammarRule("finallyClause")]
	private AstParserRuleReturnScope<CommonTree, IToken> finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 81);
		TraceIn("finallyClause", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken FINALLY368 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block369 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FINALLY368_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FINALLY=new RewriteRuleITokenStream(adaptor,"token FINALLY");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(749, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:750:5: ( FINALLY block -> block )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:750:9: FINALLY block
			{
			DebugLocation(750, 9);
			FINALLY368=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause10213); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FINALLY.Add(FINALLY368);

			DebugLocation(750, 17);
			PushFollow(Follow._block_in_finallyClause10215);
			block369=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block369.Tree);


			{
			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 751:9: -> block
			{
				DebugLocation(751, 13);
				adaptor.AddChild(root_0, stream_block.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 81);
			LeaveRule("finallyClause", 81);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 81, finallyClause_StartIndex); }

		}
		DebugLocation(752, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:754:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
	[GrammarRule("switchBlockLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 82);
		TraceIn("switchBlockLabels", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels370 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel371 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels372 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
		RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(754, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:755:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:755:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
			{
			DebugLocation(755, 9);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10247);
			switchCaseLabels370=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels370.Tree);
			DebugLocation(755, 26);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:755:26: ( switchDefaultLabel )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_1 = input.LA(1);

			if ((LA104_1==DEFAULT))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:755:26: switchDefaultLabel
				{
				DebugLocation(755, 26);
				PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels10249);
				switchDefaultLabel371=switchDefaultLabel();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_switchDefaultLabel.Add(switchDefaultLabel371.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }

			DebugLocation(755, 46);
			PushFollow(Follow._switchCaseLabels_in_switchBlockLabels10252);
			switchCaseLabels372=switchCaseLabels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_switchCaseLabels.Add(switchCaseLabels372.Tree);


			{
			// AST REWRITE
			// elements: switchCaseLabels, switchCaseLabels, switchDefaultLabel
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 756:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
			{
				DebugLocation(756, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:756:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(756, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

				DebugLocation(756, 39);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());
				DebugLocation(756, 56);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:756:56: ( switchDefaultLabel )?
				if (stream_switchDefaultLabel.HasNext)
				{
					DebugLocation(756, 56);
					adaptor.AddChild(root_1, stream_switchDefaultLabel.NextTree());

				}
				stream_switchDefaultLabel.Reset();
				DebugLocation(756, 76);
				adaptor.AddChild(root_1, stream_switchCaseLabels.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockLabels", 82);
			LeaveRule("switchBlockLabels", 82);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 82, switchBlockLabels_StartIndex); }

		}
		DebugLocation(757, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return retval;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabels();
	partial void LeaveRule_switchCaseLabels();
	// $ANTLR start "switchCaseLabels"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:759:1: switchCaseLabels : ( switchCaseLabel )* ;
	[GrammarRule("switchCaseLabels")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabels()
	{
		EnterRule_switchCaseLabels();
		EnterRule("switchCaseLabels", 83);
		TraceIn("switchCaseLabels", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabels_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel373 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseLabels");
		DebugLocation(759, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:5: ( ( switchCaseLabel )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:9: ( switchCaseLabel )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(760, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:9: ( switchCaseLabel )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==CASE))
				{
					int LA105_2 = input.LA(2);

					if ((EvaluatePredicate(synpred161_Java_fragment)))
					{
						alt105 = 1;
					}


				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:9: switchCaseLabel
					{
					DebugLocation(760, 9);
					PushFollow(Follow._switchCaseLabel_in_switchCaseLabels10297);
					switchCaseLabel373=switchCaseLabel();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchCaseLabel373.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabels", 83);
			LeaveRule("switchCaseLabels", 83);
			LeaveRule_switchCaseLabels();
			if (state.backtracking > 0) { Memoize(input, 83, switchCaseLabels_StartIndex); }

		}
		DebugLocation(761, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabels"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:763:1: switchCaseLabel : CASE ^ expression COLON ! ( blockStatement )* ;
	[GrammarRule("switchCaseLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 84);
		TraceIn("switchCaseLabel", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchCaseLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken CASE374 = default(IToken);
		IToken COLON376 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CASE374_tree = default(CommonTree);
		CommonTree COLON376_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(763, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:764:5: ( CASE ^ expression COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:764:9: CASE ^ expression COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(764, 13);
			CASE374=(IToken)Match(input,CASE,Follow._CASE_in_switchCaseLabel10325); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CASE374_tree = (CommonTree)adaptor.Create(CASE374);
			root_0 = (CommonTree)adaptor.BecomeRoot(CASE374_tree, root_0);
			}
			DebugLocation(764, 15);
			PushFollow(Follow._expression_in_switchCaseLabel10328);
			expression375=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression375.Tree);
			DebugLocation(764, 31);
			COLON376=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseLabel10330); if (state.failed) return retval;
			DebugLocation(764, 33);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:764:33: ( blockStatement )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==ABSTRACT||LA106_1==AT||(LA106_1>=BOOLEAN && LA106_1<=BREAK)||LA106_1==BYTE||(LA106_1>=CHAR && LA106_1<=CLASS)||(LA106_1>=CONTINUE && LA106_1<=DECIMAL_LITERAL)||LA106_1==DO||LA106_1==DOUBLE||LA106_1==ENUM||(LA106_1>=FALSE && LA106_1<=FINAL)||(LA106_1>=FLOAT && LA106_1<=FLOATING_POINT_LITERAL)||LA106_1==FOR||LA106_1==GLOBAL||(LA106_1>=HEX_LITERAL && LA106_1<=IF)||LA106_1==INC||LA106_1==INT||LA106_1==INTERFACE||LA106_1==LCURLY||LA106_1==LESS_THAN||LA106_1==LOGICAL_NOT||(LA106_1>=LONG && LA106_1<=LPAREN)||LA106_1==MINUS||(LA106_1>=NATIVE && LA106_1<=NOT)||LA106_1==NULL||LA106_1==OCTAL_LITERAL||LA106_1==OVERRIDE||LA106_1==PLUS||LA106_1==PRIVATE||(LA106_1>=PROTECTED && LA106_1<=PUBLIC)||LA106_1==RETURN||LA106_1==SEMI||(LA106_1>=SHORT && LA106_1<=SOQL_LITERAL)||LA106_1==STATIC||(LA106_1>=STRICTFP && LA106_1<=SUPER)||LA106_1==SWITCH||(LA106_1>=SYNCHRONIZED && LA106_1<=THIS)||LA106_1==THROW||(LA106_1>=TRANSIENT && LA106_1<=TRY)||(LA106_1>=VIRTUAL && LA106_1<=VOID)||(LA106_1>=VOLATILE && LA106_1<=WITH_SHARING)))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:764:33: blockStatement
					{
					DebugLocation(764, 33);
					PushFollow(Follow._blockStatement_in_switchCaseLabel10333);
					blockStatement377=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement377.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseLabel", 84);
			LeaveRule("switchCaseLabel", 84);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 84, switchCaseLabel_StartIndex); }

		}
		DebugLocation(765, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return retval;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:767:1: switchDefaultLabel : DEFAULT ^ COLON ! ( blockStatement )* ;
	[GrammarRule("switchDefaultLabel")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 85);
		TraceIn("switchDefaultLabel", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchDefaultLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken DEFAULT378 = default(IToken);
		IToken COLON379 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> blockStatement380 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DEFAULT378_tree = default(CommonTree);
		CommonTree COLON379_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(767, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:768:5: ( DEFAULT ^ COLON ! ( blockStatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:768:9: DEFAULT ^ COLON ! ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(768, 16);
			DEFAULT378=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel10357); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEFAULT378_tree = (CommonTree)adaptor.Create(DEFAULT378);
			root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT378_tree, root_0);
			}
			DebugLocation(768, 23);
			COLON379=(IToken)Match(input,COLON,Follow._COLON_in_switchDefaultLabel10360); if (state.failed) return retval;
			DebugLocation(768, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:768:25: ( blockStatement )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==ABSTRACT||LA107_1==AT||(LA107_1>=BOOLEAN && LA107_1<=BREAK)||LA107_1==BYTE||(LA107_1>=CHAR && LA107_1<=CLASS)||(LA107_1>=CONTINUE && LA107_1<=DECIMAL_LITERAL)||LA107_1==DO||LA107_1==DOUBLE||LA107_1==ENUM||(LA107_1>=FALSE && LA107_1<=FINAL)||(LA107_1>=FLOAT && LA107_1<=FLOATING_POINT_LITERAL)||LA107_1==FOR||LA107_1==GLOBAL||(LA107_1>=HEX_LITERAL && LA107_1<=IF)||LA107_1==INC||LA107_1==INT||LA107_1==INTERFACE||LA107_1==LCURLY||LA107_1==LESS_THAN||LA107_1==LOGICAL_NOT||(LA107_1>=LONG && LA107_1<=LPAREN)||LA107_1==MINUS||(LA107_1>=NATIVE && LA107_1<=NOT)||LA107_1==NULL||LA107_1==OCTAL_LITERAL||LA107_1==OVERRIDE||LA107_1==PLUS||LA107_1==PRIVATE||(LA107_1>=PROTECTED && LA107_1<=PUBLIC)||LA107_1==RETURN||LA107_1==SEMI||(LA107_1>=SHORT && LA107_1<=SOQL_LITERAL)||LA107_1==STATIC||(LA107_1>=STRICTFP && LA107_1<=SUPER)||LA107_1==SWITCH||(LA107_1>=SYNCHRONIZED && LA107_1<=THIS)||LA107_1==THROW||(LA107_1>=TRANSIENT && LA107_1<=TRY)||(LA107_1>=VIRTUAL && LA107_1<=VOID)||(LA107_1>=VOLATILE && LA107_1<=WITH_SHARING)))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:768:25: blockStatement
					{
					DebugLocation(768, 25);
					PushFollow(Follow._blockStatement_in_switchDefaultLabel10363);
					blockStatement380=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement380.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchDefaultLabel", 85);
			LeaveRule("switchDefaultLabel", 85);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 85, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(769, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return retval;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:771:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 86);
		TraceIn("forInit", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList382 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(771, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:772:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
			int alt108=3;
			try { DebugEnterDecision(108, false);
			switch (input.LA(1))
			{
			case AT:
			case FINAL:
				{
				alt108 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER_LITERAL:
			case DEC:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case INC:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LPAREN:
			case MINUS:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case PLUS:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt108 = 2;
				}
				break;
			case SEMI:
				{
				alt108 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:772:9: localVariableDeclaration
				{
				DebugLocation(772, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit10387);
				localVariableDeclaration381=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_localVariableDeclaration.Add(localVariableDeclaration381.Tree);


				{
				// AST REWRITE
				// elements: localVariableDeclaration
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 772:37: -> ^( FOR_INIT localVariableDeclaration )
				{
					DebugLocation(772, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:772:41: ^( FOR_INIT localVariableDeclaration )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(772, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(772, 52);
					adaptor.AddChild(root_1, stream_localVariableDeclaration.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:773:9: expressionList
				{
				DebugLocation(773, 9);
				PushFollow(Follow._expressionList_in_forInit10409);
				expressionList382=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList382.Tree);


				{
				// AST REWRITE
				// elements: expressionList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 773:37: -> ^( FOR_INIT expressionList )
				{
					DebugLocation(773, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:773:41: ^( FOR_INIT expressionList )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(773, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					DebugLocation(773, 52);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:774:37: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 774:37: -> ^( FOR_INIT )
				{
					DebugLocation(774, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:774:41: ^( FOR_INIT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(774, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 86);
			LeaveRule("forInit", 86);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 86, forInit_StartIndex); }

		}
		DebugLocation(775, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:777:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 87);
		TraceIn("forCondition", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expression383 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(777, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:778:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:778:9: ( expression )?
			{
			DebugLocation(778, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:778:9: ( expression )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_1 = input.LA(1);

			if ((LA109_1==BOOLEAN||LA109_1==BYTE||(LA109_1>=CHAR && LA109_1<=CHARACTER_LITERAL)||(LA109_1>=DEC && LA109_1<=DECIMAL_LITERAL)||LA109_1==DOUBLE||LA109_1==FALSE||(LA109_1>=FLOAT && LA109_1<=FLOATING_POINT_LITERAL)||(LA109_1>=HEX_LITERAL && LA109_1<=IDENT)||LA109_1==INC||LA109_1==INT||LA109_1==LESS_THAN||LA109_1==LOGICAL_NOT||(LA109_1>=LONG && LA109_1<=LPAREN)||LA109_1==MINUS||(LA109_1>=NEW && LA109_1<=NOT)||LA109_1==NULL||LA109_1==OCTAL_LITERAL||LA109_1==PLUS||(LA109_1>=SHORT && LA109_1<=SOQL_LITERAL)||(LA109_1>=STRING_LITERAL && LA109_1<=SUPER)||LA109_1==THIS||LA109_1==TRUE||LA109_1==VOID))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:778:9: expression
				{
				DebugLocation(778, 9);
				PushFollow(Follow._expression_in_forCondition10497);
				expression383=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression383.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 779:9: -> ^( FOR_CONDITION ( expression )? )
			{
				DebugLocation(779, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:779:13: ^( FOR_CONDITION ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(779, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);

				DebugLocation(779, 29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:779:29: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(779, 29);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 87);
			LeaveRule("forCondition", 87);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 87, forCondition_StartIndex); }

		}
		DebugLocation(780, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:782:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
	[GrammarRule("forUpdater")]
	private AstParserRuleReturnScope<CommonTree, IToken> forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 88);
		TraceIn("forUpdater", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdater_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expressionList384 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(782, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:783:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:783:9: ( expressionList )?
			{
			DebugLocation(783, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:783:9: ( expressionList )?
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_1 = input.LA(1);

			if ((LA110_1==BOOLEAN||LA110_1==BYTE||(LA110_1>=CHAR && LA110_1<=CHARACTER_LITERAL)||(LA110_1>=DEC && LA110_1<=DECIMAL_LITERAL)||LA110_1==DOUBLE||LA110_1==FALSE||(LA110_1>=FLOAT && LA110_1<=FLOATING_POINT_LITERAL)||(LA110_1>=HEX_LITERAL && LA110_1<=IDENT)||LA110_1==INC||LA110_1==INT||LA110_1==LESS_THAN||LA110_1==LOGICAL_NOT||(LA110_1>=LONG && LA110_1<=LPAREN)||LA110_1==MINUS||(LA110_1>=NEW && LA110_1<=NOT)||LA110_1==NULL||LA110_1==OCTAL_LITERAL||LA110_1==PLUS||(LA110_1>=SHORT && LA110_1<=SOQL_LITERAL)||(LA110_1>=STRING_LITERAL && LA110_1<=SUPER)||LA110_1==THIS||LA110_1==TRUE||LA110_1==VOID))
			{
				alt110 = 1;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:783:9: expressionList
				{
				DebugLocation(783, 9);
				PushFollow(Follow._expressionList_in_forUpdater10539);
				expressionList384=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList384.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(110); }



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 784:9: -> ^( FOR_UPDATE ( expressionList )? )
			{
				DebugLocation(784, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:784:13: ^( FOR_UPDATE ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(784, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_UPDATE, "FOR_UPDATE"), root_1);

				DebugLocation(784, 26);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:784:26: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(784, 26);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdater", 88);
			LeaveRule("forUpdater", 88);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 88, forUpdater_StartIndex); }

		}
		DebugLocation(785, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return retval;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:789:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 89);
		TraceIn("parenthesizedExpression", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parenthesizedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN385 = default(IToken);
		IToken RPAREN387 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression386 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN385_tree = default(CommonTree);
		CommonTree RPAREN387_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(789, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:790:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:790:9: LPAREN expression RPAREN
			{
			DebugLocation(790, 9);
			LPAREN385=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenthesizedExpression10579); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN385);

			DebugLocation(790, 16);
			PushFollow(Follow._expression_in_parenthesizedExpression10581);
			expression386=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression386.Tree);
			DebugLocation(790, 27);
			RPAREN387=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenthesizedExpression10583); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN387);



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 791:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
			{
				DebugLocation(791, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:791:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(791, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARENTESIZED_EXPR, LPAREN385, "PARENTESIZED_EXPR"), root_1);

				DebugLocation(791, 63);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenthesizedExpression", 89);
			LeaveRule("parenthesizedExpression", 89);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 89, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(792, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return retval;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:794:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 90);
		TraceIn("expressionList", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken COMMA389 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression390 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA389_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(794, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:795:5: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:795:9: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(795, 9);
			PushFollow(Follow._expression_in_expressionList10624);
			expression388=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression388.Tree);
			DebugLocation(795, 20);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:795:20: ( COMMA ! expression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==COMMA))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:795:21: COMMA ! expression
					{
					DebugLocation(795, 26);
					COMMA389=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList10627); if (state.failed) return retval;
					DebugLocation(795, 28);
					PushFollow(Follow._expression_in_expressionList10630);
					expression390=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression390.Tree);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 90);
			LeaveRule("expressionList", 90);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 90, expressionList_StartIndex); }

		}
		DebugLocation(796, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:798:1: expression : ( assignmentExpression -> ^( EXPR assignmentExpression ) ) ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 91);
		TraceIn("expression", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression391 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(798, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:799:5: ( ( assignmentExpression -> ^( EXPR assignmentExpression ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:800:2: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			{
			DebugLocation(800, 2);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:800:2: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:800:3: assignmentExpression
			{
			DebugLocation(800, 3);
			PushFollow(Follow._assignmentExpression_in_expression10654);
			assignmentExpression391=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression391.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 800:25: -> ^( EXPR assignmentExpression )
			{
				DebugLocation(800, 29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:800:29: ^( EXPR assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(800, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(800, 36);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 91);
			LeaveRule("expression", 91);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 91, expression_StartIndex); }

		}
		DebugLocation(801, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:803:1: assignmentExpression : conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 92);
		TraceIn("assignmentExpression", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGN393 = default(IToken);
		IToken PLUS_ASSIGN394 = default(IToken);
		IToken MINUS_ASSIGN395 = default(IToken);
		IToken STAR_ASSIGN396 = default(IToken);
		IToken DIV_ASSIGN397 = default(IToken);
		IToken AND_ASSIGN398 = default(IToken);
		IToken OR_ASSIGN399 = default(IToken);
		IToken XOR_ASSIGN400 = default(IToken);
		IToken MOD_ASSIGN401 = default(IToken);
		IToken SHIFT_LEFT_ASSIGN402 = default(IToken);
		IToken SHIFT_RIGHT_ASSIGN403 = default(IToken);
		IToken BIT_SHIFT_RIGHT_ASSIGN404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression405 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGN393_tree = default(CommonTree);
		CommonTree PLUS_ASSIGN394_tree = default(CommonTree);
		CommonTree MINUS_ASSIGN395_tree = default(CommonTree);
		CommonTree STAR_ASSIGN396_tree = default(CommonTree);
		CommonTree DIV_ASSIGN397_tree = default(CommonTree);
		CommonTree AND_ASSIGN398_tree = default(CommonTree);
		CommonTree OR_ASSIGN399_tree = default(CommonTree);
		CommonTree XOR_ASSIGN400_tree = default(CommonTree);
		CommonTree MOD_ASSIGN401_tree = default(CommonTree);
		CommonTree SHIFT_LEFT_ASSIGN402_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT_ASSIGN403_tree = default(CommonTree);
		CommonTree BIT_SHIFT_RIGHT_ASSIGN404_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(803, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:804:5: ( conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:804:9: conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(804, 9);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression10684);
			conditionalExpression392=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression392.Tree);
			DebugLocation(805, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:805:9: ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==AND_ASSIGN||LA113_1==ASSIGN||LA113_1==BIT_SHIFT_RIGHT_ASSIGN||LA113_1==DIV_ASSIGN||LA113_1==MINUS_ASSIGN||LA113_1==MOD_ASSIGN||LA113_1==OR_ASSIGN||LA113_1==PLUS_ASSIGN||LA113_1==SHIFT_LEFT_ASSIGN||LA113_1==SHIFT_RIGHT_ASSIGN||LA113_1==STAR_ASSIGN||LA113_1==XOR_ASSIGN))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:805:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression
				{
				DebugLocation(805, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:805:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^)
				int alt112=12;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				switch (input.LA(1))
				{
				case ASSIGN:
					{
					alt112 = 1;
					}
					break;
				case PLUS_ASSIGN:
					{
					alt112 = 2;
					}
					break;
				case MINUS_ASSIGN:
					{
					alt112 = 3;
					}
					break;
				case STAR_ASSIGN:
					{
					alt112 = 4;
					}
					break;
				case DIV_ASSIGN:
					{
					alt112 = 5;
					}
					break;
				case AND_ASSIGN:
					{
					alt112 = 6;
					}
					break;
				case OR_ASSIGN:
					{
					alt112 = 7;
					}
					break;
				case XOR_ASSIGN:
					{
					alt112 = 8;
					}
					break;
				case MOD_ASSIGN:
					{
					alt112 = 9;
					}
					break;
				case SHIFT_LEFT_ASSIGN:
					{
					alt112 = 10;
					}
					break;
				case SHIFT_RIGHT_ASSIGN:
					{
					alt112 = 11;
					}
					break;
				case BIT_SHIFT_RIGHT_ASSIGN:
					{
					alt112 = 12;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 112, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:805:17: ASSIGN ^
					{
					DebugLocation(805, 23);
					ASSIGN393=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assignmentExpression10703); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ASSIGN393_tree = (CommonTree)adaptor.Create(ASSIGN393);
					root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN393_tree, root_0);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:806:17: PLUS_ASSIGN ^
					{
					DebugLocation(806, 28);
					PLUS_ASSIGN394=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_assignmentExpression10722); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PLUS_ASSIGN394_tree = (CommonTree)adaptor.Create(PLUS_ASSIGN394);
					root_0 = (CommonTree)adaptor.BecomeRoot(PLUS_ASSIGN394_tree, root_0);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:807:17: MINUS_ASSIGN ^
					{
					DebugLocation(807, 29);
					MINUS_ASSIGN395=(IToken)Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_assignmentExpression10741); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MINUS_ASSIGN395_tree = (CommonTree)adaptor.Create(MINUS_ASSIGN395);
					root_0 = (CommonTree)adaptor.BecomeRoot(MINUS_ASSIGN395_tree, root_0);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:808:17: STAR_ASSIGN ^
					{
					DebugLocation(808, 28);
					STAR_ASSIGN396=(IToken)Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_assignmentExpression10760); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STAR_ASSIGN396_tree = (CommonTree)adaptor.Create(STAR_ASSIGN396);
					root_0 = (CommonTree)adaptor.BecomeRoot(STAR_ASSIGN396_tree, root_0);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:809:17: DIV_ASSIGN ^
					{
					DebugLocation(809, 27);
					DIV_ASSIGN397=(IToken)Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_assignmentExpression10779); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DIV_ASSIGN397_tree = (CommonTree)adaptor.Create(DIV_ASSIGN397);
					root_0 = (CommonTree)adaptor.BecomeRoot(DIV_ASSIGN397_tree, root_0);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:810:17: AND_ASSIGN ^
					{
					DebugLocation(810, 27);
					AND_ASSIGN398=(IToken)Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_assignmentExpression10798); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND_ASSIGN398_tree = (CommonTree)adaptor.Create(AND_ASSIGN398);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND_ASSIGN398_tree, root_0);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:811:17: OR_ASSIGN ^
					{
					DebugLocation(811, 26);
					OR_ASSIGN399=(IToken)Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_assignmentExpression10817); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR_ASSIGN399_tree = (CommonTree)adaptor.Create(OR_ASSIGN399);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR_ASSIGN399_tree, root_0);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:812:17: XOR_ASSIGN ^
					{
					DebugLocation(812, 27);
					XOR_ASSIGN400=(IToken)Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_assignmentExpression10836); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR_ASSIGN400_tree = (CommonTree)adaptor.Create(XOR_ASSIGN400);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR_ASSIGN400_tree, root_0);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:813:17: MOD_ASSIGN ^
					{
					DebugLocation(813, 27);
					MOD_ASSIGN401=(IToken)Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_assignmentExpression10855); if (state.failed) return retval;
					if (state.backtracking == 0) {
					MOD_ASSIGN401_tree = (CommonTree)adaptor.Create(MOD_ASSIGN401);
					root_0 = (CommonTree)adaptor.BecomeRoot(MOD_ASSIGN401_tree, root_0);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:814:17: SHIFT_LEFT_ASSIGN ^
					{
					DebugLocation(814, 34);
					SHIFT_LEFT_ASSIGN402=(IToken)Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_assignmentExpression10874); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_LEFT_ASSIGN402_tree = (CommonTree)adaptor.Create(SHIFT_LEFT_ASSIGN402);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT_ASSIGN402_tree, root_0);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:815:17: SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(815, 35);
					SHIFT_RIGHT_ASSIGN403=(IToken)Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_assignmentExpression10893); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SHIFT_RIGHT_ASSIGN403_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT_ASSIGN403);
					root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT_ASSIGN403_tree, root_0);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:816:17: BIT_SHIFT_RIGHT_ASSIGN ^
					{
					DebugLocation(816, 39);
					BIT_SHIFT_RIGHT_ASSIGN404=(IToken)Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10912); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BIT_SHIFT_RIGHT_ASSIGN404_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT_ASSIGN404);
					root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT_ASSIGN404_tree, root_0);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(818, 9);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression10934);
				assignmentExpression405=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression405.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 92);
			LeaveRule("assignmentExpression", 92);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 92, assignmentExpression_StartIndex); }

		}
		DebugLocation(819, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:821:1: conditionalExpression : logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 93);
		TraceIn("conditionalExpression", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken QUESTION407 = default(IToken);
		IToken COLON409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression408 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression410 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree QUESTION407_tree = default(CommonTree);
		CommonTree COLON409_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(821, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:822:5: ( logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:822:9: logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(822, 9);
			PushFollow(Follow._logicalOrExpression_in_conditionalExpression10959);
			logicalOrExpression406=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOrExpression406.Tree);
			DebugLocation(822, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:822:29: ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_1 = input.LA(1);

			if ((LA114_1==QUESTION))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:822:30: QUESTION ^ assignmentExpression COLON ! conditionalExpression
				{
				DebugLocation(822, 38);
				QUESTION407=(IToken)Match(input,QUESTION,Follow._QUESTION_in_conditionalExpression10962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUESTION407_tree = (CommonTree)adaptor.Create(QUESTION407);
				root_0 = (CommonTree)adaptor.BecomeRoot(QUESTION407_tree, root_0);
				}
				DebugLocation(822, 40);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression10965);
				assignmentExpression408=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression408.Tree);
				DebugLocation(822, 66);
				COLON409=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression10967); if (state.failed) return retval;
				DebugLocation(822, 68);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression10970);
				conditionalExpression410=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression410.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 93);
			LeaveRule("conditionalExpression", 93);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 93, conditionalExpression_StartIndex); }

		}
		DebugLocation(823, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:825:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 94);
		TraceIn("logicalOrExpression", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR412 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression413 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR412_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(825, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:826:5: ( logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:826:9: logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(826, 9);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10991);
			logicalAndExpression411=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression411.Tree);
			DebugLocation(826, 30);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:826:30: ( LOGICAL_OR ^ logicalAndExpression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==LOGICAL_OR))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:826:31: LOGICAL_OR ^ logicalAndExpression
					{
					DebugLocation(826, 41);
					LOGICAL_OR412=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_logicalOrExpression10994); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_OR412_tree = (CommonTree)adaptor.Create(LOGICAL_OR412);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR412_tree, root_0);
					}
					DebugLocation(826, 43);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10997);
					logicalAndExpression413=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression413.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 94);
			LeaveRule("logicalOrExpression", 94);
			LeaveRule_logicalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 94, logicalOrExpression_StartIndex); }

		}
		DebugLocation(827, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:829:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 95);
		TraceIn("logicalAndExpression", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression416 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND415_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(829, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:830:5: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:830:9: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(830, 9);
			PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression11018);
			inclusiveOrExpression414=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression414.Tree);
			DebugLocation(830, 31);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:830:31: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==LOGICAL_AND))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:830:32: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(830, 43);
					LOGICAL_AND415=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_logicalAndExpression11021); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LOGICAL_AND415_tree = (CommonTree)adaptor.Create(LOGICAL_AND415);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND415_tree, root_0);
					}
					DebugLocation(830, 45);
					PushFollow(Follow._inclusiveOrExpression_in_logicalAndExpression11024);
					inclusiveOrExpression416=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression416.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 95);
			LeaveRule("logicalAndExpression", 95);
			LeaveRule_logicalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 95, logicalAndExpression_StartIndex); }

		}
		DebugLocation(831, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:833:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 96);
		TraceIn("inclusiveOrExpression", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken OR418 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression419 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR418_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(833, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:834:5: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:834:9: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(834, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression11045);
			exclusiveOrExpression417=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression417.Tree);
			DebugLocation(834, 31);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:834:31: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==OR))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:834:32: OR ^ exclusiveOrExpression
					{
					DebugLocation(834, 34);
					OR418=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression11048); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR418_tree = (CommonTree)adaptor.Create(OR418);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR418_tree, root_0);
					}
					DebugLocation(834, 36);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression11051);
					exclusiveOrExpression419=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression419.Tree);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 96);
			LeaveRule("inclusiveOrExpression", 96);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 96, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(835, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:837:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 97);
		TraceIn("exclusiveOrExpression", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken XOR421 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR421_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(837, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:838:5: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:838:9: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(838, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression11072);
			andExpression420=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression420.Tree);
			DebugLocation(838, 23);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:838:23: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==XOR))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:838:24: XOR ^ andExpression
					{
					DebugLocation(838, 27);
					XOR421=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression11075); if (state.failed) return retval;
					if (state.backtracking == 0) {
					XOR421_tree = (CommonTree)adaptor.Create(XOR421);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR421_tree, root_0);
					}
					DebugLocation(838, 29);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression11078);
					andExpression422=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression422.Tree);

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 97);
			LeaveRule("exclusiveOrExpression", 97);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 97, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(839, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:841:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 98);
		TraceIn("andExpression", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken AND424 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression425 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND424_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(841, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:842:5: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:842:9: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(842, 9);
			PushFollow(Follow._equalityExpression_in_andExpression11099);
			equalityExpression423=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression423.Tree);
			DebugLocation(842, 28);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:842:28: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==AND))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:842:29: AND ^ equalityExpression
					{
					DebugLocation(842, 32);
					AND424=(IToken)Match(input,AND,Follow._AND_in_andExpression11102); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND424_tree = (CommonTree)adaptor.Create(AND424);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND424_tree, root_0);
					}
					DebugLocation(842, 34);
					PushFollow(Follow._equalityExpression_in_andExpression11105);
					equalityExpression425=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression425.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 98);
			LeaveRule("andExpression", 98);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 98, andExpression_StartIndex); }

		}
		DebugLocation(843, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:845:1: equalityExpression : instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 99);
		TraceIn("equalityExpression", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken EQUAL427 = default(IToken);
		IToken NOT_EQUAL428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EQUAL427_tree = default(CommonTree);
		CommonTree NOT_EQUAL428_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(845, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:846:5: ( instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:846:9: instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(846, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression11126);
			instanceOfExpression426=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression426.Tree);
			DebugLocation(847, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:847:9: ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==EQUAL||LA121_1==NOT_EQUAL))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:847:13: ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression
					{
					DebugLocation(847, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:847:13: ( EQUAL ^| NOT_EQUAL ^)
					int alt120=2;
					try { DebugEnterSubRule(120);
					try { DebugEnterDecision(120, false);
					int LA120_1 = input.LA(1);

					if ((LA120_1==EQUAL))
					{
						alt120 = 1;
					}
					else if ((LA120_1==NOT_EQUAL))
					{
						alt120 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:847:17: EQUAL ^
						{
						DebugLocation(847, 22);
						EQUAL427=(IToken)Match(input,EQUAL,Follow._EQUAL_in_equalityExpression11145); if (state.failed) return retval;
						if (state.backtracking == 0) {
						EQUAL427_tree = (CommonTree)adaptor.Create(EQUAL427);
						root_0 = (CommonTree)adaptor.BecomeRoot(EQUAL427_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:848:17: NOT_EQUAL ^
						{
						DebugLocation(848, 26);
						NOT_EQUAL428=(IToken)Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_equalityExpression11164); if (state.failed) return retval;
						if (state.backtracking == 0) {
						NOT_EQUAL428_tree = (CommonTree)adaptor.Create(NOT_EQUAL428);
						root_0 = (CommonTree)adaptor.BecomeRoot(NOT_EQUAL428_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(120); }

					DebugLocation(850, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression11194);
					instanceOfExpression429=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression429.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 99);
			LeaveRule("equalityExpression", 99);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 99, equalityExpression_StartIndex); }

		}
		DebugLocation(852, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:854:1: instanceOfExpression : relationalExpression ( INSTANCEOF ^ type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 100);
		TraceIn("instanceOfExpression", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INSTANCEOF431 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type432 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INSTANCEOF431_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(854, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:855:5: ( relationalExpression ( INSTANCEOF ^ type )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:855:9: relationalExpression ( INSTANCEOF ^ type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(855, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression11224);
			relationalExpression430=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression430.Tree);
			DebugLocation(855, 30);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:855:30: ( INSTANCEOF ^ type )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==INSTANCEOF))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:855:31: INSTANCEOF ^ type
				{
				DebugLocation(855, 41);
				INSTANCEOF431=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression11227); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INSTANCEOF431_tree = (CommonTree)adaptor.Create(INSTANCEOF431);
				root_0 = (CommonTree)adaptor.BecomeRoot(INSTANCEOF431_tree, root_0);
				}
				DebugLocation(855, 43);
				PushFollow(Follow._type_in_instanceOfExpression11230);
				type432=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type432.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 100);
			LeaveRule("instanceOfExpression", 100);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 100, instanceOfExpression_StartIndex); }

		}
		DebugLocation(856, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:858:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 101);
		TraceIn("relationalExpression", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LESS_OR_EQUAL434 = default(IToken);
		IToken GREATER_OR_EQUAL435 = default(IToken);
		IToken LESS_THAN436 = default(IToken);
		IToken GREATER_THAN437 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression438 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LESS_OR_EQUAL434_tree = default(CommonTree);
		CommonTree GREATER_OR_EQUAL435_tree = default(CommonTree);
		CommonTree LESS_THAN436_tree = default(CommonTree);
		CommonTree GREATER_THAN437_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(858, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:859:5: ( shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:859:9: shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(859, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression11251);
			shiftExpression433=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression433.Tree);
			DebugLocation(860, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				try
				{
					alt124 = dfa124.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression
					{
					DebugLocation(860, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^)
					int alt123=4;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, false);
					switch (input.LA(1))
					{
					case LESS_OR_EQUAL:
						{
						alt123 = 1;
						}
						break;
					case GREATER_OR_EQUAL:
						{
						alt123 = 2;
						}
						break;
					case LESS_THAN:
						{
						alt123 = 3;
						}
						break;
					case GREATER_THAN:
						{
						alt123 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 123, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:17: LESS_OR_EQUAL ^
						{
						DebugLocation(860, 30);
						LESS_OR_EQUAL434=(IToken)Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_relationalExpression11270); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_OR_EQUAL434_tree = (CommonTree)adaptor.Create(LESS_OR_EQUAL434);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_OR_EQUAL434_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:861:17: GREATER_OR_EQUAL ^
						{
						DebugLocation(861, 33);
						GREATER_OR_EQUAL435=(IToken)Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_relationalExpression11289); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_OR_EQUAL435_tree = (CommonTree)adaptor.Create(GREATER_OR_EQUAL435);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_OR_EQUAL435_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:862:17: LESS_THAN ^
						{
						DebugLocation(862, 26);
						LESS_THAN436=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_relationalExpression11308); if (state.failed) return retval;
						if (state.backtracking == 0) {
						LESS_THAN436_tree = (CommonTree)adaptor.Create(LESS_THAN436);
						root_0 = (CommonTree)adaptor.BecomeRoot(LESS_THAN436_tree, root_0);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:863:17: GREATER_THAN ^
						{
						DebugLocation(863, 29);
						GREATER_THAN437=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_relationalExpression11327); if (state.failed) return retval;
						if (state.backtracking == 0) {
						GREATER_THAN437_tree = (CommonTree)adaptor.Create(GREATER_THAN437);
						root_0 = (CommonTree)adaptor.BecomeRoot(GREATER_THAN437_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(123); }

					DebugLocation(865, 13);
					PushFollow(Follow._shiftExpression_in_relationalExpression11356);
					shiftExpression438=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression438.Tree);

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 101);
			LeaveRule("relationalExpression", 101);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 101, relationalExpression_StartIndex); }

		}
		DebugLocation(867, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:869:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 102);
		TraceIn("shiftExpression", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken BIT_SHIFT_RIGHT440 = default(IToken);
		IToken SHIFT_RIGHT441 = default(IToken);
		IToken SHIFT_LEFT442 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression443 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree BIT_SHIFT_RIGHT440_tree = default(CommonTree);
		CommonTree SHIFT_RIGHT441_tree = default(CommonTree);
		CommonTree SHIFT_LEFT442_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(869, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:870:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:870:9: additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(870, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression11390);
			additiveExpression439=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression439.Tree);
			DebugLocation(871, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:871:9: ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==BIT_SHIFT_RIGHT||LA126_1==SHIFT_LEFT||LA126_1==SHIFT_RIGHT))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:871:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression
					{
					DebugLocation(871, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:871:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^)
					int alt125=3;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					switch (input.LA(1))
					{
					case BIT_SHIFT_RIGHT:
						{
						alt125 = 1;
						}
						break;
					case SHIFT_RIGHT:
						{
						alt125 = 2;
						}
						break;
					case SHIFT_LEFT:
						{
						alt125 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 125, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:871:17: BIT_SHIFT_RIGHT ^
						{
						DebugLocation(871, 32);
						BIT_SHIFT_RIGHT440=(IToken)Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_shiftExpression11408); if (state.failed) return retval;
						if (state.backtracking == 0) {
						BIT_SHIFT_RIGHT440_tree = (CommonTree)adaptor.Create(BIT_SHIFT_RIGHT440);
						root_0 = (CommonTree)adaptor.BecomeRoot(BIT_SHIFT_RIGHT440_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:872:17: SHIFT_RIGHT ^
						{
						DebugLocation(872, 28);
						SHIFT_RIGHT441=(IToken)Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_shiftExpression11427); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_RIGHT441_tree = (CommonTree)adaptor.Create(SHIFT_RIGHT441);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_RIGHT441_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:873:17: SHIFT_LEFT ^
						{
						DebugLocation(873, 27);
						SHIFT_LEFT442=(IToken)Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_shiftExpression11446); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SHIFT_LEFT442_tree = (CommonTree)adaptor.Create(SHIFT_LEFT442);
						root_0 = (CommonTree)adaptor.BecomeRoot(SHIFT_LEFT442_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(875, 13);
					PushFollow(Follow._additiveExpression_in_shiftExpression11475);
					additiveExpression443=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression443.Tree);

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 102);
			LeaveRule("shiftExpression", 102);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 102, shiftExpression_StartIndex); }

		}
		DebugLocation(877, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:879:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 103);
		TraceIn("additiveExpression", 103);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS445 = default(IToken);
		IToken MINUS446 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression444 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression447 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS445_tree = default(CommonTree);
		CommonTree MINUS446_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(879, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:880:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:880:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(880, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression11505);
			multiplicativeExpression444=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression444.Tree);
			DebugLocation(881, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				try
				{
					alt128 = dfa128.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:13: ( PLUS ^| MINUS ^) multiplicativeExpression
					{
					DebugLocation(881, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:13: ( PLUS ^| MINUS ^)
					int alt127=2;
					try { DebugEnterSubRule(127);
					try { DebugEnterDecision(127, false);
					int LA127_1 = input.LA(1);

					if ((LA127_1==PLUS))
					{
						alt127 = 1;
					}
					else if ((LA127_1==MINUS))
					{
						alt127 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:17: PLUS ^
						{
						DebugLocation(881, 21);
						PLUS445=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression11523); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS445_tree = (CommonTree)adaptor.Create(PLUS445);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS445_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:882:17: MINUS ^
						{
						DebugLocation(882, 22);
						MINUS446=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression11542); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS446_tree = (CommonTree)adaptor.Create(MINUS446);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS446_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(127); }

					DebugLocation(884, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression11571);
					multiplicativeExpression447=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression447.Tree);

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 103);
			LeaveRule("additiveExpression", 103);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 103, additiveExpression_StartIndex); }

		}
		DebugLocation(886, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:888:1: multiplicativeExpression : unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 104);
		TraceIn("multiplicativeExpression", 104);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken STAR449 = default(IToken);
		IToken DIV450 = default(IToken);
		IToken MOD451 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression452 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STAR449_tree = default(CommonTree);
		CommonTree DIV450_tree = default(CommonTree);
		CommonTree MOD451_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(888, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:889:5: ( unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:889:9: unaryExpression ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(889, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression11601);
			unaryExpression448=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression448.Tree);
			DebugLocation(890, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:890:9: ( ( STAR ^| DIV ^| MOD ^) unaryExpression )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_1 = input.LA(1);

				if ((LA130_1==DIV||LA130_1==MOD||LA130_1==STAR))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:890:13: ( STAR ^| DIV ^| MOD ^) unaryExpression
					{
					DebugLocation(890, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:890:13: ( STAR ^| DIV ^| MOD ^)
					int alt129=3;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, false);
					switch (input.LA(1))
					{
					case STAR:
						{
						alt129 = 1;
						}
						break;
					case DIV:
						{
						alt129 = 2;
						}
						break;
					case MOD:
						{
						alt129 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 129, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:890:17: STAR ^
						{
						DebugLocation(890, 21);
						STAR449=(IToken)Match(input,STAR,Follow._STAR_in_multiplicativeExpression11620); if (state.failed) return retval;
						if (state.backtracking == 0) {
						STAR449_tree = (CommonTree)adaptor.Create(STAR449);
						root_0 = (CommonTree)adaptor.BecomeRoot(STAR449_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:891:17: DIV ^
						{
						DebugLocation(891, 20);
						DIV450=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression11639); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DIV450_tree = (CommonTree)adaptor.Create(DIV450);
						root_0 = (CommonTree)adaptor.BecomeRoot(DIV450_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:892:17: MOD ^
						{
						DebugLocation(892, 20);
						MOD451=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression11658); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MOD451_tree = (CommonTree)adaptor.Create(MOD451);
						root_0 = (CommonTree)adaptor.BecomeRoot(MOD451_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(894, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression11687);
					unaryExpression452=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression452.Tree);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 104);
			LeaveRule("multiplicativeExpression", 104);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 104, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(896, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:898:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 105);
		TraceIn("unaryExpression", 105);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken PLUS453 = default(IToken);
		IToken MINUS455 = default(IToken);
		IToken INC457 = default(IToken);
		IToken DEC459 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression454 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression458 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus461 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PLUS453_tree = default(CommonTree);
		CommonTree MINUS455_tree = default(CommonTree);
		CommonTree INC457_tree = default(CommonTree);
		CommonTree DEC459_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(898, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:899:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
			int alt131=5;
			try { DebugEnterDecision(131, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt131 = 1;
				}
				break;
			case MINUS:
				{
				alt131 = 2;
				}
				break;
			case INC:
				{
				alt131 = 3;
				}
				break;
			case DEC:
				{
				alt131 = 4;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LOGICAL_NOT:
			case LONG:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt131 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:899:9: PLUS unaryExpression
				{
				DebugLocation(899, 9);
				PLUS453=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression11721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(PLUS453);

				DebugLocation(899, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression11723);
				unaryExpression454=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression454.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 899:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
				{
					DebugLocation(899, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:899:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(899, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_PLUS, PLUS453, "UNARY_PLUS"), root_1);

					DebugLocation(899, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:900:9: MINUS unaryExpression
				{
				DebugLocation(900, 9);
				MINUS455=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression11750); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS455);

				DebugLocation(900, 15);
				PushFollow(Follow._unaryExpression_in_unaryExpression11752);
				unaryExpression456=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression456.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 900:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
				{
					DebugLocation(900, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:900:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(900, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UNARY_MINUS, MINUS455, "UNARY_MINUS"), root_1);

					DebugLocation(900, 78);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:901:9: INC postfixedExpression
				{
				DebugLocation(901, 9);
				INC457=(IToken)Match(input,INC,Follow._INC_in_unaryExpression11778); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC457);

				DebugLocation(901, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11780);
				postfixedExpression458=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression458.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 901:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
				{
					DebugLocation(901, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:901:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(901, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_INC, INC457, "PRE_INC"), root_1);

					DebugLocation(901, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:902:9: DEC postfixedExpression
				{
				DebugLocation(902, 9);
				DEC459=(IToken)Match(input,DEC,Follow._DEC_in_unaryExpression11804); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC459);

				DebugLocation(902, 13);
				PushFollow(Follow._postfixedExpression_in_unaryExpression11806);
				postfixedExpression460=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_postfixedExpression.Add(postfixedExpression460.Tree);


				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 902:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
				{
					DebugLocation(902, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:902:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(902, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_DEC, DEC459, "PRE_DEC"), root_1);

					DebugLocation(902, 68);
					adaptor.AddChild(root_1, stream_postfixedExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:903:9: unaryExpressionNotPlusMinus
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(903, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression11830);
				unaryExpressionNotPlusMinus461=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus461.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 105);
			LeaveRule("unaryExpression", 105);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 105, unaryExpression_StartIndex); }

		}
		DebugLocation(904, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:906:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 106);
		TraceIn("unaryExpressionNotPlusMinus", 106);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NOT462 = default(IToken);
		IToken LOGICAL_NOT464 = default(IToken);
		IToken LPAREN466 = default(IToken);
		IToken RPAREN468 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression463 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression465 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type467 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression470 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NOT462_tree = default(CommonTree);
		CommonTree LOGICAL_NOT464_tree = default(CommonTree);
		CommonTree LPAREN466_tree = default(CommonTree);
		CommonTree RPAREN468_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LOGICAL_NOT=new RewriteRuleITokenStream(adaptor,"token LOGICAL_NOT");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(906, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:907:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
			int alt132=4;
			try { DebugEnterDecision(132, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				alt132 = 1;
				}
				break;
			case LOGICAL_NOT:
				{
				alt132 = 2;
				}
				break;
			case LPAREN:
				{
				int LA132_2 = input.LA(2);

				if ((EvaluatePredicate(synpred208_Java_fragment)))
				{
					alt132 = 3;
				}
				else if ((true))
				{
					alt132 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case INT:
			case LESS_THAN:
			case LONG:
			case NEW:
			case NULL:
			case OCTAL_LITERAL:
			case SHORT:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt132 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:907:9: NOT unaryExpression
				{
				DebugLocation(907, 9);
				NOT462=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpressionNotPlusMinus11849); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT462);

				DebugLocation(907, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11851);
				unaryExpression463=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression463.Tree);


				{
				// AST REWRITE
				// elements: NOT, unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 907:57: -> ^( NOT unaryExpression )
				{
					DebugLocation(907, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:907:61: ^( NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(907, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NOT.NextNode(), root_1);

					DebugLocation(907, 67);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:908:9: LOGICAL_NOT unaryExpression
				{
				DebugLocation(908, 9);
				LOGICAL_NOT464=(IToken)Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_unaryExpressionNotPlusMinus11898); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGICAL_NOT.Add(LOGICAL_NOT464);

				DebugLocation(908, 21);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11900);
				unaryExpression465=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression465.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression, LOGICAL_NOT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 908:57: -> ^( LOGICAL_NOT unaryExpression )
				{
					DebugLocation(908, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:908:61: ^( LOGICAL_NOT unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(908, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_LOGICAL_NOT.NextNode(), root_1);

					DebugLocation(908, 75);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:909:9: LPAREN type RPAREN unaryExpression
				{
				DebugLocation(909, 9);
				LPAREN466=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpressionNotPlusMinus11939); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN466);

				DebugLocation(909, 16);
				PushFollow(Follow._type_in_unaryExpressionNotPlusMinus11941);
				type467=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type467.Tree);
				DebugLocation(909, 21);
				RPAREN468=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpressionNotPlusMinus11943); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN468);

				DebugLocation(909, 28);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus11945);
				unaryExpression469=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression469.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression, type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 909:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
				{
					DebugLocation(909, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:909:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(909, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CAST_EXPR, LPAREN466, "CAST_EXPR"), root_1);

					DebugLocation(909, 95);
					adaptor.AddChild(root_1, stream_type.NextTree());
					DebugLocation(909, 100);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:910:9: postfixedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(910, 9);
				PushFollow(Follow._postfixedExpression_in_unaryExpressionNotPlusMinus11980);
				postfixedExpression470=postfixedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixedExpression470.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 106);
			LeaveRule("unaryExpressionNotPlusMinus", 106);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 106, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(911, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_postfixedExpression();
	partial void LeaveRule_postfixedExpression();
	// $ANTLR start "postfixedExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:913:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
	[GrammarRule("postfixedExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> postfixedExpression()
	{
		EnterRule_postfixedExpression();
		EnterRule("postfixedExpression", 107);
		TraceIn("postfixedExpression", 107);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int postfixedExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken IDENT473 = default(IToken);
		IToken THIS475 = default(IToken);
		IToken SUPER477 = default(IToken);
		IToken IDENT478 = default(IToken);
		IToken LBRACK481 = default(IToken);
		IToken RBRACK483 = default(IToken);
		IToken INC484 = default(IToken);
		IToken DEC485 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified472 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments476 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression482 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree IDENT473_tree = default(CommonTree);
		CommonTree THIS475_tree = default(CommonTree);
		CommonTree SUPER477_tree = default(CommonTree);
		CommonTree IDENT478_tree = default(CommonTree);
		CommonTree LBRACK481_tree = default(CommonTree);
		CommonTree RBRACK483_tree = default(CommonTree);
		CommonTree INC484_tree = default(CommonTree);
		CommonTree DEC485_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACK=new RewriteRuleITokenStream(adaptor,"token RBRACK");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_INC=new RewriteRuleITokenStream(adaptor,"token INC");
		RewriteRuleITokenStream stream_DEC=new RewriteRuleITokenStream(adaptor,"token DEC");
		RewriteRuleITokenStream stream_LBRACK=new RewriteRuleITokenStream(adaptor,"token LBRACK");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		try { DebugEnterRule(GrammarFileName, "postfixedExpression");
		DebugLocation(913, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:915:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:915:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			{
			DebugLocation(915, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:915:9: ( primaryExpression -> primaryExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:915:13: primaryExpression
			{
			DebugLocation(915, 13);
			PushFollow(Follow._primaryExpression_in_postfixedExpression12016);
			primaryExpression471=primaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExpression.Add(primaryExpression471.Tree);


			{
			// AST REWRITE
			// elements: primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 915:53: -> primaryExpression
			{
				DebugLocation(915, 57);
				adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(918, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:918:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=3;
				try { DebugEnterDecision(137, false);
				try
				{
					alt137 = dfa137.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:918:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					{
					DebugLocation(918, 21);
					outerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression12078); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(outerDot);

					DebugLocation(919, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
					int alt136=5;
					try { DebugEnterSubRule(136);
					try { DebugEnterDecision(136, false);
					switch (input.LA(1))
					{
					case IDENT:
					case LESS_THAN:
						{
						alt136 = 1;
						}
						break;
					case THIS:
						{
						alt136 = 2;
						}
						break;
					case SUPER:
						{
						int LA136_2 = input.LA(2);

						if ((LA136_2==DOT))
						{
							alt136 = 4;
						}
						else if ((LA136_2==LPAREN))
						{
							alt136 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 136, 3, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case NEW:
						{
						alt136 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 136, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(136); }
					switch (alt136)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						{
						DebugLocation(919, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: ( genericTypeArgumentListSimplified )? IDENT
						{
						DebugLocation(919, 21);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: ( genericTypeArgumentListSimplified )?
						int alt133=2;
						try { DebugEnterSubRule(133);
						try { DebugEnterDecision(133, false);
						int LA133_1 = input.LA(1);

						if ((LA133_1==LESS_THAN))
						{
							alt133 = 1;
						}
						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: genericTypeArgumentListSimplified
							{
							DebugLocation(919, 21);
							PushFollow(Follow._genericTypeArgumentListSimplified_in_postfixedExpression12128);
							genericTypeArgumentListSimplified472=genericTypeArgumentListSimplified();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified472.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(133); }

						DebugLocation(921, 21);
						IDENT473=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12210); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT473);



						{
						// AST REWRITE
						// elements: IDENT, postfixedExpression, DOT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 921:53: -> ^( DOT $postfixedExpression IDENT )
						{
							DebugLocation(921, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:921:57: ^( DOT $postfixedExpression IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(921, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(921, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(921, 84);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(923, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
						int alt134=2;
						try { DebugEnterSubRule(134);
						try { DebugEnterDecision(134, false);
						try
						{
							alt134 = dfa134.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(134); }
						switch (alt134)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:21: arguments
							{
							DebugLocation(923, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12289);
							arguments474=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments474.Tree);


							{
							// AST REWRITE
							// elements: genericTypeArgumentListSimplified, postfixedExpression, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 923:52: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
							{
								DebugLocation(923, 56);
								// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:56: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(923, 58);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(923, 71);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(923, 91);
								// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:91: ( genericTypeArgumentListSimplified )?
								if (stream_genericTypeArgumentListSimplified.HasNext)
								{
									DebugLocation(923, 91);
									adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

								}
								stream_genericTypeArgumentListSimplified.Reset();
								DebugLocation(923, 126);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(134); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:925:17: THIS
						{
						DebugLocation(925, 17);
						THIS475=(IToken)Match(input,THIS,Follow._THIS_in_postfixedExpression12362); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_THIS.Add(THIS475);



						{
						// AST REWRITE
						// elements: THIS, postfixedExpression, DOT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 925:53: -> ^( DOT $postfixedExpression THIS )
						{
							DebugLocation(925, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:925:57: ^( DOT $postfixedExpression THIS )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(925, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(925, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(925, 84);
							adaptor.AddChild(root_1, stream_THIS.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:926:17: Super= SUPER arguments
						{
						DebugLocation(926, 22);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12425); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(926, 29);
						PushFollow(Follow._arguments_in_postfixedExpression12427);
						arguments476=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments476.Tree);


						{
						// AST REWRITE
						// elements: postfixedExpression, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 926:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
						{
							DebugLocation(926, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:926:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(926, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(926, 121);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(926, 141);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						{
						DebugLocation(927, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:21: SUPER innerDot= DOT IDENT
						{
						DebugLocation(927, 21);
						SUPER477=(IToken)Match(input,SUPER,Follow._SUPER_in_postfixedExpression12480); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER477);

						DebugLocation(927, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_postfixedExpression12484); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(927, 40);
						IDENT478=(IToken)Match(input,IDENT,Follow._IDENT_in_postfixedExpression12486); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT478);



						{
						// AST REWRITE
						// elements: innerDot, SUPER, outerDot, IDENT, postfixedExpression
						// token labels: outerDot, innerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 927:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
						{
							DebugLocation(927, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(927, 60);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_1);

							DebugLocation(927, 69);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:69: ^( $outerDot $postfixedExpression SUPER )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(927, 72);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_2);

							DebugLocation(927, 82);
							adaptor.AddChild(root_2, stream_retval.NextTree());
							DebugLocation(927, 102);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(927, 109);
							adaptor.AddChild(root_1, stream_IDENT.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}

						DebugLocation(929, 17);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
						int alt135=2;
						try { DebugEnterSubRule(135);
						try { DebugEnterDecision(135, false);
						try
						{
							alt135 = dfa135.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(135); }
						switch (alt135)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:21: arguments
							{
							DebugLocation(929, 21);
							PushFollow(Follow._arguments_in_postfixedExpression12553);
							arguments479=arguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_arguments.Add(arguments479.Tree);


							{
							// AST REWRITE
							// elements: postfixedExpression, arguments
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if (state.backtracking == 0) {
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 929:53: -> ^( METHOD_CALL $postfixedExpression arguments )
							{
								DebugLocation(929, 57);
								// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:57: ^( METHOD_CALL $postfixedExpression arguments )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(929, 59);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

								DebugLocation(929, 72);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(929, 92);
								adaptor.AddChild(root_1, stream_arguments.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}
							}

							}
							break;

						}
						} finally { DebugExitSubRule(135); }


						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:931:17: innerNewExpression
						{
						DebugLocation(931, 17);
						PushFollow(Follow._innerNewExpression_in_postfixedExpression12624);
						innerNewExpression480=innerNewExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression480.Tree);


						{
						// AST REWRITE
						// elements: DOT, postfixedExpression, innerNewExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 931:53: -> ^( DOT $postfixedExpression innerNewExpression )
						{
							DebugLocation(931, 57);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:931:57: ^( DOT $postfixedExpression innerNewExpression )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(931, 59);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

							DebugLocation(931, 64);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(931, 84);
							adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(136); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:933:13: LBRACK expression RBRACK
					{
					DebugLocation(933, 13);
					LBRACK481=(IToken)Match(input,LBRACK,Follow._LBRACK_in_postfixedExpression12681); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LBRACK.Add(LBRACK481);

					DebugLocation(933, 20);
					PushFollow(Follow._expression_in_postfixedExpression12683);
					expression482=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression482.Tree);
					DebugLocation(933, 31);
					RBRACK483=(IToken)Match(input,RBRACK,Follow._RBRACK_in_postfixedExpression12685); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RBRACK.Add(RBRACK483);



					{
					// AST REWRITE
					// elements: expression, postfixedExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 933:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
					{
						DebugLocation(933, 57);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:933:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(933, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

						DebugLocation(933, 81);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(933, 101);
						adaptor.AddChild(root_1, stream_expression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(936, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:936:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
			int alt138=3;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			try
			{
				alt138 = dfa138.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:936:13: INC
				{
				DebugLocation(936, 13);
				INC484=(IToken)Match(input,INC,Follow._INC_in_postfixedExpression12746); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INC.Add(INC484);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 936:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
				{
					DebugLocation(936, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:936:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(936, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_INC, INC484, "POST_INC"), root_1);

					DebugLocation(936, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:937:13: DEC
				{
				DebugLocation(937, 13);
				DEC485=(IToken)Match(input,DEC,Follow._DEC_in_postfixedExpression12770); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEC.Add(DEC485);



				{
				// AST REWRITE
				// elements: postfixedExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 937:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
				{
					DebugLocation(937, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:937:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(937, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_DEC, DEC485, "POST_DEC"), root_1);

					DebugLocation(937, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixedExpression", 107);
			LeaveRule("postfixedExpression", 107);
			LeaveRule_postfixedExpression();
			if (state.backtracking > 0) { Memoize(input, 107, postfixedExpression_StartIndex); }

		}
		DebugLocation(939, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixedExpression"); }
		return retval;

	}
	// $ANTLR end "postfixedExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:941:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 108);
		TraceIn("primaryExpression", 108);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken SUPER491 = default(IToken);
		IToken DOT493 = default(IToken);
		IToken IDENT494 = default(IToken);
		IToken IDENT496 = default(IToken);
		IToken THIS498 = default(IToken);
		IToken THIS500 = default(IToken);
		IToken SUPER502 = default(IToken);
		IToken SUPER504 = default(IToken);
		IToken DOT505 = default(IToken);
		IToken IDENT506 = default(IToken);
		IToken DOT510 = default(IToken);
		IToken CLASS511 = default(IToken);
		IToken VOID512 = default(IToken);
		IToken DOT513 = default(IToken);
		IToken CLASS514 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parenthesizedExpression486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal487 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newExpression488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression489 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified490 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments492 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments503 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments507 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType508 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator509 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SUPER491_tree = default(CommonTree);
		CommonTree DOT493_tree = default(CommonTree);
		CommonTree IDENT494_tree = default(CommonTree);
		CommonTree IDENT496_tree = default(CommonTree);
		CommonTree THIS498_tree = default(CommonTree);
		CommonTree THIS500_tree = default(CommonTree);
		CommonTree SUPER502_tree = default(CommonTree);
		CommonTree SUPER504_tree = default(CommonTree);
		CommonTree DOT505_tree = default(CommonTree);
		CommonTree IDENT506_tree = default(CommonTree);
		CommonTree DOT510_tree = default(CommonTree);
		CommonTree CLASS511_tree = default(CommonTree);
		CommonTree VOID512_tree = default(CommonTree);
		CommonTree DOT513_tree = default(CommonTree);
		CommonTree CLASS514_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_VOID=new RewriteRuleITokenStream(adaptor,"token VOID");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(941, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:942:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
			int alt144=10;
			try { DebugEnterDecision(144, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt144 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case SOQL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt144 = 2;
				}
				break;
			case NEW:
				{
				alt144 = 3;
				}
				break;
			case IDENT:
				{
				alt144 = 4;
				}
				break;
			case LESS_THAN:
				{
				alt144 = 5;
				}
				break;
			case THIS:
				{
				alt144 = 6;
				}
				break;
			case SUPER:
				{
				int LA144_2 = input.LA(2);

				if ((LA144_2==DOT))
				{
					alt144 = 8;
				}
				else if ((LA144_2==LPAREN))
				{
					alt144 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 144, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt144 = 9;
				}
				break;
			case VOID:
				{
				alt144 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:942:9: parenthesizedExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(942, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression12818);
				parenthesizedExpression486=parenthesizedExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parenthesizedExpression486.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:943:9: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(943, 9);
				PushFollow(Follow._literal_in_primaryExpression12828);
				literal487=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal487.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:944:9: newExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(944, 9);
				PushFollow(Follow._newExpression_in_primaryExpression12838);
				newExpression488=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression488.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:945:9: qualifiedIdentExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(945, 9);
				PushFollow(Follow._qualifiedIdentExpression_in_primaryExpression12848);
				qualifiedIdentExpression489=qualifiedIdentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedIdentExpression489.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:946:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				{
				DebugLocation(946, 9);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_primaryExpression12858);
				genericTypeArgumentListSimplified490=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified490.Tree);
				DebugLocation(947, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:947:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
				int alt140=3;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, false);
				switch (input.LA(1))
				{
				case SUPER:
					{
					alt140 = 1;
					}
					break;
				case IDENT:
					{
					alt140 = 2;
					}
					break;
				case THIS:
					{
					alt140 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 140, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:947:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(947, 13);
					SUPER491=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression12873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(SUPER491);

					DebugLocation(948, 13);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:948:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt139=2;
					try { DebugEnterSubRule(139);
					try { DebugEnterDecision(139, false);
					int LA139_1 = input.LA(1);

					if ((LA139_1==LPAREN))
					{
						alt139 = 1;
					}
					else if ((LA139_1==DOT))
					{
						alt139 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:948:17: arguments
						{
						DebugLocation(948, 17);
						PushFollow(Follow._arguments_in_primaryExpression12891);
						arguments492=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments492.Tree);


						{
						// AST REWRITE
						// elements: genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 948:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(948, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:948:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(948, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER491, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(948, 120);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(948, 154);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:949:17: DOT IDENT arguments
						{
						DebugLocation(949, 17);
						DOT493=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression12951); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(DOT493);

						DebugLocation(949, 21);
						IDENT494=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression12953); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT494);

						DebugLocation(949, 27);
						PushFollow(Follow._arguments_in_primaryExpression12955);
						arguments495=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments495.Tree);


						{
						// AST REWRITE
						// elements: DOT, arguments, SUPER, genericTypeArgumentListSimplified, IDENT
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 949:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(949, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:949:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(949, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(949, 75);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:949:75: ^( DOT SUPER IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(949, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(949, 81);
							adaptor.AddChild(root_2, stream_SUPER.NextNode());
							DebugLocation(949, 87);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(949, 94);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(949, 128);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(139); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:951:13: IDENT arguments
					{
					DebugLocation(951, 13);
					IDENT496=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression13022); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT496);

					DebugLocation(951, 19);
					PushFollow(Follow._arguments_in_primaryExpression13024);
					arguments497=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments497.Tree);


					{
					// AST REWRITE
					// elements: arguments, IDENT, genericTypeArgumentListSimplified
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 951:55: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(951, 59);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:951:59: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(951, 61);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(951, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(951, 79);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(951, 113);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:952:13: THIS arguments
					{
					DebugLocation(952, 13);
					THIS498=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression13077); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS498);

					DebugLocation(952, 18);
					PushFollow(Follow._arguments_in_primaryExpression13079);
					arguments499=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments499.Tree);


					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 952:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
					{
						DebugLocation(952, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:952:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(952, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS498, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(952, 117);
						adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
						DebugLocation(952, 151);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(140); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:955:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				{
				DebugLocation(955, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:955:9: ( THIS -> THIS )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:955:13: THIS
				{
				DebugLocation(955, 13);
				THIS500=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression13152); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THIS.Add(THIS500);



				{
				// AST REWRITE
				// elements: THIS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 955:57: -> THIS
				{
					DebugLocation(955, 61);
					adaptor.AddChild(root_0, stream_THIS.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(957, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:957:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				try
				{
					alt141 = dfa141.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:957:13: arguments
					{
					DebugLocation(957, 13);
					PushFollow(Follow._arguments_in_primaryExpression13220);
					arguments501=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments501.Tree);


					{
					// AST REWRITE
					// elements: arguments
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 957:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
					{
						DebugLocation(957, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:957:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(957, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(THIS_CONSTRUCTOR_CALL, THIS500, "THIS_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(957, 117);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(141); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:959:9: SUPER arguments
				{
				DebugLocation(959, 9);
				SUPER502=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13285); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER502);

				DebugLocation(959, 15);
				PushFollow(Follow._arguments_in_primaryExpression13287);
				arguments503=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments503.Tree);


				{
				// AST REWRITE
				// elements: arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 959:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
				{
					DebugLocation(959, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:959:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(959, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, SUPER502, "SUPER_CONSTRUCTOR_CALL"), root_1);

					DebugLocation(959, 120);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:960:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				{
				DebugLocation(960, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:960:9: ( SUPER DOT IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:960:13: SUPER DOT IDENT
				{
				DebugLocation(960, 13);
				SUPER504=(IToken)Match(input,SUPER,Follow._SUPER_in_primaryExpression13343); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUPER.Add(SUPER504);

				DebugLocation(960, 19);
				DOT505=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13345); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT505);

				DebugLocation(960, 23);
				IDENT506=(IToken)Match(input,IDENT,Follow._IDENT_in_primaryExpression13347); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT506);


				}

				DebugLocation(962, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, false);
				try
				{
					alt142 = dfa142.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:13: arguments
					{
					DebugLocation(962, 13);
					PushFollow(Follow._arguments_in_primaryExpression13371);
					arguments507=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments507.Tree);


					{
					// AST REWRITE
					// elements: arguments, IDENT, SUPER, DOT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 962:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
					{
						DebugLocation(962, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(962, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

						DebugLocation(962, 75);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:75: ^( DOT SUPER IDENT )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(962, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

						DebugLocation(962, 81);
						adaptor.AddChild(root_2, stream_SUPER.NextNode());
						DebugLocation(962, 87);
						adaptor.AddChild(root_2, stream_IDENT.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(962, 94);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:963:57: 
					{

					{
					// AST REWRITE
					// elements: SUPER, DOT, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 963:57: -> ^( DOT SUPER IDENT )
					{
						DebugLocation(963, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:963:61: ^( DOT SUPER IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(963, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(963, 67);
						adaptor.AddChild(root_1, stream_SUPER.NextNode());
						DebugLocation(963, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(142); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:965:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
				{
				DebugLocation(965, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:965:9: ( primitiveType -> primitiveType )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:965:13: primitiveType
				{
				DebugLocation(965, 13);
				PushFollow(Follow._primitiveType_in_primaryExpression13513);
				primitiveType508=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType508.Tree);


				{
				// AST REWRITE
				// elements: primitiveType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 965:57: -> primitiveType
				{
					DebugLocation(965, 61);
					adaptor.AddChild(root_0, stream_primitiveType.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(967, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:967:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, false);
					int LA143_1 = input.LA(1);

					if ((LA143_1==LBRACK))
					{
						alt143 = 1;
					}


					} finally { DebugExitDecision(143); }
					switch ( alt143 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:967:13: arrayDeclarator
						{
						DebugLocation(967, 13);
						PushFollow(Follow._arrayDeclarator_in_primaryExpression13572);
						arrayDeclarator509=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator509.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 967:57: -> ^( arrayDeclarator $primaryExpression)
						{
							DebugLocation(967, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:967:61: ^( arrayDeclarator $primaryExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(967, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(967, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						goto loop143;
					}
				}

				loop143:
					;

				} finally { DebugExitSubRule(143); }

				DebugLocation(969, 9);
				DOT510=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13635); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT510);

				DebugLocation(969, 13);
				CLASS511=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13637); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS511);



				{
				// AST REWRITE
				// elements: DOT, CLASS, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 969:57: -> ^( DOT $primaryExpression CLASS )
				{
					DebugLocation(969, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:969:61: ^( DOT $primaryExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(969, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(969, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(969, 86);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:970:9: VOID DOT CLASS
				{
				DebugLocation(970, 9);
				VOID512=(IToken)Match(input,VOID,Follow._VOID_in_primaryExpression13697); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VOID.Add(VOID512);

				DebugLocation(970, 14);
				DOT513=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression13699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT513);

				DebugLocation(970, 18);
				CLASS514=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression13701); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS514);



				{
				// AST REWRITE
				// elements: CLASS, DOT, VOID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 970:57: -> ^( DOT VOID CLASS )
				{
					DebugLocation(970, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:970:61: ^( DOT VOID CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(970, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(970, 67);
					adaptor.AddChild(root_1, stream_VOID.NextNode());
					DebugLocation(970, 72);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 108);
			LeaveRule("primaryExpression", 108);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 108, primaryExpression_StartIndex); }

		}
		DebugLocation(971, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_qualifiedIdentExpression();
	partial void LeaveRule_qualifiedIdentExpression();
	// $ANTLR start "qualifiedIdentExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:973:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
	[GrammarRule("qualifiedIdentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentExpression()
	{
		EnterRule_qualifiedIdentExpression();
		EnterRule("qualifiedIdentExpression", 109);
		TraceIn("qualifiedIdentExpression", 109);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedIdentExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);
		IToken DOT517 = default(IToken);
		IToken CLASS518 = default(IToken);
		IToken CLASS521 = default(IToken);
		IToken SUPER524 = default(IToken);
		IToken IDENT525 = default(IToken);
		IToken IDENT527 = default(IToken);
		IToken THIS529 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedIdentifier515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclarator516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified522 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression531 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree outerDot_tree = default(CommonTree);
		CommonTree Super_tree = default(CommonTree);
		CommonTree innerDot_tree = default(CommonTree);
		CommonTree DOT517_tree = default(CommonTree);
		CommonTree CLASS518_tree = default(CommonTree);
		CommonTree CLASS521_tree = default(CommonTree);
		CommonTree SUPER524_tree = default(CommonTree);
		CommonTree IDENT525_tree = default(CommonTree);
		CommonTree IDENT527_tree = default(CommonTree);
		CommonTree THIS529_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleITokenStream stream_SUPER=new RewriteRuleITokenStream(adaptor,"token SUPER");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_THIS=new RewriteRuleITokenStream(adaptor,"token THIS");
		RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
		try { DebugEnterRule(GrammarFileName, "qualifiedIdentExpression");
		DebugLocation(973, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:975:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:975:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			{
			DebugLocation(975, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:975:9: ( qualifiedIdentifier -> qualifiedIdentifier )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:975:13: qualifiedIdentifier
			{
			DebugLocation(975, 13);
			PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentExpression13781);
			qualifiedIdentifier515=qualifiedIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_qualifiedIdentifier.Add(qualifiedIdentifier515.Tree);


			{
			// AST REWRITE
			// elements: qualifiedIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 975:61: -> qualifiedIdentifier
			{
				DebugLocation(975, 65);
				adaptor.AddChild(root_0, stream_qualifiedIdentifier.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(978, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
			int alt149=4;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			try
			{
				alt149 = dfa149.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				{
				DebugLocation(978, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
				int cnt145=0;
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_1 = input.LA(1);

					if ((LA145_1==LBRACK))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:17: arrayDeclarator
						{
						DebugLocation(978, 17);
						PushFollow(Follow._arrayDeclarator_in_qualifiedIdentExpression13851);
						arrayDeclarator516=arrayDeclarator();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayDeclarator.Add(arrayDeclarator516.Tree);


						{
						// AST REWRITE
						// elements: arrayDeclarator, qualifiedIdentExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 978:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
						{
							DebugLocation(978, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:61: ^( arrayDeclarator $qualifiedIdentExpression)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(978, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot(stream_arrayDeclarator.NextNode(), root_1);

							DebugLocation(978, 80);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					default:
						if (cnt145 >= 1)
							goto loop145;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee145 = new EarlyExitException( 145, input );
						DebugRecognitionException(eee145);
						throw eee145;
					}
					cnt145++;
				}
				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(980, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:980:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:980:17: DOT CLASS
				{
				DebugLocation(980, 17);
				DOT517=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression13919); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT517);

				DebugLocation(980, 21);
				CLASS518=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression13921); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLASS.Add(CLASS518);



				{
				// AST REWRITE
				// elements: DOT, CLASS, qualifiedIdentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 980:57: -> ^( DOT $qualifiedIdentExpression CLASS )
				{
					DebugLocation(980, 61);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:980:61: ^( DOT $qualifiedIdentExpression CLASS )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(980, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

					DebugLocation(980, 68);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(980, 93);
					adaptor.AddChild(root_1, stream_CLASS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:13: arguments ( block )?
				{
				DebugLocation(982, 13);
				PushFollow(Follow._arguments_in_qualifiedIdentExpression13991);
				arguments519=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments519.Tree);
				DebugLocation(982, 23);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: ( block )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				try
				{
					alt146 = dfa146.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: block
					{
					DebugLocation(982, 23);
					PushFollow(Follow._block_in_qualifiedIdentExpression13993);
					block520=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_block.Add(block520.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(146); }



				{
				// AST REWRITE
				// elements: qualifiedIdentifier, arguments
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 982:63: -> ^( METHOD_CALL qualifiedIdentifier arguments )
				{
					DebugLocation(982, 67);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:67: ^( METHOD_CALL qualifiedIdentifier arguments )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(982, 69);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(982, 81);
					adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
					DebugLocation(982, 101);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:983:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				{
				DebugLocation(983, 21);
				outerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression14054); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(outerDot);

				DebugLocation(984, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:984:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
				int alt148=5;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				switch (input.LA(1))
				{
				case CLASS:
					{
					alt148 = 1;
					}
					break;
				case LESS_THAN:
					{
					alt148 = 2;
					}
					break;
				case THIS:
					{
					alt148 = 3;
					}
					break;
				case SUPER:
					{
					alt148 = 4;
					}
					break;
				case NEW:
					{
					alt148 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 148, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:984:17: CLASS
					{
					DebugLocation(984, 17);
					CLASS521=(IToken)Match(input,CLASS,Follow._CLASS_in_qualifiedIdentExpression14072); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLASS.Add(CLASS521);



					{
					// AST REWRITE
					// elements: DOT, qualifiedIdentifier, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 984:57: -> ^( DOT qualifiedIdentifier CLASS )
					{
						DebugLocation(984, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:984:61: ^( DOT qualifiedIdentifier CLASS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(984, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(984, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(984, 87);
						adaptor.AddChild(root_1, stream_CLASS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:985:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					{
					DebugLocation(985, 17);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_qualifiedIdentExpression14135);
					genericTypeArgumentListSimplified522=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified522.Tree);
					DebugLocation(986, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:986:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
					int alt147=3;
					try { DebugEnterSubRule(147);
					try { DebugEnterDecision(147, false);
					int LA147_1 = input.LA(1);

					if ((LA147_1==SUPER))
					{
						int LA147_2 = input.LA(2);

						if ((LA147_2==DOT))
						{
							alt147 = 2;
						}
						else if ((LA147_2==LPAREN))
						{
							alt147 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 147, 1, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA147_1==IDENT))
					{
						alt147 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(147); }
					switch (alt147)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:986:21: Super= SUPER arguments
						{
						DebugLocation(986, 26);
						Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14160); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(Super);

						DebugLocation(986, 33);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14162);
						arguments523=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments523.Tree);


						{
						// AST REWRITE
						// elements: arguments, qualifiedIdentifier, genericTypeArgumentListSimplified
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 986:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(986, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:986:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(986, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

							DebugLocation(986, 120);
							adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
							DebugLocation(986, 140);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(986, 174);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:987:21: SUPER innerDot= DOT IDENT arguments
						{
						DebugLocation(987, 21);
						SUPER524=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14212); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SUPER.Add(SUPER524);

						DebugLocation(987, 35);
						innerDot=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedIdentExpression14216); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DOT.Add(innerDot);

						DebugLocation(987, 40);
						IDENT525=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14218); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT525);

						DebugLocation(987, 46);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14220);
						arguments526=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments526.Tree);


						{
						// AST REWRITE
						// elements: SUPER, outerDot, arguments, innerDot, IDENT, genericTypeArgumentListSimplified, qualifiedIdentifier
						// token labels: outerDot, innerDot
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_outerDot=new RewriteRuleITokenStream(adaptor,"token outerDot",outerDot);
						RewriteRuleITokenStream stream_innerDot=new RewriteRuleITokenStream(adaptor,"token innerDot",innerDot);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 987:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(987, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:987:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(987, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(987, 75);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:987:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(987, 78);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_innerDot.NextNode(), root_2);

							DebugLocation(987, 87);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:987:87: ^( $outerDot qualifiedIdentifier SUPER )
							{
							CommonTree root_3 = (CommonTree)adaptor.Nil();
							DebugLocation(987, 90);
							root_3 = (CommonTree)adaptor.BecomeRoot(stream_outerDot.NextNode(), root_3);

							DebugLocation(987, 99);
							adaptor.AddChild(root_3, stream_qualifiedIdentifier.NextTree());
							DebugLocation(987, 119);
							adaptor.AddChild(root_3, stream_SUPER.NextNode());

							adaptor.AddChild(root_2, root_3);
							}
							DebugLocation(987, 126);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(987, 133);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(987, 167);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:988:21: IDENT arguments
						{
						DebugLocation(988, 21);
						IDENT527=(IToken)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentExpression14270); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDENT.Add(IDENT527);

						DebugLocation(988, 27);
						PushFollow(Follow._arguments_in_qualifiedIdentExpression14272);
						arguments528=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arguments.Add(arguments528.Tree);


						{
						// AST REWRITE
						// elements: qualifiedIdentifier, IDENT, DOT, genericTypeArgumentListSimplified, arguments
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 988:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
						{
							DebugLocation(988, 61);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:988:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(988, 63);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

							DebugLocation(988, 75);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:988:75: ^( DOT qualifiedIdentifier IDENT )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(988, 77);
							root_2 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_2);

							DebugLocation(988, 81);
							adaptor.AddChild(root_2, stream_qualifiedIdentifier.NextTree());
							DebugLocation(988, 101);
							adaptor.AddChild(root_2, stream_IDENT.NextNode());

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(988, 108);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());
							DebugLocation(988, 142);
							adaptor.AddChild(root_1, stream_arguments.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(147); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:990:17: THIS
					{
					DebugLocation(990, 17);
					THIS529=(IToken)Match(input,THIS,Follow._THIS_in_qualifiedIdentExpression14347); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_THIS.Add(THIS529);



					{
					// AST REWRITE
					// elements: qualifiedIdentifier, DOT, THIS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 990:57: -> ^( DOT qualifiedIdentifier THIS )
					{
						DebugLocation(990, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:990:61: ^( DOT qualifiedIdentifier THIS )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(990, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(990, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(990, 87);
						adaptor.AddChild(root_1, stream_THIS.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:991:17: Super= SUPER arguments
					{
					DebugLocation(991, 22);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_qualifiedIdentExpression14413); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUPER.Add(Super);

					DebugLocation(991, 29);
					PushFollow(Follow._arguments_in_qualifiedIdentExpression14415);
					arguments530=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments530.Tree);


					{
					// AST REWRITE
					// elements: arguments, qualifiedIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 991:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
					{
						DebugLocation(991, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:991:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(991, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

						DebugLocation(991, 120);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(991, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:992:17: innerNewExpression
					{
					DebugLocation(992, 17);
					PushFollow(Follow._innerNewExpression_in_qualifiedIdentExpression14463);
					innerNewExpression531=innerNewExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerNewExpression.Add(innerNewExpression531.Tree);


					{
					// AST REWRITE
					// elements: DOT, innerNewExpression, qualifiedIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 992:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
					{
						DebugLocation(992, 61);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:992:61: ^( DOT qualifiedIdentifier innerNewExpression )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(992, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.NextNode(), root_1);

						DebugLocation(992, 67);
						adaptor.AddChild(root_1, stream_qualifiedIdentifier.NextTree());
						DebugLocation(992, 87);
						adaptor.AddChild(root_1, stream_innerNewExpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(148); }


				}
				break;

			}
			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedIdentExpression", 109);
			LeaveRule("qualifiedIdentExpression", 109);
			LeaveRule_qualifiedIdentExpression();
			if (state.backtracking > 0) { Memoize(input, 109, qualifiedIdentExpression_StartIndex); }

		}
		DebugLocation(995, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentExpression"); }
		return retval;

	}
	// $ANTLR end "qualifiedIdentExpression"

	partial void EnterRule_mapDeclaration();
	partial void LeaveRule_mapDeclaration();
	// $ANTLR start "mapDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:996:1: mapDeclaration : LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY ;
	[GrammarRule("mapDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> mapDeclaration()
	{
		EnterRule_mapDeclaration();
		EnterRule("mapDeclaration", 110);
		TraceIn("mapDeclaration", 110);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mapDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY532 = default(IToken);
		IToken string_literal534 = default(IToken);
		IToken COMMA536 = default(IToken);
		IToken string_literal538 = default(IToken);
		IToken RCURLY540 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression533 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression539 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY532_tree = default(CommonTree);
		CommonTree string_literal534_tree = default(CommonTree);
		CommonTree COMMA536_tree = default(CommonTree);
		CommonTree string_literal538_tree = default(CommonTree);
		CommonTree RCURLY540_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mapDeclaration");
		DebugLocation(996, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:997:2: ( LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:998:2: LCURLY expression '=>' expression ( COMMA expression '=>' expression )* RCURLY
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(998, 2);
			LCURLY532=(IToken)Match(input,LCURLY,Follow._LCURLY_in_mapDeclaration14533); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LCURLY532_tree = (CommonTree)adaptor.Create(LCURLY532);
			adaptor.AddChild(root_0, LCURLY532_tree);
			}
			DebugLocation(998, 9);
			PushFollow(Follow._expression_in_mapDeclaration14535);
			expression533=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression533.Tree);
			DebugLocation(998, 20);
			string_literal534=(IToken)Match(input,194,Follow._194_in_mapDeclaration14537); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal534_tree = (CommonTree)adaptor.Create(string_literal534);
			adaptor.AddChild(root_0, string_literal534_tree);
			}
			DebugLocation(998, 25);
			PushFollow(Follow._expression_in_mapDeclaration14539);
			expression535=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression535.Tree);
			DebugLocation(998, 36);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:998:36: ( COMMA expression '=>' expression )*
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=2;
				try { DebugEnterDecision(150, false);
				int LA150_1 = input.LA(1);

				if ((LA150_1==COMMA))
				{
					alt150 = 1;
				}


				} finally { DebugExitDecision(150); }
				switch ( alt150 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:998:37: COMMA expression '=>' expression
					{
					DebugLocation(998, 37);
					COMMA536=(IToken)Match(input,COMMA,Follow._COMMA_in_mapDeclaration14542); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA536_tree = (CommonTree)adaptor.Create(COMMA536);
					adaptor.AddChild(root_0, COMMA536_tree);
					}
					DebugLocation(998, 44);
					PushFollow(Follow._expression_in_mapDeclaration14545);
					expression537=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression537.Tree);
					DebugLocation(998, 55);
					string_literal538=(IToken)Match(input,194,Follow._194_in_mapDeclaration14547); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal538_tree = (CommonTree)adaptor.Create(string_literal538);
					adaptor.AddChild(root_0, string_literal538_tree);
					}
					DebugLocation(998, 60);
					PushFollow(Follow._expression_in_mapDeclaration14549);
					expression539=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression539.Tree);

					}
					break;

				default:
					goto loop150;
				}
			}

			loop150:
				;

			} finally { DebugExitSubRule(150); }

			DebugLocation(998, 74);
			RCURLY540=(IToken)Match(input,RCURLY,Follow._RCURLY_in_mapDeclaration14554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RCURLY540_tree = (CommonTree)adaptor.Create(RCURLY540);
			adaptor.AddChild(root_0, RCURLY540_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mapDeclaration", 110);
			LeaveRule("mapDeclaration", 110);
			LeaveRule_mapDeclaration();
			if (state.backtracking > 0) { Memoize(input, 110, mapDeclaration_StartIndex); }

		}
		DebugLocation(999, 0);
		} finally { DebugExitRule(GrammarFileName, "mapDeclaration"); }
		return retval;

	}
	// $ANTLR end "mapDeclaration"

	partial void EnterRule_setDeclaration();
	partial void LeaveRule_setDeclaration();
	// $ANTLR start "setDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1000:1: setDeclaration : LCURLY ( expression )? ( COMMA expression )* RCURLY ;
	[GrammarRule("setDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> setDeclaration()
	{
		EnterRule_setDeclaration();
		EnterRule("setDeclaration", 111);
		TraceIn("setDeclaration", 111);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int setDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LCURLY541 = default(IToken);
		IToken COMMA543 = default(IToken);
		IToken RCURLY545 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression544 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LCURLY541_tree = default(CommonTree);
		CommonTree COMMA543_tree = default(CommonTree);
		CommonTree RCURLY545_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "setDeclaration");
		DebugLocation(1000, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1001:2: ( LCURLY ( expression )? ( COMMA expression )* RCURLY )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1002:2: LCURLY ( expression )? ( COMMA expression )* RCURLY
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1002, 2);
			LCURLY541=(IToken)Match(input,LCURLY,Follow._LCURLY_in_setDeclaration14564); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LCURLY541_tree = (CommonTree)adaptor.Create(LCURLY541);
			adaptor.AddChild(root_0, LCURLY541_tree);
			}
			DebugLocation(1002, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1002:9: ( expression )?
			int alt151=2;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==BOOLEAN||LA151_1==BYTE||(LA151_1>=CHAR && LA151_1<=CHARACTER_LITERAL)||(LA151_1>=DEC && LA151_1<=DECIMAL_LITERAL)||LA151_1==DOUBLE||LA151_1==FALSE||(LA151_1>=FLOAT && LA151_1<=FLOATING_POINT_LITERAL)||(LA151_1>=HEX_LITERAL && LA151_1<=IDENT)||LA151_1==INC||LA151_1==INT||LA151_1==LESS_THAN||LA151_1==LOGICAL_NOT||(LA151_1>=LONG && LA151_1<=LPAREN)||LA151_1==MINUS||(LA151_1>=NEW && LA151_1<=NOT)||LA151_1==NULL||LA151_1==OCTAL_LITERAL||LA151_1==PLUS||(LA151_1>=SHORT && LA151_1<=SOQL_LITERAL)||(LA151_1>=STRING_LITERAL && LA151_1<=SUPER)||LA151_1==THIS||LA151_1==TRUE||LA151_1==VOID))
			{
				alt151 = 1;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1002:9: expression
				{
				DebugLocation(1002, 9);
				PushFollow(Follow._expression_in_setDeclaration14566);
				expression542=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression542.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(151); }

			DebugLocation(1002, 21);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1002:21: ( COMMA expression )*
			try { DebugEnterSubRule(152);
			while (true)
			{
				int alt152=2;
				try { DebugEnterDecision(152, false);
				int LA152_1 = input.LA(1);

				if ((LA152_1==COMMA))
				{
					alt152 = 1;
				}


				} finally { DebugExitDecision(152); }
				switch ( alt152 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1002:22: COMMA expression
					{
					DebugLocation(1002, 22);
					COMMA543=(IToken)Match(input,COMMA,Follow._COMMA_in_setDeclaration14570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA543_tree = (CommonTree)adaptor.Create(COMMA543);
					adaptor.AddChild(root_0, COMMA543_tree);
					}
					DebugLocation(1002, 29);
					PushFollow(Follow._expression_in_setDeclaration14573);
					expression544=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression544.Tree);

					}
					break;

				default:
					goto loop152;
				}
			}

			loop152:
				;

			} finally { DebugExitSubRule(152); }

			DebugLocation(1002, 43);
			RCURLY545=(IToken)Match(input,RCURLY,Follow._RCURLY_in_setDeclaration14578); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RCURLY545_tree = (CommonTree)adaptor.Create(RCURLY545);
			adaptor.AddChild(root_0, RCURLY545_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setDeclaration", 111);
			LeaveRule("setDeclaration", 111);
			LeaveRule_setDeclaration();
			if (state.backtracking > 0) { Memoize(input, 111, setDeclaration_StartIndex); }

		}
		DebugLocation(1003, 0);
		} finally { DebugExitRule(GrammarFileName, "setDeclaration"); }
		return retval;

	}
	// $ANTLR end "setDeclaration"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1004:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 112);
		TraceIn("newExpression", 112);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW546 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primitiveType547 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction548 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified549 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> qualifiedTypeIdentSimplified550 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mapDeclaration551 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setDeclaration552 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction553 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody555 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW546_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleSubtreeStream stream_mapDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule mapDeclaration");
		RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_setDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule setDeclaration");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(1004, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1005:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1005:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			{
			DebugLocation(1005, 9);
			NEW546=(IToken)Match(input,NEW,Follow._NEW_in_newExpression14592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW546);

			DebugLocation(1006, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1006:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==BOOLEAN||LA156_1==BYTE||LA156_1==CHAR||LA156_1==DOUBLE||LA156_1==FLOAT||LA156_1==INT||LA156_1==LONG||LA156_1==SHORT))
			{
				alt156 = 1;
			}
			else if ((LA156_1==IDENT||LA156_1==LESS_THAN))
			{
				alt156 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1007:13: primitiveType newArrayConstruction
				{
				DebugLocation(1007, 13);
				PushFollow(Follow._primitiveType_in_newExpression14621);
				primitiveType547=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveType.Add(primitiveType547.Tree);
				DebugLocation(1007, 27);
				PushFollow(Follow._newArrayConstruction_in_newExpression14623);
				newArrayConstruction548=newArrayConstruction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction548.Tree);


				{
				// AST REWRITE
				// elements: primitiveType, newArrayConstruction
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 1008:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
				{
					DebugLocation(1008, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1008:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(1008, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW546, "STATIC_ARRAY_CREATOR"), root_1);

					DebugLocation(1008, 70);
					adaptor.AddChild(root_1, stream_primitiveType.NextTree());
					DebugLocation(1008, 84);
					adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1009:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				{
				DebugLocation(1009, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1009:13: ( genericTypeArgumentListSimplified )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, false);
				int LA153_1 = input.LA(1);

				if ((LA153_1==LESS_THAN))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1009:13: genericTypeArgumentListSimplified
					{
					DebugLocation(1009, 13);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_newExpression14667);
					genericTypeArgumentListSimplified549=genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified549.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(1009, 48);
				PushFollow(Follow._qualifiedTypeIdentSimplified_in_newExpression14670);
				qualifiedTypeIdentSimplified550=qualifiedTypeIdentSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.Add(qualifiedTypeIdentSimplified550.Tree);
				DebugLocation(1010, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1010:13: ( mapDeclaration -> ^( MAP_INITIALIZER mapDeclaration ) | setDeclaration -> ^( SET_INITIALIZER setDeclaration ) | newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
				int alt155=4;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, false);
				switch (input.LA(1))
				{
				case LCURLY:
					{
					int LA155_2 = input.LA(2);

					if ((EvaluatePredicate(synpred251_Java_fragment)))
					{
						alt155 = 1;
					}
					else if ((EvaluatePredicate(synpred252_Java_fragment)))
					{
						alt155 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 155, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case LBRACK:
					{
					alt155 = 3;
					}
					break;
				case LPAREN:
					{
					alt155 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 155, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1012:10: mapDeclaration
					{
					DebugLocation(1012, 10);
					PushFollow(Follow._mapDeclaration_in_newExpression14708);
					mapDeclaration551=mapDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mapDeclaration.Add(mapDeclaration551.Tree);


					{
					// AST REWRITE
					// elements: mapDeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1012:25: -> ^( MAP_INITIALIZER mapDeclaration )
					{
						DebugLocation(1012, 28);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1012:28: ^( MAP_INITIALIZER mapDeclaration )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1012, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MAP_INITIALIZER, "MAP_INITIALIZER"), root_1);

						DebugLocation(1012, 46);
						adaptor.AddChild(root_1, stream_mapDeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1013:10: setDeclaration
					{
					DebugLocation(1013, 10);
					PushFollow(Follow._setDeclaration_in_newExpression14727);
					setDeclaration552=setDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setDeclaration.Add(setDeclaration552.Tree);


					{
					// AST REWRITE
					// elements: setDeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1013:25: -> ^( SET_INITIALIZER setDeclaration )
					{
						DebugLocation(1013, 28);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1013:28: ^( SET_INITIALIZER setDeclaration )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1013, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SET_INITIALIZER, "SET_INITIALIZER"), root_1);

						DebugLocation(1013, 46);
						adaptor.AddChild(root_1, stream_setDeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1014:15: newArrayConstruction
					{
					DebugLocation(1014, 15);
					PushFollow(Follow._newArrayConstruction_in_newExpression14751);
					newArrayConstruction553=newArrayConstruction();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_newArrayConstruction.Add(newArrayConstruction553.Tree);


					{
					// AST REWRITE
					// elements: newArrayConstruction, qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1015:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
					{
						DebugLocation(1015, 21);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1015:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1015, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATIC_ARRAY_CREATOR, NEW546, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1015, 74);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1015:74: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1015, 74);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1015, 109);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1015, 138);
						adaptor.AddChild(root_1, stream_newArrayConstruction.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1016:17: arguments ( classBody )?
					{
					DebugLocation(1016, 17);
					PushFollow(Follow._arguments_in_newExpression14816);
					arguments554=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments554.Tree);
					DebugLocation(1016, 27);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1016:27: ( classBody )?
					int alt154=2;
					try { DebugEnterSubRule(154);
					try { DebugEnterDecision(154, false);
					try
					{
						alt154 = dfa154.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(154); }
					switch (alt154)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1016:27: classBody
						{
						DebugLocation(1016, 27);
						PushFollow(Follow._classBody_in_newExpression14818);
						classBody555=classBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_classBody.Add(classBody555.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(154); }



					{
					// AST REWRITE
					// elements: genericTypeArgumentListSimplified, classBody, arguments, qualifiedTypeIdentSimplified
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 1017:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
					{
						DebugLocation(1017, 21);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1017:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(1017, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW546, "STATIC_ARRAY_CREATOR"), root_1);

						DebugLocation(1017, 76);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1017:76: ( genericTypeArgumentListSimplified )?
						if (stream_genericTypeArgumentListSimplified.HasNext)
						{
							DebugLocation(1017, 76);
							adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

						}
						stream_genericTypeArgumentListSimplified.Reset();
						DebugLocation(1017, 111);
						adaptor.AddChild(root_1, stream_qualifiedTypeIdentSimplified.NextTree());
						DebugLocation(1017, 140);
						adaptor.AddChild(root_1, stream_arguments.NextTree());
						DebugLocation(1017, 150);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1017:150: ( classBody )?
						if (stream_classBody.HasNext)
						{
							DebugLocation(1017, 150);
							adaptor.AddChild(root_1, stream_classBody.NextTree());

						}
						stream_classBody.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 112);
			LeaveRule("newExpression", 112);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 112, newExpression_StartIndex); }

		}
		DebugLocation(1020, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1022:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
	[GrammarRule("innerNewExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 113);
		TraceIn("innerNewExpression", 113);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerNewExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEW556 = default(IToken);
		IToken IDENT558 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> genericTypeArgumentListSimplified557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arguments559 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> classBody560 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEW556_tree = default(CommonTree);
		CommonTree IDENT558_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
		RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(1022, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
			{
			DebugLocation(1023, 9);
			NEW556=(IToken)Match(input,NEW,Follow._NEW_in_innerNewExpression14915); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEW.Add(NEW556);

			DebugLocation(1023, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:13: ( genericTypeArgumentListSimplified )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==LESS_THAN))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:13: genericTypeArgumentListSimplified
				{
				DebugLocation(1023, 13);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_innerNewExpression14917);
				genericTypeArgumentListSimplified557=genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_genericTypeArgumentListSimplified.Add(genericTypeArgumentListSimplified557.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1023, 48);
			IDENT558=(IToken)Match(input,IDENT,Follow._IDENT_in_innerNewExpression14920); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT558);

			DebugLocation(1023, 54);
			PushFollow(Follow._arguments_in_innerNewExpression14922);
			arguments559=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_arguments.Add(arguments559.Tree);
			DebugLocation(1023, 64);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:64: ( classBody )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			try
			{
				alt158 = dfa158.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:64: classBody
				{
				DebugLocation(1023, 64);
				PushFollow(Follow._classBody_in_innerNewExpression14924);
				classBody560=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classBody.Add(classBody560.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(158); }



			{
			// AST REWRITE
			// elements: classBody, IDENT, arguments, genericTypeArgumentListSimplified
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1024:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
			{
				DebugLocation(1024, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1024:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1024, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS_CONSTRUCTOR_CALL, NEW556, "STATIC_ARRAY_CREATOR"), root_1);

				DebugLocation(1024, 68);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1024:68: ( genericTypeArgumentListSimplified )?
				if (stream_genericTypeArgumentListSimplified.HasNext)
				{
					DebugLocation(1024, 68);
					adaptor.AddChild(root_1, stream_genericTypeArgumentListSimplified.NextTree());

				}
				stream_genericTypeArgumentListSimplified.Reset();
				DebugLocation(1024, 103);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(1024, 109);
				adaptor.AddChild(root_1, stream_arguments.NextTree());
				DebugLocation(1024, 119);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1024:119: ( classBody )?
				if (stream_classBody.HasNext)
				{
					DebugLocation(1024, 119);
					adaptor.AddChild(root_1, stream_classBody.NextTree());

				}
				stream_classBody.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerNewExpression", 113);
			LeaveRule("innerNewExpression", 113);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 113, innerNewExpression_StartIndex); }

		}
		DebugLocation(1025, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return retval;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1027:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private AstParserRuleReturnScope<CommonTree, IToken> newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 114);
		TraceIn("newArrayConstruction", 114);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newArrayConstruction_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LBRACK563 = default(IToken);
		IToken RBRACK565 = default(IToken);
		IToken LBRACK566 = default(IToken);
		IToken RBRACK568 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayInitializer562 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression567 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> arrayDeclaratorList569 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LBRACK563_tree = default(CommonTree);
		CommonTree RBRACK565_tree = default(CommonTree);
		CommonTree LBRACK566_tree = default(CommonTree);
		CommonTree RBRACK568_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(1027, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1028:5: ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? )
			int alt161=2;
			try { DebugEnterDecision(161, false);
			int LA161_1 = input.LA(1);

			if ((LA161_1==LBRACK))
			{
				int LA161_2 = input.LA(2);

				if ((LA161_2==RBRACK))
				{
					alt161 = 1;
				}
				else if ((LA161_2==BOOLEAN||LA161_2==BYTE||(LA161_2>=CHAR && LA161_2<=CHARACTER_LITERAL)||(LA161_2>=DEC && LA161_2<=DECIMAL_LITERAL)||LA161_2==DOUBLE||LA161_2==FALSE||(LA161_2>=FLOAT && LA161_2<=FLOATING_POINT_LITERAL)||(LA161_2>=HEX_LITERAL && LA161_2<=IDENT)||LA161_2==INC||LA161_2==INT||LA161_2==LESS_THAN||LA161_2==LOGICAL_NOT||(LA161_2>=LONG && LA161_2<=LPAREN)||LA161_2==MINUS||(LA161_2>=NEW && LA161_2<=NOT)||LA161_2==NULL||LA161_2==OCTAL_LITERAL||LA161_2==PLUS||(LA161_2>=SHORT && LA161_2<=SOQL_LITERAL)||(LA161_2>=STRING_LITERAL && LA161_2<=SUPER)||LA161_2==THIS||LA161_2==TRUE||LA161_2==VOID))
				{
					alt161 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 161, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1028:9: arrayDeclaratorList arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1028, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction14970);
				arrayDeclaratorList561=arrayDeclaratorList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList561.Tree);
				DebugLocation(1028, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction14972);
				arrayInitializer562=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer562.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:9: LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1029, 15);
				LBRACK563=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14982); if (state.failed) return retval;
				DebugLocation(1029, 17);
				PushFollow(Follow._expression_in_newArrayConstruction14985);
				expression564=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression564.Tree);
				DebugLocation(1029, 34);
				RBRACK565=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14987); if (state.failed) return retval;
				DebugLocation(1029, 36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:36: ( LBRACK ! expression RBRACK !)*
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					try
					{
						alt159 = dfa159.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(159); }
					switch ( alt159 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:37: LBRACK ! expression RBRACK !
						{
						DebugLocation(1029, 43);
						LBRACK566=(IToken)Match(input,LBRACK,Follow._LBRACK_in_newArrayConstruction14991); if (state.failed) return retval;
						DebugLocation(1029, 45);
						PushFollow(Follow._expression_in_newArrayConstruction14994);
						expression567=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression567.Tree);
						DebugLocation(1029, 62);
						RBRACK568=(IToken)Match(input,RBRACK,Follow._RBRACK_in_newArrayConstruction14996); if (state.failed) return retval;

						}
						break;

					default:
						goto loop159;
					}
				}

				loop159:
					;

				} finally { DebugExitSubRule(159); }

				DebugLocation(1029, 66);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:66: ( arrayDeclaratorList )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, false);
				int LA160_1 = input.LA(1);

				if ((LA160_1==LBRACK))
				{
					int LA160_2 = input.LA(2);

					if ((LA160_2==RBRACK))
					{
						alt160 = 1;
					}
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:66: arrayDeclaratorList
					{
					DebugLocation(1029, 66);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction15001);
					arrayDeclaratorList569=arrayDeclaratorList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaratorList569.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(160); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newArrayConstruction", 114);
			LeaveRule("newArrayConstruction", 114);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 114, newArrayConstruction_StartIndex); }

		}
		DebugLocation(1030, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return retval;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1032:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 115);
		TraceIn("arguments", 115);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN570 = default(IToken);
		IToken RPAREN572 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList571 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN570_tree = default(CommonTree);
		CommonTree RPAREN572_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1032, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1033:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1033:9: LPAREN ( expressionList )? RPAREN
			{
			DebugLocation(1033, 9);
			LPAREN570=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments15021); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN570);

			DebugLocation(1033, 16);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1033:16: ( expressionList )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if ((LA162_1==BOOLEAN||LA162_1==BYTE||(LA162_1>=CHAR && LA162_1<=CHARACTER_LITERAL)||(LA162_1>=DEC && LA162_1<=DECIMAL_LITERAL)||LA162_1==DOUBLE||LA162_1==FALSE||(LA162_1>=FLOAT && LA162_1<=FLOATING_POINT_LITERAL)||(LA162_1>=HEX_LITERAL && LA162_1<=IDENT)||LA162_1==INC||LA162_1==INT||LA162_1==LESS_THAN||LA162_1==LOGICAL_NOT||(LA162_1>=LONG && LA162_1<=LPAREN)||LA162_1==MINUS||(LA162_1>=NEW && LA162_1<=NOT)||LA162_1==NULL||LA162_1==OCTAL_LITERAL||LA162_1==PLUS||(LA162_1>=SHORT && LA162_1<=SOQL_LITERAL)||(LA162_1>=STRING_LITERAL && LA162_1<=SUPER)||LA162_1==THIS||LA162_1==TRUE||LA162_1==VOID))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1033:16: expressionList
				{
				DebugLocation(1033, 16);
				PushFollow(Follow._expressionList_in_arguments15023);
				expressionList571=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expressionList.Add(expressionList571.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(1033, 32);
			RPAREN572=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments15026); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN572);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 1034:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
			{
				DebugLocation(1034, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1034:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(1034, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, LPAREN570, "ARGUMENT_LIST"), root_1);

				DebugLocation(1034, 55);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1034:55: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(1034, 55);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 115);
			LeaveRule("arguments", 115);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 115, arguments_StartIndex); }

		}
		DebugLocation(1035, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1037:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | SOQL_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 116);
		TraceIn("literal", 116);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set573 = default(IToken);

		CommonTree set573_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1037, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1038:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | SOQL_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1038, 5);

			set573=(IToken)input.LT(1);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==SOQL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set573));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 116);
			LeaveRule("literal", 116);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 116, literal_StartIndex); }

		}
		DebugLocation(1048, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_propertyDeclaration();
	partial void LeaveRule_propertyDeclaration();
	// $ANTLR start "propertyDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1050:1: propertyDeclaration : ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) );
	[GrammarRule("propertyDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> propertyDeclaration()
	{
		EnterRule_propertyDeclaration();
		EnterRule("propertyDeclaration", 117);
		TraceIn("propertyDeclaration", 117);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int propertyDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal574 = default(IToken);
		IToken SEMI577 = default(IToken);
		IToken SEMI581 = default(IToken);
		IToken char_literal583 = default(IToken);
		IToken char_literal584 = default(IToken);
		IToken SEMI587 = default(IToken);
		IToken SEMI591 = default(IToken);
		IToken char_literal593 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> modifier575 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> getRule576 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block578 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier579 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setRule580 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier585 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> setRule586 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block588 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modifier589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> getRule590 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block592 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal574_tree = default(CommonTree);
		CommonTree SEMI577_tree = default(CommonTree);
		CommonTree SEMI581_tree = default(CommonTree);
		CommonTree char_literal583_tree = default(CommonTree);
		CommonTree char_literal584_tree = default(CommonTree);
		CommonTree SEMI587_tree = default(CommonTree);
		CommonTree SEMI591_tree = default(CommonTree);
		CommonTree char_literal593_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "propertyDeclaration");
		DebugLocation(1050, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1051:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) )
			int alt173=2;
			try { DebugEnterDecision(173, false);
			int LA173_1 = input.LA(1);

			if ((LA173_1==LCURLY))
			{
				int LA173_2 = input.LA(2);

				if ((EvaluatePredicate(synpred275_Java_fragment)))
				{
					alt173 = 1;
				}
				else if ((true))
				{
					alt173 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 173, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 173, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(173); }
			switch (alt173)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1052, 2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
				{
				DebugLocation(1052, 3);
				char_literal574=(IToken)Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration15170); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal574_tree = (CommonTree)adaptor.Create(char_literal574);
				adaptor.AddChild(root_0, char_literal574_tree);
				}
				DebugLocation(1052, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:7: ( modifier )?
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_1 = input.LA(1);

				if ((LA163_1==ABSTRACT||LA163_1==AT||LA163_1==FINAL||LA163_1==GLOBAL||LA163_1==NATIVE||LA163_1==OVERRIDE||LA163_1==PRIVATE||(LA163_1>=PROTECTED && LA163_1<=PUBLIC)||LA163_1==STATIC||LA163_1==STRICTFP||(LA163_1>=SYNCHRONIZED && LA163_1<=TEST_METHOD)||LA163_1==TRANSIENT||LA163_1==VIRTUAL||LA163_1==VOLATILE||(LA163_1>=WITHOUT_SHARING && LA163_1<=WITH_SHARING)))
				{
					alt163 = 1;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:7: modifier
					{
					DebugLocation(1052, 7);
					PushFollow(Follow._modifier_in_propertyDeclaration15172);
					modifier575=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier575.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(163); }

				DebugLocation(1052, 17);
				PushFollow(Follow._getRule_in_propertyDeclaration15175);
				getRule576=getRule();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, getRule576.Tree);
				DebugLocation(1052, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:25: ( SEMI | block )
				int alt164=2;
				try { DebugEnterSubRule(164);
				try { DebugEnterDecision(164, false);
				int LA164_1 = input.LA(1);

				if ((LA164_1==SEMI))
				{
					alt164 = 1;
				}
				else if ((LA164_1==LCURLY))
				{
					alt164 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 164, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(164); }
				switch (alt164)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:26: SEMI
					{
					DebugLocation(1052, 26);
					SEMI577=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15178); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI577_tree = (CommonTree)adaptor.Create(SEMI577);
					adaptor.AddChild(root_0, SEMI577_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:31: block
					{
					DebugLocation(1052, 31);
					PushFollow(Follow._block_in_propertyDeclaration15180);
					block578=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block578.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(164); }

				DebugLocation(1052, 38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:38: ( ( modifier )? setRule ( SEMI | block ) )?
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_1 = input.LA(1);

				if ((LA167_1==ABSTRACT||LA167_1==AT||LA167_1==FINAL||LA167_1==GLOBAL||LA167_1==IDENT||LA167_1==NATIVE||LA167_1==OVERRIDE||LA167_1==PRIVATE||(LA167_1>=PROTECTED && LA167_1<=PUBLIC)||LA167_1==STATIC||LA167_1==STRICTFP||(LA167_1>=SYNCHRONIZED && LA167_1<=TEST_METHOD)||LA167_1==TRANSIENT||LA167_1==VIRTUAL||LA167_1==VOLATILE||(LA167_1>=WITHOUT_SHARING && LA167_1<=WITH_SHARING)))
				{
					alt167 = 1;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: ( modifier )? setRule ( SEMI | block )
					{
					DebugLocation(1052, 39);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: ( modifier )?
					int alt165=2;
					try { DebugEnterSubRule(165);
					try { DebugEnterDecision(165, false);
					int LA165_1 = input.LA(1);

					if ((LA165_1==ABSTRACT||LA165_1==AT||LA165_1==FINAL||LA165_1==GLOBAL||LA165_1==NATIVE||LA165_1==OVERRIDE||LA165_1==PRIVATE||(LA165_1>=PROTECTED && LA165_1<=PUBLIC)||LA165_1==STATIC||LA165_1==STRICTFP||(LA165_1>=SYNCHRONIZED && LA165_1<=TEST_METHOD)||LA165_1==TRANSIENT||LA165_1==VIRTUAL||LA165_1==VOLATILE||(LA165_1>=WITHOUT_SHARING && LA165_1<=WITH_SHARING)))
					{
						alt165 = 1;
					}
					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: modifier
						{
						DebugLocation(1052, 39);
						PushFollow(Follow._modifier_in_propertyDeclaration15184);
						modifier579=modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifier579.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(165); }

					DebugLocation(1052, 49);
					PushFollow(Follow._setRule_in_propertyDeclaration15187);
					setRule580=setRule();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, setRule580.Tree);
					DebugLocation(1052, 57);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:57: ( SEMI | block )
					int alt166=2;
					try { DebugEnterSubRule(166);
					try { DebugEnterDecision(166, false);
					int LA166_1 = input.LA(1);

					if ((LA166_1==SEMI))
					{
						alt166 = 1;
					}
					else if ((LA166_1==LCURLY))
					{
						alt166 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 166, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(166); }
					switch (alt166)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:58: SEMI
						{
						DebugLocation(1052, 58);
						SEMI581=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15190); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SEMI581_tree = (CommonTree)adaptor.Create(SEMI581);
						adaptor.AddChild(root_0, SEMI581_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:63: block
						{
						DebugLocation(1052, 63);
						PushFollow(Follow._block_in_propertyDeclaration15192);
						block582=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, block582.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(166); }


					}
					break;

				}
				} finally { DebugExitSubRule(167); }

				DebugLocation(1052, 72);
				char_literal583=(IToken)Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration15197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal583_tree = (CommonTree)adaptor.Create(char_literal583);
				adaptor.AddChild(root_0, char_literal583_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1053, 4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:5: '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}'
				{
				DebugLocation(1053, 5);
				char_literal584=(IToken)Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration15204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal584_tree = (CommonTree)adaptor.Create(char_literal584);
				adaptor.AddChild(root_0, char_literal584_tree);
				}
				DebugLocation(1053, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:9: ( modifier )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_1 = input.LA(1);

				if ((LA168_1==ABSTRACT||LA168_1==AT||LA168_1==FINAL||LA168_1==GLOBAL||LA168_1==NATIVE||LA168_1==OVERRIDE||LA168_1==PRIVATE||(LA168_1>=PROTECTED && LA168_1<=PUBLIC)||LA168_1==STATIC||LA168_1==STRICTFP||(LA168_1>=SYNCHRONIZED && LA168_1<=TEST_METHOD)||LA168_1==TRANSIENT||LA168_1==VIRTUAL||LA168_1==VOLATILE||(LA168_1>=WITHOUT_SHARING && LA168_1<=WITH_SHARING)))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:9: modifier
					{
					DebugLocation(1053, 9);
					PushFollow(Follow._modifier_in_propertyDeclaration15206);
					modifier585=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier585.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(1053, 19);
				PushFollow(Follow._setRule_in_propertyDeclaration15209);
				setRule586=setRule();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, setRule586.Tree);
				DebugLocation(1053, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:27: ( SEMI | block )
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_1 = input.LA(1);

				if ((LA169_1==SEMI))
				{
					alt169 = 1;
				}
				else if ((LA169_1==LCURLY))
				{
					alt169 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:28: SEMI
					{
					DebugLocation(1053, 28);
					SEMI587=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15212); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI587_tree = (CommonTree)adaptor.Create(SEMI587);
					adaptor.AddChild(root_0, SEMI587_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:33: block
					{
					DebugLocation(1053, 33);
					PushFollow(Follow._block_in_propertyDeclaration15214);
					block588=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block588.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(169); }

				DebugLocation(1053, 40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:40: ( ( modifier )? getRule ( SEMI | block ) )?
				int alt172=2;
				try { DebugEnterSubRule(172);
				try { DebugEnterDecision(172, false);
				int LA172_1 = input.LA(1);

				if ((LA172_1==ABSTRACT||LA172_1==AT||LA172_1==FINAL||LA172_1==GLOBAL||LA172_1==IDENT||LA172_1==NATIVE||LA172_1==OVERRIDE||LA172_1==PRIVATE||(LA172_1>=PROTECTED && LA172_1<=PUBLIC)||LA172_1==STATIC||LA172_1==STRICTFP||(LA172_1>=SYNCHRONIZED && LA172_1<=TEST_METHOD)||LA172_1==TRANSIENT||LA172_1==VIRTUAL||LA172_1==VOLATILE||(LA172_1>=WITHOUT_SHARING && LA172_1<=WITH_SHARING)))
				{
					alt172 = 1;
				}
				} finally { DebugExitDecision(172); }
				switch (alt172)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:41: ( modifier )? getRule ( SEMI | block )
					{
					DebugLocation(1053, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:41: ( modifier )?
					int alt170=2;
					try { DebugEnterSubRule(170);
					try { DebugEnterDecision(170, false);
					int LA170_1 = input.LA(1);

					if ((LA170_1==ABSTRACT||LA170_1==AT||LA170_1==FINAL||LA170_1==GLOBAL||LA170_1==NATIVE||LA170_1==OVERRIDE||LA170_1==PRIVATE||(LA170_1>=PROTECTED && LA170_1<=PUBLIC)||LA170_1==STATIC||LA170_1==STRICTFP||(LA170_1>=SYNCHRONIZED && LA170_1<=TEST_METHOD)||LA170_1==TRANSIENT||LA170_1==VIRTUAL||LA170_1==VOLATILE||(LA170_1>=WITHOUT_SHARING && LA170_1<=WITH_SHARING)))
					{
						alt170 = 1;
					}
					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:41: modifier
						{
						DebugLocation(1053, 41);
						PushFollow(Follow._modifier_in_propertyDeclaration15218);
						modifier589=modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifier589.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(170); }

					DebugLocation(1053, 51);
					PushFollow(Follow._getRule_in_propertyDeclaration15221);
					getRule590=getRule();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, getRule590.Tree);
					DebugLocation(1053, 59);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:59: ( SEMI | block )
					int alt171=2;
					try { DebugEnterSubRule(171);
					try { DebugEnterDecision(171, false);
					int LA171_1 = input.LA(1);

					if ((LA171_1==SEMI))
					{
						alt171 = 1;
					}
					else if ((LA171_1==LCURLY))
					{
						alt171 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 171, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(171); }
					switch (alt171)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:60: SEMI
						{
						DebugLocation(1053, 60);
						SEMI591=(IToken)Match(input,SEMI,Follow._SEMI_in_propertyDeclaration15224); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SEMI591_tree = (CommonTree)adaptor.Create(SEMI591);
						adaptor.AddChild(root_0, SEMI591_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1053:65: block
						{
						DebugLocation(1053, 65);
						PushFollow(Follow._block_in_propertyDeclaration15226);
						block592=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, block592.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(171); }


					}
					break;

				}
				} finally { DebugExitSubRule(172); }

				DebugLocation(1053, 75);
				char_literal593=(IToken)Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration15232); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal593_tree = (CommonTree)adaptor.Create(char_literal593);
				adaptor.AddChild(root_0, char_literal593_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyDeclaration", 117);
			LeaveRule("propertyDeclaration", 117);
			LeaveRule_propertyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 117, propertyDeclaration_StartIndex); }

		}
		DebugLocation(1055, 0);
		} finally { DebugExitRule(GrammarFileName, "propertyDeclaration"); }
		return retval;

	}
	// $ANTLR end "propertyDeclaration"

	partial void EnterRule_getRule();
	partial void LeaveRule_getRule();
	// $ANTLR start "getRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1056:1: getRule :{...}? IDENT ;
	[GrammarRule("getRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> getRule()
	{
		EnterRule_getRule();
		EnterRule("getRule", 118);
		TraceIn("getRule", 118);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int getRule_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT594 = default(IToken);

		CommonTree IDENT594_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "getRule");
		DebugLocation(1056, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1057:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1058:5: {...}? IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1058, 5);
			if (!((input.LT(1).Text == "get")))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "getRule", "input.LT(1).Text == \"get\"");
			}
			DebugLocation(1058, 34);
			IDENT594=(IToken)Match(input,IDENT,Follow._IDENT_in_getRule15249); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT594_tree = (CommonTree)adaptor.Create(IDENT594);
			adaptor.AddChild(root_0, IDENT594_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("getRule", 118);
			LeaveRule("getRule", 118);
			LeaveRule_getRule();
			if (state.backtracking > 0) { Memoize(input, 118, getRule_StartIndex); }

		}
		DebugLocation(1059, 0);
		} finally { DebugExitRule(GrammarFileName, "getRule"); }
		return retval;

	}
	// $ANTLR end "getRule"

	partial void EnterRule_setRule();
	partial void LeaveRule_setRule();
	// $ANTLR start "setRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1060:1: setRule :{...}? IDENT ;
	[GrammarRule("setRule")]
	private AstParserRuleReturnScope<CommonTree, IToken> setRule()
	{
		EnterRule_setRule();
		EnterRule("setRule", 119);
		TraceIn("setRule", 119);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int setRule_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT595 = default(IToken);

		CommonTree IDENT595_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "setRule");
		DebugLocation(1060, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1061:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1062:5: {...}? IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1062, 5);
			if (!((input.LT(1).Text== "set")))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "setRule", "input.LT(1).Text== \"set\"");
			}
			DebugLocation(1062, 33);
			IDENT595=(IToken)Match(input,IDENT,Follow._IDENT_in_setRule15263); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT595_tree = (CommonTree)adaptor.Create(IDENT595);
			adaptor.AddChild(root_0, IDENT595_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setRule", 119);
			LeaveRule("setRule", 119);
			LeaveRule_setRule();
			if (state.backtracking > 0) { Memoize(input, 119, setRule_StartIndex); }

		}
		DebugLocation(1063, 0);
		} finally { DebugExitRule(GrammarFileName, "setRule"); }
		return retval;

	}
	// $ANTLR end "setRule"

	partial void EnterRule_synpred14_Java_fragment();
	partial void LeaveRule_synpred14_Java_fragment();

	// $ANTLR start synpred14_Java
	private void synpred14_Java_fragment()
	{
		EnterRule_synpred14_Java_fragment();
		EnterRule("synpred14_Java_fragment", 133);
		TraceIn("synpred14_Java_fragment", 133);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:309:9: ( GREATER_THAN )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:309:9: GREATER_THAN
			{
			DebugLocation(309, 9);
			Match(input,GREATER_THAN,Follow._GREATER_THAN_in_synpred14_Java5205); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Java_fragment", 133);
			LeaveRule("synpred14_Java_fragment", 133);
			LeaveRule_synpred14_Java_fragment();
		}
	}
	// $ANTLR end synpred14_Java

	partial void EnterRule_synpred15_Java_fragment();
	partial void LeaveRule_synpred15_Java_fragment();

	// $ANTLR start synpred15_Java
	private void synpred15_Java_fragment()
	{
		EnterRule_synpred15_Java_fragment();
		EnterRule("synpred15_Java_fragment", 134);
		TraceIn("synpred15_Java_fragment", 134);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:310:9: ( SHIFT_RIGHT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:310:9: SHIFT_RIGHT
			{
			DebugLocation(310, 9);
			Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_synpred15_Java5215); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Java_fragment", 134);
			LeaveRule("synpred15_Java_fragment", 134);
			LeaveRule_synpred15_Java_fragment();
		}
	}
	// $ANTLR end synpred15_Java

	partial void EnterRule_synpred16_Java_fragment();
	partial void LeaveRule_synpred16_Java_fragment();

	// $ANTLR start synpred16_Java
	private void synpred16_Java_fragment()
	{
		EnterRule_synpred16_Java_fragment();
		EnterRule("synpred16_Java_fragment", 135);
		TraceIn("synpred16_Java_fragment", 135);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:311:9: ( BIT_SHIFT_RIGHT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:311:9: BIT_SHIFT_RIGHT
			{
			DebugLocation(311, 9);
			Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_synpred16_Java5225); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Java_fragment", 135);
			LeaveRule("synpred16_Java_fragment", 135);
			LeaveRule_synpred16_Java_fragment();
		}
	}
	// $ANTLR end synpred16_Java

	partial void EnterRule_synpred17_Java_fragment();
	partial void LeaveRule_synpred17_Java_fragment();

	// $ANTLR start synpred17_Java
	private void synpred17_Java_fragment()
	{
		EnterRule_synpred17_Java_fragment();
		EnterRule("synpred17_Java_fragment", 136);
		TraceIn("synpred17_Java_fragment", 136);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:15: ( bound )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:316:15: bound
			{
			DebugLocation(316, 15);
			PushFollow(Follow._bound_in_synpred17_Java5255);
			bound();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Java_fragment", 136);
			LeaveRule("synpred17_Java_fragment", 136);
			LeaveRule_synpred17_Java_fragment();
		}
	}
	// $ANTLR end synpred17_Java

	partial void EnterRule_synpred32_Java_fragment();
	partial void LeaveRule_synpred32_Java_fragment();

	// $ANTLR start synpred32_Java
	private void synpred32_Java_fragment()
	{
		EnterRule_synpred32_Java_fragment();
		EnterRule("synpred32_Java_fragment", 151);
		TraceIn("synpred32_Java_fragment", 151);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:373:9: ( STATIC block )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:373:9: STATIC block
			{
			DebugLocation(373, 9);
			Match(input,STATIC,Follow._STATIC_in_synpred32_Java5787); if (state.failed) return;
			DebugLocation(373, 16);
			PushFollow(Follow._block_in_synpred32_Java5789);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_Java_fragment", 151);
			LeaveRule("synpred32_Java_fragment", 151);
			LeaveRule_synpred32_Java_fragment();
		}
	}
	// $ANTLR end synpred32_Java

	partial void EnterRule_synpred33_Java_fragment();
	partial void LeaveRule_synpred33_Java_fragment();

	// $ANTLR start synpred33_Java
	private void synpred33_Java_fragment()
	{
		EnterRule_synpred33_Java_fragment();
		EnterRule("synpred33_Java_fragment", 152);
		TraceIn("synpred33_Java_fragment", 152);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:376:10: ( type IDENT propertyDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:376:10: type IDENT propertyDeclaration
			{
			DebugLocation(376, 10);
			PushFollow(Follow._type_in_synpred33_Java5834);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(376, 15);
			Match(input,IDENT,Follow._IDENT_in_synpred33_Java5836); if (state.failed) return;
			DebugLocation(376, 21);
			PushFollow(Follow._propertyDeclaration_in_synpred33_Java5838);
			propertyDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred33_Java_fragment", 152);
			LeaveRule("synpred33_Java_fragment", 152);
			LeaveRule_synpred33_Java_fragment();
		}
	}
	// $ANTLR end synpred33_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	private void synpred43_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 162);
		TraceIn("synpred43_Java_fragment", 162);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			{
			DebugLocation(377, 7);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_1 = input.LA(1);

			if ((LA179_1==LESS_THAN))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: genericTypeParameterList
				{
				DebugLocation(377, 7);
				PushFollow(Follow._genericTypeParameterList_in_synpred43_Java5860);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(378, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:378:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
			int alt186=3;
			try { DebugEnterSubRule(186);
			try { DebugEnterDecision(186, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt186 = 1;
				}
				break;
			case IDENT:
				{
				int LA186_2 = input.LA(2);

				if ((LA186_2==DOT||LA186_2==IDENT||LA186_2==LBRACK||LA186_2==LESS_THAN))
				{
					alt186 = 1;
				}
				else if ((LA186_2==LPAREN))
				{
					alt186 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOID:
				{
				alt186 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:14: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(379, 14);
				PushFollow(Follow._type_in_synpred43_Java5893);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(379, 19);
				Match(input,IDENT,Follow._IDENT_in_synpred43_Java5895); if (state.failed) return;
				DebugLocation(379, 25);
				PushFollow(Follow._formalParameterList_in_synpred43_Java5897);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(379, 45);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: ( arrayDeclaratorList )?
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_1 = input.LA(1);

				if ((LA180_1==LBRACK))
				{
					alt180 = 1;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: arrayDeclaratorList
					{
					DebugLocation(379, 45);
					PushFollow(Follow._arrayDeclaratorList_in_synpred43_Java5899);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(180); }

				DebugLocation(379, 66);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: ( throwsClause )?
				int alt181=2;
				try { DebugEnterSubRule(181);
				try { DebugEnterDecision(181, false);
				int LA181_1 = input.LA(1);

				if ((LA181_1==THROWS))
				{
					alt181 = 1;
				}
				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: throwsClause
					{
					DebugLocation(379, 66);
					PushFollow(Follow._throwsClause_in_synpred43_Java5902);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(181); }

				DebugLocation(379, 80);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:80: ( block | SEMI )
				int alt182=2;
				try { DebugEnterSubRule(182);
				try { DebugEnterDecision(182, false);
				int LA182_1 = input.LA(1);

				if ((LA182_1==LCURLY))
				{
					alt182 = 1;
				}
				else if ((LA182_1==SEMI))
				{
					alt182 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 182, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(182); }
				switch (alt182)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:81: block
					{
					DebugLocation(379, 81);
					PushFollow(Follow._block_in_synpred43_Java5906);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:89: SEMI
					{
					DebugLocation(379, 89);
					Match(input,SEMI,Follow._SEMI_in_synpred43_Java5910); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(182); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
				{
				DebugLocation(381, 17);
				Match(input,VOID,Follow._VOID_in_synpred43_Java5972); if (state.failed) return;
				DebugLocation(381, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred43_Java5974); if (state.failed) return;
				DebugLocation(381, 28);
				PushFollow(Follow._formalParameterList_in_synpred43_Java5976);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(381, 48);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: ( throwsClause )?
				int alt183=2;
				try { DebugEnterSubRule(183);
				try { DebugEnterDecision(183, false);
				int LA183_1 = input.LA(1);

				if ((LA183_1==THROWS))
				{
					alt183 = 1;
				}
				} finally { DebugExitDecision(183); }
				switch (alt183)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: throwsClause
					{
					DebugLocation(381, 48);
					PushFollow(Follow._throwsClause_in_synpred43_Java5978);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(183); }

				DebugLocation(381, 62);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:62: ( block | SEMI )
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				int LA184_1 = input.LA(1);

				if ((LA184_1==LCURLY))
				{
					alt184 = 1;
				}
				else if ((LA184_1==SEMI))
				{
					alt184 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 184, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:63: block
					{
					DebugLocation(381, 63);
					PushFollow(Follow._block_in_synpred43_Java5982);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:71: SEMI
					{
					DebugLocation(381, 71);
					Match(input,SEMI,Follow._SEMI_in_synpred43_Java5986); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(184); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:17: ident= IDENT formalParameterList ( throwsClause )? block
				{
				DebugLocation(383, 22);
				ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred43_Java6045); if (state.failed) return;
				DebugLocation(383, 29);
				PushFollow(Follow._formalParameterList_in_synpred43_Java6047);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(383, 49);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: ( throwsClause )?
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				int LA185_1 = input.LA(1);

				if ((LA185_1==THROWS))
				{
					alt185 = 1;
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: throwsClause
					{
					DebugLocation(383, 49);
					PushFollow(Follow._throwsClause_in_synpred43_Java6049);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(185); }

				DebugLocation(383, 63);
				PushFollow(Follow._block_in_synpred43_Java6052);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(186); }


			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 162);
			LeaveRule("synpred43_Java_fragment", 162);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred44_Java_fragment();
	partial void LeaveRule_synpred44_Java_fragment();

	// $ANTLR start synpred44_Java
	private void synpred44_Java_fragment()
	{
		EnterRule_synpred44_Java_fragment();
		EnterRule("synpred44_Java_fragment", 163);
		TraceIn("synpred44_Java_fragment", 163);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:387:13: ( type classFieldDeclaratorList SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:387:13: type classFieldDeclaratorList SEMI
			{
			DebugLocation(387, 13);
			PushFollow(Follow._type_in_synpred44_Java6118);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(387, 18);
			PushFollow(Follow._classFieldDeclaratorList_in_synpred44_Java6120);
			classFieldDeclaratorList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(387, 43);
			Match(input,SEMI,Follow._SEMI_in_synpred44_Java6122); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred44_Java_fragment", 163);
			LeaveRule("synpred44_Java_fragment", 163);
			LeaveRule_synpred44_Java_fragment();
		}
	}
	// $ANTLR end synpred44_Java

	partial void EnterRule_synpred46_Java_fragment();
	partial void LeaveRule_synpred46_Java_fragment();

	// $ANTLR start synpred46_Java
	private void synpred46_Java_fragment()
	{
		EnterRule_synpred46_Java_fragment();
		EnterRule("synpred46_Java_fragment", 165);
		TraceIn("synpred46_Java_fragment", 165);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: ( SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: SEMI
			{
			DebugLocation(389, 48);
			Match(input,SEMI,Follow._SEMI_in_synpred46_Java6168); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Java_fragment", 165);
			LeaveRule("synpred46_Java_fragment", 165);
			LeaveRule_synpred46_Java_fragment();
		}
	}
	// $ANTLR end synpred46_Java

	partial void EnterRule_synpred47_Java_fragment();
	partial void LeaveRule_synpred47_Java_fragment();

	// $ANTLR start synpred47_Java
	private void synpred47_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred47_Java_fragment();
		EnterRule("synpred47_Java_fragment", 166);
		TraceIn("synpred47_Java_fragment", 166);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:374:9: ( modifierList ( type IDENT propertyDeclaration | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI | type classFieldDeclaratorList ( DOT )? ( SEMI )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:374:9: modifierList ( type IDENT propertyDeclaration | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI | type classFieldDeclaratorList ( DOT )? ( SEMI )? )
			{
			DebugLocation(374, 9);
			PushFollow(Follow._modifierList_in_synpred47_Java5812);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(375, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:375:9: ( type IDENT propertyDeclaration | ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI | type classFieldDeclaratorList ( DOT )? ( SEMI )? )
			int alt197=4;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			switch (input.LA(1))
			{
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA197_2 = input.LA(2);

				if ((EvaluatePredicate(synpred33_Java_fragment)))
				{
					alt197 = 1;
				}
				else if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt197 = 2;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt197 = 3;
				}
				else if ((true))
				{
					alt197 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 197, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA197_2 = input.LA(2);

				if ((EvaluatePredicate(synpred33_Java_fragment)))
				{
					alt197 = 1;
				}
				else if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt197 = 2;
				}
				else if ((EvaluatePredicate(synpred44_Java_fragment)))
				{
					alt197 = 3;
				}
				else if ((true))
				{
					alt197 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 197, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LESS_THAN:
			case VOID:
				{
				alt197 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 197, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:376:10: type IDENT propertyDeclaration
				{
				DebugLocation(376, 10);
				PushFollow(Follow._type_in_synpred47_Java5834);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(376, 15);
				Match(input,IDENT,Follow._IDENT_in_synpred47_Java5836); if (state.failed) return;
				DebugLocation(376, 21);
				PushFollow(Follow._propertyDeclaration_in_synpred47_Java5838);
				propertyDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				{
				DebugLocation(377, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: ( genericTypeParameterList )?
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_1 = input.LA(1);

				if ((LA187_1==LESS_THAN))
				{
					alt187 = 1;
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:377:7: genericTypeParameterList
					{
					DebugLocation(377, 7);
					PushFollow(Follow._genericTypeParameterList_in_synpred47_Java5860);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(187); }

				DebugLocation(378, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:378:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
				int alt194=3;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				switch (input.LA(1))
				{
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt194 = 1;
					}
					break;
				case IDENT:
					{
					int LA194_2 = input.LA(2);

					if ((LA194_2==DOT||LA194_2==IDENT||LA194_2==LBRACK||LA194_2==LESS_THAN))
					{
						alt194 = 1;
					}
					else if ((LA194_2==LPAREN))
					{
						alt194 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 194, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VOID:
					{
					alt194 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 194, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:14: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(379, 14);
					PushFollow(Follow._type_in_synpred47_Java5893);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(379, 19);
					Match(input,IDENT,Follow._IDENT_in_synpred47_Java5895); if (state.failed) return;
					DebugLocation(379, 25);
					PushFollow(Follow._formalParameterList_in_synpred47_Java5897);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(379, 45);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: ( arrayDeclaratorList )?
					int alt188=2;
					try { DebugEnterSubRule(188);
					try { DebugEnterDecision(188, false);
					int LA188_1 = input.LA(1);

					if ((LA188_1==LBRACK))
					{
						alt188 = 1;
					}
					} finally { DebugExitDecision(188); }
					switch (alt188)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:45: arrayDeclaratorList
						{
						DebugLocation(379, 45);
						PushFollow(Follow._arrayDeclaratorList_in_synpred47_Java5899);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(188); }

					DebugLocation(379, 66);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: ( throwsClause )?
					int alt189=2;
					try { DebugEnterSubRule(189);
					try { DebugEnterDecision(189, false);
					int LA189_1 = input.LA(1);

					if ((LA189_1==THROWS))
					{
						alt189 = 1;
					}
					} finally { DebugExitDecision(189); }
					switch (alt189)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:66: throwsClause
						{
						DebugLocation(379, 66);
						PushFollow(Follow._throwsClause_in_synpred47_Java5902);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(189); }

					DebugLocation(379, 80);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:80: ( block | SEMI )
					int alt190=2;
					try { DebugEnterSubRule(190);
					try { DebugEnterDecision(190, false);
					int LA190_1 = input.LA(1);

					if ((LA190_1==LCURLY))
					{
						alt190 = 1;
					}
					else if ((LA190_1==SEMI))
					{
						alt190 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 190, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(190); }
					switch (alt190)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:81: block
						{
						DebugLocation(379, 81);
						PushFollow(Follow._block_in_synpred47_Java5906);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:379:89: SEMI
						{
						DebugLocation(379, 89);
						Match(input,SEMI,Follow._SEMI_in_synpred47_Java5910); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(190); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
					{
					DebugLocation(381, 17);
					Match(input,VOID,Follow._VOID_in_synpred47_Java5972); if (state.failed) return;
					DebugLocation(381, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred47_Java5974); if (state.failed) return;
					DebugLocation(381, 28);
					PushFollow(Follow._formalParameterList_in_synpred47_Java5976);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(381, 48);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: ( throwsClause )?
					int alt191=2;
					try { DebugEnterSubRule(191);
					try { DebugEnterDecision(191, false);
					int LA191_1 = input.LA(1);

					if ((LA191_1==THROWS))
					{
						alt191 = 1;
					}
					} finally { DebugExitDecision(191); }
					switch (alt191)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:48: throwsClause
						{
						DebugLocation(381, 48);
						PushFollow(Follow._throwsClause_in_synpred47_Java5978);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(191); }

					DebugLocation(381, 62);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:62: ( block | SEMI )
					int alt192=2;
					try { DebugEnterSubRule(192);
					try { DebugEnterDecision(192, false);
					int LA192_1 = input.LA(1);

					if ((LA192_1==LCURLY))
					{
						alt192 = 1;
					}
					else if ((LA192_1==SEMI))
					{
						alt192 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 192, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(192); }
					switch (alt192)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:63: block
						{
						DebugLocation(381, 63);
						PushFollow(Follow._block_in_synpred47_Java5982);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:381:71: SEMI
						{
						DebugLocation(381, 71);
						Match(input,SEMI,Follow._SEMI_in_synpred47_Java5986); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(192); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:17: ident= IDENT formalParameterList ( throwsClause )? block
					{
					DebugLocation(383, 22);
					ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred47_Java6045); if (state.failed) return;
					DebugLocation(383, 29);
					PushFollow(Follow._formalParameterList_in_synpred47_Java6047);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(383, 49);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: ( throwsClause )?
					int alt193=2;
					try { DebugEnterSubRule(193);
					try { DebugEnterDecision(193, false);
					int LA193_1 = input.LA(1);

					if ((LA193_1==THROWS))
					{
						alt193 = 1;
					}
					} finally { DebugExitDecision(193); }
					switch (alt193)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:383:49: throwsClause
						{
						DebugLocation(383, 49);
						PushFollow(Follow._throwsClause_in_synpred47_Java6049);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(193); }

					DebugLocation(383, 63);
					PushFollow(Follow._block_in_synpred47_Java6052);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(194); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:387:13: type classFieldDeclaratorList SEMI
				{
				DebugLocation(387, 13);
				PushFollow(Follow._type_in_synpred47_Java6118);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(387, 18);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred47_Java6120);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(387, 43);
				Match(input,SEMI,Follow._SEMI_in_synpred47_Java6122); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:13: type classFieldDeclaratorList ( DOT )? ( SEMI )?
				{
				DebugLocation(389, 13);
				PushFollow(Follow._type_in_synpred47_Java6161);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(389, 18);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred47_Java6163);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(389, 43);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:43: ( DOT )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_1 = input.LA(1);

				if ((LA195_1==DOT))
				{
					alt195 = 1;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:43: DOT
					{
					DebugLocation(389, 43);
					Match(input,DOT,Follow._DOT_in_synpred47_Java6165); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(389, 48);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: ( SEMI )?
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_1 = input.LA(1);

				if ((LA196_1==SEMI))
				{
					alt196 = 1;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:389:48: SEMI
					{
					DebugLocation(389, 48);
					Match(input,SEMI,Follow._SEMI_in_synpred47_Java6168); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(196); }


				}
				break;

			}
			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred47_Java_fragment", 166);
			LeaveRule("synpred47_Java_fragment", 166);
			LeaveRule_synpred47_Java_fragment();
		}
	}
	// $ANTLR end synpred47_Java

	partial void EnterRule_synpred48_Java_fragment();
	partial void LeaveRule_synpred48_Java_fragment();

	// $ANTLR start synpred48_Java
	private void synpred48_Java_fragment()
	{
		EnterRule_synpred48_Java_fragment();
		EnterRule("synpred48_Java_fragment", 167);
		TraceIn("synpred48_Java_fragment", 167);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:392:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:392:9: typeDeclaration
			{
			DebugLocation(392, 9);
			PushFollow(Follow._typeDeclaration_in_synpred48_Java6214);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred48_Java_fragment", 167);
			LeaveRule("synpred48_Java_fragment", 167);
			LeaveRule_synpred48_Java_fragment();
		}
	}
	// $ANTLR end synpred48_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	private void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 173);
		TraceIn("synpred54_Java_fragment", 173);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			{
			DebugLocation(398, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )?
			int alt200=2;
			try { DebugEnterSubRule(200);
			try { DebugEnterDecision(200, false);
			int LA200_1 = input.LA(1);

			if ((LA200_1==LESS_THAN))
			{
				alt200 = 1;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: genericTypeParameterList
				{
				DebugLocation(398, 13);
				PushFollow(Follow._genericTypeParameterList_in_synpred54_Java6258);
				genericTypeParameterList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(200); }

			DebugLocation(399, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_1 = input.LA(1);

			if ((LA204_1==BOOLEAN||LA204_1==BYTE||LA204_1==CHAR||LA204_1==DOUBLE||LA204_1==FLOAT||LA204_1==IDENT||LA204_1==INT||LA204_1==LONG||LA204_1==SHORT))
			{
				alt204 = 1;
			}
			else if ((LA204_1==VOID))
			{
				alt204 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 204, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
				{
				DebugLocation(399, 17);
				PushFollow(Follow._type_in_synpred54_Java6277);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(399, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred54_Java6279); if (state.failed) return;
				DebugLocation(399, 28);
				PushFollow(Follow._formalParameterList_in_synpred54_Java6281);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(399, 48);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: ( arrayDeclaratorList )?
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_1 = input.LA(1);

				if ((LA201_1==LBRACK))
				{
					alt201 = 1;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: arrayDeclaratorList
					{
					DebugLocation(399, 48);
					PushFollow(Follow._arrayDeclaratorList_in_synpred54_Java6283);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(201); }

				DebugLocation(399, 69);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: ( throwsClause )?
				int alt202=2;
				try { DebugEnterSubRule(202);
				try { DebugEnterDecision(202, false);
				int LA202_1 = input.LA(1);

				if ((LA202_1==THROWS))
				{
					alt202 = 1;
				}
				} finally { DebugExitDecision(202); }
				switch (alt202)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: throwsClause
					{
					DebugLocation(399, 69);
					PushFollow(Follow._throwsClause_in_synpred54_Java6286);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(202); }

				DebugLocation(399, 83);
				Match(input,SEMI,Follow._SEMI_in_synpred54_Java6289); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
				{
				DebugLocation(401, 17);
				Match(input,VOID,Follow._VOID_in_synpred54_Java6347); if (state.failed) return;
				DebugLocation(401, 22);
				Match(input,IDENT,Follow._IDENT_in_synpred54_Java6349); if (state.failed) return;
				DebugLocation(401, 28);
				PushFollow(Follow._formalParameterList_in_synpred54_Java6351);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(401, 48);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: ( throwsClause )?
				int alt203=2;
				try { DebugEnterSubRule(203);
				try { DebugEnterDecision(203, false);
				int LA203_1 = input.LA(1);

				if ((LA203_1==THROWS))
				{
					alt203 = 1;
				}
				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: throwsClause
					{
					DebugLocation(401, 48);
					PushFollow(Follow._throwsClause_in_synpred54_Java6353);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(203); }

				DebugLocation(401, 62);
				Match(input,SEMI,Follow._SEMI_in_synpred54_Java6356); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(204); }


			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 173);
			LeaveRule("synpred54_Java_fragment", 173);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred55_Java_fragment();
	partial void LeaveRule_synpred55_Java_fragment();

	// $ANTLR start synpred55_Java
	private void synpred55_Java_fragment()
	{
		EnterRule_synpred55_Java_fragment();
		EnterRule("synpred55_Java_fragment", 174);
		TraceIn("synpred55_Java_fragment", 174);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:397:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:397:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			{
			DebugLocation(397, 9);
			PushFollow(Follow._modifierList_in_synpred55_Java6244);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(398, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			switch (input.LA(1))
			{
			case LESS_THAN:
			case VOID:
				{
				alt210 = 1;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA210_2 = input.LA(2);

				if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt210 = 1;
				}
				else if ((true))
				{
					alt210 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 210, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA210_2 = input.LA(2);

				if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt210 = 1;
				}
				else if ((true))
				{
					alt210 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 210, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 210, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				{
				DebugLocation(398, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: ( genericTypeParameterList )?
				int alt205=2;
				try { DebugEnterSubRule(205);
				try { DebugEnterDecision(205, false);
				int LA205_1 = input.LA(1);

				if ((LA205_1==LESS_THAN))
				{
					alt205 = 1;
				}
				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:398:13: genericTypeParameterList
					{
					DebugLocation(398, 13);
					PushFollow(Follow._genericTypeParameterList_in_synpred55_Java6258);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(205); }

				DebugLocation(399, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
				int alt209=2;
				try { DebugEnterSubRule(209);
				try { DebugEnterDecision(209, false);
				int LA209_1 = input.LA(1);

				if ((LA209_1==BOOLEAN||LA209_1==BYTE||LA209_1==CHAR||LA209_1==DOUBLE||LA209_1==FLOAT||LA209_1==IDENT||LA209_1==INT||LA209_1==LONG||LA209_1==SHORT))
				{
					alt209 = 1;
				}
				else if ((LA209_1==VOID))
				{
					alt209 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 209, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(209); }
				switch (alt209)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
					{
					DebugLocation(399, 17);
					PushFollow(Follow._type_in_synpred55_Java6277);
					type();
					PopFollow();
					if (state.failed) return;
					DebugLocation(399, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred55_Java6279); if (state.failed) return;
					DebugLocation(399, 28);
					PushFollow(Follow._formalParameterList_in_synpred55_Java6281);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(399, 48);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: ( arrayDeclaratorList )?
					int alt206=2;
					try { DebugEnterSubRule(206);
					try { DebugEnterDecision(206, false);
					int LA206_1 = input.LA(1);

					if ((LA206_1==LBRACK))
					{
						alt206 = 1;
					}
					} finally { DebugExitDecision(206); }
					switch (alt206)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:48: arrayDeclaratorList
						{
						DebugLocation(399, 48);
						PushFollow(Follow._arrayDeclaratorList_in_synpred55_Java6283);
						arrayDeclaratorList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(206); }

					DebugLocation(399, 69);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: ( throwsClause )?
					int alt207=2;
					try { DebugEnterSubRule(207);
					try { DebugEnterDecision(207, false);
					int LA207_1 = input.LA(1);

					if ((LA207_1==THROWS))
					{
						alt207 = 1;
					}
					} finally { DebugExitDecision(207); }
					switch (alt207)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:399:69: throwsClause
						{
						DebugLocation(399, 69);
						PushFollow(Follow._throwsClause_in_synpred55_Java6286);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(207); }

					DebugLocation(399, 83);
					Match(input,SEMI,Follow._SEMI_in_synpred55_Java6289); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
					{
					DebugLocation(401, 17);
					Match(input,VOID,Follow._VOID_in_synpred55_Java6347); if (state.failed) return;
					DebugLocation(401, 22);
					Match(input,IDENT,Follow._IDENT_in_synpred55_Java6349); if (state.failed) return;
					DebugLocation(401, 28);
					PushFollow(Follow._formalParameterList_in_synpred55_Java6351);
					formalParameterList();
					PopFollow();
					if (state.failed) return;
					DebugLocation(401, 48);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: ( throwsClause )?
					int alt208=2;
					try { DebugEnterSubRule(208);
					try { DebugEnterDecision(208, false);
					int LA208_1 = input.LA(1);

					if ((LA208_1==THROWS))
					{
						alt208 = 1;
					}
					} finally { DebugExitDecision(208); }
					switch (alt208)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:401:48: throwsClause
						{
						DebugLocation(401, 48);
						PushFollow(Follow._throwsClause_in_synpred55_Java6353);
						throwsClause();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(208); }

					DebugLocation(401, 62);
					Match(input,SEMI,Follow._SEMI_in_synpred55_Java6356); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(209); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:404:13: type interfaceFieldDeclaratorList SEMI
				{
				DebugLocation(404, 13);
				PushFollow(Follow._type_in_synpred55_Java6419);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(404, 18);
				PushFollow(Follow._interfaceFieldDeclaratorList_in_synpred55_Java6421);
				interfaceFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(404, 47);
				Match(input,SEMI,Follow._SEMI_in_synpred55_Java6423); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(210); }


			}

		}
		finally
		{
			TraceOut("synpred55_Java_fragment", 174);
			LeaveRule("synpred55_Java_fragment", 174);
			LeaveRule_synpred55_Java_fragment();
		}
	}
	// $ANTLR end synpred55_Java

	partial void EnterRule_synpred56_Java_fragment();
	partial void LeaveRule_synpred56_Java_fragment();

	// $ANTLR start synpred56_Java
	private void synpred56_Java_fragment()
	{
		EnterRule_synpred56_Java_fragment();
		EnterRule("synpred56_Java_fragment", 175);
		TraceIn("synpred56_Java_fragment", 175);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:407:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:407:9: typeDeclaration
			{
			DebugLocation(407, 9);
			PushFollow(Follow._typeDeclaration_in_synpred56_Java6468);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred56_Java_fragment", 175);
			LeaveRule("synpred56_Java_fragment", 175);
			LeaveRule_synpred56_Java_fragment();
		}
	}
	// $ANTLR end synpred56_Java

	partial void EnterRule_synpred62_Java_fragment();
	partial void LeaveRule_synpred62_Java_fragment();

	// $ANTLR start synpred62_Java
	private void synpred62_Java_fragment()
	{
		EnterRule_synpred62_Java_fragment();
		EnterRule("synpred62_Java_fragment", 181);
		TraceIn("synpred62_Java_fragment", 181);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:437:9: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:437:9: expression
			{
			DebugLocation(437, 9);
			PushFollow(Follow._expression_in_synpred62_Java6715);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_Java_fragment", 181);
			LeaveRule("synpred62_Java_fragment", 181);
			LeaveRule_synpred62_Java_fragment();
		}
	}
	// $ANTLR end synpred62_Java

	partial void EnterRule_synpred63_Java_fragment();
	partial void LeaveRule_synpred63_Java_fragment();

	// $ANTLR start synpred63_Java
	private void synpred63_Java_fragment()
	{
		EnterRule_synpred63_Java_fragment();
		EnterRule("synpred63_Java_fragment", 182);
		TraceIn("synpred63_Java_fragment", 182);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:9: ( arrayDeclarator )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:447:9: arrayDeclarator
			{
			DebugLocation(447, 9);
			PushFollow(Follow._arrayDeclarator_in_synpred63_Java6792);
			arrayDeclarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred63_Java_fragment", 182);
			LeaveRule("synpred63_Java_fragment", 182);
			LeaveRule_synpred63_Java_fragment();
		}
	}
	// $ANTLR end synpred63_Java

	partial void EnterRule_synpred87_Java_fragment();
	partial void LeaveRule_synpred87_Java_fragment();

	// $ANTLR start synpred87_Java
	private void synpred87_Java_fragment()
	{
		EnterRule_synpred87_Java_fragment();
		EnterRule("synpred87_Java_fragment", 206);
		TraceIn("synpred87_Java_fragment", 206);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:23: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:502:23: arrayDeclaratorList
			{
			DebugLocation(502, 23);
			PushFollow(Follow._arrayDeclaratorList_in_synpred87_Java7253);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred87_Java_fragment", 206);
			LeaveRule("synpred87_Java_fragment", 206);
			LeaveRule_synpred87_Java_fragment();
		}
	}
	// $ANTLR end synpred87_Java

	partial void EnterRule_synpred88_Java_fragment();
	partial void LeaveRule_synpred88_Java_fragment();

	// $ANTLR start synpred88_Java
	private void synpred88_Java_fragment()
	{
		EnterRule_synpred88_Java_fragment();
		EnterRule("synpred88_Java_fragment", 207);
		TraceIn("synpred88_Java_fragment", 207);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:28: ( arrayDeclaratorList )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:507:28: arrayDeclaratorList
			{
			DebugLocation(507, 28);
			PushFollow(Follow._arrayDeclaratorList_in_synpred88_Java7302);
			arrayDeclaratorList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred88_Java_fragment", 207);
			LeaveRule("synpred88_Java_fragment", 207);
			LeaveRule_synpred88_Java_fragment();
		}
	}
	// $ANTLR end synpred88_Java

	partial void EnterRule_synpred90_Java_fragment();
	partial void LeaveRule_synpred90_Java_fragment();

	// $ANTLR start synpred90_Java
	private void synpred90_Java_fragment()
	{
		EnterRule_synpred90_Java_fragment();
		EnterRule("synpred90_Java_fragment", 209);
		TraceIn("synpred90_Java_fragment", 209);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:20: ( DOT typeIdent )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:517:20: DOT typeIdent
			{
			DebugLocation(517, 20);
			Match(input,DOT,Follow._DOT_in_synpred90_Java7387); if (state.failed) return;
			DebugLocation(517, 24);
			PushFollow(Follow._typeIdent_in_synpred90_Java7389);
			typeIdent();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Java_fragment", 209);
			LeaveRule("synpred90_Java_fragment", 209);
			LeaveRule_synpred90_Java_fragment();
		}
	}
	// $ANTLR end synpred90_Java

	partial void EnterRule_synpred92_Java_fragment();
	partial void LeaveRule_synpred92_Java_fragment();

	// $ANTLR start synpred92_Java
	private void synpred92_Java_fragment()
	{
		EnterRule_synpred92_Java_fragment();
		EnterRule("synpred92_Java_fragment", 211);
		TraceIn("synpred92_Java_fragment", 211);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:16: ( genericTypeArgumentList )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:527:16: genericTypeArgumentList
			{
			DebugLocation(527, 16);
			PushFollow(Follow._genericTypeArgumentList_in_synpred92_Java7477);
			genericTypeArgumentList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred92_Java_fragment", 211);
			LeaveRule("synpred92_Java_fragment", 211);
			LeaveRule_synpred92_Java_fragment();
		}
	}
	// $ANTLR end synpred92_Java

	partial void EnterRule_synpred101_Java_fragment();
	partial void LeaveRule_synpred101_Java_fragment();

	// $ANTLR start synpred101_Java
	private void synpred101_Java_fragment()
	{
		EnterRule_synpred101_Java_fragment();
		EnterRule("synpred101_Java_fragment", 220);
		TraceIn("synpred101_Java_fragment", 220);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:40: ( COMMA genericTypeArgument )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:547:40: COMMA genericTypeArgument
			{
			DebugLocation(547, 40);
			Match(input,COMMA,Follow._COMMA_in_synpred101_Java7620); if (state.failed) return;
			DebugLocation(547, 46);
			PushFollow(Follow._genericTypeArgument_in_synpred101_Java7622);
			genericTypeArgument();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred101_Java_fragment", 220);
			LeaveRule("synpred101_Java_fragment", 220);
			LeaveRule_synpred101_Java_fragment();
		}
	}
	// $ANTLR end synpred101_Java

	partial void EnterRule_synpred103_Java_fragment();
	partial void LeaveRule_synpred103_Java_fragment();

	// $ANTLR start synpred103_Java
	private void synpred103_Java_fragment()
	{
		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 222);
		TraceIn("synpred103_Java_fragment", 222);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:553:18: ( genericWildcardBoundType )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:553:18: genericWildcardBoundType
			{
			DebugLocation(553, 18);
			PushFollow(Follow._genericWildcardBoundType_in_synpred103_Java7676);
			genericWildcardBoundType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 222);
			LeaveRule("synpred103_Java_fragment", 222);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java

	partial void EnterRule_synpred108_Java_fragment();
	partial void LeaveRule_synpred108_Java_fragment();

	// $ANTLR start synpred108_Java
	private void synpred108_Java_fragment()
	{
		EnterRule_synpred108_Java_fragment();
		EnterRule("synpred108_Java_fragment", 227);
		TraceIn("synpred108_Java_fragment", 227);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:42: ( COMMA formalParameterStandardDecl )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:42: COMMA formalParameterStandardDecl
			{
			DebugLocation(578, 42);
			Match(input,COMMA,Follow._COMMA_in_synpred108_Java7894); if (state.failed) return;
			DebugLocation(578, 48);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred108_Java7896);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_Java_fragment", 227);
			LeaveRule("synpred108_Java_fragment", 227);
			LeaveRule_synpred108_Java_fragment();
		}
	}
	// $ANTLR end synpred108_Java

	partial void EnterRule_synpred110_Java_fragment();
	partial void LeaveRule_synpred110_Java_fragment();

	// $ANTLR start synpred110_Java
	private void synpred110_Java_fragment()
	{
		EnterRule_synpred110_Java_fragment();
		EnterRule("synpred110_Java_fragment", 229);
		TraceIn("synpred110_Java_fragment", 229);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
			{
			DebugLocation(578, 13);
			PushFollow(Follow._formalParameterStandardDecl_in_synpred110_Java7891);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(578, 41);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:41: ( COMMA formalParameterStandardDecl )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_1 = input.LA(1);

				if ((LA213_1==COMMA))
				{
					int LA213_2 = input.LA(2);

					if ((EvaluatePredicate(synpred108_Java_fragment)))
					{
						alt213 = 1;
					}


				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:42: COMMA formalParameterStandardDecl
					{
					DebugLocation(578, 42);
					Match(input,COMMA,Follow._COMMA_in_synpred110_Java7894); if (state.failed) return;
					DebugLocation(578, 48);
					PushFollow(Follow._formalParameterStandardDecl_in_synpred110_Java7896);
					formalParameterStandardDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }

			DebugLocation(578, 78);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:78: ( COMMA formalParameterVarArgDecl )?
			int alt214=2;
			try { DebugEnterSubRule(214);
			try { DebugEnterDecision(214, false);
			int LA214_1 = input.LA(1);

			if ((LA214_1==COMMA))
			{
				alt214 = 1;
			}
			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:578:79: COMMA formalParameterVarArgDecl
				{
				DebugLocation(578, 79);
				Match(input,COMMA,Follow._COMMA_in_synpred110_Java7901); if (state.failed) return;
				DebugLocation(578, 85);
				PushFollow(Follow._formalParameterVarArgDecl_in_synpred110_Java7903);
				formalParameterVarArgDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(214); }


			}

		}
		finally
		{
			TraceOut("synpred110_Java_fragment", 229);
			LeaveRule("synpred110_Java_fragment", 229);
			LeaveRule_synpred110_Java_fragment();
		}
	}
	// $ANTLR end synpred110_Java

	partial void EnterRule_synpred111_Java_fragment();
	partial void LeaveRule_synpred111_Java_fragment();

	// $ANTLR start synpred111_Java
	private void synpred111_Java_fragment()
	{
		EnterRule_synpred111_Java_fragment();
		EnterRule("synpred111_Java_fragment", 230);
		TraceIn("synpred111_Java_fragment", 230);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:581:13: ( formalParameterVarArgDecl )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:581:13: formalParameterVarArgDecl
			{
			DebugLocation(581, 13);
			PushFollow(Follow._formalParameterVarArgDecl_in_synpred111_Java7960);
			formalParameterVarArgDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred111_Java_fragment", 230);
			LeaveRule("synpred111_Java_fragment", 230);
			LeaveRule_synpred111_Java_fragment();
		}
	}
	// $ANTLR end synpred111_Java

	partial void EnterRule_synpred112_Java_fragment();
	partial void LeaveRule_synpred112_Java_fragment();

	// $ANTLR start synpred112_Java
	private void synpred112_Java_fragment()
	{
		IToken ident = default(IToken);

		EnterRule_synpred112_Java_fragment();
		EnterRule("synpred112_Java_fragment", 231);
		TraceIn("synpred112_Java_fragment", 231);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:602:13: ( DOT ident= IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:602:13: DOT ident= IDENT
			{
			DebugLocation(602, 13);
			Match(input,DOT,Follow._DOT_in_synpred112_Java8205); if (state.failed) return;
			DebugLocation(602, 22);
			ident=(IToken)Match(input,IDENT,Follow._IDENT_in_synpred112_Java8209); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_Java_fragment", 231);
			LeaveRule("synpred112_Java_fragment", 231);
			LeaveRule_synpred112_Java_fragment();
		}
	}
	// $ANTLR end synpred112_Java

	partial void EnterRule_synpred113_Java_fragment();
	partial void LeaveRule_synpred113_Java_fragment();

	// $ANTLR start synpred113_Java
	private void synpred113_Java_fragment()
	{
		EnterRule_synpred113_Java_fragment();
		EnterRule("synpred113_Java_fragment", 232);
		TraceIn("synpred113_Java_fragment", 232);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:9: ( annotation )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:609:9: annotation
			{
			DebugLocation(609, 9);
			PushFollow(Follow._annotation_in_synpred113_Java8262);
			annotation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Java_fragment", 232);
			LeaveRule("synpred113_Java_fragment", 232);
			LeaveRule_synpred113_Java_fragment();
		}
	}
	// $ANTLR end synpred113_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	private void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 244);
		TraceIn("synpred125_Java_fragment", 244);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:660:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:660:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			{
			DebugLocation(660, 9);
			PushFollow(Follow._modifierList_in_synpred125_Java8716);
			modifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(660, 22);
			PushFollow(Follow._type_in_synpred125_Java8718);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(661, 9);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
			int alt219=2;
			try { DebugEnterSubRule(219);
			try { DebugEnterDecision(219, false);
			int LA219_1 = input.LA(1);

			if ((LA219_1==IDENT))
			{
				int LA219_2 = input.LA(2);

				if ((LA219_2==LPAREN))
				{
					alt219 = 1;
				}
				else if ((LA219_2==ASSIGN||LA219_2==COMMA||LA219_2==LBRACK||LA219_2==SEMI))
				{
					alt219 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 219, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 219, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
				{
				DebugLocation(661, 13);
				Match(input,IDENT,Follow._IDENT_in_synpred125_Java8732); if (state.failed) return;
				DebugLocation(661, 19);
				Match(input,LPAREN,Follow._LPAREN_in_synpred125_Java8734); if (state.failed) return;
				DebugLocation(661, 26);
				Match(input,RPAREN,Follow._RPAREN_in_synpred125_Java8736); if (state.failed) return;
				DebugLocation(661, 33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:33: ( annotationDefaultValue )?
				int alt218=2;
				try { DebugEnterSubRule(218);
				try { DebugEnterDecision(218, false);
				int LA218_1 = input.LA(1);

				if ((LA218_1==DEFAULT))
				{
					alt218 = 1;
				}
				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:661:33: annotationDefaultValue
					{
					DebugLocation(661, 33);
					PushFollow(Follow._annotationDefaultValue_in_synpred125_Java8738);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(218); }

				DebugLocation(661, 57);
				Match(input,SEMI,Follow._SEMI_in_synpred125_Java8741); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:663:13: classFieldDeclaratorList SEMI
				{
				DebugLocation(663, 13);
				PushFollow(Follow._classFieldDeclaratorList_in_synpred125_Java8783);
				classFieldDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(663, 38);
				Match(input,SEMI,Follow._SEMI_in_synpred125_Java8785); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(219); }


			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 244);
			LeaveRule("synpred125_Java_fragment", 244);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred126_Java_fragment();
	partial void LeaveRule_synpred126_Java_fragment();

	// $ANTLR start synpred126_Java
	private void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 245);
		TraceIn("synpred126_Java_fragment", 245);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:676:9: ( localVariableDeclaration SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:676:9: localVariableDeclaration SEMI
			{
			DebugLocation(676, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred126_Java8877);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(676, 34);
			Match(input,SEMI,Follow._SEMI_in_synpred126_Java8879); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 245);
			LeaveRule("synpred126_Java_fragment", 245);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java

	partial void EnterRule_synpred127_Java_fragment();
	partial void LeaveRule_synpred127_Java_fragment();

	// $ANTLR start synpred127_Java
	private void synpred127_Java_fragment()
	{
		EnterRule_synpred127_Java_fragment();
		EnterRule("synpred127_Java_fragment", 246);
		TraceIn("synpred127_Java_fragment", 246);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:677:9: ( typeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:677:9: typeDeclaration
			{
			DebugLocation(677, 9);
			PushFollow(Follow._typeDeclaration_in_synpred127_Java8890);
			typeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred127_Java_fragment", 246);
			LeaveRule("synpred127_Java_fragment", 246);
			LeaveRule_synpred127_Java_fragment();
		}
	}
	// $ANTLR end synpred127_Java

	partial void EnterRule_synpred128_Java_fragment();
	partial void LeaveRule_synpred128_Java_fragment();

	// $ANTLR start synpred128_Java
	private void synpred128_Java_fragment()
	{
		EnterRule_synpred128_Java_fragment();
		EnterRule("synpred128_Java_fragment", 247);
		TraceIn("synpred128_Java_fragment", 247);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:678:9: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:678:9: statement
			{
			DebugLocation(678, 9);
			PushFollow(Follow._statement_in_synpred128_Java8900);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred128_Java_fragment", 247);
			LeaveRule("synpred128_Java_fragment", 247);
			LeaveRule_synpred128_Java_fragment();
		}
	}
	// $ANTLR end synpred128_Java

	partial void EnterRule_synpred129_Java_fragment();
	partial void LeaveRule_synpred129_Java_fragment();

	// $ANTLR start synpred129_Java
	private void synpred129_Java_fragment()
	{
		EnterRule_synpred129_Java_fragment();
		EnterRule("synpred129_Java_fragment", 248);
		TraceIn("synpred129_Java_fragment", 248);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:1: ( LPAREN )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:1: LPAREN
			{
			DebugLocation(683, 1);
			Match(input,LPAREN,Follow._LPAREN_in_synpred129_Java8929); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_Java_fragment", 248);
			LeaveRule("synpred129_Java_fragment", 248);
			LeaveRule_synpred129_Java_fragment();
		}
	}
	// $ANTLR end synpred129_Java

	partial void EnterRule_synpred130_Java_fragment();
	partial void LeaveRule_synpred130_Java_fragment();

	// $ANTLR start synpred130_Java
	private void synpred130_Java_fragment()
	{
		EnterRule_synpred130_Java_fragment();
		EnterRule("synpred130_Java_fragment", 249);
		TraceIn("synpred130_Java_fragment", 249);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:20: ( DOT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:20: DOT
			{
			DebugLocation(683, 20);
			Match(input,DOT,Follow._DOT_in_synpred130_Java8934); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Java_fragment", 249);
			LeaveRule("synpred130_Java_fragment", 249);
			LeaveRule_synpred130_Java_fragment();
		}
	}
	// $ANTLR end synpred130_Java

	partial void EnterRule_synpred131_Java_fragment();
	partial void LeaveRule_synpred131_Java_fragment();

	// $ANTLR start synpred131_Java
	private void synpred131_Java_fragment()
	{
		EnterRule_synpred131_Java_fragment();
		EnterRule("synpred131_Java_fragment", 250);
		TraceIn("synpred131_Java_fragment", 250);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:25: ( SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:683:25: SEMI
			{
			DebugLocation(683, 25);
			Match(input,SEMI,Follow._SEMI_in_synpred131_Java8937); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred131_Java_fragment", 250);
			LeaveRule("synpred131_Java_fragment", 250);
			LeaveRule_synpred131_Java_fragment();
		}
	}
	// $ANTLR end synpred131_Java

	partial void EnterRule_synpred132_Java_fragment();
	partial void LeaveRule_synpred132_Java_fragment();

	// $ANTLR start synpred132_Java
	private void synpred132_Java_fragment()
	{
		EnterRule_synpred132_Java_fragment();
		EnterRule("synpred132_Java_fragment", 251);
		TraceIn("synpred132_Java_fragment", 251);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:5: ({...}? IDENT )
			{
			DebugLocation(691, 5);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:691:8: {...}? IDENT
			{
			DebugLocation(691, 8);
			if (!((input.LT(1).Text == "insert")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred132_Java", "input.LT(1).Text == \"insert\"");
			}
			DebugLocation(691, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred132_Java8972); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred132_Java_fragment", 251);
			LeaveRule("synpred132_Java_fragment", 251);
			LeaveRule_synpred132_Java_fragment();
		}
	}
	// $ANTLR end synpred132_Java

	partial void EnterRule_synpred133_Java_fragment();
	partial void LeaveRule_synpred133_Java_fragment();

	// $ANTLR start synpred133_Java
	private void synpred133_Java_fragment()
	{
		EnterRule_synpred133_Java_fragment();
		EnterRule("synpred133_Java_fragment", 252);
		TraceIn("synpred133_Java_fragment", 252);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:5: ({...}? IDENT )
			{
			DebugLocation(692, 5);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:692:8: {...}? IDENT
			{
			DebugLocation(692, 8);
			if (!((input.LT(1).Text == "update")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred133_Java", "input.LT(1).Text == \"update\"");
			}
			DebugLocation(692, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred133_Java8985); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred133_Java_fragment", 252);
			LeaveRule("synpred133_Java_fragment", 252);
			LeaveRule_synpred133_Java_fragment();
		}
	}
	// $ANTLR end synpred133_Java

	partial void EnterRule_synpred134_Java_fragment();
	partial void LeaveRule_synpred134_Java_fragment();

	// $ANTLR start synpred134_Java
	private void synpred134_Java_fragment()
	{
		EnterRule_synpred134_Java_fragment();
		EnterRule("synpred134_Java_fragment", 253);
		TraceIn("synpred134_Java_fragment", 253);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:5: ( ({...}? IDENT ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:5: ({...}? IDENT )
			{
			DebugLocation(693, 5);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:693:8: {...}? IDENT
			{
			DebugLocation(693, 8);
			if (!((input.LT(1).Text == "delete")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred134_Java", "input.LT(1).Text == \"delete\"");
			}
			DebugLocation(693, 40);
			Match(input,IDENT,Follow._IDENT_in_synpred134_Java8998); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred134_Java_fragment", 253);
			LeaveRule("synpred134_Java_fragment", 253);
			LeaveRule_synpred134_Java_fragment();
		}
	}
	// $ANTLR end synpred134_Java

	partial void EnterRule_synpred137_Java_fragment();
	partial void LeaveRule_synpred137_Java_fragment();

	// $ANTLR start synpred137_Java
	private void synpred137_Java_fragment()
	{
		AstParserRuleReturnScope<CommonTree, IToken> elseStat = default(AstParserRuleReturnScope<CommonTree, IToken>);

		EnterRule_synpred137_Java_fragment();
		EnterRule("synpred137_Java_fragment", 256);
		TraceIn("synpred137_Java_fragment", 256);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:717:13: ( ELSE elseStat= statement )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:717:13: ELSE elseStat= statement
			{
			DebugLocation(717, 13);
			Match(input,ELSE,Follow._ELSE_in_synpred137_Java9184); if (state.failed) return;
			DebugLocation(717, 26);
			PushFollow(Follow._statement_in_synpred137_Java9188);
			elseStat=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_Java_fragment", 256);
			LeaveRule("synpred137_Java_fragment", 256);
			LeaveRule_synpred137_Java_fragment();
		}
	}
	// $ANTLR end synpred137_Java

	partial void EnterRule_synpred139_Java_fragment();
	partial void LeaveRule_synpred139_Java_fragment();

	// $ANTLR start synpred139_Java
	private void synpred139_Java_fragment()
	{
		EnterRule_synpred139_Java_fragment();
		EnterRule("synpred139_Java_fragment", 258);
		TraceIn("synpred139_Java_fragment", 258);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:721:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:721:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
			{
			DebugLocation(721, 13);
			PushFollow(Follow._forInit_in_synpred139_Java9371);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(721, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred139_Java9373); if (state.failed) return;
			DebugLocation(721, 26);
			PushFollow(Follow._forCondition_in_synpred139_Java9375);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(721, 39);
			Match(input,SEMI,Follow._SEMI_in_synpred139_Java9377); if (state.failed) return;
			DebugLocation(721, 44);
			PushFollow(Follow._forUpdater_in_synpred139_Java9379);
			forUpdater();
			PopFollow();
			if (state.failed) return;
			DebugLocation(721, 55);
			Match(input,RPAREN,Follow._RPAREN_in_synpred139_Java9381); if (state.failed) return;
			DebugLocation(721, 62);
			PushFollow(Follow._statement_in_synpred139_Java9383);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_Java_fragment", 258);
			LeaveRule("synpred139_Java_fragment", 258);
			LeaveRule_synpred139_Java_fragment();
		}
	}
	// $ANTLR end synpred139_Java

	partial void EnterRule_synpred155_Java_fragment();
	partial void LeaveRule_synpred155_Java_fragment();

	// $ANTLR start synpred155_Java
	private void synpred155_Java_fragment()
	{
		EnterRule_synpred155_Java_fragment();
		EnterRule("synpred155_Java_fragment", 274);
		TraceIn("synpred155_Java_fragment", 274);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:733:9: ( IDENT COLON statement )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:733:9: IDENT COLON statement
			{
			DebugLocation(733, 9);
			Match(input,IDENT,Follow._IDENT_in_synpred155_Java9996); if (state.failed) return;
			DebugLocation(733, 15);
			Match(input,COLON,Follow._COLON_in_synpred155_Java9998); if (state.failed) return;
			DebugLocation(733, 21);
			PushFollow(Follow._statement_in_synpred155_Java10000);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred155_Java_fragment", 274);
			LeaveRule("synpred155_Java_fragment", 274);
			LeaveRule_synpred155_Java_fragment();
		}
	}
	// $ANTLR end synpred155_Java

	partial void EnterRule_synpred156_Java_fragment();
	partial void LeaveRule_synpred156_Java_fragment();

	// $ANTLR start synpred156_Java
	private void synpred156_Java_fragment()
	{
		EnterRule_synpred156_Java_fragment();
		EnterRule("synpred156_Java_fragment", 275);
		TraceIn("synpred156_Java_fragment", 275);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:734:9: ( dmlOperation )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:734:9: dmlOperation
			{
			DebugLocation(734, 9);
			PushFollow(Follow._dmlOperation_in_synpred156_Java10067);
			dmlOperation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred156_Java_fragment", 275);
			LeaveRule("synpred156_Java_fragment", 275);
			LeaveRule_synpred156_Java_fragment();
		}
	}
	// $ANTLR end synpred156_Java

	partial void EnterRule_synpred157_Java_fragment();
	partial void LeaveRule_synpred157_Java_fragment();

	// $ANTLR start synpred157_Java
	private void synpred157_Java_fragment()
	{
		EnterRule_synpred157_Java_fragment();
		EnterRule("synpred157_Java_fragment", 276);
		TraceIn("synpred157_Java_fragment", 276);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:735:9: ( expression SEMI )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:735:9: expression SEMI
			{
			DebugLocation(735, 9);
			PushFollow(Follow._expression_in_synpred157_Java10077);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(735, 20);
			Match(input,SEMI,Follow._SEMI_in_synpred157_Java10079); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Java_fragment", 276);
			LeaveRule("synpred157_Java_fragment", 276);
			LeaveRule_synpred157_Java_fragment();
		}
	}
	// $ANTLR end synpred157_Java

	partial void EnterRule_synpred158_Java_fragment();
	partial void LeaveRule_synpred158_Java_fragment();

	// $ANTLR start synpred158_Java
	private void synpred158_Java_fragment()
	{
		EnterRule_synpred158_Java_fragment();
		EnterRule("synpred158_Java_fragment", 277);
		TraceIn("synpred158_Java_fragment", 277);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:736:8: ({...}? expression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:736:8: {...}? expression
			{
			DebugLocation(736, 8);
			if (!((input.LT(1).Text == "system" && input.LT(2).Text == "." && input.LT(3).Text == "runas")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred158_Java", "input.LT(1).Text == \"system\" && input.LT(2).Text == \".\" && input.LT(3).Text == \"runas\"");
			}
			DebugLocation(736, 99);
			PushFollow(Follow._expression_in_synpred158_Java10092);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred158_Java_fragment", 277);
			LeaveRule("synpred158_Java_fragment", 277);
			LeaveRule_synpred158_Java_fragment();
		}
	}
	// $ANTLR end synpred158_Java

	partial void EnterRule_synpred161_Java_fragment();
	partial void LeaveRule_synpred161_Java_fragment();

	// $ANTLR start synpred161_Java
	private void synpred161_Java_fragment()
	{
		EnterRule_synpred161_Java_fragment();
		EnterRule("synpred161_Java_fragment", 280);
		TraceIn("synpred161_Java_fragment", 280);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:9: ( switchCaseLabel )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:760:9: switchCaseLabel
			{
			DebugLocation(760, 9);
			PushFollow(Follow._switchCaseLabel_in_synpred161_Java10297);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Java_fragment", 280);
			LeaveRule("synpred161_Java_fragment", 280);
			LeaveRule_synpred161_Java_fragment();
		}
	}
	// $ANTLR end synpred161_Java

	partial void EnterRule_synpred164_Java_fragment();
	partial void LeaveRule_synpred164_Java_fragment();

	// $ANTLR start synpred164_Java
	private void synpred164_Java_fragment()
	{
		EnterRule_synpred164_Java_fragment();
		EnterRule("synpred164_Java_fragment", 283);
		TraceIn("synpred164_Java_fragment", 283);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:772:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:772:9: localVariableDeclaration
			{
			DebugLocation(772, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred164_Java10387);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred164_Java_fragment", 283);
			LeaveRule("synpred164_Java_fragment", 283);
			LeaveRule_synpred164_Java_fragment();
		}
	}
	// $ANTLR end synpred164_Java

	partial void EnterRule_synpred165_Java_fragment();
	partial void LeaveRule_synpred165_Java_fragment();

	// $ANTLR start synpred165_Java
	private void synpred165_Java_fragment()
	{
		EnterRule_synpred165_Java_fragment();
		EnterRule("synpred165_Java_fragment", 284);
		TraceIn("synpred165_Java_fragment", 284);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:773:9: ( expressionList )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:773:9: expressionList
			{
			DebugLocation(773, 9);
			PushFollow(Follow._expressionList_in_synpred165_Java10409);
			expressionList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred165_Java_fragment", 284);
			LeaveRule("synpred165_Java_fragment", 284);
			LeaveRule_synpred165_Java_fragment();
		}
	}
	// $ANTLR end synpred165_Java

	partial void EnterRule_synpred193_Java_fragment();
	partial void LeaveRule_synpred193_Java_fragment();

	// $ANTLR start synpred193_Java
	private void synpred193_Java_fragment()
	{
		EnterRule_synpred193_Java_fragment();
		EnterRule("synpred193_Java_fragment", 312);
		TraceIn("synpred193_Java_fragment", 312);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:13: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:860:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
			{
			DebugLocation(860, 13);
			if ((input.LA(1)>=GREATER_OR_EQUAL && input.LA(1)<=GREATER_THAN)||(input.LA(1)>=LESS_OR_EQUAL && input.LA(1)<=LESS_THAN))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(865, 13);
			PushFollow(Follow._shiftExpression_in_synpred193_Java11356);
			shiftExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred193_Java_fragment", 312);
			LeaveRule("synpred193_Java_fragment", 312);
			LeaveRule_synpred193_Java_fragment();
		}
	}
	// $ANTLR end synpred193_Java

	partial void EnterRule_synpred198_Java_fragment();
	partial void LeaveRule_synpred198_Java_fragment();

	// $ANTLR start synpred198_Java
	private void synpred198_Java_fragment()
	{
		EnterRule_synpred198_Java_fragment();
		EnterRule("synpred198_Java_fragment", 317);
		TraceIn("synpred198_Java_fragment", 317);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:13: ( ( PLUS | MINUS ) multiplicativeExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:881:13: ( PLUS | MINUS ) multiplicativeExpression
			{
			DebugLocation(881, 13);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(884, 13);
			PushFollow(Follow._multiplicativeExpression_in_synpred198_Java11571);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred198_Java_fragment", 317);
			LeaveRule("synpred198_Java_fragment", 317);
			LeaveRule_synpred198_Java_fragment();
		}
	}
	// $ANTLR end synpred198_Java

	partial void EnterRule_synpred208_Java_fragment();
	partial void LeaveRule_synpred208_Java_fragment();

	// $ANTLR start synpred208_Java
	private void synpred208_Java_fragment()
	{
		EnterRule_synpred208_Java_fragment();
		EnterRule("synpred208_Java_fragment", 327);
		TraceIn("synpred208_Java_fragment", 327);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:909:9: ( LPAREN type RPAREN unaryExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:909:9: LPAREN type RPAREN unaryExpression
			{
			DebugLocation(909, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred208_Java11939); if (state.failed) return;
			DebugLocation(909, 16);
			PushFollow(Follow._type_in_synpred208_Java11941);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(909, 21);
			Match(input,RPAREN,Follow._RPAREN_in_synpred208_Java11943); if (state.failed) return;
			DebugLocation(909, 28);
			PushFollow(Follow._unaryExpression_in_synpred208_Java11945);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Java_fragment", 327);
			LeaveRule("synpred208_Java_fragment", 327);
			LeaveRule_synpred208_Java_fragment();
		}
	}
	// $ANTLR end synpred208_Java

	partial void EnterRule_synpred210_Java_fragment();
	partial void LeaveRule_synpred210_Java_fragment();

	// $ANTLR start synpred210_Java
	private void synpred210_Java_fragment()
	{
		EnterRule_synpred210_Java_fragment();
		EnterRule("synpred210_Java_fragment", 329);
		TraceIn("synpred210_Java_fragment", 329);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:21: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:21: arguments
			{
			DebugLocation(923, 21);
			PushFollow(Follow._arguments_in_synpred210_Java12289);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred210_Java_fragment", 329);
			LeaveRule("synpred210_Java_fragment", 329);
			LeaveRule_synpred210_Java_fragment();
		}
	}
	// $ANTLR end synpred210_Java

	partial void EnterRule_synpred214_Java_fragment();
	partial void LeaveRule_synpred214_Java_fragment();

	// $ANTLR start synpred214_Java
	private void synpred214_Java_fragment()
	{
		EnterRule_synpred214_Java_fragment();
		EnterRule("synpred214_Java_fragment", 333);
		TraceIn("synpred214_Java_fragment", 333);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:21: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:21: arguments
			{
			DebugLocation(929, 21);
			PushFollow(Follow._arguments_in_synpred214_Java12553);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_Java_fragment", 333);
			LeaveRule("synpred214_Java_fragment", 333);
			LeaveRule_synpred214_Java_fragment();
		}
	}
	// $ANTLR end synpred214_Java

	partial void EnterRule_synpred216_Java_fragment();
	partial void LeaveRule_synpred216_Java_fragment();

	// $ANTLR start synpred216_Java
	private void synpred216_Java_fragment()
	{
		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);

		EnterRule_synpred216_Java_fragment();
		EnterRule("synpred216_Java_fragment", 335);
		TraceIn("synpred216_Java_fragment", 335);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:918:13: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )? | THIS |Super= SUPER arguments | ( SUPER innerDot= DOT IDENT ) ( arguments )? | innerNewExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:918:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )? | THIS |Super= SUPER arguments | ( SUPER innerDot= DOT IDENT ) ( arguments )? | innerNewExpression )
			{
			DebugLocation(918, 21);
			outerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred216_Java12078); if (state.failed) return;
			DebugLocation(919, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:13: ( ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )? | THIS |Super= SUPER arguments | ( SUPER innerDot= DOT IDENT ) ( arguments )? | innerNewExpression )
			int alt234=5;
			try { DebugEnterSubRule(234);
			try { DebugEnterDecision(234, false);
			switch (input.LA(1))
			{
			case IDENT:
			case LESS_THAN:
				{
				alt234 = 1;
				}
				break;
			case THIS:
				{
				alt234 = 2;
				}
				break;
			case SUPER:
				{
				int LA234_2 = input.LA(2);

				if ((LA234_2==DOT))
				{
					alt234 = 4;
				}
				else if ((LA234_2==LPAREN))
				{
					alt234 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 234, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NEW:
				{
				alt234 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 234, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(234); }
			switch (alt234)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )?
				{
				DebugLocation(919, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: ( genericTypeArgumentListSimplified )? IDENT
				{
				DebugLocation(919, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: ( genericTypeArgumentListSimplified )?
				int alt231=2;
				try { DebugEnterSubRule(231);
				try { DebugEnterDecision(231, false);
				int LA231_1 = input.LA(1);

				if ((LA231_1==LESS_THAN))
				{
					alt231 = 1;
				}
				} finally { DebugExitDecision(231); }
				switch (alt231)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:919:21: genericTypeArgumentListSimplified
					{
					DebugLocation(919, 21);
					PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred216_Java12128);
					genericTypeArgumentListSimplified();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(231); }

				DebugLocation(921, 21);
				Match(input,IDENT,Follow._IDENT_in_synpred216_Java12210); if (state.failed) return;

				}

				DebugLocation(923, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:17: ( arguments )?
				int alt232=2;
				try { DebugEnterSubRule(232);
				try { DebugEnterDecision(232, false);
				int LA232_1 = input.LA(1);

				if ((LA232_1==LPAREN))
				{
					alt232 = 1;
				}
				} finally { DebugExitDecision(232); }
				switch (alt232)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:923:21: arguments
					{
					DebugLocation(923, 21);
					PushFollow(Follow._arguments_in_synpred216_Java12289);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(232); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:925:17: THIS
				{
				DebugLocation(925, 17);
				Match(input,THIS,Follow._THIS_in_synpred216_Java12362); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:926:17: Super= SUPER arguments
				{
				DebugLocation(926, 22);
				Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred216_Java12425); if (state.failed) return;
				DebugLocation(926, 29);
				PushFollow(Follow._arguments_in_synpred216_Java12427);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:17: ( SUPER innerDot= DOT IDENT ) ( arguments )?
				{
				DebugLocation(927, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:17: ( SUPER innerDot= DOT IDENT )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:927:21: SUPER innerDot= DOT IDENT
				{
				DebugLocation(927, 21);
				Match(input,SUPER,Follow._SUPER_in_synpred216_Java12480); if (state.failed) return;
				DebugLocation(927, 35);
				innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred216_Java12484); if (state.failed) return;
				DebugLocation(927, 40);
				Match(input,IDENT,Follow._IDENT_in_synpred216_Java12486); if (state.failed) return;

				}

				DebugLocation(929, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:17: ( arguments )?
				int alt233=2;
				try { DebugEnterSubRule(233);
				try { DebugEnterDecision(233, false);
				int LA233_1 = input.LA(1);

				if ((LA233_1==LPAREN))
				{
					alt233 = 1;
				}
				} finally { DebugExitDecision(233); }
				switch (alt233)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:929:21: arguments
					{
					DebugLocation(929, 21);
					PushFollow(Follow._arguments_in_synpred216_Java12553);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(233); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:931:17: innerNewExpression
				{
				DebugLocation(931, 17);
				PushFollow(Follow._innerNewExpression_in_synpred216_Java12624);
				innerNewExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(234); }


			}

		}
		finally
		{
			TraceOut("synpred216_Java_fragment", 335);
			LeaveRule("synpred216_Java_fragment", 335);
			LeaveRule_synpred216_Java_fragment();
		}
	}
	// $ANTLR end synpred216_Java

	partial void EnterRule_synpred218_Java_fragment();
	partial void LeaveRule_synpred218_Java_fragment();

	// $ANTLR start synpred218_Java
	private void synpred218_Java_fragment()
	{
		EnterRule_synpred218_Java_fragment();
		EnterRule("synpred218_Java_fragment", 337);
		TraceIn("synpred218_Java_fragment", 337);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:936:13: ( INC )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:936:13: INC
			{
			DebugLocation(936, 13);
			Match(input,INC,Follow._INC_in_synpred218_Java12746); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Java_fragment", 337);
			LeaveRule("synpred218_Java_fragment", 337);
			LeaveRule_synpred218_Java_fragment();
		}
	}
	// $ANTLR end synpred218_Java

	partial void EnterRule_synpred219_Java_fragment();
	partial void LeaveRule_synpred219_Java_fragment();

	// $ANTLR start synpred219_Java
	private void synpred219_Java_fragment()
	{
		EnterRule_synpred219_Java_fragment();
		EnterRule("synpred219_Java_fragment", 338);
		TraceIn("synpred219_Java_fragment", 338);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:937:13: ( DEC )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:937:13: DEC
			{
			DebugLocation(937, 13);
			Match(input,DEC,Follow._DEC_in_synpred219_Java12770); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Java_fragment", 338);
			LeaveRule("synpred219_Java_fragment", 338);
			LeaveRule_synpred219_Java_fragment();
		}
	}
	// $ANTLR end synpred219_Java

	partial void EnterRule_synpred228_Java_fragment();
	partial void LeaveRule_synpred228_Java_fragment();

	// $ANTLR start synpred228_Java
	private void synpred228_Java_fragment()
	{
		EnterRule_synpred228_Java_fragment();
		EnterRule("synpred228_Java_fragment", 347);
		TraceIn("synpred228_Java_fragment", 347);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:957:13: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:957:13: arguments
			{
			DebugLocation(957, 13);
			PushFollow(Follow._arguments_in_synpred228_Java13220);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred228_Java_fragment", 347);
			LeaveRule("synpred228_Java_fragment", 347);
			LeaveRule_synpred228_Java_fragment();
		}
	}
	// $ANTLR end synpred228_Java

	partial void EnterRule_synpred231_Java_fragment();
	partial void LeaveRule_synpred231_Java_fragment();

	// $ANTLR start synpred231_Java
	private void synpred231_Java_fragment()
	{
		EnterRule_synpred231_Java_fragment();
		EnterRule("synpred231_Java_fragment", 350);
		TraceIn("synpred231_Java_fragment", 350);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:13: ( arguments )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:962:13: arguments
			{
			DebugLocation(962, 13);
			PushFollow(Follow._arguments_in_synpred231_Java13371);
			arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred231_Java_fragment", 350);
			LeaveRule("synpred231_Java_fragment", 350);
			LeaveRule_synpred231_Java_fragment();
		}
	}
	// $ANTLR end synpred231_Java

	partial void EnterRule_synpred236_Java_fragment();
	partial void LeaveRule_synpred236_Java_fragment();

	// $ANTLR start synpred236_Java
	private void synpred236_Java_fragment()
	{
		EnterRule_synpred236_Java_fragment();
		EnterRule("synpred236_Java_fragment", 355);
		TraceIn("synpred236_Java_fragment", 355);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:13: ( arrayDeclarator )+ ( DOT CLASS )
			{
			DebugLocation(978, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:13: ( arrayDeclarator )+
			int cnt241=0;
			try { DebugEnterSubRule(241);
			while (true)
			{
				int alt241=2;
				try { DebugEnterDecision(241, false);
				int LA241_1 = input.LA(1);

				if ((LA241_1==LBRACK))
				{
					alt241 = 1;
				}


				} finally { DebugExitDecision(241); }
				switch (alt241)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:978:17: arrayDeclarator
					{
					DebugLocation(978, 17);
					PushFollow(Follow._arrayDeclarator_in_synpred236_Java13851);
					arrayDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt241 >= 1)
						goto loop241;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee241 = new EarlyExitException( 241, input );
					DebugRecognitionException(eee241);
					throw eee241;
				}
				cnt241++;
			}
			loop241:
				;

			} finally { DebugExitSubRule(241); }

			DebugLocation(980, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:980:13: ( DOT CLASS )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:980:17: DOT CLASS
			{
			DebugLocation(980, 17);
			Match(input,DOT,Follow._DOT_in_synpred236_Java13919); if (state.failed) return;
			DebugLocation(980, 21);
			Match(input,CLASS,Follow._CLASS_in_synpred236_Java13921); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred236_Java_fragment", 355);
			LeaveRule("synpred236_Java_fragment", 355);
			LeaveRule_synpred236_Java_fragment();
		}
	}
	// $ANTLR end synpred236_Java

	partial void EnterRule_synpred237_Java_fragment();
	partial void LeaveRule_synpred237_Java_fragment();

	// $ANTLR start synpred237_Java
	private void synpred237_Java_fragment()
	{
		EnterRule_synpred237_Java_fragment();
		EnterRule("synpred237_Java_fragment", 356);
		TraceIn("synpred237_Java_fragment", 356);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: ( block )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: block
			{
			DebugLocation(982, 23);
			PushFollow(Follow._block_in_synpred237_Java13993);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Java_fragment", 356);
			LeaveRule("synpred237_Java_fragment", 356);
			LeaveRule_synpred237_Java_fragment();
		}
	}
	// $ANTLR end synpred237_Java

	partial void EnterRule_synpred238_Java_fragment();
	partial void LeaveRule_synpred238_Java_fragment();

	// $ANTLR start synpred238_Java
	private void synpred238_Java_fragment()
	{
		EnterRule_synpred238_Java_fragment();
		EnterRule("synpred238_Java_fragment", 357);
		TraceIn("synpred238_Java_fragment", 357);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:13: ( arguments ( block )? )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:13: arguments ( block )?
			{
			DebugLocation(982, 13);
			PushFollow(Follow._arguments_in_synpred238_Java13991);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(982, 23);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: ( block )?
			int alt242=2;
			try { DebugEnterSubRule(242);
			try { DebugEnterDecision(242, false);
			int LA242_1 = input.LA(1);

			if ((LA242_1==LCURLY))
			{
				alt242 = 1;
			}
			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:982:23: block
				{
				DebugLocation(982, 23);
				PushFollow(Follow._block_in_synpred238_Java13993);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(242); }


			}

		}
		finally
		{
			TraceOut("synpred238_Java_fragment", 357);
			LeaveRule("synpred238_Java_fragment", 357);
			LeaveRule_synpred238_Java_fragment();
		}
	}
	// $ANTLR end synpred238_Java

	partial void EnterRule_synpred245_Java_fragment();
	partial void LeaveRule_synpred245_Java_fragment();

	// $ANTLR start synpred245_Java
	private void synpred245_Java_fragment()
	{
		IToken outerDot = default(IToken);
		IToken Super = default(IToken);
		IToken innerDot = default(IToken);

		EnterRule_synpred245_Java_fragment();
		EnterRule("synpred245_Java_fragment", 364);
		TraceIn("synpred245_Java_fragment", 364);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:983:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:983:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			{
			DebugLocation(983, 21);
			outerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred245_Java14054); if (state.failed) return;
			DebugLocation(984, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:984:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
			int alt245=5;
			try { DebugEnterSubRule(245);
			try { DebugEnterDecision(245, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt245 = 1;
				}
				break;
			case LESS_THAN:
				{
				alt245 = 2;
				}
				break;
			case THIS:
				{
				alt245 = 3;
				}
				break;
			case SUPER:
				{
				alt245 = 4;
				}
				break;
			case NEW:
				{
				alt245 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:984:17: CLASS
				{
				DebugLocation(984, 17);
				Match(input,CLASS,Follow._CLASS_in_synpred245_Java14072); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:985:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				{
				DebugLocation(985, 17);
				PushFollow(Follow._genericTypeArgumentListSimplified_in_synpred245_Java14135);
				genericTypeArgumentListSimplified();
				PopFollow();
				if (state.failed) return;
				DebugLocation(986, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:986:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
				int alt244=3;
				try { DebugEnterSubRule(244);
				try { DebugEnterDecision(244, false);
				int LA244_1 = input.LA(1);

				if ((LA244_1==SUPER))
				{
					int LA244_2 = input.LA(2);

					if ((LA244_2==DOT))
					{
						alt244 = 2;
					}
					else if ((LA244_2==LPAREN))
					{
						alt244 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 244, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA244_1==IDENT))
				{
					alt244 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 244, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(244); }
				switch (alt244)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:986:21: Super= SUPER arguments
					{
					DebugLocation(986, 26);
					Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred245_Java14160); if (state.failed) return;
					DebugLocation(986, 33);
					PushFollow(Follow._arguments_in_synpred245_Java14162);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:987:21: SUPER innerDot= DOT IDENT arguments
					{
					DebugLocation(987, 21);
					Match(input,SUPER,Follow._SUPER_in_synpred245_Java14212); if (state.failed) return;
					DebugLocation(987, 35);
					innerDot=(IToken)Match(input,DOT,Follow._DOT_in_synpred245_Java14216); if (state.failed) return;
					DebugLocation(987, 40);
					Match(input,IDENT,Follow._IDENT_in_synpred245_Java14218); if (state.failed) return;
					DebugLocation(987, 46);
					PushFollow(Follow._arguments_in_synpred245_Java14220);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:988:21: IDENT arguments
					{
					DebugLocation(988, 21);
					Match(input,IDENT,Follow._IDENT_in_synpred245_Java14270); if (state.failed) return;
					DebugLocation(988, 27);
					PushFollow(Follow._arguments_in_synpred245_Java14272);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(244); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:990:17: THIS
				{
				DebugLocation(990, 17);
				Match(input,THIS,Follow._THIS_in_synpred245_Java14347); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:991:17: Super= SUPER arguments
				{
				DebugLocation(991, 22);
				Super=(IToken)Match(input,SUPER,Follow._SUPER_in_synpred245_Java14413); if (state.failed) return;
				DebugLocation(991, 29);
				PushFollow(Follow._arguments_in_synpred245_Java14415);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:992:17: innerNewExpression
				{
				DebugLocation(992, 17);
				PushFollow(Follow._innerNewExpression_in_synpred245_Java14463);
				innerNewExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(245); }


			}

		}
		finally
		{
			TraceOut("synpred245_Java_fragment", 364);
			LeaveRule("synpred245_Java_fragment", 364);
			LeaveRule_synpred245_Java_fragment();
		}
	}
	// $ANTLR end synpred245_Java

	partial void EnterRule_synpred251_Java_fragment();
	partial void LeaveRule_synpred251_Java_fragment();

	// $ANTLR start synpred251_Java
	private void synpred251_Java_fragment()
	{
		EnterRule_synpred251_Java_fragment();
		EnterRule("synpred251_Java_fragment", 370);
		TraceIn("synpred251_Java_fragment", 370);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1012:10: ( mapDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1012:10: mapDeclaration
			{
			DebugLocation(1012, 10);
			PushFollow(Follow._mapDeclaration_in_synpred251_Java14708);
			mapDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred251_Java_fragment", 370);
			LeaveRule("synpred251_Java_fragment", 370);
			LeaveRule_synpred251_Java_fragment();
		}
	}
	// $ANTLR end synpred251_Java

	partial void EnterRule_synpred252_Java_fragment();
	partial void LeaveRule_synpred252_Java_fragment();

	// $ANTLR start synpred252_Java
	private void synpred252_Java_fragment()
	{
		EnterRule_synpred252_Java_fragment();
		EnterRule("synpred252_Java_fragment", 371);
		TraceIn("synpred252_Java_fragment", 371);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1013:10: ( setDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1013:10: setDeclaration
			{
			DebugLocation(1013, 10);
			PushFollow(Follow._setDeclaration_in_synpred252_Java14727);
			setDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred252_Java_fragment", 371);
			LeaveRule("synpred252_Java_fragment", 371);
			LeaveRule_synpred252_Java_fragment();
		}
	}
	// $ANTLR end synpred252_Java

	partial void EnterRule_synpred254_Java_fragment();
	partial void LeaveRule_synpred254_Java_fragment();

	// $ANTLR start synpred254_Java
	private void synpred254_Java_fragment()
	{
		EnterRule_synpred254_Java_fragment();
		EnterRule("synpred254_Java_fragment", 373);
		TraceIn("synpred254_Java_fragment", 373);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1016:27: ( classBody )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1016:27: classBody
			{
			DebugLocation(1016, 27);
			PushFollow(Follow._classBody_in_synpred254_Java14818);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred254_Java_fragment", 373);
			LeaveRule("synpred254_Java_fragment", 373);
			LeaveRule_synpred254_Java_fragment();
		}
	}
	// $ANTLR end synpred254_Java

	partial void EnterRule_synpred256_Java_fragment();
	partial void LeaveRule_synpred256_Java_fragment();

	// $ANTLR start synpred256_Java
	private void synpred256_Java_fragment()
	{
		EnterRule_synpred256_Java_fragment();
		EnterRule("synpred256_Java_fragment", 375);
		TraceIn("synpred256_Java_fragment", 375);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:64: ( classBody )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1023:64: classBody
			{
			DebugLocation(1023, 64);
			PushFollow(Follow._classBody_in_synpred256_Java14924);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred256_Java_fragment", 375);
			LeaveRule("synpred256_Java_fragment", 375);
			LeaveRule_synpred256_Java_fragment();
		}
	}
	// $ANTLR end synpred256_Java

	partial void EnterRule_synpred258_Java_fragment();
	partial void LeaveRule_synpred258_Java_fragment();

	// $ANTLR start synpred258_Java
	private void synpred258_Java_fragment()
	{
		EnterRule_synpred258_Java_fragment();
		EnterRule("synpred258_Java_fragment", 377);
		TraceIn("synpred258_Java_fragment", 377);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:37: ( LBRACK expression RBRACK )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1029:37: LBRACK expression RBRACK
			{
			DebugLocation(1029, 37);
			Match(input,LBRACK,Follow._LBRACK_in_synpred258_Java14991); if (state.failed) return;
			DebugLocation(1029, 45);
			PushFollow(Follow._expression_in_synpred258_Java14994);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1029, 56);
			Match(input,RBRACK,Follow._RBRACK_in_synpred258_Java14996); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred258_Java_fragment", 377);
			LeaveRule("synpred258_Java_fragment", 377);
			LeaveRule_synpred258_Java_fragment();
		}
	}
	// $ANTLR end synpred258_Java

	partial void EnterRule_synpred275_Java_fragment();
	partial void LeaveRule_synpred275_Java_fragment();

	// $ANTLR start synpred275_Java
	private void synpred275_Java_fragment()
	{
		EnterRule_synpred275_Java_fragment();
		EnterRule("synpred275_Java_fragment", 394);
		TraceIn("synpred275_Java_fragment", 394);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			{
			DebugLocation(1052, 2);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
			{
			DebugLocation(1052, 3);
			Match(input,LCURLY,Follow._LCURLY_in_synpred275_Java15170); if (state.failed) return;
			DebugLocation(1052, 7);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:7: ( modifier )?
			int alt248=2;
			try { DebugEnterSubRule(248);
			try { DebugEnterDecision(248, false);
			int LA248_1 = input.LA(1);

			if ((LA248_1==ABSTRACT||LA248_1==AT||LA248_1==FINAL||LA248_1==GLOBAL||LA248_1==NATIVE||LA248_1==OVERRIDE||LA248_1==PRIVATE||(LA248_1>=PROTECTED && LA248_1<=PUBLIC)||LA248_1==STATIC||LA248_1==STRICTFP||(LA248_1>=SYNCHRONIZED && LA248_1<=TEST_METHOD)||LA248_1==TRANSIENT||LA248_1==VIRTUAL||LA248_1==VOLATILE||(LA248_1>=WITHOUT_SHARING && LA248_1<=WITH_SHARING)))
			{
				alt248 = 1;
			}
			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:7: modifier
				{
				DebugLocation(1052, 7);
				PushFollow(Follow._modifier_in_synpred275_Java15172);
				modifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(248); }

			DebugLocation(1052, 17);
			PushFollow(Follow._getRule_in_synpred275_Java15175);
			getRule();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1052, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:25: ( SEMI | block )
			int alt249=2;
			try { DebugEnterSubRule(249);
			try { DebugEnterDecision(249, false);
			int LA249_1 = input.LA(1);

			if ((LA249_1==SEMI))
			{
				alt249 = 1;
			}
			else if ((LA249_1==LCURLY))
			{
				alt249 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 249, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:26: SEMI
				{
				DebugLocation(1052, 26);
				Match(input,SEMI,Follow._SEMI_in_synpred275_Java15178); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:31: block
				{
				DebugLocation(1052, 31);
				PushFollow(Follow._block_in_synpred275_Java15180);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(249); }

			DebugLocation(1052, 38);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:38: ( ( modifier )? setRule ( SEMI | block ) )?
			int alt252=2;
			try { DebugEnterSubRule(252);
			try { DebugEnterDecision(252, false);
			int LA252_1 = input.LA(1);

			if ((LA252_1==ABSTRACT||LA252_1==AT||LA252_1==FINAL||LA252_1==GLOBAL||LA252_1==IDENT||LA252_1==NATIVE||LA252_1==OVERRIDE||LA252_1==PRIVATE||(LA252_1>=PROTECTED && LA252_1<=PUBLIC)||LA252_1==STATIC||LA252_1==STRICTFP||(LA252_1>=SYNCHRONIZED && LA252_1<=TEST_METHOD)||LA252_1==TRANSIENT||LA252_1==VIRTUAL||LA252_1==VOLATILE||(LA252_1>=WITHOUT_SHARING && LA252_1<=WITH_SHARING)))
			{
				alt252 = 1;
			}
			} finally { DebugExitDecision(252); }
			switch (alt252)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: ( modifier )? setRule ( SEMI | block )
				{
				DebugLocation(1052, 39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: ( modifier )?
				int alt250=2;
				try { DebugEnterSubRule(250);
				try { DebugEnterDecision(250, false);
				int LA250_1 = input.LA(1);

				if ((LA250_1==ABSTRACT||LA250_1==AT||LA250_1==FINAL||LA250_1==GLOBAL||LA250_1==NATIVE||LA250_1==OVERRIDE||LA250_1==PRIVATE||(LA250_1>=PROTECTED && LA250_1<=PUBLIC)||LA250_1==STATIC||LA250_1==STRICTFP||(LA250_1>=SYNCHRONIZED && LA250_1<=TEST_METHOD)||LA250_1==TRANSIENT||LA250_1==VIRTUAL||LA250_1==VOLATILE||(LA250_1>=WITHOUT_SHARING && LA250_1<=WITH_SHARING)))
				{
					alt250 = 1;
				}
				} finally { DebugExitDecision(250); }
				switch (alt250)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:39: modifier
					{
					DebugLocation(1052, 39);
					PushFollow(Follow._modifier_in_synpred275_Java15184);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(250); }

				DebugLocation(1052, 49);
				PushFollow(Follow._setRule_in_synpred275_Java15187);
				setRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1052, 57);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:57: ( SEMI | block )
				int alt251=2;
				try { DebugEnterSubRule(251);
				try { DebugEnterDecision(251, false);
				int LA251_1 = input.LA(1);

				if ((LA251_1==SEMI))
				{
					alt251 = 1;
				}
				else if ((LA251_1==LCURLY))
				{
					alt251 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 251, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(251); }
				switch (alt251)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:58: SEMI
					{
					DebugLocation(1052, 58);
					Match(input,SEMI,Follow._SEMI_in_synpred275_Java15190); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\Java.g:1052:63: block
					{
					DebugLocation(1052, 63);
					PushFollow(Follow._block_in_synpred275_Java15192);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(251); }


				}
				break;

			}
			} finally { DebugExitSubRule(252); }

			DebugLocation(1052, 72);
			Match(input,RCURLY,Follow._RCURLY_in_synpred275_Java15197); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred275_Java_fragment", 394);
			LeaveRule("synpred275_Java_fragment", 394);
			LeaveRule_synpred275_Java_fragment();
		}
	}
	// $ANTLR end synpred275_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA124 dfa124;
	private DFA128 dfa128;
	private DFA137 dfa137;
	private DFA134 dfa134;
	private DFA135 dfa135;
	private DFA138 dfa138;
	private DFA141 dfa141;
	private DFA142 dfa142;
	private DFA149 dfa149;
	private DFA146 dfa146;
	private DFA154 dfa154;
	private DFA158 dfa158;
	private DFA159 dfa159;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa124 = new DFA124( this, SpecialStateTransition124 );
		dfa128 = new DFA128( this, SpecialStateTransition128 );
		dfa137 = new DFA137( this, SpecialStateTransition137 );
		dfa134 = new DFA134( this, SpecialStateTransition134 );
		dfa135 = new DFA135( this, SpecialStateTransition135 );
		dfa138 = new DFA138( this, SpecialStateTransition138 );
		dfa141 = new DFA141( this, SpecialStateTransition141 );
		dfa142 = new DFA142( this, SpecialStateTransition142 );
		dfa149 = new DFA149( this, SpecialStateTransition149 );
		dfa146 = new DFA146( this, SpecialStateTransition146 );
		dfa154 = new DFA154( this, SpecialStateTransition154 );
		dfa158 = new DFA158( this, SpecialStateTransition158 );
		dfa159 = new DFA159( this, SpecialStateTransition159 );
	}

	private class DFA124 : DFA
	{
		private const string DFA124_eotS =
			"\x8\xFFFF";
		private const string DFA124_eofS =
			"\x1\x1\x7\xFFFF";
		private const string DFA124_minS =
			"\x1\x4\x1\xFFFF\x1\x19\x1\xFFFF\x1\x0\x1\x16\x1\x91\x1\x16";
		private const string DFA124_maxS =
			"\x1\xC2\x1\xFFFF\x1\xB9\x1\xFFFF\x1\x0\x1\xA9\x1\x91\x1\xA9";
		private const string DFA124_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4\xFFFF";
		private const string DFA124_specialS =
			"\x4\xFFFF\x1\x0\x3\xFFFF}>";
		private static readonly string[] DFA124_transitionS =
			{
				"\x3\x1\xD\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x3"+
				"\xFFFF\x3\x1\x4\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x6\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\xA\xFFFF\x1\x1\x2\x3\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1"+
				"\x1\x6\xFFFF\x1\x1\x1\x3\x1\x2\x2\xFFFF\x5\x1\x2\xFFFF\x2\x1\x2\xFFFF"+
				"\x6\x1\x1\xFFFF\x4\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x6\x1\x2\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3\x1\x7\xFFFF"+
				"\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1",
				"",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\x3\xA\xFFFF\x2\x3\x6\xFFFF"+
				"\x1\x5\xB\xFFFF\x1\x3\x2\xFFFF\x1\x5\x1\x3\x10\xFFFF\x1\x3\x1\x4\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x5\xA\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x5\x1\x3\x2\xFFFF\x1\x3\x5\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x5\xFFFF\x1\x3\xA\xFFFF\x1\x1\xA\xFFFF\x1\x5\x1\x3\x5\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3",
				"",
				"\x1\xFFFF",
				"\x1\x1\x13\xFFFF\x1\x1\x9\xFFFF\x1\x3\x20\xFFFF\x1\x1\x2\xFFFF\x1\x1"+
				"\xE\xFFFF\x1\x6\x31\xFFFF\x1\x1\x9\xFFFF\x1\x1\x5\xFFFF\x1\x1",
				"\x1\x7",
				"\x1\x1\x13\xFFFF\x1\x1\x9\xFFFF\x1\x3\x20\xFFFF\x1\x1\x2\xFFFF\x1\x1"+
				"\xE\xFFFF\x1\x6\x31\xFFFF\x1\x1\x9\xFFFF\x1\x1\x5\xFFFF\x1\x1"
			};

		private static readonly short[] DFA124_eot = DFA.UnpackEncodedString(DFA124_eotS);
		private static readonly short[] DFA124_eof = DFA.UnpackEncodedString(DFA124_eofS);
		private static readonly char[] DFA124_min = DFA.UnpackEncodedStringToUnsignedChars(DFA124_minS);
		private static readonly char[] DFA124_max = DFA.UnpackEncodedStringToUnsignedChars(DFA124_maxS);
		private static readonly short[] DFA124_accept = DFA.UnpackEncodedString(DFA124_acceptS);
		private static readonly short[] DFA124_special = DFA.UnpackEncodedString(DFA124_specialS);
		private static readonly short[][] DFA124_transition;

		static DFA124()
		{
			int numStates = DFA124_transitionS.Length;
			DFA124_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA124_transition[i] = DFA.UnpackEncodedString(DFA124_transitionS[i]);
			}
		}

		public DFA124( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 124;
			this.eot = DFA124_eot;
			this.eof = DFA124_eof;
			this.min = DFA124_min;
			this.max = DFA124_max;
			this.accept = DFA124_accept;
			this.special = DFA124_special;
			this.transition = DFA124_transition;
		}

		public override string Description { get { return "()* loopback of 860:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition124(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA124_1 = input.LA(1);
		int index124_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred193_Java_fragment))) {s = 3;}

				else if ((true)) {s = 1;}

				input.Seek(index124_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 124, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA128 : DFA
	{
		private const string DFA128_eotS =
			"\x58\xFFFF";
		private const string DFA128_eofS =
			"\x1\x1\x57\xFFFF";
		private const string DFA128_minS =
			"\x1\x4\x45\xFFFF\x2\x0\x10\xFFFF";
		private const string DFA128_maxS =
			"\x1\xC2\x45\xFFFF\x2\x0\x10\xFFFF";
		private const string DFA128_acceptS =
			"\x1\xFFFF\x1\x2\x55\xFFFF\x1\x1";
		private const string DFA128_specialS =
			"\x46\xFFFF\x1\x0\x1\x1\x10\xFFFF}>";
		private static readonly string[] DFA128_transitionS =
			{
				"\x3\x1\xD\xFFFF\x4\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x3\xFFFF\x3\x1\x4"+
				"\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x6\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\xA\xFFFF"+
				"\x3\x1\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x6\xFFFF\x3\x1\x2"+
				"\xFFFF\x5\x1\x2\xFFFF\x1\x47\x1\x1\x2\xFFFF\x6\x1\x1\xFFFF\x4\x1\x2"+
				"\xFFFF\x1\x46\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1"+
				"\xFFFF\x6\x1\x1\xFFFF\x2\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3\x1\x7\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF"+
				"\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA128_eot = DFA.UnpackEncodedString(DFA128_eotS);
		private static readonly short[] DFA128_eof = DFA.UnpackEncodedString(DFA128_eofS);
		private static readonly char[] DFA128_min = DFA.UnpackEncodedStringToUnsignedChars(DFA128_minS);
		private static readonly char[] DFA128_max = DFA.UnpackEncodedStringToUnsignedChars(DFA128_maxS);
		private static readonly short[] DFA128_accept = DFA.UnpackEncodedString(DFA128_acceptS);
		private static readonly short[] DFA128_special = DFA.UnpackEncodedString(DFA128_specialS);
		private static readonly short[][] DFA128_transition;

		static DFA128()
		{
			int numStates = DFA128_transitionS.Length;
			DFA128_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA128_transition[i] = DFA.UnpackEncodedString(DFA128_transitionS[i]);
			}
		}

		public DFA128( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 128;
			this.eot = DFA128_eot;
			this.eof = DFA128_eof;
			this.min = DFA128_min;
			this.max = DFA128_max;
			this.accept = DFA128_accept;
			this.special = DFA128_special;
			this.transition = DFA128_transition;
		}

		public override string Description { get { return "()* loopback of 881:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition128(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA128_1 = input.LA(1);
		int index128_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Java_fragment))) {s = 87;}

				else if ((true)) {s = 1;}

				input.Seek(index128_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Java_fragment))) {s = 87;}

				else if ((true)) {s = 1;}

				input.Seek(index128_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 128, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA137 : DFA
	{
		private const string DFA137_eotS =
			"\x5C\xFFFF";
		private const string DFA137_eofS =
			"\x1\x1\x5B\xFFFF";
		private const string DFA137_minS =
			"\x1\x4\x28\xFFFF\x1\x0\x32\xFFFF";
		private const string DFA137_maxS =
			"\x1\xC2\x28\xFFFF\x1\x0\x32\xFFFF";
		private const string DFA137_acceptS =
			"\x1\xFFFF\x1\x3\x58\xFFFF\x1\x2\x1\x1";
		private const string DFA137_specialS =
			"\x29\xFFFF\x1\x0\x32\xFFFF}>";
		private static readonly string[] DFA137_transitionS =
			{
				"\x3\x1\xD\xFFFF\x4\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x3\xFFFF\x3\x1\x4"+
				"\xFFFF\x2\x1\x2\xFFFF\x7\x1\x1\x29\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x1\x1\x6\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\xA\xFFFF\x3"+
				"\x1\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x5\xFFFF\x1\x5A\x3"+
				"\x1\x2\xFFFF\x5\x1\x2\xFFFF\x3\x1\x1\xFFFF\x6\x1\x1\xFFFF\x4\x1\x2\xFFFF"+
				"\x2\x1\x4\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x9\x1\x1"+
				"\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3"+
				"\x1\x7\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA137_eot = DFA.UnpackEncodedString(DFA137_eotS);
		private static readonly short[] DFA137_eof = DFA.UnpackEncodedString(DFA137_eofS);
		private static readonly char[] DFA137_min = DFA.UnpackEncodedStringToUnsignedChars(DFA137_minS);
		private static readonly char[] DFA137_max = DFA.UnpackEncodedStringToUnsignedChars(DFA137_maxS);
		private static readonly short[] DFA137_accept = DFA.UnpackEncodedString(DFA137_acceptS);
		private static readonly short[] DFA137_special = DFA.UnpackEncodedString(DFA137_specialS);
		private static readonly short[][] DFA137_transition;

		static DFA137()
		{
			int numStates = DFA137_transitionS.Length;
			DFA137_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA137_transition[i] = DFA.UnpackEncodedString(DFA137_transitionS[i]);
			}
		}

		public DFA137( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 137;
			this.eot = DFA137_eot;
			this.eof = DFA137_eof;
			this.min = DFA137_min;
			this.max = DFA137_max;
			this.accept = DFA137_accept;
			this.special = DFA137_special;
			this.transition = DFA137_transition;
		}

		public override string Description { get { return "()* loopback of 918:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition137(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA137_1 = input.LA(1);
		int index137_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred216_Java_fragment))) {s = 91;}

				else if ((true)) {s = 1;}

				input.Seek(index137_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 137, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA134 : DFA
	{
		private const string DFA134_eotS =
			"\x5C\xFFFF";
		private const string DFA134_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA134_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA134_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA134_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA134_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA134_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1"+
				"\x1\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA134_eot = DFA.UnpackEncodedString(DFA134_eotS);
		private static readonly short[] DFA134_eof = DFA.UnpackEncodedString(DFA134_eofS);
		private static readonly char[] DFA134_min = DFA.UnpackEncodedStringToUnsignedChars(DFA134_minS);
		private static readonly char[] DFA134_max = DFA.UnpackEncodedStringToUnsignedChars(DFA134_maxS);
		private static readonly short[] DFA134_accept = DFA.UnpackEncodedString(DFA134_acceptS);
		private static readonly short[] DFA134_special = DFA.UnpackEncodedString(DFA134_specialS);
		private static readonly short[][] DFA134_transition;

		static DFA134()
		{
			int numStates = DFA134_transitionS.Length;
			DFA134_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA134_transition[i] = DFA.UnpackEncodedString(DFA134_transitionS[i]);
			}
		}

		public DFA134( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 134;
			this.eot = DFA134_eot;
			this.eof = DFA134_eof;
			this.min = DFA134_min;
			this.max = DFA134_max;
			this.accept = DFA134_accept;
			this.special = DFA134_special;
			this.transition = DFA134_transition;
		}

		public override string Description { get { return "923:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition134(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA134_1 = input.LA(1);
		int index134_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred210_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index134_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 134, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA135 : DFA
	{
		private const string DFA135_eotS =
			"\x5C\xFFFF";
		private const string DFA135_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA135_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA135_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA135_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA135_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA135_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1"+
				"\x1\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA135_eot = DFA.UnpackEncodedString(DFA135_eotS);
		private static readonly short[] DFA135_eof = DFA.UnpackEncodedString(DFA135_eofS);
		private static readonly char[] DFA135_min = DFA.UnpackEncodedStringToUnsignedChars(DFA135_minS);
		private static readonly char[] DFA135_max = DFA.UnpackEncodedStringToUnsignedChars(DFA135_maxS);
		private static readonly short[] DFA135_accept = DFA.UnpackEncodedString(DFA135_acceptS);
		private static readonly short[] DFA135_special = DFA.UnpackEncodedString(DFA135_specialS);
		private static readonly short[][] DFA135_transition;

		static DFA135()
		{
			int numStates = DFA135_transitionS.Length;
			DFA135_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA135_transition[i] = DFA.UnpackEncodedString(DFA135_transitionS[i]);
			}
		}

		public DFA135( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 135;
			this.eot = DFA135_eot;
			this.eof = DFA135_eof;
			this.min = DFA135_min;
			this.max = DFA135_max;
			this.accept = DFA135_accept;
			this.special = DFA135_special;
			this.transition = DFA135_transition;
		}

		public override string Description { get { return "929:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition135(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA135_1 = input.LA(1);
		int index135_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred214_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index135_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 135, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA138 : DFA
	{
		private const string DFA138_eotS =
			"\x5C\xFFFF";
		private const string DFA138_eofS =
			"\x1\x3\x5B\xFFFF";
		private const string DFA138_minS =
			"\x1\x4\x2\x0\x59\xFFFF";
		private const string DFA138_maxS =
			"\x1\xC2\x2\x0\x59\xFFFF";
		private const string DFA138_acceptS =
			"\x3\xFFFF\x1\x3\x56\xFFFF\x1\x1\x1\x2";
		private const string DFA138_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x59\xFFFF}>";
		private static readonly string[] DFA138_transitionS =
			{
				"\x3\x3\xD\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x3\x3\x4"+
				"\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\x2\x6\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x6\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\xA\xFFFF"+
				"\x3\x3\x1\xFFFF\x3\x3\x3\xFFFF\x1\x1\x2\x3\x1\xFFFF\x1\x3\x6\xFFFF\x3"+
				"\x3\x2\xFFFF\x5\x3\x2\xFFFF\x3\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x2\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x9\x3\x1"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x7\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\x3\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA138_eot = DFA.UnpackEncodedString(DFA138_eotS);
		private static readonly short[] DFA138_eof = DFA.UnpackEncodedString(DFA138_eofS);
		private static readonly char[] DFA138_min = DFA.UnpackEncodedStringToUnsignedChars(DFA138_minS);
		private static readonly char[] DFA138_max = DFA.UnpackEncodedStringToUnsignedChars(DFA138_maxS);
		private static readonly short[] DFA138_accept = DFA.UnpackEncodedString(DFA138_acceptS);
		private static readonly short[] DFA138_special = DFA.UnpackEncodedString(DFA138_specialS);
		private static readonly short[][] DFA138_transition;

		static DFA138()
		{
			int numStates = DFA138_transitionS.Length;
			DFA138_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA138_transition[i] = DFA.UnpackEncodedString(DFA138_transitionS[i]);
			}
		}

		public DFA138( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}

		public override string Description { get { return "936:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition138(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA138_1 = input.LA(1);
		int index138_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred218_Java_fragment))) {s = 90;}

				else if ((true)) {s = 3;}

				input.Seek(index138_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred219_Java_fragment))) {s = 91;}

				else if ((true)) {s = 3;}

				input.Seek(index138_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 138, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA141 : DFA
	{
		private const string DFA141_eotS =
			"\x5C\xFFFF";
		private const string DFA141_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA141_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA141_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA141_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA141_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA141_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1"+
				"\x1\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA141_eot = DFA.UnpackEncodedString(DFA141_eotS);
		private static readonly short[] DFA141_eof = DFA.UnpackEncodedString(DFA141_eofS);
		private static readonly char[] DFA141_min = DFA.UnpackEncodedStringToUnsignedChars(DFA141_minS);
		private static readonly char[] DFA141_max = DFA.UnpackEncodedStringToUnsignedChars(DFA141_maxS);
		private static readonly short[] DFA141_accept = DFA.UnpackEncodedString(DFA141_acceptS);
		private static readonly short[] DFA141_special = DFA.UnpackEncodedString(DFA141_specialS);
		private static readonly short[][] DFA141_transition;

		static DFA141()
		{
			int numStates = DFA141_transitionS.Length;
			DFA141_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA141_transition[i] = DFA.UnpackEncodedString(DFA141_transitionS[i]);
			}
		}

		public DFA141( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 141;
			this.eot = DFA141_eot;
			this.eof = DFA141_eof;
			this.min = DFA141_min;
			this.max = DFA141_max;
			this.accept = DFA141_accept;
			this.special = DFA141_special;
			this.transition = DFA141_transition;
		}

		public override string Description { get { return "957:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition141(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA141_1 = input.LA(1);
		int index141_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred228_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index141_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 141, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA142 : DFA
	{
		private const string DFA142_eotS =
			"\x5C\xFFFF";
		private const string DFA142_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA142_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA142_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA142_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA142_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA142_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x4\x2\x1"+
				"\x1\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA142_eot = DFA.UnpackEncodedString(DFA142_eotS);
		private static readonly short[] DFA142_eof = DFA.UnpackEncodedString(DFA142_eofS);
		private static readonly char[] DFA142_min = DFA.UnpackEncodedStringToUnsignedChars(DFA142_minS);
		private static readonly char[] DFA142_max = DFA.UnpackEncodedStringToUnsignedChars(DFA142_maxS);
		private static readonly short[] DFA142_accept = DFA.UnpackEncodedString(DFA142_acceptS);
		private static readonly short[] DFA142_special = DFA.UnpackEncodedString(DFA142_specialS);
		private static readonly short[][] DFA142_transition;

		static DFA142()
		{
			int numStates = DFA142_transitionS.Length;
			DFA142_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA142_transition[i] = DFA.UnpackEncodedString(DFA142_transitionS[i]);
			}
		}

		public DFA142( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 142;
			this.eot = DFA142_eot;
			this.eof = DFA142_eof;
			this.min = DFA142_min;
			this.max = DFA142_max;
			this.accept = DFA142_accept;
			this.special = DFA142_special;
			this.transition = DFA142_transition;
		}

		public override string Description { get { return "962:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition142(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA142_1 = input.LA(1);
		int index142_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred231_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index142_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 142, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA149 : DFA
	{
		private const string DFA149_eotS =
			"\x5E\xFFFF";
		private const string DFA149_eofS =
			"\x1\x4\x5D\xFFFF";
		private const string DFA149_minS =
			"\x1\x4\x3\x0\x5A\xFFFF";
		private const string DFA149_maxS =
			"\x1\xC2\x3\x0\x5A\xFFFF";
		private const string DFA149_acceptS =
			"\x4\xFFFF\x1\x4\x56\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA149_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x5A\xFFFF}>";
		private static readonly string[] DFA149_transitionS =
			{
				"\x3\x4\xD\xFFFF\x4\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x3\xFFFF\x3\x4\x4"+
				"\xFFFF\x2\x4\x2\xFFFF\x7\x4\x1\x3\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF"+
				"\x1\x4\x6\xFFFF\x2\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\xA\xFFFF\x3\x4\x1"+
				"\xFFFF\x3\x4\x3\xFFFF\x3\x4\x1\xFFFF\x1\x4\x5\xFFFF\x1\x1\x3\x4\x2\xFFFF"+
				"\x4\x4\x1\x2\x2\xFFFF\x3\x4\x1\xFFFF\x6\x4\x1\xFFFF\x4\x4\x2\xFFFF\x2"+
				"\x4\x4\xFFFF\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x6\x4\x1\xFFFF\x9\x4\x1\xFFFF"+
				"\x3\x4\x1\xFFFF\x1\x4\x1\xFFFF\x3\x4\x1\xFFFF\x1\x4\x2\xFFFF\x3\x4\x7"+
				"\xFFFF\x2\x4\x1\xFFFF\x4\x4\x1\xFFFF\x3\x4",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA149_eot = DFA.UnpackEncodedString(DFA149_eotS);
		private static readonly short[] DFA149_eof = DFA.UnpackEncodedString(DFA149_eofS);
		private static readonly char[] DFA149_min = DFA.UnpackEncodedStringToUnsignedChars(DFA149_minS);
		private static readonly char[] DFA149_max = DFA.UnpackEncodedStringToUnsignedChars(DFA149_maxS);
		private static readonly short[] DFA149_accept = DFA.UnpackEncodedString(DFA149_acceptS);
		private static readonly short[] DFA149_special = DFA.UnpackEncodedString(DFA149_specialS);
		private static readonly short[][] DFA149_transition;

		static DFA149()
		{
			int numStates = DFA149_transitionS.Length;
			DFA149_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA149_transition[i] = DFA.UnpackEncodedString(DFA149_transitionS[i]);
			}
		}

		public DFA149( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 149;
			this.eot = DFA149_eot;
			this.eof = DFA149_eof;
			this.min = DFA149_min;
			this.max = DFA149_max;
			this.accept = DFA149_accept;
			this.special = DFA149_special;
			this.transition = DFA149_transition;
		}

		public override string Description { get { return "978:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments ( block )? -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition149(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA149_1 = input.LA(1);
		int index149_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred236_Java_fragment))) {s = 91;}

				else if ((true)) {s = 4;}

				input.Seek(index149_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred238_Java_fragment))) {s = 92;}

				else if ((true)) {s = 4;}

				input.Seek(index149_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred245_Java_fragment))) {s = 93;}

				else if ((true)) {s = 4;}

				input.Seek(index149_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 149, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA146 : DFA
	{
		private const string DFA146_eotS =
			"\x5C\xFFFF";
		private const string DFA146_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA146_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA146_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA146_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA146_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA146_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF"+
				"\x5\x2\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF"+
				"\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA146_eot = DFA.UnpackEncodedString(DFA146_eotS);
		private static readonly short[] DFA146_eof = DFA.UnpackEncodedString(DFA146_eofS);
		private static readonly char[] DFA146_min = DFA.UnpackEncodedStringToUnsignedChars(DFA146_minS);
		private static readonly char[] DFA146_max = DFA.UnpackEncodedStringToUnsignedChars(DFA146_maxS);
		private static readonly short[] DFA146_accept = DFA.UnpackEncodedString(DFA146_acceptS);
		private static readonly short[] DFA146_special = DFA.UnpackEncodedString(DFA146_specialS);
		private static readonly short[][] DFA146_transition;

		static DFA146()
		{
			int numStates = DFA146_transitionS.Length;
			DFA146_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA146_transition[i] = DFA.UnpackEncodedString(DFA146_transitionS[i]);
			}
		}

		public DFA146( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 146;
			this.eot = DFA146_eot;
			this.eof = DFA146_eof;
			this.min = DFA146_min;
			this.max = DFA146_max;
			this.accept = DFA146_accept;
			this.special = DFA146_special;
			this.transition = DFA146_transition;
		}

		public override string Description { get { return "982:23: ( block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition146(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA146_1 = input.LA(1);
		int index146_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred237_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index146_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 146, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA154 : DFA
	{
		private const string DFA154_eotS =
			"\x5C\xFFFF";
		private const string DFA154_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA154_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA154_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA154_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA154_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA154_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF"+
				"\x5\x2\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF"+
				"\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
		private static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
		private static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
		private static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
		private static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
		private static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
		private static readonly short[][] DFA154_transition;

		static DFA154()
		{
			int numStates = DFA154_transitionS.Length;
			DFA154_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA154_transition[i] = DFA.UnpackEncodedString(DFA154_transitionS[i]);
			}
		}

		public DFA154( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 154;
			this.eot = DFA154_eot;
			this.eof = DFA154_eof;
			this.min = DFA154_min;
			this.max = DFA154_max;
			this.accept = DFA154_accept;
			this.special = DFA154_special;
			this.transition = DFA154_transition;
		}

		public override string Description { get { return "1016:27: ( classBody )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition154(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA154_1 = input.LA(1);
		int index154_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred254_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index154_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 154, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA158 : DFA
	{
		private const string DFA158_eotS =
			"\x5C\xFFFF";
		private const string DFA158_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA158_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA158_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA158_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA158_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA158_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x1\x2\x2\x2\xFFFF"+
				"\x5\x2\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF"+
				"\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA158_eot = DFA.UnpackEncodedString(DFA158_eotS);
		private static readonly short[] DFA158_eof = DFA.UnpackEncodedString(DFA158_eofS);
		private static readonly char[] DFA158_min = DFA.UnpackEncodedStringToUnsignedChars(DFA158_minS);
		private static readonly char[] DFA158_max = DFA.UnpackEncodedStringToUnsignedChars(DFA158_maxS);
		private static readonly short[] DFA158_accept = DFA.UnpackEncodedString(DFA158_acceptS);
		private static readonly short[] DFA158_special = DFA.UnpackEncodedString(DFA158_specialS);
		private static readonly short[][] DFA158_transition;

		static DFA158()
		{
			int numStates = DFA158_transitionS.Length;
			DFA158_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA158_transition[i] = DFA.UnpackEncodedString(DFA158_transitionS[i]);
			}
		}

		public DFA158( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 158;
			this.eot = DFA158_eot;
			this.eof = DFA158_eof;
			this.min = DFA158_min;
			this.max = DFA158_max;
			this.accept = DFA158_accept;
			this.special = DFA158_special;
			this.transition = DFA158_transition;
		}

		public override string Description { get { return "1023:64: ( classBody )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition158(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA158_1 = input.LA(1);
		int index158_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred256_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index158_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 158, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA159 : DFA
	{
		private const string DFA159_eotS =
			"\x5C\xFFFF";
		private const string DFA159_eofS =
			"\x1\x2\x5B\xFFFF";
		private const string DFA159_minS =
			"\x1\x4\x1\x0\x5A\xFFFF";
		private const string DFA159_maxS =
			"\x1\xC2\x1\x0\x5A\xFFFF";
		private const string DFA159_acceptS =
			"\x2\xFFFF\x1\x2\x58\xFFFF\x1\x1";
		private const string DFA159_specialS =
			"\x1\xFFFF\x1\x0\x5A\xFFFF}>";
		private static readonly string[] DFA159_transitionS =
			{
				"\x3\x2\xD\xFFFF\x4\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x3\x2\x4"+
				"\xFFFF\x2\x2\x2\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\xA\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\x3\x2\x2\xFFFF\x5"+
				"\x2\x2\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x9\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x7\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA159_eot = DFA.UnpackEncodedString(DFA159_eotS);
		private static readonly short[] DFA159_eof = DFA.UnpackEncodedString(DFA159_eofS);
		private static readonly char[] DFA159_min = DFA.UnpackEncodedStringToUnsignedChars(DFA159_minS);
		private static readonly char[] DFA159_max = DFA.UnpackEncodedStringToUnsignedChars(DFA159_maxS);
		private static readonly short[] DFA159_accept = DFA.UnpackEncodedString(DFA159_acceptS);
		private static readonly short[] DFA159_special = DFA.UnpackEncodedString(DFA159_specialS);
		private static readonly short[][] DFA159_transition;

		static DFA159()
		{
			int numStates = DFA159_transitionS.Length;
			DFA159_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA159_transition[i] = DFA.UnpackEncodedString(DFA159_transitionS[i]);
			}
		}

		public DFA159( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 159;
			this.eot = DFA159_eot;
			this.eof = DFA159_eof;
			this.min = DFA159_min;
			this.max = DFA159_max;
			this.accept = DFA159_accept;
			this.special = DFA159_special;
			this.transition = DFA159_transition;
		}

		public override string Description { get { return "()* loopback of 1029:36: ( LBRACK ! expression RBRACK !)*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition159(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA159_1 = input.LA(1);
		int index159_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred258_Java_fragment))) {s = 91;}

				else if ((true)) {s = 2;}

				input.Seek(index159_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 159, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _compilationUnit_in_javaSource4592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationList_in_compilationUnit4628 = new BitSet(new ulong[]{0x200001000200012UL,0x200000210080008UL,0x690041828020680CUL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit4639 = new BitSet(new ulong[]{0x200001000200012UL,0x200000210080008UL,0x6900418280206804UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit4651 = new BitSet(new ulong[]{0x200001000200012UL,0x200000210080008UL,0x6900418280206804UL});
		public static readonly BitSet _typeDecls_in_compilationUnit4663 = new BitSet(new ulong[]{0x200001000200012UL,0x200000200080008UL,0x6900418280206804UL});
		public static readonly BitSet _typeDeclaration_in_typeDecls4683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDecls4693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration4713 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration4716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration4718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration4744 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x80000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration4747 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration4750 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration4752 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_importDeclaration4755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_typeDeclaration4779 = new BitSet(new ulong[]{0x200001000200000UL,0x200000000UL});
		public static readonly BitSet _classTypeDeclaration_in_typeDeclaration4794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceTypeDeclaration_in_typeDeclaration4809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumTypeDeclaration_in_typeDeclaration4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_typeDeclaration4839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_classTypeDeclaration4874 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classTypeDeclaration4876 = new BitSet(new ulong[]{0x8000000000000000UL,0x50004000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classTypeDeclaration4878 = new BitSet(new ulong[]{0x8000000000000000UL,0x10004000000UL});
		public static readonly BitSet _classExtendsClause_in_classTypeDeclaration4881 = new BitSet(new ulong[]{0x0UL,0x10004000000UL});
		public static readonly BitSet _implementsClause_in_classTypeDeclaration4884 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _classBody_in_classTypeDeclaration4887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_classExtendsClause4940 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_classExtendsClause4942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_interfaceExtendsClause4986 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _typeList_in_interfaceExtendsClause4988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_implementsClause5032 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _typeList_in_implementsClause5034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeParameterList5079 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5081 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _COMMA_in_genericTypeParameterList5084 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList5086 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeParameterList5090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_genericTypeListClosing5205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_genericTypeListClosing5215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_genericTypeListClosing5225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter5253 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _bound_in_genericTypeParameter5255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDS_in_bound5301 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_bound5303 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_bound5306 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_bound5308 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _ENUM_in_enumTypeDeclaration5349 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_enumTypeDeclaration5351 = new BitSet(new ulong[]{0x0UL,0x10004000000UL});
		public static readonly BitSet _implementsClause_in_enumTypeDeclaration5353 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _enumBody_in_enumTypeDeclaration5356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_enumBody5403 = new BitSet(new ulong[]{0x200000UL,0x1000000UL});
		public static readonly BitSet _enumScopeDeclarations_in_enumBody5405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_enumBody5407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstants_in_enumScopeDeclarations5444 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _COMMA_in_enumScopeDeclarations5447 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _enumClassScopeDeclarations_in_enumScopeDeclarations5452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumClassScopeDeclarations5472 = new BitSet(new ulong[]{0x240001422200012UL,0x201050281080028UL,0x6B00418288206804UL});
		public static readonly BitSet _classScopeDeclarations_in_enumClassScopeDeclarations5474 = new BitSet(new ulong[]{0x240001422200012UL,0x201050281080028UL,0x6B00418288206804UL});
		public static readonly BitSet _enumConstant_in_enumConstants5513 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_enumConstants5516 = new BitSet(new ulong[]{0x200000UL,0x1000000UL});
		public static readonly BitSet _enumConstant_in_enumConstants5519 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _annotationList_in_enumConstant5544 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_enumConstant5546 = new BitSet(new ulong[]{0x2UL,0x2010000000000UL});
		public static readonly BitSet _arguments_in_enumConstant5549 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _classBody_in_enumConstant5552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_interfaceTypeDeclaration5577 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceTypeDeclaration5579 = new BitSet(new ulong[]{0x8000000000000000UL,0x50000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceTypeDeclaration5581 = new BitSet(new ulong[]{0x8000000000000000UL,0x10000000000UL});
		public static readonly BitSet _interfaceExtendsClause_in_interfaceTypeDeclaration5584 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _interfaceBody_in_interfaceTypeDeclaration5587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList5637 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_typeList5640 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_typeList5643 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LCURLY_in_classBody5668 = new BitSet(new ulong[]{0x240001422200010UL,0x201050281080028UL,0x6B00418288246804UL});
		public static readonly BitSet _classScopeDeclarations_in_classBody5670 = new BitSet(new ulong[]{0x240001422200010UL,0x201050281080028UL,0x6B00418288246804UL});
		public static readonly BitSet _RCURLY_in_classBody5673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_interfaceBody5715 = new BitSet(new ulong[]{0x240001422200010UL,0x201040281080028UL,0x6B00418288246804UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceBody5717 = new BitSet(new ulong[]{0x240001422200010UL,0x201040281080028UL,0x6B00418288246804UL});
		public static readonly BitSet _RCURLY_in_interfaceBody5720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_classScopeDeclarations5758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classScopeDeclarations5787 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations5812 = new BitSet(new ulong[]{0x40000422000000UL,0x1040081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations5834 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5836 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _propertyDeclaration_in_classScopeDeclarations5838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations5860 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations5893 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5895 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5897 = new BitSet(new ulong[]{0x0UL,0x18000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations5899 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5902 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_classScopeDeclarations5972 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations5974 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations5976 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations5978 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_classScopeDeclarations5982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations5986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations6045 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations6047 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations6049 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations6052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations6118 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_classScopeDeclarations6120 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_classScopeDeclarations6161 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_classScopeDeclarations6163 = new BitSet(new ulong[]{0x10000000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOT_in_classScopeDeclarations6165 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations6214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classScopeDeclarations6224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations6244 = new BitSet(new ulong[]{0x40000422000000UL,0x1040081000020UL,0x200000008000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations6258 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6277 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6279 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6281 = new BitSet(new ulong[]{0x0UL,0x8000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations6283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_interfaceScopeDeclarations6347 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations6349 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations6351 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations6353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations6419 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations6468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceScopeDeclarations6478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6498 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_classFieldDeclaratorList6501 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclarator_in_classFieldDeclaratorList6503 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_classFieldDeclarator6542 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _ASSIGN_in_classFieldDeclarator6545 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _variableInitializer_in_classFieldDeclarator6547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6592 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaratorList6595 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6597 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _variableDeclaratorId_in_interfaceFieldDeclarator6636 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ASSIGN_in_interfaceFieldDeclarator6638 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _variableInitializer_in_interfaceFieldDeclarator6640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId6682 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId6685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer6705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer6715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_variableInitializer6725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator6756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator6758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_arrayDeclaratorList6792 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _LCURLY_in_arrayInitializer6837 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134500A1800064UL,0x200820C18040020UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6840 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6843 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer6845 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer6849 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_arrayInitializer6854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROWS_in_throwsClause6896 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentList_in_throwsClause6898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifierList6935 = new BitSet(new ulong[]{0x200012UL,0x200000000080008UL,0x6900418280006804UL});
		public static readonly BitSet _PUBLIC_in_modifier6976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OVERRIDE_in_modifier6986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIRTUAL_in_modifier6996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_SHARING_in_modifier7006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITHOUT_SHARING_in_modifier7014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier7024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier7034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier7044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier7054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier7064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier7074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier7084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier7094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier7104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_modifier7112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEST_METHOD_in_modifier7122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier7132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_localModifierList7151 = new BitSet(new ulong[]{0x200002UL,0x8UL});
		public static readonly BitSet _FINAL_in_localModifier7192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier7202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleType_in_type7221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectType_in_type7231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_simpleType7251 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_simpleType7253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdent_in_objectType7300 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectType7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_objectTypeSimplified7342 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_objectTypeSimplified7344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7384 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdent7387 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent7389 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7429 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedTypeIdentSimplified7432 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _typeIdentSimplified_in_qualifiedTypeIdentSimplified7434 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _IDENT_in_typeIdent7474 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent7477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_typeIdentSimplified7497 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_typeIdentSimplified7500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentList7615 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8010000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7617 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentList7620 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8010000UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList7622 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentList7626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgument7664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument7674 = new BitSet(new ulong[]{0x8000000000000002UL,0x0UL,0x800000000UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument7676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_genericWildcardBoundType7718 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_genericWildcardBoundType7727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_genericTypeArgumentListSimplified7746 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8010000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7748 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _COMMA_in_genericTypeArgumentListSimplified7751 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8010000UL});
		public static readonly BitSet _genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7753 = new BitSet(new ulong[]{0x40000400000UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _genericTypeListClosing_in_genericTypeArgumentListSimplified7757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_genericTypeArgumentSimplified7799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgumentSimplified7809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7832 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_qualifiedIdentList7835 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentList7838 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LPAREN_in_formalParameterList7863 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8100000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7891 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7894 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList7896 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _COMMA_in_formalParameterList7901 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7903 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_formalParameterList7960 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_formalParameterList8037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl8060 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl8062 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl8064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarArgDecl8108 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_formalParameterVarArgDecl8110 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _ELLIPSIS_in_formalParameterVarArgDecl8112 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarArgDecl8114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8162 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier8205 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier8209 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _annotation_in_annotationList8262 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _AT_in_annotation8300 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation8303 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _annotationInit_in_annotation8305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_annotationInit8329 = new BitSet(new ulong[]{0x40C00C22200000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit8331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_annotationInit8333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8370 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_annotationInitializers8373 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers8375 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers8405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_annotationInitializer8446 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ASSIGN_in_annotationInitializer8449 = new BitSet(new ulong[]{0x40C00C22200000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer8452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueExpression_in_annotationElementValue8475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_annotationElementValue8485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationElementValueArrayInitializer_in_annotationElementValue8495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_annotationElementValueExpression8518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationElementValueArrayInitializer8558 = new BitSet(new ulong[]{0x40C40C22200000UL,0xAC134500A1800064UL,0x200820C18040020UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8561 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8564 = new BitSet(new ulong[]{0x40C00C22200000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValueArrayInitializer8566 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_annotationElementValueArrayInitializer8573 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_annotationElementValueArrayInitializer8577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_annotationTypeDeclaration8620 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration8622 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_annotationTypeDeclaration8624 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _annotationBody_in_annotationTypeDeclaration8626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_annotationBody8669 = new BitSet(new ulong[]{0x240001422200010UL,0x201000281080028UL,0x6900418288046804UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationBody8671 = new BitSet(new ulong[]{0x240001422200010UL,0x201000281080028UL,0x6900418288046804UL});
		public static readonly BitSet _RCURLY_in_annotationBody8674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations8716 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations8718 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations8732 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _LPAREN_in_annotationScopeDeclarations8734 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_annotationScopeDeclarations8736 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations8738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_annotationScopeDeclarations8783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_annotationScopeDeclarations8785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations8830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue8853 = new BitSet(new ulong[]{0x40C00C22200000UL,0xAC134500A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue8856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement8877 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_blockStatement8879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement8890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement8900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_blockStatement8909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_brokenExpression8929 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_brokenExpression8932 = new BitSet(new ulong[]{0x10000000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOT_in_brokenExpression8934 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_brokenExpression8937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperator_in_dmlOperation8949 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_dmlOperation8951 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_dmlOperation8953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator8998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_dmlOperator9011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block9032 = new BitSet(new ulong[]{0x248E01C26200010UL,0xAE134502A388016CUL,0x7B01CBAE982C6824UL});
		public static readonly BitSet _blockStatement_in_block9042 = new BitSet(new ulong[]{0x248E01C26200010UL,0xAE134502A388016CUL,0x7B01CBAE982C6824UL});
		public static readonly BitSet _RCURLY_in_block9066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration9096 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration9098 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_localVariableDeclaration9100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement9153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement9163 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9165 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9169 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _ELSE_in_statement9184 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_statement9354 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _LPAREN_in_statement9356 = new BitSet(new ulong[]{0x40C00C22200000UL,0xAC134400A180006CUL,0x200820C18200020UL});
		public static readonly BitSet _forInit_in_statement9371 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9373 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18200020UL});
		public static readonly BitSet _forCondition_in_statement9375 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9377 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18100020UL});
		public static readonly BitSet _forUpdater_in_statement9379 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_statement9381 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifierList_in_statement9418 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_statement9420 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_statement9422 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_statement9424 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_statement9426 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_statement9428 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement9470 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9472 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement9523 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement9525 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _WHILE_in_statement9527 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9529 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_statement9572 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_statement9574 = new BitSet(new ulong[]{0x100000000UL,0x10UL});
		public static readonly BitSet _catches_in_statement9577 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _finallyClause_in_statement9579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_statement9584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement9627 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9629 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _LCURLY_in_statement9631 = new BitSet(new ulong[]{0x1000040000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement9633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_statement9635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement9661 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _parenthesizedExpression_in_statement9663 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_statement9665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement9711 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18200020UL});
		public static readonly BitSet _expression_in_statement9713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement9780 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_statement9782 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement9849 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x200000UL});
		public static readonly BitSet _IDENT_in_statement9851 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement9924 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x200000UL});
		public static readonly BitSet _IDENT_in_statement9926 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement9929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_statement9996 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_statement9998 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_statement10000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperation_in_statement10067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement10077 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_statement10079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement10092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement10102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches10141 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _CATCH_in_catchClause10183 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _LPAREN_in_catchClause10186 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause10189 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_catchClause10191 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_catchClause10194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause10213 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_finallyClause10215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10247 = new BitSet(new ulong[]{0x1000040000000UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels10249 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _switchCaseLabels_in_switchBlockLabels10252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_switchCaseLabels10297 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _CASE_in_switchCaseLabel10325 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_switchCaseLabel10328 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_switchCaseLabel10330 = new BitSet(new ulong[]{0x248E01C26200012UL,0xAE134502A388016CUL,0x7B01CBAE98286824UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel10333 = new BitSet(new ulong[]{0x248E01C26200012UL,0xAE134502A388016CUL,0x7B01CBAE98286824UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel10357 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_switchDefaultLabel10360 = new BitSet(new ulong[]{0x248E01C26200012UL,0xAE134502A388016CUL,0x7B01CBAE98286824UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel10363 = new BitSet(new ulong[]{0x248E01C26200012UL,0xAE134502A388016CUL,0x7B01CBAE98286824UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit10387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit10409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_forCondition10497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forUpdater10539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenthesizedExpression10579 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_parenthesizedExpression10581 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_parenthesizedExpression10583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList10624 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_expressionList10627 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_expressionList10630 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _assignmentExpression_in_expression10654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression10684 = new BitSet(new ulong[]{0x4000000900042UL,0x120000000000000UL,0x45000042UL,0x2UL});
		public static readonly BitSet _ASSIGN_in_assignmentExpression10703 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _PLUS_ASSIGN_in_assignmentExpression10722 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _MINUS_ASSIGN_in_assignmentExpression10741 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _STAR_ASSIGN_in_assignmentExpression10760 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _DIV_ASSIGN_in_assignmentExpression10779 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _AND_ASSIGN_in_assignmentExpression10798 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _OR_ASSIGN_in_assignmentExpression10817 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _XOR_ASSIGN_in_assignmentExpression10836 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _MOD_ASSIGN_in_assignmentExpression10855 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_assignmentExpression10874 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_assignmentExpression10893 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10912 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression10934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_conditionalExpression10959 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000UL});
		public static readonly BitSet _QUESTION_in_conditionalExpression10962 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression10965 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression10967 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression10970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10991 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _LOGICAL_OR_in_logicalOrExpression10994 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10997 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression11018 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _LOGICAL_AND_in_logicalAndExpression11021 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _inclusiveOrExpression_in_logicalAndExpression11024 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression11045 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression11048 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression11051 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression11072 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression11075 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression11078 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _equalityExpression_in_andExpression11099 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AND_in_andExpression11102 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _equalityExpression_in_andExpression11105 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression11126 = new BitSet(new ulong[]{0x800000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _EQUAL_in_equalityExpression11145 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _NOT_EQUAL_in_equalityExpression11164 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression11194 = new BitSet(new ulong[]{0x800000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression11224 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression11227 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_instanceOfExpression11230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11251 = new BitSet(new ulong[]{0x2UL,0x60000300000UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_relationalExpression11270 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_relationalExpression11289 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _LESS_THAN_in_relationalExpression11308 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _GREATER_THAN_in_relationalExpression11327 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression11356 = new BitSet(new ulong[]{0x2UL,0x60000300000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11390 = new BitSet(new ulong[]{0x400002UL,0x0UL,0x2800000UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_shiftExpression11408 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _SHIFT_RIGHT_in_shiftExpression11427 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _SHIFT_LEFT_in_shiftExpression11446 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression11475 = new BitSet(new ulong[]{0x400002UL,0x0UL,0x2800000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11505 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL,0x20UL});
		public static readonly BitSet _PLUS_in_additiveExpression11523 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _MINUS_in_additiveExpression11542 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11571 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL,0x20UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11601 = new BitSet(new ulong[]{0x2000000000002UL,0x40000000000000UL,0x20000000UL});
		public static readonly BitSet _STAR_in_multiplicativeExpression11620 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression11639 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression11658 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11687 = new BitSet(new ulong[]{0x2000000000002UL,0x40000000000000UL,0x20000000UL});
		public static readonly BitSet _PLUS_in_unaryExpression11721 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryExpression11750 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryExpression11778 = new BitSet(new ulong[]{0x40800C22000000UL,0xA403040081800064UL,0x200820C18000000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryExpression11804 = new BitSet(new ulong[]{0x40800C22000000UL,0xA403040081800064UL,0x200820C18000000UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpression11806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression11830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpressionNotPlusMinus11849 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGICAL_NOT_in_unaryExpressionNotPlusMinus11898 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpressionNotPlusMinus11939 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_unaryExpressionNotPlusMinus11941 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_unaryExpressionNotPlusMinus11943 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus11945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixedExpression_in_unaryExpressionNotPlusMinus11980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_postfixedExpression12016 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression12078 = new BitSet(new ulong[]{0x0UL,0x400040001000000UL,0x20800000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_postfixedExpression12128 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12210 = new BitSet(new ulong[]{0x10400000000002UL,0x2008020000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12289 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _THIS_in_postfixedExpression12362 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12425 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12427 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _SUPER_in_postfixedExpression12480 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_postfixedExpression12484 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_postfixedExpression12486 = new BitSet(new ulong[]{0x10400000000002UL,0x2008020000000UL});
		public static readonly BitSet _arguments_in_postfixedExpression12553 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _innerNewExpression_in_postfixedExpression12624 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _LBRACK_in_postfixedExpression12681 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_postfixedExpression12683 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_postfixedExpression12685 = new BitSet(new ulong[]{0x10400000000002UL,0x8020000000UL});
		public static readonly BitSet _INC_in_postfixedExpression12746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixedExpression12770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression12818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression12828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression12838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentExpression_in_primaryExpression12848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_primaryExpression12858 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x20800000000UL});
		public static readonly BitSet _SUPER_in_primaryExpression12873 = new BitSet(new ulong[]{0x10000000000000UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression12951 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression12953 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression12955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression13022 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression13077 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression13152 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13285 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression13343 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13345 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression13347 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_primaryExpression13371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primaryExpression13513 = new BitSet(new ulong[]{0x10000000000000UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclarator_in_primaryExpression13572 = new BitSet(new ulong[]{0x10000000000000UL,0x8000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13635 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primaryExpression13697 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_primaryExpression13699 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression13701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentExpression13781 = new BitSet(new ulong[]{0x10000000000002UL,0x2008000000000UL});
		public static readonly BitSet _arrayDeclarator_in_qualifiedIdentExpression13851 = new BitSet(new ulong[]{0x10000000000000UL,0x8000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression13919 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression13921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression13991 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _block_in_qualifiedIdentExpression13993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression14054 = new BitSet(new ulong[]{0x1000000000UL,0x400040000000000UL,0x20800000000UL});
		public static readonly BitSet _CLASS_in_qualifiedIdentExpression14072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_qualifiedIdentExpression14135 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x800000000UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14160 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14212 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_qualifiedIdentExpression14216 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14218 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentExpression14270 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_qualifiedIdentExpression14347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_qualifiedIdentExpression14413 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_qualifiedIdentExpression14415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_qualifiedIdentExpression14463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_mapDeclaration14533 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_mapDeclaration14535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _194_in_mapDeclaration14537 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_mapDeclaration14539 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_mapDeclaration14542 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_mapDeclaration14545 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _194_in_mapDeclaration14547 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_mapDeclaration14549 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_mapDeclaration14554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_setDeclaration14564 = new BitSet(new ulong[]{0x40C40C22000000UL,0xAC134400A1800064UL,0x200820C18040020UL});
		public static readonly BitSet _expression_in_setDeclaration14566 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _COMMA_in_setDeclaration14570 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_setDeclaration14573 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_setDeclaration14578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression14592 = new BitSet(new ulong[]{0x40000422000000UL,0x1040081000020UL,0x8000000UL});
		public static readonly BitSet _primitiveType_in_newExpression14621 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_newExpression14667 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _qualifiedTypeIdentSimplified_in_newExpression14670 = new BitSet(new ulong[]{0x0UL,0x2018000000000UL});
		public static readonly BitSet _mapDeclaration_in_newExpression14708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setDeclaration_in_newExpression14727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression14751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_newExpression14816 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _classBody_in_newExpression14818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_innerNewExpression14915 = new BitSet(new ulong[]{0x0UL,0x40001000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_innerNewExpression14917 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression14920 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_innerNewExpression14922 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _classBody_in_innerNewExpression14924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction14970 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction14972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14982 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_newArrayConstruction14985 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14987 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _LBRACK_in_newArrayConstruction14991 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_newArrayConstruction14994 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_newArrayConstruction14996 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction15001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments15021 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18100020UL});
		public static readonly BitSet _expressionList_in_arguments15023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_arguments15026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration15170 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15172 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration15175 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15178 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration15180 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15184 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration15187 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration15192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration15197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration15204 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15206 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration15209 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15212 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration15214 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration15218 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration15221 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration15224 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration15226 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration15232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_getRule15249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_setRule15263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_synpred14_Java5205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHIFT_RIGHT_in_synpred15_Java5215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_synpred16_Java5225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bound_in_synpred17_Java5255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_synpred32_Java5787 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_synpred32_Java5789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred33_Java5834 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred33_Java5836 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _propertyDeclaration_in_synpred33_Java5838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred43_Java5860 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_synpred43_Java5893 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5895 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5897 = new BitSet(new ulong[]{0x0UL,0x18000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred43_Java5899 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5902 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_synpred43_Java5906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred43_Java5972 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred43_Java5974 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java5976 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java5978 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_synpred43_Java5982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred43_Java5986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred43_Java6045 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred43_Java6047 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_synpred43_Java6049 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_synpred43_Java6052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred44_Java6118 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred44_Java6120 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred44_Java6122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred46_Java6168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred47_Java5812 = new BitSet(new ulong[]{0x40000422000000UL,0x1040081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_synpred47_Java5834 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred47_Java5836 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _propertyDeclaration_in_synpred47_Java5838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred47_Java5860 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_synpred47_Java5893 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred47_Java5895 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred47_Java5897 = new BitSet(new ulong[]{0x0UL,0x18000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred47_Java5899 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred47_Java5902 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_synpred47_Java5906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred47_Java5910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred47_Java5972 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred47_Java5974 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred47_Java5976 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred47_Java5978 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _block_in_synpred47_Java5982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred47_Java5986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred47_Java6045 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred47_Java6047 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x100000000000UL});
		public static readonly BitSet _throwsClause_in_synpred47_Java6049 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _block_in_synpred47_Java6052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred47_Java6118 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred47_Java6120 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred47_Java6122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred47_Java6161 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred47_Java6163 = new BitSet(new ulong[]{0x10000000000002UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOT_in_synpred47_Java6165 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred47_Java6168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred48_Java6214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred54_Java6258 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_synpred54_Java6277 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred54_Java6279 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred54_Java6281 = new BitSet(new ulong[]{0x0UL,0x8000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred54_Java6283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred54_Java6286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred54_Java6289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred54_Java6347 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred54_Java6349 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred54_Java6351 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred54_Java6353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred54_Java6356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred55_Java6244 = new BitSet(new ulong[]{0x40000422000000UL,0x1040081000020UL,0x200000008000000UL});
		public static readonly BitSet _genericTypeParameterList_in_synpred55_Java6258 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x200000008000000UL});
		public static readonly BitSet _type_in_synpred55_Java6277 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred55_Java6279 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred55_Java6281 = new BitSet(new ulong[]{0x0UL,0x8000000000UL,0x100000200000UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred55_Java6283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred55_Java6286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred55_Java6289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_synpred55_Java6347 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred55_Java6349 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _formalParameterList_in_synpred55_Java6351 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000200000UL});
		public static readonly BitSet _throwsClause_in_synpred55_Java6353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred55_Java6356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_synpred55_Java6419 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _interfaceFieldDeclaratorList_in_synpred55_Java6421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred55_Java6423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred56_Java6468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred62_Java6715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred63_Java6792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred87_Java7253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaratorList_in_synpred88_Java7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred90_Java7387 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _typeIdent_in_synpred90_Java7389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentList_in_synpred92_Java7477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred101_Java7620 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8010000UL});
		public static readonly BitSet _genericTypeArgument_in_synpred101_Java7622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericWildcardBoundType_in_synpred103_Java7676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_synpred108_Java7894 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred108_Java7896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred110_Java7891 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_synpred110_Java7894 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterStandardDecl_in_synpred110_Java7896 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _COMMA_in_synpred110_Java7901 = new BitSet(new ulong[]{0x40000422200000UL,0x1000081000028UL,0x8000000UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred110_Java7903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParameterVarArgDecl_in_synpred111_Java7960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred112_Java8205 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred112_Java8209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_synpred113_Java8262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifierList_in_synpred125_Java8716 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_synpred125_Java8718 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred125_Java8732 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _LPAREN_in_synpred125_Java8734 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_synpred125_Java8736 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _annotationDefaultValue_in_synpred125_Java8738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred125_Java8741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classFieldDeclaratorList_in_synpred125_Java8783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred125_Java8785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred126_Java8877 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred126_Java8879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_synpred127_Java8890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred128_Java8900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred129_Java8929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred130_Java8934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_synpred131_Java8937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred132_Java8972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred133_Java8985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred134_Java8998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred137_Java9184 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_synpred137_Java9188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInit_in_synpred139_Java9371 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred139_Java9373 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18200020UL});
		public static readonly BitSet _forCondition_in_synpred139_Java9375 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred139_Java9377 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18100020UL});
		public static readonly BitSet _forUpdater_in_synpred139_Java9379 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_synpred139_Java9381 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_synpred139_Java9383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred155_Java9996 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _COLON_in_synpred155_Java9998 = new BitSet(new ulong[]{0x48E00C26000000UL,0xAC134500A3800164UL,0x12018AAC18280020UL});
		public static readonly BitSet _statement_in_synpred155_Java10000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dmlOperation_in_synpred156_Java10067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred157_Java10077 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred157_Java10079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred158_Java10092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred161_Java10297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred164_Java10387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_synpred165_Java10409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred193_Java11266 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _shiftExpression_in_synpred193_Java11356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred198_Java11519 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred198_Java11571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred208_Java11939 = new BitSet(new ulong[]{0x40000422000000UL,0x1000081000020UL,0x8000000UL});
		public static readonly BitSet _type_in_synpred208_Java11941 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_synpred208_Java11943 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _unaryExpression_in_synpred208_Java11945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred210_Java12289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred214_Java12553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred216_Java12078 = new BitSet(new ulong[]{0x0UL,0x400040001000000UL,0x20800000000UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred216_Java12128 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred216_Java12210 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred216_Java12289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred216_Java12362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred216_Java12425 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred216_Java12427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred216_Java12480 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_synpred216_Java12484 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred216_Java12486 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred216_Java12553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_synpred216_Java12624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_synpred218_Java12746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_synpred219_Java12770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred228_Java13220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred231_Java13371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclarator_in_synpred236_Java13851 = new BitSet(new ulong[]{0x10000000000000UL,0x8000000000UL});
		public static readonly BitSet _DOT_in_synpred236_Java13919 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_synpred236_Java13921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_synpred237_Java13993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred238_Java13991 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _block_in_synpred238_Java13993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred245_Java14054 = new BitSet(new ulong[]{0x1000000000UL,0x400040000000000UL,0x20800000000UL});
		public static readonly BitSet _CLASS_in_synpred245_Java14072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _genericTypeArgumentListSimplified_in_synpred245_Java14135 = new BitSet(new ulong[]{0x0UL,0x1000000UL,0x800000000UL});
		public static readonly BitSet _SUPER_in_synpred245_Java14160 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred245_Java14162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred245_Java14212 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _DOT_in_synpred245_Java14216 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_synpred245_Java14218 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred245_Java14220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_synpred245_Java14270 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred245_Java14272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_synpred245_Java14347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_synpred245_Java14413 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _arguments_in_synpred245_Java14415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerNewExpression_in_synpred245_Java14463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mapDeclaration_in_synpred251_Java14708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setDeclaration_in_synpred252_Java14727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classBody_in_synpred254_Java14818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classBody_in_synpred256_Java14924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_synpred258_Java14991 = new BitSet(new ulong[]{0x40C00C22000000UL,0xAC134400A1800064UL,0x200820C18000020UL});
		public static readonly BitSet _expression_in_synpred258_Java14994 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_synpred258_Java14996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_synpred275_Java15170 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_synpred275_Java15172 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_synpred275_Java15175 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred275_Java15178 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_synpred275_Java15180 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_synpred275_Java15184 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_synpred275_Java15187 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred275_Java15190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_synpred275_Java15192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_synpred275_Java15197 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

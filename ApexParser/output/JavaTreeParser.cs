//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g 2014-06-10 17:23:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using ApexParser.ApexNodes;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class JavaTreeParser : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BROKEN_DECLARATION", "BROKEN_EXPRESSION", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "COMMENT", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GLOBAL", "GREATER_OR_EQUAL", "GREATER_THAN", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "MAP_INITIALIZER", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "OVERRIDE", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROPERTY_DECL", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SET_INITIALIZER", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SOQL_LITERAL", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "TEST_METHOD", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VIRTUAL", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WITHOUT_SHARING", "WITH_SHARING", "WS", "XOR", "XOR_ASSIGN", "'=>'"
	};
	public const int EOF=-1;
	public const int T__194=194;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSIGN=20;
	public const int AT=21;
	public const int BIT_SHIFT_RIGHT=22;
	public const int BIT_SHIFT_RIGHT_ASSIGN=23;
	public const int BLOCK_SCOPE=24;
	public const int BOOLEAN=25;
	public const int BREAK=26;
	public const int BROKEN_DECLARATION=27;
	public const int BROKEN_EXPRESSION=28;
	public const int BYTE=29;
	public const int CASE=30;
	public const int CAST_EXPR=31;
	public const int CATCH=32;
	public const int CATCH_CLAUSE_LIST=33;
	public const int CHAR=34;
	public const int CHARACTER_LITERAL=35;
	public const int CLASS=36;
	public const int CLASS_CONSTRUCTOR_CALL=37;
	public const int CLASS_INSTANCE_INITIALIZER=38;
	public const int CLASS_STATIC_INITIALIZER=39;
	public const int CLASS_TOP_LEVEL_SCOPE=40;
	public const int COLON=41;
	public const int COMMA=42;
	public const int COMMENT=43;
	public const int CONSTRUCTOR_DECL=44;
	public const int CONTINUE=45;
	public const int DEC=46;
	public const int DECIMAL_LITERAL=47;
	public const int DEFAULT=48;
	public const int DIV=49;
	public const int DIV_ASSIGN=50;
	public const int DO=51;
	public const int DOT=52;
	public const int DOTSTAR=53;
	public const int DOUBLE=54;
	public const int ELLIPSIS=55;
	public const int ELSE=56;
	public const int ENUM=57;
	public const int ENUM_TOP_LEVEL_SCOPE=58;
	public const int EQUAL=59;
	public const int ESCAPE_SEQUENCE=60;
	public const int EXPONENT=61;
	public const int EXPR=62;
	public const int EXTENDS=63;
	public const int EXTENDS_BOUND_LIST=64;
	public const int EXTENDS_CLAUSE=65;
	public const int FALSE=66;
	public const int FINAL=67;
	public const int FINALLY=68;
	public const int FLOAT=69;
	public const int FLOATING_POINT_LITERAL=70;
	public const int FLOAT_TYPE_SUFFIX=71;
	public const int FOR=72;
	public const int FORMAL_PARAM_LIST=73;
	public const int FORMAL_PARAM_STD_DECL=74;
	public const int FORMAL_PARAM_VARARG_DECL=75;
	public const int FOR_CONDITION=76;
	public const int FOR_EACH=77;
	public const int FOR_INIT=78;
	public const int FOR_UPDATE=79;
	public const int FUNCTION_METHOD_DECL=80;
	public const int GENERIC_TYPE_ARG_LIST=81;
	public const int GENERIC_TYPE_PARAM_LIST=82;
	public const int GLOBAL=83;
	public const int GREATER_OR_EQUAL=84;
	public const int GREATER_THAN=85;
	public const int HEX_DIGIT=86;
	public const int HEX_LITERAL=87;
	public const int IDENT=88;
	public const int IF=89;
	public const int IMPLEMENTS=90;
	public const int IMPLEMENTS_CLAUSE=91;
	public const int IMPORT=92;
	public const int INC=93;
	public const int INSTANCEOF=94;
	public const int INT=95;
	public const int INTEGER_TYPE_SUFFIX=96;
	public const int INTERFACE=97;
	public const int INTERFACE_TOP_LEVEL_SCOPE=98;
	public const int JAVA_ID_PART=99;
	public const int JAVA_ID_START=100;
	public const int JAVA_SOURCE=101;
	public const int LABELED_STATEMENT=102;
	public const int LBRACK=103;
	public const int LCURLY=104;
	public const int LESS_OR_EQUAL=105;
	public const int LESS_THAN=106;
	public const int LINE_COMMENT=107;
	public const int LOCAL_MODIFIER_LIST=108;
	public const int LOGICAL_AND=109;
	public const int LOGICAL_NOT=110;
	public const int LOGICAL_OR=111;
	public const int LONG=112;
	public const int LPAREN=113;
	public const int MAP_INITIALIZER=114;
	public const int METHOD_CALL=115;
	public const int MINUS=116;
	public const int MINUS_ASSIGN=117;
	public const int MOD=118;
	public const int MODIFIER_LIST=119;
	public const int MOD_ASSIGN=120;
	public const int NATIVE=121;
	public const int NEW=122;
	public const int NOT=123;
	public const int NOT_EQUAL=124;
	public const int NULL=125;
	public const int OCTAL_ESCAPE=126;
	public const int OCTAL_LITERAL=127;
	public const int OR=128;
	public const int OR_ASSIGN=129;
	public const int OVERRIDE=130;
	public const int PACKAGE=131;
	public const int PARENTESIZED_EXPR=132;
	public const int PLUS=133;
	public const int PLUS_ASSIGN=134;
	public const int POST_DEC=135;
	public const int POST_INC=136;
	public const int PRE_DEC=137;
	public const int PRE_INC=138;
	public const int PRIVATE=139;
	public const int PROPERTY_DECL=140;
	public const int PROTECTED=141;
	public const int PUBLIC=142;
	public const int QUALIFIED_TYPE_IDENT=143;
	public const int QUESTION=144;
	public const int RBRACK=145;
	public const int RCURLY=146;
	public const int RETURN=147;
	public const int RPAREN=148;
	public const int SEMI=149;
	public const int SET_INITIALIZER=150;
	public const int SHIFT_LEFT=151;
	public const int SHIFT_LEFT_ASSIGN=152;
	public const int SHIFT_RIGHT=153;
	public const int SHIFT_RIGHT_ASSIGN=154;
	public const int SHORT=155;
	public const int SOQL_LITERAL=156;
	public const int STAR=157;
	public const int STAR_ASSIGN=158;
	public const int STATIC=159;
	public const int STATIC_ARRAY_CREATOR=160;
	public const int STRICTFP=161;
	public const int STRING_LITERAL=162;
	public const int SUPER=163;
	public const int SUPER_CONSTRUCTOR_CALL=164;
	public const int SWITCH=165;
	public const int SWITCH_BLOCK_LABEL_LIST=166;
	public const int SYNCHRONIZED=167;
	public const int TEST_METHOD=168;
	public const int THIS=169;
	public const int THIS_CONSTRUCTOR_CALL=170;
	public const int THROW=171;
	public const int THROWS=172;
	public const int THROWS_CLAUSE=173;
	public const int TRANSIENT=174;
	public const int TRUE=175;
	public const int TRY=176;
	public const int TYPE=177;
	public const int UNARY_MINUS=178;
	public const int UNARY_PLUS=179;
	public const int UNICODE_ESCAPE=180;
	public const int VAR_DECLARATION=181;
	public const int VAR_DECLARATOR=182;
	public const int VAR_DECLARATOR_LIST=183;
	public const int VIRTUAL=184;
	public const int VOID=185;
	public const int VOID_METHOD_DECL=186;
	public const int VOLATILE=187;
	public const int WHILE=188;
	public const int WITHOUT_SHARING=189;
	public const int WITH_SHARING=190;
	public const int WS=191;
	public const int XOR=192;
	public const int XOR_ASSIGN=193;

	public JavaTreeParser(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaTreeParser(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[312+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return JavaTreeParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g"; } }


	    
	   private bool mMessageCollectionEnabled = true;
			    private List<string> mMessages;

			    public void enableErrorMessageCollection(bool pNewState) {
			        mMessageCollectionEnabled = pNewState;
			        if (mMessages == null && mMessageCollectionEnabled) {
			            mMessages = new List<string>();
			        }
			    }
			    
		        public override void EmitErrorMessage(string pMessage)
		        {
		            if (mMessageCollectionEnabled) {
			            mMessages.Add(pMessage);
			        } else {
			            base.EmitErrorMessage(pMessage);
			        }
			    }
			    
			    public List<string> getMessages() {
			        return mMessages;
			    }

			    public bool hasErrors() {
		            return mMessages.Count>0;
			    }

		


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:49:1: javaSource returns [IApexNode node] : ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? ) ;
	[GrammarRule("javaSource")]
	private IApexNode javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		IApexNode node = default(IApexNode);

		int javaSource_StartIndex = input.Index;

		IApexNode typeDeclaration1 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(49, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:5: ( ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:9: ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? )
			{
			DebugLocation(50, 9);
			DebugLocation(50, 11);
			Match(input,JAVA_SOURCE,Follow._JAVA_SOURCE_in_javaSource104); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(50, 23);
			PushFollow(Follow._annotationList_in_javaSource106);
			annotationList();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(50, 38);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:38: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:38: packageDeclaration
				{
				DebugLocation(50, 38);
				PushFollow(Follow._packageDeclaration_in_javaSource108);
				packageDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(50, 58);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:58: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:58: importDeclaration
					{
					DebugLocation(50, 58);
					PushFollow(Follow._importDeclaration_in_javaSource111);
					importDeclaration();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(50, 77);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:77: ( typeDeclaration )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==AT||LA3_1==CLASS||LA3_1==ENUM||LA3_1==INTERFACE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:77: typeDeclaration
				{
				DebugLocation(50, 77);
				PushFollow(Follow._typeDeclaration_in_javaSource114);
				typeDeclaration1=typeDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); if (state.failed) return node;

			DebugLocation(50, 95);
			if (state.backtracking == 0)
			{
				node = typeDeclaration1;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(51, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return node;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:53:1: packageDeclaration : ^( PACKAGE qualifiedIdentifier ) ;
	[GrammarRule("packageDeclaration")]
	private void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		int packageDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(53, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:54:5: ( ^( PACKAGE qualifiedIdentifier ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:54:9: ^( PACKAGE qualifiedIdentifier )
			{
			DebugLocation(54, 9);
			DebugLocation(54, 11);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration139); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(54, 19);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration141);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(55, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:57:1: importDeclaration : ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) ;
	[GrammarRule("importDeclaration")]
	private void importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		int importDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(57, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:5: ( ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:9: ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? )
			{
			DebugLocation(58, 9);
			DebugLocation(58, 11);
			Match(input,IMPORT,Follow._IMPORT_in_importDeclaration168); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(58, 18);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:18: ( STATIC )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==STATIC))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:18: STATIC
				{
				DebugLocation(58, 18);
				Match(input,STATIC,Follow._STATIC_in_importDeclaration170); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(58, 26);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration173);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(58, 46);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:46: ( DOTSTAR )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==DOTSTAR))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:58:46: DOTSTAR
				{
				DebugLocation(58, 46);
				Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration175); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(59, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:61:1: typeDeclaration returns [IApexNode node] : ( ^( CLASS IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) );
	[GrammarRule("typeDeclaration")]
	private IApexNode typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 4);
		TraceIn("typeDeclaration", 4);
		IApexNode node = default(IApexNode);

		int typeDeclaration_StartIndex = input.Index;

		IApexNode classTopLevelScope2 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(61, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:5: ( ^( CLASS IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			case ENUM:
				{
				alt12 = 3;
				}
				break;
			case AT:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:9: ^( CLASS IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope )
				{
				DebugLocation(62, 9);
				DebugLocation(62, 11);
				Match(input,CLASS,Follow._CLASS_in_typeDeclaration205); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(62, 18);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration208); if (state.failed) return node;
				DebugLocation(62, 24);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:24: ( genericTypeParameterList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:24: genericTypeParameterList
					{
					DebugLocation(62, 24);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration210);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(62, 50);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:50: ( extendsClause )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==EXTENDS_CLAUSE))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:50: extendsClause
					{
					DebugLocation(62, 50);
					PushFollow(Follow._extendsClause_in_typeDeclaration213);
					extendsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(62, 65);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:65: ( implementsClause )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==IMPLEMENTS_CLAUSE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:62:65: implementsClause
					{
					DebugLocation(62, 65);
					PushFollow(Follow._implementsClause_in_typeDeclaration216);
					implementsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(62, 83);
				PushFollow(Follow._classTopLevelScope_in_typeDeclaration219);
				classTopLevelScope2=classTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(62, 103);
				if (state.backtracking == 0)
				{
					node = classTopLevelScope2;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:9: ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope )
				{
				DebugLocation(63, 9);
				DebugLocation(63, 11);
				Match(input,INTERFACE,Follow._INTERFACE_in_typeDeclaration233); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(63, 21);
				PushFollow(Follow._modifierList_in_typeDeclaration235);
				modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(63, 34);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration237); if (state.failed) return node;
				DebugLocation(63, 40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:40: ( genericTypeParameterList )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:40: genericTypeParameterList
					{
					DebugLocation(63, 40);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration239);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(63, 66);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:66: ( extendsClause )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==EXTENDS_CLAUSE))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:66: extendsClause
					{
					DebugLocation(63, 66);
					PushFollow(Follow._extendsClause_in_typeDeclaration242);
					extendsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(63, 81);
				PushFollow(Follow._interfaceTopLevelScope_in_typeDeclaration245);
				interfaceTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:64:9: ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope )
				{
				DebugLocation(64, 9);
				DebugLocation(64, 11);
				Match(input,ENUM,Follow._ENUM_in_typeDeclaration257); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(64, 16);
				PushFollow(Follow._modifierList_in_typeDeclaration259);
				modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(64, 29);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration261); if (state.failed) return node;
				DebugLocation(64, 35);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:64:35: ( implementsClause )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==IMPLEMENTS_CLAUSE))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:64:35: implementsClause
					{
					DebugLocation(64, 35);
					PushFollow(Follow._implementsClause_in_typeDeclaration263);
					implementsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(64, 53);
				PushFollow(Follow._enumTopLevelScope_in_typeDeclaration266);
				enumTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:65:9: ^( AT modifierList IDENT annotationTopLevelScope )
				{
				DebugLocation(65, 9);
				DebugLocation(65, 11);
				Match(input,AT,Follow._AT_in_typeDeclaration278); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(65, 14);
				PushFollow(Follow._modifierList_in_typeDeclaration280);
				modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(65, 27);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration282); if (state.failed) return node;
				DebugLocation(65, 33);
				PushFollow(Follow._annotationTopLevelScope_in_typeDeclaration284);
				annotationTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 4);
			LeaveRule("typeDeclaration", 4);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, typeDeclaration_StartIndex); }

		}
		DebugLocation(66, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return node;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_extendsClause();
	partial void LeaveRule_extendsClause();
	// $ANTLR start "extendsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:68:1: extendsClause : ^( EXTENDS_CLAUSE ( type )+ ) ;
	[GrammarRule("extendsClause")]
	private void extendsClause()
	{
		EnterRule_extendsClause();
		EnterRule("extendsClause", 5);
		TraceIn("extendsClause", 5);
		int extendsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "extendsClause");
		DebugLocation(68, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:5: ( ^( EXTENDS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:9: ^( EXTENDS_CLAUSE ( type )+ )
			{
			DebugLocation(70, 9);
			DebugLocation(70, 11);
			Match(input,EXTENDS_CLAUSE,Follow._EXTENDS_CLAUSE_in_extendsClause321); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(70, 26);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:26: ( type )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==TYPE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:26: type
					{
					DebugLocation(70, 26);
					PushFollow(Follow._type_in_extendsClause323);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("extendsClause", 5);
			LeaveRule("extendsClause", 5);
			LeaveRule_extendsClause();
			if (state.backtracking > 0) { Memoize(input, 5, extendsClause_StartIndex); }

		}
		DebugLocation(71, 4);
		} finally { DebugExitRule(GrammarFileName, "extendsClause"); }
		return;

	}
	// $ANTLR end "extendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:73:1: implementsClause : ^( IMPLEMENTS_CLAUSE ( type )+ ) ;
	[GrammarRule("implementsClause")]
	private void implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 6);
		TraceIn("implementsClause", 6);
		int implementsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(73, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:74:5: ( ^( IMPLEMENTS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:74:9: ^( IMPLEMENTS_CLAUSE ( type )+ )
			{
			DebugLocation(74, 9);
			DebugLocation(74, 11);
			Match(input,IMPLEMENTS_CLAUSE,Follow._IMPLEMENTS_CLAUSE_in_implementsClause352); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(74, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:74:29: ( type )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==TYPE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:74:29: type
					{
					DebugLocation(74, 29);
					PushFollow(Follow._type_in_implementsClause354);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implementsClause", 6);
			LeaveRule("implementsClause", 6);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 6, implementsClause_StartIndex); }

		}
		DebugLocation(75, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:77:1: genericTypeParameterList : ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private void genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 7);
		TraceIn("genericTypeParameterList", 7);
		int genericTypeParameterList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(77, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:78:5: ( ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:78:9: ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ )
			{
			DebugLocation(78, 9);
			DebugLocation(78, 11);
			Match(input,GENERIC_TYPE_PARAM_LIST,Follow._GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList384); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(78, 35);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:78:35: ( genericTypeParameter )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==IDENT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:78:35: genericTypeParameter
					{
					DebugLocation(78, 35);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList386);
					genericTypeParameter();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameterList", 7);
			LeaveRule("genericTypeParameterList", 7);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 7, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(79, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:81:1: genericTypeParameter : ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private void genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 8);
		TraceIn("genericTypeParameter", 8);
		int genericTypeParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(81, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:82:5: ( ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:82:9: ^( IDENT ( bound )? )
			{
			DebugLocation(82, 9);
			DebugLocation(82, 11);
			Match(input,IDENT,Follow._IDENT_in_genericTypeParameter408); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(82, 17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:82:17: ( bound )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==EXTENDS_BOUND_LIST))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:82:17: bound
					{
					DebugLocation(82, 17);
					PushFollow(Follow._bound_in_genericTypeParameter410);
					bound();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameter", 8);
			LeaveRule("genericTypeParameter", 8);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 8, genericTypeParameter_StartIndex); }

		}
		DebugLocation(83, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:85:1: bound : ^( EXTENDS_BOUND_LIST ( type )+ ) ;
	[GrammarRule("bound")]
	private void bound()
	{
		EnterRule_bound();
		EnterRule("bound", 9);
		TraceIn("bound", 9);
		int bound_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(85, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:86:5: ( ^( EXTENDS_BOUND_LIST ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:86:9: ^( EXTENDS_BOUND_LIST ( type )+ )
			{
			DebugLocation(86, 9);
			DebugLocation(86, 11);
			Match(input,EXTENDS_BOUND_LIST,Follow._EXTENDS_BOUND_LIST_in_bound440); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(86, 30);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:86:30: ( type )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==TYPE))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:86:30: type
					{
					DebugLocation(86, 30);
					PushFollow(Follow._type_in_bound442);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bound", 9);
			LeaveRule("bound", 9);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 9, bound_StartIndex); }

		}
		DebugLocation(87, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTopLevelScope();
	partial void LeaveRule_enumTopLevelScope();
	// $ANTLR start "enumTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:89:1: enumTopLevelScope : ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? ) ;
	[GrammarRule("enumTopLevelScope")]
	private void enumTopLevelScope()
	{
		EnterRule_enumTopLevelScope();
		EnterRule("enumTopLevelScope", 10);
		TraceIn("enumTopLevelScope", 10);
		int enumTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumTopLevelScope");
		DebugLocation(89, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:5: ( ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:9: ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? )
			{
			DebugLocation(90, 9);
			DebugLocation(90, 11);
			Match(input,ENUM_TOP_LEVEL_SCOPE,Follow._ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope464); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(90, 32);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:32: ( enumConstant )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==IDENT))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:32: enumConstant
					{
					DebugLocation(90, 32);
					PushFollow(Follow._enumConstant_in_enumTopLevelScope466);
					enumConstant();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(90, 46);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:46: ( classTopLevelScope )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:90:46: classTopLevelScope
				{
				DebugLocation(90, 46);
				PushFollow(Follow._classTopLevelScope_in_enumTopLevelScope469);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumTopLevelScope", 10);
			LeaveRule("enumTopLevelScope", 10);
			LeaveRule_enumTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 10, enumTopLevelScope_StartIndex); }

		}
		DebugLocation(91, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTopLevelScope"); }
		return;

	}
	// $ANTLR end "enumTopLevelScope"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:93:1: enumConstant : ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) ;
	[GrammarRule("enumConstant")]
	private void enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 11);
		TraceIn("enumConstant", 11);
		int enumConstant_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(93, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:5: ( ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:9: ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? )
			{
			DebugLocation(94, 9);
			DebugLocation(94, 11);
			Match(input,IDENT,Follow._IDENT_in_enumConstant495); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(94, 17);
			PushFollow(Follow._annotationList_in_enumConstant497);
			annotationList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(94, 32);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:32: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==ARGUMENT_LIST))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:32: arguments
				{
				DebugLocation(94, 32);
				PushFollow(Follow._arguments_in_enumConstant499);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(94, 43);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:43: ( classTopLevelScope )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:43: classTopLevelScope
				{
				DebugLocation(94, 43);
				PushFollow(Follow._classTopLevelScope_in_enumConstant502);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstant", 11);
			LeaveRule("enumConstant", 11);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 11, enumConstant_StartIndex); }

		}
		DebugLocation(95, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_classTopLevelScope();
	partial void LeaveRule_classTopLevelScope();
	// $ANTLR start "classTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:98:1: classTopLevelScope returns [IApexNode node] : ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) ;
	[GrammarRule("classTopLevelScope")]
	private IApexNode classTopLevelScope()
	{
		EnterRule_classTopLevelScope();
		EnterRule("classTopLevelScope", 12);
		TraceIn("classTopLevelScope", 12);
		IApexNode node = default(IApexNode);

		int classTopLevelScope_StartIndex = input.Index;

		IApexNode classScopeDeclarations3 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "classTopLevelScope");
		DebugLocation(98, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:99:5: ( ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:100:8: ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* )
			{
			DebugLocation(100, 8);
			DebugLocation(100, 10);
			Match(input,CLASS_TOP_LEVEL_SCOPE,Follow._CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope542); if (state.failed) return node;

			DebugLocation(100, 32);
			if (state.backtracking == 0)
			{

					 	node = new ApexClassNode(); 
					
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(102, 4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:102:4: ( classScopeDeclarations )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if ((LA22_1==AT||LA22_1==CLASS||(LA22_1>=CLASS_INSTANCE_INITIALIZER && LA22_1<=CLASS_STATIC_INITIALIZER)||LA22_1==CONSTRUCTOR_DECL||LA22_1==ENUM||LA22_1==FUNCTION_METHOD_DECL||LA22_1==INTERFACE||LA22_1==PROPERTY_DECL||LA22_1==VAR_DECLARATION||LA22_1==VOID_METHOD_DECL))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:102:5: classScopeDeclarations
						{
						DebugLocation(102, 5);
						PushFollow(Follow._classScopeDeclarations_in_classTopLevelScope547);
						classScopeDeclarations3=classScopeDeclarations();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(102, 28);
						if (state.backtracking == 0)
						{
							((ApexClassNode)node).Add(classScopeDeclarations3);
						}

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classTopLevelScope", 12);
			LeaveRule("classTopLevelScope", 12);
			LeaveRule_classTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 12, classTopLevelScope_StartIndex); }

		}
		DebugLocation(103, 4);
		} finally { DebugExitRule(GrammarFileName, "classTopLevelScope"); }
		return node;

	}
	// $ANTLR end "classTopLevelScope"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:105:1: classScopeDeclarations returns [IApexNode node] : ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | ^( PROPERTY_DECL modifierList type propertyDeclaration ) | typeDeclaration );
	[GrammarRule("classScopeDeclarations")]
	private IApexNode classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 13);
		TraceIn("classScopeDeclarations", 13);
		IApexNode node = default(IApexNode);

		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree IDENT4 = default(CommonTree);
		CommonTree IDENT7 = default(CommonTree);
		List<Modifier> modifierList5 = default(List<Modifier>);
		ApexType type6 = default(ApexType);
		List<Modifier> modifierList8 = default(List<Modifier>);
		ApexType type9 = default(ApexType);
		List<Modifier> modifierList10 = default(List<Modifier>);
		List<ApexField> variableDeclaratorList11 = default(List<ApexField>);
		List<Modifier> modifierList12 = default(List<Modifier>);
		ApexType type13 = default(ApexType);
		List<Modifier> modifierList14 = default(List<Modifier>);
		IApexNode typeDeclaration15 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(105, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:5: ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | ^( PROPERTY_DECL modifierList type propertyDeclaration ) | typeDeclaration )
			int alt32=8;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case CLASS_INSTANCE_INITIALIZER:
				{
				alt32 = 1;
				}
				break;
			case CLASS_STATIC_INITIALIZER:
				{
				alt32 = 2;
				}
				break;
			case FUNCTION_METHOD_DECL:
				{
				alt32 = 3;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt32 = 4;
				}
				break;
			case VAR_DECLARATION:
				{
				alt32 = 5;
				}
				break;
			case CONSTRUCTOR_DECL:
				{
				alt32 = 6;
				}
				break;
			case PROPERTY_DECL:
				{
				alt32 = 7;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt32 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:9: ^( CLASS_INSTANCE_INITIALIZER block )
				{
				DebugLocation(106, 9);
				DebugLocation(106, 11);
				Match(input,CLASS_INSTANCE_INITIALIZER,Follow._CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations582); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(106, 38);
				PushFollow(Follow._block_in_classScopeDeclarations584);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(106, 45);
				if (state.backtracking == 0)
				{
					node = null;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:107:9: ^( CLASS_STATIC_INITIALIZER block )
				{
				DebugLocation(107, 9);
				DebugLocation(107, 11);
				Match(input,CLASS_STATIC_INITIALIZER,Follow._CLASS_STATIC_INITIALIZER_in_classScopeDeclarations598); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(107, 36);
				PushFollow(Follow._block_in_classScopeDeclarations600);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(107, 42);
				if (state.backtracking == 0)
				{
					node = null;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:9: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
				{
				DebugLocation(108, 9);
				DebugLocation(108, 11);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_classScopeDeclarations613); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(108, 32);
				PushFollow(Follow._modifierList_in_classScopeDeclarations615);
				modifierList5=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(108, 45);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:45: ( genericTypeParameterList )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:45: genericTypeParameterList
					{
					DebugLocation(108, 45);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations617);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(108, 71);
				PushFollow(Follow._type_in_classScopeDeclarations620);
				type6=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(108, 76);
				IDENT4=(CommonTree)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations622); if (state.failed) return node;
				DebugLocation(108, 82);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations624);
				formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(108, 102);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:102: ( arrayDeclaratorList )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==ARRAY_DECLARATOR_LIST))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:102: arrayDeclaratorList
					{
					DebugLocation(108, 102);
					PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations626);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(108, 123);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:123: ( throwsClause )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==THROWS_CLAUSE))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:123: throwsClause
					{
					DebugLocation(108, 123);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations629);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(108, 137);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:137: ( block )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==BLOCK_SCOPE))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:137: block
					{
					DebugLocation(108, 137);
					PushFollow(Follow._block_in_classScopeDeclarations632);
					block();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(108, 144);
				if (state.backtracking == 0)
				{
					node = new ApexMethod(IDENT4.Text, modifierList5,type6);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:9: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
				{
				DebugLocation(109, 9);
				DebugLocation(109, 11);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_classScopeDeclarations646); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(109, 28);
				PushFollow(Follow._modifierList_in_classScopeDeclarations648);
				modifierList8=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(109, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:41: ( genericTypeParameterList )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:41: genericTypeParameterList
					{
					DebugLocation(109, 41);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations650);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(109, 67);
				IDENT7=(CommonTree)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations653); if (state.failed) return node;
				DebugLocation(109, 73);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations655);
				formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(109, 93);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:93: ( throwsClause )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==THROWS_CLAUSE))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:93: throwsClause
					{
					DebugLocation(109, 93);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations657);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(109, 107);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:107: ( block )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==BLOCK_SCOPE))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:107: block
					{
					DebugLocation(109, 107);
					PushFollow(Follow._block_in_classScopeDeclarations660);
					block();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(109, 114);
				if (state.backtracking == 0)
				{
					node = new ApexMethod(IDENT7.Text, modifierList8);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:110:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(110, 9);
				DebugLocation(110, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_classScopeDeclarations674); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(110, 27);
				PushFollow(Follow._modifierList_in_classScopeDeclarations676);
				modifierList10=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(110, 40);
				PushFollow(Follow._type_in_classScopeDeclarations678);
				type9=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(110, 45);
				PushFollow(Follow._variableDeclaratorList_in_classScopeDeclarations680);
				variableDeclaratorList11=variableDeclaratorList();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(110, 68);
				if (state.backtracking == 0)
				{
					node = new ApexFieldList(type9, modifierList10, variableDeclaratorList11);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:111:9: ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
				{
				DebugLocation(111, 9);
				DebugLocation(111, 11);
				Match(input,CONSTRUCTOR_DECL,Follow._CONSTRUCTOR_DECL_in_classScopeDeclarations693); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(111, 28);
				PushFollow(Follow._modifierList_in_classScopeDeclarations695);
				modifierList12=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(111, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:111:41: ( genericTypeParameterList )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:111:41: genericTypeParameterList
					{
					DebugLocation(111, 41);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations697);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(111, 67);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations700);
				formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(111, 87);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:111:87: ( throwsClause )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==THROWS_CLAUSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:111:87: throwsClause
					{
					DebugLocation(111, 87);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations702);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(111, 101);
				PushFollow(Follow._block_in_classScopeDeclarations705);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(111, 107);
				if (state.backtracking == 0)
				{
					node = new ApexConstructor(modifierList12);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:112:9: ^( PROPERTY_DECL modifierList type propertyDeclaration )
				{
				DebugLocation(112, 9);
				DebugLocation(112, 11);
				Match(input,PROPERTY_DECL,Follow._PROPERTY_DECL_in_classScopeDeclarations718); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(112, 25);
				PushFollow(Follow._modifierList_in_classScopeDeclarations720);
				modifierList14=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(112, 38);
				PushFollow(Follow._type_in_classScopeDeclarations722);
				type13=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(112, 43);
				PushFollow(Follow._propertyDeclaration_in_classScopeDeclarations724);
				propertyDeclaration();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(112, 64);
				if (state.backtracking == 0)
				{
					node = new ApexProperty(type13, modifierList14);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:113:9: typeDeclaration
				{
				DebugLocation(113, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations737);
				typeDeclaration15=typeDeclaration();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(113, 25);
				if (state.backtracking == 0)
				{
					node = typeDeclaration15;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classScopeDeclarations", 13);
			LeaveRule("classScopeDeclarations", 13);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 13, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(114, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return node;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_propertyDeclaration();
	partial void LeaveRule_propertyDeclaration();
	// $ANTLR start "propertyDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:116:1: propertyDeclaration : ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) );
	[GrammarRule("propertyDeclaration")]
	private void propertyDeclaration()
	{
		EnterRule_propertyDeclaration();
		EnterRule("propertyDeclaration", 14);
		TraceIn("propertyDeclaration", 14);
		int propertyDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "propertyDeclaration");
		DebugLocation(116, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:117:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==LCURLY))
			{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred46_JavaTreeParser_fragment)))
				{
					alt43 = 1;
				}
				else if ((true))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				{
				DebugLocation(118, 2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
				{
				DebugLocation(118, 3);
				Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration754); if (state.failed) return;
				DebugLocation(118, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:7: ( modifier )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==ABSTRACT||LA33_1==AT||LA33_1==FINAL||LA33_1==GLOBAL||LA33_1==NATIVE||LA33_1==OVERRIDE||LA33_1==PRIVATE||(LA33_1>=PROTECTED && LA33_1<=PUBLIC)||LA33_1==STATIC||LA33_1==STRICTFP||(LA33_1>=SYNCHRONIZED && LA33_1<=TEST_METHOD)||LA33_1==TRANSIENT||LA33_1==VIRTUAL||LA33_1==VOLATILE||(LA33_1>=WITHOUT_SHARING && LA33_1<=WITH_SHARING)))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:7: modifier
					{
					DebugLocation(118, 7);
					PushFollow(Follow._modifier_in_propertyDeclaration756);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(118, 17);
				PushFollow(Follow._getRule_in_propertyDeclaration759);
				getRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(118, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:25: ( SEMI | block )
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==SEMI))
				{
					alt34 = 1;
				}
				else if ((LA34_1==BLOCK_SCOPE))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:26: SEMI
					{
					DebugLocation(118, 26);
					Match(input,SEMI,Follow._SEMI_in_propertyDeclaration762); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:31: block
					{
					DebugLocation(118, 31);
					PushFollow(Follow._block_in_propertyDeclaration764);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(118, 38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:38: ( ( modifier )? setRule ( SEMI | block ) )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==ABSTRACT||LA37_1==AT||LA37_1==FINAL||LA37_1==GLOBAL||LA37_1==IDENT||LA37_1==NATIVE||LA37_1==OVERRIDE||LA37_1==PRIVATE||(LA37_1>=PROTECTED && LA37_1<=PUBLIC)||LA37_1==STATIC||LA37_1==STRICTFP||(LA37_1>=SYNCHRONIZED && LA37_1<=TEST_METHOD)||LA37_1==TRANSIENT||LA37_1==VIRTUAL||LA37_1==VOLATILE||(LA37_1>=WITHOUT_SHARING && LA37_1<=WITH_SHARING)))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: ( modifier )? setRule ( SEMI | block )
					{
					DebugLocation(118, 39);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: ( modifier )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==ABSTRACT||LA35_1==AT||LA35_1==FINAL||LA35_1==GLOBAL||LA35_1==NATIVE||LA35_1==OVERRIDE||LA35_1==PRIVATE||(LA35_1>=PROTECTED && LA35_1<=PUBLIC)||LA35_1==STATIC||LA35_1==STRICTFP||(LA35_1>=SYNCHRONIZED && LA35_1<=TEST_METHOD)||LA35_1==TRANSIENT||LA35_1==VIRTUAL||LA35_1==VOLATILE||(LA35_1>=WITHOUT_SHARING && LA35_1<=WITH_SHARING)))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: modifier
						{
						DebugLocation(118, 39);
						PushFollow(Follow._modifier_in_propertyDeclaration768);
						modifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(118, 49);
					PushFollow(Follow._setRule_in_propertyDeclaration771);
					setRule();
					PopFollow();
					if (state.failed) return;
					DebugLocation(118, 57);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:57: ( SEMI | block )
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					int LA36_1 = input.LA(1);

					if ((LA36_1==SEMI))
					{
						alt36 = 1;
					}
					else if ((LA36_1==BLOCK_SCOPE))
					{
						alt36 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:58: SEMI
						{
						DebugLocation(118, 58);
						Match(input,SEMI,Follow._SEMI_in_propertyDeclaration774); if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:63: block
						{
						DebugLocation(118, 63);
						PushFollow(Follow._block_in_propertyDeclaration776);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(36); }


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(118, 72);
				Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration781); if (state.failed) return;

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				{
				DebugLocation(119, 4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:4: ( '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:5: '{' ( modifier )? setRule ( SEMI | block ) ( ( modifier )? getRule ( SEMI | block ) )? '}'
				{
				DebugLocation(119, 5);
				Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration788); if (state.failed) return;
				DebugLocation(119, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:9: ( modifier )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==ABSTRACT||LA38_1==AT||LA38_1==FINAL||LA38_1==GLOBAL||LA38_1==NATIVE||LA38_1==OVERRIDE||LA38_1==PRIVATE||(LA38_1>=PROTECTED && LA38_1<=PUBLIC)||LA38_1==STATIC||LA38_1==STRICTFP||(LA38_1>=SYNCHRONIZED && LA38_1<=TEST_METHOD)||LA38_1==TRANSIENT||LA38_1==VIRTUAL||LA38_1==VOLATILE||(LA38_1>=WITHOUT_SHARING && LA38_1<=WITH_SHARING)))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:9: modifier
					{
					DebugLocation(119, 9);
					PushFollow(Follow._modifier_in_propertyDeclaration790);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(119, 19);
				PushFollow(Follow._setRule_in_propertyDeclaration793);
				setRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(119, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:27: ( SEMI | block )
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==SEMI))
				{
					alt39 = 1;
				}
				else if ((LA39_1==BLOCK_SCOPE))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:28: SEMI
					{
					DebugLocation(119, 28);
					Match(input,SEMI,Follow._SEMI_in_propertyDeclaration796); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:33: block
					{
					DebugLocation(119, 33);
					PushFollow(Follow._block_in_propertyDeclaration798);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(119, 40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:40: ( ( modifier )? getRule ( SEMI | block ) )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==ABSTRACT||LA42_1==AT||LA42_1==FINAL||LA42_1==GLOBAL||LA42_1==IDENT||LA42_1==NATIVE||LA42_1==OVERRIDE||LA42_1==PRIVATE||(LA42_1>=PROTECTED && LA42_1<=PUBLIC)||LA42_1==STATIC||LA42_1==STRICTFP||(LA42_1>=SYNCHRONIZED && LA42_1<=TEST_METHOD)||LA42_1==TRANSIENT||LA42_1==VIRTUAL||LA42_1==VOLATILE||(LA42_1>=WITHOUT_SHARING && LA42_1<=WITH_SHARING)))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:41: ( modifier )? getRule ( SEMI | block )
					{
					DebugLocation(119, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:41: ( modifier )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==ABSTRACT||LA40_1==AT||LA40_1==FINAL||LA40_1==GLOBAL||LA40_1==NATIVE||LA40_1==OVERRIDE||LA40_1==PRIVATE||(LA40_1>=PROTECTED && LA40_1<=PUBLIC)||LA40_1==STATIC||LA40_1==STRICTFP||(LA40_1>=SYNCHRONIZED && LA40_1<=TEST_METHOD)||LA40_1==TRANSIENT||LA40_1==VIRTUAL||LA40_1==VOLATILE||(LA40_1>=WITHOUT_SHARING && LA40_1<=WITH_SHARING)))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:41: modifier
						{
						DebugLocation(119, 41);
						PushFollow(Follow._modifier_in_propertyDeclaration802);
						modifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(119, 51);
					PushFollow(Follow._getRule_in_propertyDeclaration805);
					getRule();
					PopFollow();
					if (state.failed) return;
					DebugLocation(119, 59);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:59: ( SEMI | block )
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==SEMI))
					{
						alt41 = 1;
					}
					else if ((LA41_1==BLOCK_SCOPE))
					{
						alt41 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:60: SEMI
						{
						DebugLocation(119, 60);
						Match(input,SEMI,Follow._SEMI_in_propertyDeclaration808); if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:65: block
						{
						DebugLocation(119, 65);
						PushFollow(Follow._block_in_propertyDeclaration810);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(41); }


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(119, 75);
				Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration816); if (state.failed) return;

				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyDeclaration", 14);
			LeaveRule("propertyDeclaration", 14);
			LeaveRule_propertyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, propertyDeclaration_StartIndex); }

		}
		DebugLocation(121, 0);
		} finally { DebugExitRule(GrammarFileName, "propertyDeclaration"); }
		return;

	}
	// $ANTLR end "propertyDeclaration"

	partial void EnterRule_getRule();
	partial void LeaveRule_getRule();
	// $ANTLR start "getRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:1: getRule :{...}? IDENT ;
	[GrammarRule("getRule")]
	private void getRule()
	{
		EnterRule_getRule();
		EnterRule("getRule", 15);
		TraceIn("getRule", 15);
		int getRule_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "getRule");
		DebugLocation(122, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:123:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:124:5: {...}? IDENT
			{
			DebugLocation(124, 5);
			if (!((((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text == "get"))))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "getRule", "((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text == \"get\")");
			}
			DebugLocation(124, 86);
			Match(input,IDENT,Follow._IDENT_in_getRule833); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("getRule", 15);
			LeaveRule("getRule", 15);
			LeaveRule_getRule();
			if (state.backtracking > 0) { Memoize(input, 15, getRule_StartIndex); }

		}
		DebugLocation(125, 0);
		} finally { DebugExitRule(GrammarFileName, "getRule"); }
		return;

	}
	// $ANTLR end "getRule"

	partial void EnterRule_setRule();
	partial void LeaveRule_setRule();
	// $ANTLR start "setRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:126:1: setRule :{...}? IDENT ;
	[GrammarRule("setRule")]
	private void setRule()
	{
		EnterRule_setRule();
		EnterRule("setRule", 16);
		TraceIn("setRule", 16);
		int setRule_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "setRule");
		DebugLocation(126, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:127:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:5: {...}? IDENT
			{
			DebugLocation(128, 5);
			if (!(((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text== "set")))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "setRule", "(input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text== \"set\"");
			}
			DebugLocation(128, 83);
			Match(input,IDENT,Follow._IDENT_in_setRule847); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("setRule", 16);
			LeaveRule("setRule", 16);
			LeaveRule_setRule();
			if (state.backtracking > 0) { Memoize(input, 16, setRule_StartIndex); }

		}
		DebugLocation(129, 0);
		} finally { DebugExitRule(GrammarFileName, "setRule"); }
		return;

	}
	// $ANTLR end "setRule"

	partial void EnterRule_interfaceTopLevelScope();
	partial void LeaveRule_interfaceTopLevelScope();
	// $ANTLR start "interfaceTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:131:1: interfaceTopLevelScope : ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceTopLevelScope")]
	private void interfaceTopLevelScope()
	{
		EnterRule_interfaceTopLevelScope();
		EnterRule("interfaceTopLevelScope", 17);
		TraceIn("interfaceTopLevelScope", 17);
		int interfaceTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceTopLevelScope");
		DebugLocation(131, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:132:5: ( ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:132:9: ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* )
			{
			DebugLocation(132, 9);
			DebugLocation(132, 11);
			Match(input,INTERFACE_TOP_LEVEL_SCOPE,Follow._INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope866); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(132, 37);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:132:37: ( interfaceScopeDeclarations )*
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					int LA44_1 = input.LA(1);

					if ((LA44_1==AT||LA44_1==CLASS||LA44_1==ENUM||LA44_1==FUNCTION_METHOD_DECL||LA44_1==INTERFACE||LA44_1==VAR_DECLARATION||LA44_1==VOID_METHOD_DECL))
					{
						alt44 = 1;
					}


					} finally { DebugExitDecision(44); }
					switch ( alt44 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:132:37: interfaceScopeDeclarations
						{
						DebugLocation(132, 37);
						PushFollow(Follow._interfaceScopeDeclarations_in_interfaceTopLevelScope868);
						interfaceScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop44;
					}
				}

				loop44:
					;

				} finally { DebugExitSubRule(44); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceTopLevelScope", 17);
			LeaveRule("interfaceTopLevelScope", 17);
			LeaveRule_interfaceTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 17, interfaceTopLevelScope_StartIndex); }

		}
		DebugLocation(133, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTopLevelScope"); }
		return;

	}
	// $ANTLR end "interfaceTopLevelScope"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:135:1: interfaceScopeDeclarations : ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("interfaceScopeDeclarations")]
	private void interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 18);
		TraceIn("interfaceScopeDeclarations", 18);
		int interfaceScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(135, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:5: ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt50=4;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case FUNCTION_METHOD_DECL:
				{
				alt50 = 1;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt50 = 2;
				}
				break;
			case VAR_DECLARATION:
				{
				alt50 = 3;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt50 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:9: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
				{
				DebugLocation(136, 9);
				DebugLocation(136, 11);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations894); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(136, 32);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations896);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 45);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:45: ( genericTypeParameterList )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:45: genericTypeParameterList
					{
					DebugLocation(136, 45);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations898);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(136, 71);
				PushFollow(Follow._type_in_interfaceScopeDeclarations901);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 76);
				Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations903); if (state.failed) return;
				DebugLocation(136, 82);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations905);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 102);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:102: ( arrayDeclaratorList )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ARRAY_DECLARATOR_LIST))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:102: arrayDeclaratorList
					{
					DebugLocation(136, 102);
					PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations907);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(136, 123);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:123: ( throwsClause )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS_CLAUSE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:123: throwsClause
					{
					DebugLocation(136, 123);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations910);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:9: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
				{
				DebugLocation(137, 9);
				DebugLocation(137, 11);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_interfaceScopeDeclarations923); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(137, 28);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations925);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:41: ( genericTypeParameterList )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:41: genericTypeParameterList
					{
					DebugLocation(137, 41);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations927);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(137, 67);
				Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations930); if (state.failed) return;
				DebugLocation(137, 73);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations932);
				formalParameterList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 93);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:93: ( throwsClause )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==THROWS_CLAUSE))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:93: throwsClause
					{
					DebugLocation(137, 93);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations934);
					throwsClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:141:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(141, 9);
				DebugLocation(141, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_interfaceScopeDeclarations1025); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(141, 27);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations1027);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(141, 40);
				PushFollow(Follow._type_in_interfaceScopeDeclarations1029);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(141, 45);
				PushFollow(Follow._variableDeclaratorList_in_interfaceScopeDeclarations1031);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:142:9: typeDeclaration
				{
				DebugLocation(142, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations1042);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 18);
			LeaveRule("interfaceScopeDeclarations", 18);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(143, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_variableDeclaratorList();
	partial void LeaveRule_variableDeclaratorList();
	// $ANTLR start "variableDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:145:1: variableDeclaratorList returns [List<ApexField> fields] : ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) ;
	[GrammarRule("variableDeclaratorList")]
	private List<ApexField> variableDeclaratorList()
	{
		EnterRule_variableDeclaratorList();
		EnterRule("variableDeclaratorList", 19);
		TraceIn("variableDeclaratorList", 19);
		List<ApexField> fields = default(List<ApexField>);

		int variableDeclaratorList_StartIndex = input.Index;

		ApexField variableDeclarator16 = default(ApexField);

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorList");
		DebugLocation(145, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return fields; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:146:5: ( ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:147:6: ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ )
			{
			DebugLocation(147, 6);
			if (state.backtracking == 0)
			{
				fields = new List<ApexField>();
			}
			DebugLocation(148, 7);
			DebugLocation(148, 9);
			Match(input,VAR_DECLARATOR_LIST,Follow._VAR_DECLARATOR_LIST_in_variableDeclaratorList1079); if (state.failed) return fields;

			Match(input, TokenTypes.Down, null); if (state.failed) return fields;
			DebugLocation(148, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:148:29: ( variableDeclarator )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==VAR_DECLARATOR))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:148:30: variableDeclarator
					{
					DebugLocation(148, 30);
					PushFollow(Follow._variableDeclarator_in_variableDeclaratorList1082);
					variableDeclarator16=variableDeclarator();
					PopFollow();
					if (state.failed) return fields;
					DebugLocation(148, 49);
					if (state.backtracking == 0)
					{
					    fields.Add(variableDeclarator16);
					}

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					if (state.backtracking>0) {state.failed=true; return fields;}
					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }


			Match(input, TokenTypes.Up, null); if (state.failed) return fields;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorList", 19);
			LeaveRule("variableDeclaratorList", 19);
			LeaveRule_variableDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 19, variableDeclaratorList_StartIndex); }

		}
		DebugLocation(149, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorList"); }
		return fields;

	}
	// $ANTLR end "variableDeclaratorList"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:151:1: variableDeclarator returns [ApexField field] : ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("variableDeclarator")]
	private ApexField variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 20);
		TraceIn("variableDeclarator", 20);
		ApexField field = default(ApexField);

		int variableDeclarator_StartIndex = input.Index;

		ApexField variableDeclaratorId17 = default(ApexField);

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(151, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return field; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:5: ( ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:9: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
			DebugLocation(153, 9);
			DebugLocation(153, 11);
			Match(input,VAR_DECLARATOR,Follow._VAR_DECLARATOR_in_variableDeclarator1112); if (state.failed) return field;

			Match(input, TokenTypes.Down, null); if (state.failed) return field;
			DebugLocation(153, 26);
			PushFollow(Follow._variableDeclaratorId_in_variableDeclarator1114);
			variableDeclaratorId17=variableDeclaratorId();
			PopFollow();
			if (state.failed) return field;
			DebugLocation(153, 47);
			if (state.backtracking == 0)
			{
				field = variableDeclaratorId17;
			}
			DebugLocation(153, 88);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:88: ( variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ARRAY_INITIALIZER||LA52_1==BROKEN_EXPRESSION||LA52_1==EXPR))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:88: variableInitializer
				{
				DebugLocation(153, 88);
				PushFollow(Follow._variableInitializer_in_variableDeclarator1118);
				variableInitializer();
				PopFollow();
				if (state.failed) return field;

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			Match(input, TokenTypes.Up, null); if (state.failed) return field;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 20);
			LeaveRule("variableDeclarator", 20);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 20, variableDeclarator_StartIndex); }

		}
		DebugLocation(154, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return field;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:156:1: variableDeclaratorId returns [ApexField fieldId] : ^( IDENT ( arrayDeclaratorList )? ) ;
	[GrammarRule("variableDeclaratorId")]
	private ApexField variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 21);
		TraceIn("variableDeclaratorId", 21);
		ApexField fieldId = default(ApexField);

		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree IDENT18 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(156, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return fieldId; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:157:5: ( ^( IDENT ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:157:9: ^( IDENT ( arrayDeclaratorList )? )
			{
			DebugLocation(157, 9);
			DebugLocation(157, 11);
			IDENT18=(CommonTree)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId1148); if (state.failed) return fieldId;

			DebugLocation(157, 17);
			if (state.backtracking == 0)
			{
				fieldId = new ApexField(IDENT18.Text);
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return fieldId;
				DebugLocation(157, 57);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:157:57: ( arrayDeclaratorList )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ARRAY_DECLARATOR_LIST))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:157:58: arrayDeclaratorList
					{
					DebugLocation(157, 58);
					PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId1153);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return fieldId;
					DebugLocation(157, 78);
					if (state.backtracking == 0)
					{
                        fieldId.IsArray = true;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				Match(input, TokenTypes.Up, null); if (state.failed) return fieldId;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorId", 21);
			LeaveRule("variableDeclaratorId", 21);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 21, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(158, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return fieldId;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:160:1: variableInitializer : ( arrayInitializer | expression | brokenExpression );
	[GrammarRule("variableInitializer")]
	private void variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 22);
		TraceIn("variableInitializer", 22);
		int variableInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(160, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:161:5: ( arrayInitializer | expression | brokenExpression )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case ARRAY_INITIALIZER:
				{
				alt54 = 1;
				}
				break;
			case EXPR:
				{
				alt54 = 2;
				}
				break;
			case BROKEN_EXPRESSION:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:161:9: arrayInitializer
				{
				DebugLocation(161, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer1177);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:162:9: expression
				{
				DebugLocation(162, 9);
				PushFollow(Follow._expression_in_variableInitializer1187);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:163:9: brokenExpression
				{
				DebugLocation(163, 9);
				PushFollow(Follow._brokenExpression_in_variableInitializer1197);
				brokenExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 22);
			LeaveRule("variableInitializer", 22);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 22, variableInitializer_StartIndex); }

		}
		DebugLocation(164, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:166:1: arrayDeclarator : LBRACK RBRACK ;
	[GrammarRule("arrayDeclarator")]
	private void arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 23);
		TraceIn("arrayDeclarator", 23);
		int arrayDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(166, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:167:5: ( LBRACK RBRACK )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:167:9: LBRACK RBRACK
			{
			DebugLocation(167, 9);
			Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator1217); if (state.failed) return;
			DebugLocation(167, 16);
			Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator1219); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclarator", 23);
			LeaveRule("arrayDeclarator", 23);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 23, arrayDeclarator_StartIndex); }

		}
		DebugLocation(168, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:170:1: arrayDeclaratorList : ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) ;
	[GrammarRule("arrayDeclaratorList")]
	private void arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 24);
		TraceIn("arrayDeclaratorList", 24);
		int arrayDeclaratorList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(170, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:171:5: ( ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:171:9: ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* )
			{
			DebugLocation(171, 9);
			DebugLocation(171, 11);
			Match(input,ARRAY_DECLARATOR_LIST,Follow._ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1239); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(171, 33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:171:33: ( ARRAY_DECLARATOR )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_1 = input.LA(1);

					if ((LA55_1==ARRAY_DECLARATOR))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:171:33: ARRAY_DECLARATOR
						{
						DebugLocation(171, 33);
						Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayDeclaratorList1241); if (state.failed) return;

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclaratorList", 24);
			LeaveRule("arrayDeclaratorList", 24);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 24, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(172, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:174:1: arrayInitializer : ^( ARRAY_INITIALIZER ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private void arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 25);
		TraceIn("arrayInitializer", 25);
		int arrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(174, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:175:5: ( ^( ARRAY_INITIALIZER ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:175:9: ^( ARRAY_INITIALIZER ( variableInitializer )* )
			{
			DebugLocation(175, 9);
			DebugLocation(175, 11);
			Match(input,ARRAY_INITIALIZER,Follow._ARRAY_INITIALIZER_in_arrayInitializer1269); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(175, 29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:175:29: ( variableInitializer )*
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==ARRAY_INITIALIZER||LA56_1==BROKEN_EXPRESSION||LA56_1==EXPR))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch ( alt56 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:175:29: variableInitializer
						{
						DebugLocation(175, 29);
						PushFollow(Follow._variableInitializer_in_arrayInitializer1271);
						variableInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop56;
					}
				}

				loop56:
					;

				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 25);
			LeaveRule("arrayInitializer", 25);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 25, arrayInitializer_StartIndex); }

		}
		DebugLocation(176, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:178:1: throwsClause : ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) ;
	[GrammarRule("throwsClause")]
	private void throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 26);
		TraceIn("throwsClause", 26);
		int throwsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(178, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:179:5: ( ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:179:9: ^( THROWS_CLAUSE ( qualifiedIdentifier )+ )
			{
			DebugLocation(179, 9);
			DebugLocation(179, 11);
			Match(input,THROWS_CLAUSE,Follow._THROWS_CLAUSE_in_throwsClause1293); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(179, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:179:25: ( qualifiedIdentifier )+
			int cnt57=0;
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==DOT||LA57_1==IDENT))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:179:25: qualifiedIdentifier
					{
					DebugLocation(179, 25);
					PushFollow(Follow._qualifiedIdentifier_in_throwsClause1295);
					qualifiedIdentifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt57 >= 1)
						goto loop57;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee57 = new EarlyExitException( 57, input );
					DebugRecognitionException(eee57);
					throw eee57;
				}
				cnt57++;
			}
			loop57:
				;

			} finally { DebugExitSubRule(57); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwsClause", 26);
			LeaveRule("throwsClause", 26);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 26, throwsClause_StartIndex); }

		}
		DebugLocation(180, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:182:1: modifierList returns [List<Modifier> modifierList] : ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private List<Modifier> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 27);
		TraceIn("modifierList", 27);
		List<Modifier> modifierList = default(List<Modifier>);

		int modifierList_StartIndex = input.Index;

		Modifier modifier19 = default(Modifier);

		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(182, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return modifierList; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:183:5: ( ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:184:8: ^( MODIFIER_LIST ( modifier )* )
			{
			DebugLocation(184, 8);
			if (state.backtracking == 0)
			{
				modifierList = new List<Modifier>();
			}
			DebugLocation(185, 5);
			DebugLocation(185, 7);
			Match(input,MODIFIER_LIST,Follow._MODIFIER_LIST_in_modifierList1336); if (state.failed) return modifierList;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return modifierList;
				DebugLocation(185, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:21: ( modifier )*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_1 = input.LA(1);

					if ((LA58_1==ABSTRACT||LA58_1==AT||LA58_1==FINAL||LA58_1==GLOBAL||LA58_1==NATIVE||LA58_1==OVERRIDE||LA58_1==PRIVATE||(LA58_1>=PROTECTED && LA58_1<=PUBLIC)||LA58_1==STATIC||LA58_1==STRICTFP||(LA58_1>=SYNCHRONIZED && LA58_1<=TEST_METHOD)||LA58_1==TRANSIENT||LA58_1==VIRTUAL||LA58_1==VOLATILE||(LA58_1>=WITHOUT_SHARING && LA58_1<=WITH_SHARING)))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:22: modifier
						{
						DebugLocation(185, 22);
						PushFollow(Follow._modifier_in_modifierList1339);
						modifier19=modifier();
						PopFollow();
						if (state.failed) return modifierList;
						DebugLocation(185, 31);
						if (state.backtracking == 0)
						{
							modifierList.Add(modifier19);
						}

						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); if (state.failed) return modifierList;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifierList", 27);
			LeaveRule("modifierList", 27);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 27, modifierList_StartIndex); }

		}
		DebugLocation(186, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return modifierList;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:188:1: modifier returns [Modifier modifier] : ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier ) ;
	[GrammarRule("modifier")]
	private Modifier modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 28);
		TraceIn("modifier", 28);
		Modifier modifier = default(Modifier);

		int modifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(188, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return modifier; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:189:5: ( ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:191:6: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			{
			DebugLocation(191, 6);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:191:6: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			int alt59=17;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt59 = 1;
				}
				break;
			case OVERRIDE:
				{
				alt59 = 2;
				}
				break;
			case VIRTUAL:
				{
				alt59 = 3;
				}
				break;
			case WITH_SHARING:
				{
				alt59 = 4;
				}
				break;
			case WITHOUT_SHARING:
				{
				alt59 = 5;
				}
				break;
			case PROTECTED:
				{
				alt59 = 6;
				}
				break;
			case PRIVATE:
				{
				alt59 = 7;
				}
				break;
			case STATIC:
				{
				alt59 = 8;
				}
				break;
			case ABSTRACT:
				{
				alt59 = 9;
				}
				break;
			case NATIVE:
				{
				alt59 = 10;
				}
				break;
			case SYNCHRONIZED:
				{
				alt59 = 11;
				}
				break;
			case TRANSIENT:
				{
				alt59 = 12;
				}
				break;
			case VOLATILE:
				{
				alt59 = 13;
				}
				break;
			case STRICTFP:
				{
				alt59 = 14;
				}
				break;
			case GLOBAL:
				{
				alt59 = 15;
				}
				break;
			case TEST_METHOD:
				{
				alt59 = 16;
				}
				break;
			case AT:
			case FINAL:
				{
				alt59 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return modifier;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:191:7: PUBLIC
				{
				DebugLocation(191, 7);
				Match(input,PUBLIC,Follow._PUBLIC_in_modifier1377); if (state.failed) return modifier;
				DebugLocation(191, 14);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Public;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:192:9: OVERRIDE
				{
				DebugLocation(192, 9);
				Match(input,OVERRIDE,Follow._OVERRIDE_in_modifier1389); if (state.failed) return modifier;
				DebugLocation(192, 18);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Override;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:193:9: VIRTUAL
				{
				DebugLocation(193, 9);
				Match(input,VIRTUAL,Follow._VIRTUAL_in_modifier1401); if (state.failed) return modifier;
				DebugLocation(193, 17);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Virtual;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:194:9: WITH_SHARING
				{
				DebugLocation(194, 9);
				Match(input,WITH_SHARING,Follow._WITH_SHARING_in_modifier1413); if (state.failed) return modifier;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:195:7: WITHOUT_SHARING
				{
				DebugLocation(195, 7);
				Match(input,WITHOUT_SHARING,Follow._WITHOUT_SHARING_in_modifier1422); if (state.failed) return modifier;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:196:9: PROTECTED
				{
				DebugLocation(196, 9);
				Match(input,PROTECTED,Follow._PROTECTED_in_modifier1432); if (state.failed) return modifier;
				DebugLocation(196, 19);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Protected;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:197:9: PRIVATE
				{
				DebugLocation(197, 9);
				Match(input,PRIVATE,Follow._PRIVATE_in_modifier1444); if (state.failed) return modifier;
				DebugLocation(197, 17);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Private;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:198:9: STATIC
				{
				DebugLocation(198, 9);
				Match(input,STATIC,Follow._STATIC_in_modifier1456); if (state.failed) return modifier;
				DebugLocation(198, 16);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Static;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:199:9: ABSTRACT
				{
				DebugLocation(199, 9);
				Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier1468); if (state.failed) return modifier;
				DebugLocation(199, 18);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Abstract;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:200:9: NATIVE
				{
				DebugLocation(200, 9);
				Match(input,NATIVE,Follow._NATIVE_in_modifier1480); if (state.failed) return modifier;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:201:9: SYNCHRONIZED
				{
				DebugLocation(201, 9);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier1490); if (state.failed) return modifier;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:202:9: TRANSIENT
				{
				DebugLocation(202, 9);
				Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier1500); if (state.failed) return modifier;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:203:9: VOLATILE
				{
				DebugLocation(203, 9);
				Match(input,VOLATILE,Follow._VOLATILE_in_modifier1510); if (state.failed) return modifier;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:204:9: STRICTFP
				{
				DebugLocation(204, 9);
				Match(input,STRICTFP,Follow._STRICTFP_in_modifier1520); if (state.failed) return modifier;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:205:7: GLOBAL
				{
				DebugLocation(205, 7);
				Match(input,GLOBAL,Follow._GLOBAL_in_modifier1528); if (state.failed) return modifier;
				DebugLocation(205, 14);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Global;
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:206:9: TEST_METHOD
				{
				DebugLocation(206, 9);
				Match(input,TEST_METHOD,Follow._TEST_METHOD_in_modifier1540); if (state.failed) return modifier;
				DebugLocation(206, 21);
				if (state.backtracking == 0)
				{
					modifier = Modifier.TestMethod;
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:207:9: localModifier
				{
				DebugLocation(207, 9);
				PushFollow(Follow._localModifier_in_modifier1552);
				localModifier();
				PopFollow();
				if (state.failed) return modifier;

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 28);
			LeaveRule("modifier", 28);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 28, modifier_StartIndex); }

		}
		DebugLocation(208, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return modifier;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:210:1: localModifierList : ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private void localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 29);
		TraceIn("localModifierList", 29);
		int localModifierList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(210, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:211:5: ( ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:211:9: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
			DebugLocation(211, 9);
			DebugLocation(211, 11);
			Match(input,LOCAL_MODIFIER_LIST,Follow._LOCAL_MODIFIER_LIST_in_localModifierList1573); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(211, 31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:211:31: ( localModifier )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==AT||LA60_1==FINAL))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:211:31: localModifier
						{
						DebugLocation(211, 31);
						PushFollow(Follow._localModifier_in_localModifierList1575);
						localModifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifierList", 29);
			LeaveRule("localModifierList", 29);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 29, localModifierList_StartIndex); }

		}
		DebugLocation(212, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:214:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private void localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 30);
		TraceIn("localModifier", 30);
		int localModifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(214, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:215:5: ( FINAL | annotation )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==FINAL))
			{
				alt61 = 1;
			}
			else if ((LA61_1==AT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:215:9: FINAL
				{
				DebugLocation(215, 9);
				Match(input,FINAL,Follow._FINAL_in_localModifier1596); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:216:9: annotation
				{
				DebugLocation(216, 9);
				PushFollow(Follow._annotation_in_localModifier1606);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifier", 30);
			LeaveRule("localModifier", 30);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 30, localModifier_StartIndex); }

		}
		DebugLocation(217, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:219:1: type returns [ApexType type] : ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) ;
	[GrammarRule("type")]
	private ApexType type()
	{
		EnterRule_type();
		EnterRule("type", 31);
		TraceIn("type", 31);
		ApexType type = default(ApexType);

		int type_StartIndex = input.Index;

		ApexType qualifiedTypeIdent20 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(219, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:220:5: ( ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:6: ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? )
			{
			DebugLocation(221, 6);
			DebugLocation(221, 8);
			Match(input,TYPE,Follow._TYPE_in_type1636); if (state.failed) return type;

			Match(input, TokenTypes.Down, null); if (state.failed) return type;
			DebugLocation(221, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:13: ( primitiveType | qualifiedTypeIdent )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==BOOLEAN||LA62_1==BYTE||LA62_1==CHAR||LA62_1==DOUBLE||LA62_1==FLOAT||LA62_1==INT||LA62_1==LONG||LA62_1==SHORT))
			{
				alt62 = 1;
			}
			else if ((LA62_1==QUALIFIED_TYPE_IDENT))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return type;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:14: primitiveType
				{
				DebugLocation(221, 14);
				PushFollow(Follow._primitiveType_in_type1639);
				primitiveType();
				PopFollow();
				if (state.failed) return type;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:30: qualifiedTypeIdent
				{
				DebugLocation(221, 30);
				PushFollow(Follow._qualifiedTypeIdent_in_type1643);
				qualifiedTypeIdent20=qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return type;
				DebugLocation(221, 49);
				if (state.backtracking == 0)
				{
					type = qualifiedTypeIdent20;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(221, 85);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:85: ( arrayDeclaratorList )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==ARRAY_DECLARATOR_LIST))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:85: arrayDeclaratorList
				{
				DebugLocation(221, 85);
				PushFollow(Follow._arrayDeclaratorList_in_type1648);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return type;

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			Match(input, TokenTypes.Up, null); if (state.failed) return type;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 31);
			LeaveRule("type", 31);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 31, type_StartIndex); }

		}
		DebugLocation(222, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return type;

	}
	// $ANTLR end "type"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:224:1: qualifiedTypeIdent returns [ApexType type] : ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private ApexType qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 32);
		TraceIn("qualifiedTypeIdent", 32);
		ApexType type = default(ApexType);

		int qualifiedTypeIdent_StartIndex = input.Index;

		CommonTree QUALIFIED_TYPE_IDENT21 = default(CommonTree);
		ApexType typeIdent22 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(224, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:225:5: ( ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:225:9: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
			DebugLocation(225, 9);
			DebugLocation(225, 11);
			QUALIFIED_TYPE_IDENT21=(CommonTree)Match(input,QUALIFIED_TYPE_IDENT,Follow._QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent1675); if (state.failed) return type;

			DebugLocation(225, 32);
			if (state.backtracking == 0)
			{
				type = new ApexType(QUALIFIED_TYPE_IDENT21.Text);
			}

			Match(input, TokenTypes.Down, null); if (state.failed) return type;
			DebugLocation(225, 83);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:225:83: ( typeIdent )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==IDENT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:225:84: typeIdent
					{
					DebugLocation(225, 84);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent1680);
					typeIdent22=typeIdent();
					PopFollow();
					if (state.failed) return type;
					DebugLocation(225, 94);
					if (state.backtracking == 0)
					{
						type.AddType(typeIdent22);
					}

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					if (state.backtracking>0) {state.failed=true; return type;}
					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			Match(input, TokenTypes.Up, null); if (state.failed) return type;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 32);
			LeaveRule("qualifiedTypeIdent", 32);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 32, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(226, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return type;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:228:1: typeIdent returns [ApexType type] : ^( IDENT ( genericTypeArgumentList )? ) ;
	[GrammarRule("typeIdent")]
	private ApexType typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 33);
		TraceIn("typeIdent", 33);
		ApexType type = default(ApexType);

		int typeIdent_StartIndex = input.Index;

		CommonTree IDENT23 = default(CommonTree);
		List<ApexType> genericTypeArgumentList24 = default(List<ApexType>);

		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(228, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:229:5: ( ^( IDENT ( genericTypeArgumentList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:230:6: ^( IDENT ( genericTypeArgumentList )? )
			{
			DebugLocation(230, 6);
			DebugLocation(230, 8);
			IDENT23=(CommonTree)Match(input,IDENT,Follow._IDENT_in_typeIdent1716); if (state.failed) return type;

			DebugLocation(230, 14);
			if (state.backtracking == 0)
			{
				type = new ApexType(IDENT23.Text);
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return type;
				DebugLocation(230, 50);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:230:50: ( genericTypeArgumentList )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==GENERIC_TYPE_ARG_LIST))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:230:51: genericTypeArgumentList
					{
					DebugLocation(230, 51);
					PushFollow(Follow._genericTypeArgumentList_in_typeIdent1721);
					genericTypeArgumentList24=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return type;
					DebugLocation(230, 75);
					if (state.backtracking == 0)
					{
						type.AddTypes(genericTypeArgumentList24);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); if (state.failed) return type;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeIdent", 33);
			LeaveRule("typeIdent", 33);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 33, typeIdent_StartIndex); }

		}
		DebugLocation(231, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return type;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:233:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
		int primitiveType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(233, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:234:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:
			{
			DebugLocation(234, 5);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

		}
		DebugLocation(242, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:244:1: genericTypeArgumentList returns [List<ApexType> types] : ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private List<ApexType> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 35);
		TraceIn("genericTypeArgumentList", 35);
		List<ApexType> types = default(List<ApexType>);

		int genericTypeArgumentList_StartIndex = input.Index;

		ApexType genericTypeArgument25 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:5: ( ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:9: ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ )
			{
			DebugLocation(245, 9);
			DebugLocation(245, 11);
			Match(input,GENERIC_TYPE_ARG_LIST,Follow._GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList1840); if (state.failed) return types;

			DebugLocation(245, 33);
			if (state.backtracking == 0)
			{
				types = new List<ApexType>();
			}

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(245, 65);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:65: ( genericTypeArgument )+
			int cnt66=0;
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==QUESTION||LA66_1==TYPE))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:66: genericTypeArgument
					{
					DebugLocation(245, 66);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList1845);
					genericTypeArgument25=genericTypeArgument();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(245, 86);
					if (state.backtracking == 0)
					{
						types.Add(genericTypeArgument25);
					}

					}
					break;

				default:
					if (cnt66 >= 1)
						goto loop66;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee66 = new EarlyExitException( 66, input );
					DebugRecognitionException(eee66);
					throw eee66;
				}
				cnt66++;
			}
			loop66:
				;

			} finally { DebugExitSubRule(66); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgumentList", 35);
			LeaveRule("genericTypeArgumentList", 35);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 35, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(246, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return types;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:248:1: genericTypeArgument returns [ApexType genericTypeArgument] : ( type | ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private ApexType genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 36);
		TraceIn("genericTypeArgument", 36);
		ApexType genericTypeArgument = default(ApexType);

		int genericTypeArgument_StartIndex = input.Index;

		ApexType type26 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(248, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return genericTypeArgument; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:249:5: ( type | ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==TYPE))
			{
				alt68 = 1;
			}
			else if ((LA68_1==QUESTION))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return genericTypeArgument;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:250:6: type
				{
				DebugLocation(250, 6);
				PushFollow(Follow._type_in_genericTypeArgument1884);
				type26=type();
				PopFollow();
				if (state.failed) return genericTypeArgument;
				DebugLocation(250, 11);
				if (state.backtracking == 0)
				{
					genericTypeArgument = type26;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:9: ^( QUESTION ( genericWildcardBoundType )? )
				{
				DebugLocation(251, 9);
				DebugLocation(251, 11);
				Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument1897); if (state.failed) return genericTypeArgument;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return genericTypeArgument;
					DebugLocation(251, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:20: ( genericWildcardBoundType )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, false);
					int LA67_1 = input.LA(1);

					if ((LA67_1==EXTENDS||LA67_1==SUPER))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:20: genericWildcardBoundType
						{
						DebugLocation(251, 20);
						PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument1899);
						genericWildcardBoundType();
						PopFollow();
						if (state.failed) return genericTypeArgument;

						}
						break;

					}
					} finally { DebugExitSubRule(67); }


					Match(input, TokenTypes.Up, null); if (state.failed) return genericTypeArgument;
				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgument", 36);
			LeaveRule("genericTypeArgument", 36);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 36, genericTypeArgument_StartIndex); }

		}
		DebugLocation(252, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return genericTypeArgument;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:254:1: genericWildcardBoundType : ( ^( EXTENDS type ) | ^( SUPER type ) );
	[GrammarRule("genericWildcardBoundType")]
	private void genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 37);
		TraceIn("genericWildcardBoundType", 37);
		int genericWildcardBoundType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(254, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:5: ( ^( EXTENDS type ) | ^( SUPER type ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==EXTENDS))
			{
				alt69 = 1;
			}
			else if ((LA69_1==SUPER))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:9: ^( EXTENDS type )
				{
				DebugLocation(255, 9);
				DebugLocation(255, 11);
				Match(input,EXTENDS,Follow._EXTENDS_in_genericWildcardBoundType2039); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(255, 19);
				PushFollow(Follow._type_in_genericWildcardBoundType2041);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:256:9: ^( SUPER type )
				{
				DebugLocation(256, 9);
				DebugLocation(256, 11);
				Match(input,SUPER,Follow._SUPER_in_genericWildcardBoundType2053); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(256, 17);
				PushFollow(Follow._type_in_genericWildcardBoundType2055);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericWildcardBoundType", 37);
			LeaveRule("genericWildcardBoundType", 37);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 37, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(257, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:259:1: formalParameterList : ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) ;
	[GrammarRule("formalParameterList")]
	private void formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 38);
		TraceIn("formalParameterList", 38);
		int formalParameterList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(259, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:5: ( ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:9: ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? )
			{
			DebugLocation(260, 9);
			DebugLocation(260, 11);
			Match(input,FORMAL_PARAM_LIST,Follow._FORMAL_PARAM_LIST_in_formalParameterList2076); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(260, 29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:29: ( formalParameterStandardDecl )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==FORMAL_PARAM_STD_DECL))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:29: formalParameterStandardDecl
						{
						DebugLocation(260, 29);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList2078);
						formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }

				DebugLocation(260, 58);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:58: ( formalParameterVarargDecl )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_1 = input.LA(1);

				if ((LA71_1==FORMAL_PARAM_VARARG_DECL))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:58: formalParameterVarargDecl
					{
					DebugLocation(260, 58);
					PushFollow(Follow._formalParameterVarargDecl_in_formalParameterList2081);
					formalParameterVarargDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 38);
			LeaveRule("formalParameterList", 38);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameterList_StartIndex); }

		}
		DebugLocation(261, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:263:1: formalParameterStandardDecl : ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private void formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 39);
		TraceIn("formalParameterStandardDecl", 39);
		int formalParameterStandardDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:264:5: ( ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:264:9: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(264, 9);
			DebugLocation(264, 11);
			Match(input,FORMAL_PARAM_STD_DECL,Follow._FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl2108); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(264, 33);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl2110);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(264, 51);
			PushFollow(Follow._type_in_formalParameterStandardDecl2112);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(264, 56);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl2114);
			variableDeclaratorId();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 39);
			LeaveRule("formalParameterStandardDecl", 39);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(265, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterVarargDecl();
	partial void LeaveRule_formalParameterVarargDecl();
	// $ANTLR start "formalParameterVarargDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:267:1: formalParameterVarargDecl : ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarargDecl")]
	private void formalParameterVarargDecl()
	{
		EnterRule_formalParameterVarargDecl();
		EnterRule("formalParameterVarargDecl", 40);
		TraceIn("formalParameterVarargDecl", 40);
		int formalParameterVarargDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterVarargDecl");
		DebugLocation(267, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:268:5: ( ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:268:9: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(268, 9);
			DebugLocation(268, 11);
			Match(input,FORMAL_PARAM_VARARG_DECL,Follow._FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl2139); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(268, 36);
			PushFollow(Follow._localModifierList_in_formalParameterVarargDecl2141);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(268, 54);
			PushFollow(Follow._type_in_formalParameterVarargDecl2143);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(268, 59);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarargDecl2145);
			variableDeclaratorId();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterVarargDecl", 40);
			LeaveRule("formalParameterVarargDecl", 40);
			LeaveRule_formalParameterVarargDecl();
			if (state.backtracking > 0) { Memoize(input, 40, formalParameterVarargDecl_StartIndex); }

		}
		DebugLocation(269, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarargDecl"); }
		return;

	}
	// $ANTLR end "formalParameterVarargDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:271:1: qualifiedIdentifier : ( IDENT | ^( DOT qualifiedIdentifier IDENT ) );
	[GrammarRule("qualifiedIdentifier")]
	private void qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 41);
		TraceIn("qualifiedIdentifier", 41);
		int qualifiedIdentifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(271, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:272:5: ( IDENT | ^( DOT qualifiedIdentifier IDENT ) )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==IDENT))
			{
				alt72 = 1;
			}
			else if ((LA72_1==DOT))
			{
				alt72 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:272:9: IDENT
				{
				DebugLocation(272, 9);
				Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier2170); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:273:9: ^( DOT qualifiedIdentifier IDENT )
				{
				DebugLocation(273, 9);
				DebugLocation(273, 11);
				Match(input,DOT,Follow._DOT_in_qualifiedIdentifier2181); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(273, 15);
				PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentifier2183);
				qualifiedIdentifier();
				PopFollow();
				if (state.failed) return;
				DebugLocation(273, 35);
				Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier2185); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedIdentifier", 41);
			LeaveRule("qualifiedIdentifier", 41);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 41, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(274, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:278:1: annotationList : ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private void annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 42);
		TraceIn("annotationList", 42);
		int annotationList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(278, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:279:5: ( ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:279:9: ^( ANNOTATION_LIST ( annotation )* )
			{
			DebugLocation(279, 9);
			DebugLocation(279, 11);
			Match(input,ANNOTATION_LIST,Follow._ANNOTATION_LIST_in_annotationList2212); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(279, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:279:27: ( annotation )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==AT))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:279:27: annotation
						{
						DebugLocation(279, 27);
						PushFollow(Follow._annotation_in_annotationList2214);
						annotation();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationList", 42);
			LeaveRule("annotationList", 42);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 42, annotationList_StartIndex); }

		}
		DebugLocation(280, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:282:1: annotation : ^( AT qualifiedIdentifier ( annotationInit )? ) ;
	[GrammarRule("annotation")]
	private void annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 43);
		TraceIn("annotation", 43);
		int annotation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(282, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:283:5: ( ^( AT qualifiedIdentifier ( annotationInit )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:283:9: ^( AT qualifiedIdentifier ( annotationInit )? )
			{
			DebugLocation(283, 9);
			DebugLocation(283, 11);
			Match(input,AT,Follow._AT_in_annotation2236); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(283, 14);
			PushFollow(Follow._qualifiedIdentifier_in_annotation2238);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(283, 34);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:283:34: ( annotationInit )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==ANNOTATION_INIT_BLOCK))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:283:34: annotationInit
				{
				DebugLocation(283, 34);
				PushFollow(Follow._annotationInit_in_annotation2240);
				annotationInit();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 43);
			LeaveRule("annotation", 43);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 43, annotation_StartIndex); }

		}
		DebugLocation(284, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:286:1: annotationInit : ^( ANNOTATION_INIT_BLOCK annotationInitializers ) ;
	[GrammarRule("annotationInit")]
	private void annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 44);
		TraceIn("annotationInit", 44);
		int annotationInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:287:5: ( ^( ANNOTATION_INIT_BLOCK annotationInitializers ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:287:9: ^( ANNOTATION_INIT_BLOCK annotationInitializers )
			{
			DebugLocation(287, 9);
			DebugLocation(287, 11);
			Match(input,ANNOTATION_INIT_BLOCK,Follow._ANNOTATION_INIT_BLOCK_in_annotationInit2266); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(287, 33);
			PushFollow(Follow._annotationInitializers_in_annotationInit2268);
			annotationInitializers();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInit", 44);
			LeaveRule("annotationInit", 44);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 44, annotationInit_StartIndex); }

		}
		DebugLocation(288, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:290:1: annotationInitializers : ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private void annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 45);
		TraceIn("annotationInitializers", 45);
		int annotationInitializers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:5: ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==ANNOTATION_INIT_KEY_LIST))
			{
				alt76 = 1;
			}
			else if ((LA76_1==ANNOTATION_INIT_DEFAULT_KEY))
			{
				alt76 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:9: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
				DebugLocation(291, 9);
				DebugLocation(291, 11);
				Match(input,ANNOTATION_INIT_KEY_LIST,Follow._ANNOTATION_INIT_KEY_LIST_in_annotationInitializers2289); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(291, 36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:36: ( annotationInitializer )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_1 = input.LA(1);

					if ((LA75_1==IDENT))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:36: annotationInitializer
						{
						DebugLocation(291, 36);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers2291);
						annotationInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:292:9: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
				DebugLocation(292, 9);
				DebugLocation(292, 11);
				Match(input,ANNOTATION_INIT_DEFAULT_KEY,Follow._ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers2304); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(292, 39);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers2306);
				annotationElementValue();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializers", 45);
			LeaveRule("annotationInitializers", 45);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 45, annotationInitializers_StartIndex); }

		}
		DebugLocation(293, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:295:1: annotationInitializer : ^( IDENT annotationElementValue ) ;
	[GrammarRule("annotationInitializer")]
	private void annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 46);
		TraceIn("annotationInitializer", 46);
		int annotationInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(295, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:296:5: ( ^( IDENT annotationElementValue ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:296:9: ^( IDENT annotationElementValue )
			{
			DebugLocation(296, 9);
			DebugLocation(296, 11);
			Match(input,IDENT,Follow._IDENT_in_annotationInitializer2331); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(296, 17);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer2333);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializer", 46);
			LeaveRule("annotationInitializer", 46);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 46, annotationInitializer_StartIndex); }

		}
		DebugLocation(297, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:299:1: annotationElementValue : ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression );
	[GrammarRule("annotationElementValue")]
	private void annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 47);
		TraceIn("annotationElementValue", 47);
		int annotationElementValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(299, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:300:5: ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression )
			int alt78=3;
			try { DebugEnterDecision(78, false);
			switch (input.LA(1))
			{
			case ANNOTATION_INIT_ARRAY_ELEMENT:
				{
				alt78 = 1;
				}
				break;
			case AT:
				{
				alt78 = 2;
				}
				break;
			case EXPR:
				{
				alt78 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 78, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:300:9: ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* )
				{
				DebugLocation(300, 9);
				DebugLocation(300, 11);
				Match(input,ANNOTATION_INIT_ARRAY_ELEMENT,Follow._ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue2358); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(300, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:300:41: ( annotationElementValue )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_1 = input.LA(1);

						if ((LA77_1==ANNOTATION_INIT_ARRAY_ELEMENT||LA77_1==AT||LA77_1==EXPR))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:300:41: annotationElementValue
							{
							DebugLocation(300, 41);
							PushFollow(Follow._annotationElementValue_in_annotationElementValue2360);
							annotationElementValue();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:301:9: annotation
				{
				DebugLocation(301, 9);
				PushFollow(Follow._annotation_in_annotationElementValue2372);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:302:9: expression
				{
				DebugLocation(302, 9);
				PushFollow(Follow._expression_in_annotationElementValue2382);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationElementValue", 47);
			LeaveRule("annotationElementValue", 47);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 47, annotationElementValue_StartIndex); }

		}
		DebugLocation(303, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationTopLevelScope();
	partial void LeaveRule_annotationTopLevelScope();
	// $ANTLR start "annotationTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:305:1: annotationTopLevelScope : ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationTopLevelScope")]
	private void annotationTopLevelScope()
	{
		EnterRule_annotationTopLevelScope();
		EnterRule("annotationTopLevelScope", 48);
		TraceIn("annotationTopLevelScope", 48);
		int annotationTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTopLevelScope");
		DebugLocation(305, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:306:5: ( ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:306:9: ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* )
			{
			DebugLocation(306, 9);
			DebugLocation(306, 11);
			Match(input,ANNOTATION_TOP_LEVEL_SCOPE,Follow._ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2406); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(306, 38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:306:38: ( annotationScopeDeclarations )*
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_1 = input.LA(1);

					if ((LA79_1==ANNOTATION_METHOD_DECL||LA79_1==AT||LA79_1==CLASS||LA79_1==ENUM||LA79_1==INTERFACE||LA79_1==VAR_DECLARATION))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch ( alt79 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:306:38: annotationScopeDeclarations
						{
						DebugLocation(306, 38);
						PushFollow(Follow._annotationScopeDeclarations_in_annotationTopLevelScope2408);
						annotationScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop79;
					}
				}

				loop79:
					;

				} finally { DebugExitSubRule(79); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTopLevelScope", 48);
			LeaveRule("annotationTopLevelScope", 48);
			LeaveRule_annotationTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 48, annotationTopLevelScope_StartIndex); }

		}
		DebugLocation(307, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTopLevelScope"); }
		return;

	}
	// $ANTLR end "annotationTopLevelScope"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:309:1: annotationScopeDeclarations : ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private void annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 49);
		TraceIn("annotationScopeDeclarations", 49);
		int annotationScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(309, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:310:5: ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt81=3;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case ANNOTATION_METHOD_DECL:
				{
				alt81 = 1;
				}
				break;
			case VAR_DECLARATION:
				{
				alt81 = 2;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:310:9: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
				{
				DebugLocation(310, 9);
				DebugLocation(310, 11);
				Match(input,ANNOTATION_METHOD_DECL,Follow._ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2434); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(310, 34);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2436);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(310, 47);
				PushFollow(Follow._type_in_annotationScopeDeclarations2438);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(310, 52);
				Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations2440); if (state.failed) return;
				DebugLocation(310, 58);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:310:58: ( annotationDefaultValue )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==DEFAULT))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:310:58: annotationDefaultValue
					{
					DebugLocation(310, 58);
					PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations2442);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:311:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(311, 9);
				DebugLocation(311, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_annotationScopeDeclarations2455); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(311, 27);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2457);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(311, 40);
				PushFollow(Follow._type_in_annotationScopeDeclarations2459);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(311, 45);
				PushFollow(Follow._variableDeclaratorList_in_annotationScopeDeclarations2461);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:312:9: typeDeclaration
				{
				DebugLocation(312, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations2472);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 49);
			LeaveRule("annotationScopeDeclarations", 49);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 49, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:315:1: annotationDefaultValue : ^( DEFAULT annotationElementValue ) ;
	[GrammarRule("annotationDefaultValue")]
	private void annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 50);
		TraceIn("annotationDefaultValue", 50);
		int annotationDefaultValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(315, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:316:5: ( ^( DEFAULT annotationElementValue ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:316:9: ^( DEFAULT annotationElementValue )
			{
			DebugLocation(316, 9);
			DebugLocation(316, 11);
			Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue2496); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(316, 19);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue2498);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationDefaultValue", 50);
			LeaveRule("annotationDefaultValue", 50);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 50, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(317, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:321:1: block returns [IApexNode node] : ^( BLOCK_SCOPE ( blockStatement )* ) ;
	[GrammarRule("block")]
	private IApexNode block()
	{
		EnterRule_block();
		EnterRule("block", 51);
		TraceIn("block", 51);
		IApexNode node = default(IApexNode);

		int block_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(321, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:322:5: ( ^( BLOCK_SCOPE ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:322:9: ^( BLOCK_SCOPE ( blockStatement )* )
			{
			DebugLocation(322, 9);
			DebugLocation(322, 11);
			Match(input,BLOCK_SCOPE,Follow._BLOCK_SCOPE_in_block2525); if (state.failed) return node;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(322, 23);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:322:23: ( blockStatement )*
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_1 = input.LA(1);

					if ((LA82_1==AT||LA82_1==BLOCK_SCOPE||LA82_1==BREAK||LA82_1==BROKEN_EXPRESSION||LA82_1==CLASS||LA82_1==CONTINUE||LA82_1==DO||LA82_1==ENUM||LA82_1==EXPR||LA82_1==FOR||LA82_1==FOR_EACH||LA82_1==IF||LA82_1==INTERFACE||LA82_1==LABELED_STATEMENT||LA82_1==RETURN||LA82_1==SEMI||LA82_1==SWITCH||LA82_1==SYNCHRONIZED||LA82_1==THROW||LA82_1==TRY||LA82_1==VAR_DECLARATION||LA82_1==WHILE))
					{
						alt82 = 1;
					}


					} finally { DebugExitDecision(82); }
					switch ( alt82 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:322:23: blockStatement
						{
						DebugLocation(322, 23);
						PushFollow(Follow._blockStatement_in_block2527);
						blockStatement();
						PopFollow();
						if (state.failed) return node;

						}
						break;

					default:
						goto loop82;
					}
				}

				loop82:
					;

				} finally { DebugExitSubRule(82); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 51);
			LeaveRule("block", 51);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 51, block_StartIndex); }

		}
		DebugLocation(323, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return node;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:325:1: blockStatement returns [IApexNode node] : ( localVariableDeclaration | typeDeclaration | statement | brokenExpression );
	[GrammarRule("blockStatement")]
	private IApexNode blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 52);
		TraceIn("blockStatement", 52);
		IApexNode node = default(IApexNode);

		int blockStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(325, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:326:5: ( localVariableDeclaration | typeDeclaration | statement | brokenExpression )
			int alt83=4;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case VAR_DECLARATION:
				{
				alt83 = 1;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt83 = 2;
				}
				break;
			case BLOCK_SCOPE:
			case BREAK:
			case CONTINUE:
			case DO:
			case EXPR:
			case FOR:
			case FOR_EACH:
			case IF:
			case LABELED_STATEMENT:
			case RETURN:
			case SEMI:
			case SWITCH:
			case SYNCHRONIZED:
			case THROW:
			case TRY:
			case WHILE:
				{
				alt83 = 3;
				}
				break;
			case BROKEN_EXPRESSION:
				{
				alt83 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:326:9: localVariableDeclaration
				{
				DebugLocation(326, 9);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement2556);
				localVariableDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:327:9: typeDeclaration
				{
				DebugLocation(327, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement2566);
				typeDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:328:9: statement
				{
				DebugLocation(328, 9);
				PushFollow(Follow._statement_in_blockStatement2576);
				statement();
				PopFollow();
				if (state.failed) return node;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:329:8: brokenExpression
				{
				DebugLocation(329, 8);
				PushFollow(Follow._brokenExpression_in_blockStatement2585);
				brokenExpression();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 52);
			LeaveRule("blockStatement", 52);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 52, blockStatement_StartIndex); }

		}
		DebugLocation(330, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return node;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_brokenExpression();
	partial void LeaveRule_brokenExpression();
	// $ANTLR start "brokenExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:331:1: brokenExpression : ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? ) ;
	[GrammarRule("brokenExpression")]
	private void brokenExpression()
	{
		EnterRule_brokenExpression();
		EnterRule("brokenExpression", 53);
		TraceIn("brokenExpression", 53);
		int brokenExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "brokenExpression");
		DebugLocation(331, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:332:4: ( ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:333:4: ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? )
			{
			DebugLocation(333, 4);
			DebugLocation(333, 6);
			Match(input,BROKEN_EXPRESSION,Follow._BROKEN_EXPRESSION_in_brokenExpression2602); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(333, 24);
			PushFollow(Follow._expression_in_brokenExpression2604);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(333, 35);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:333:35: ( DOT )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==DOT))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:333:35: DOT
				{
				DebugLocation(333, 35);
				Match(input,DOT,Follow._DOT_in_brokenExpression2606); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(333, 40);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:333:40: ( SEMI )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==SEMI))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:333:40: SEMI
				{
				DebugLocation(333, 40);
				Match(input,SEMI,Follow._SEMI_in_brokenExpression2609); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(85); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("brokenExpression", 53);
			LeaveRule("brokenExpression", 53);
			LeaveRule_brokenExpression();
			if (state.backtracking > 0) { Memoize(input, 53, brokenExpression_StartIndex); }

		}
		DebugLocation(334, 0);
		} finally { DebugExitRule(GrammarFileName, "brokenExpression"); }
		return;

	}
	// $ANTLR end "brokenExpression"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:335:1: localVariableDeclaration : ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private void localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 54);
		TraceIn("localVariableDeclaration", 54);
		int localVariableDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:5: ( ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:9: ^( VAR_DECLARATION localModifierList type variableDeclaratorList )
			{
			DebugLocation(336, 9);
			DebugLocation(336, 11);
			Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_localVariableDeclaration2626); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(336, 27);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration2628);
			localModifierList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(336, 45);
			PushFollow(Follow._type_in_localVariableDeclaration2630);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(336, 50);
			PushFollow(Follow._variableDeclaratorList_in_localVariableDeclaration2632);
			variableDeclaratorList();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclaration", 54);
			LeaveRule("localVariableDeclaration", 54);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 54, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(337, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:340:1: statement returns [IApexNode node] : ( block | ^( IF parenthesizedExpression statement ( statement )? ) | ^( FOR forInit forCondition forUpdater statement ) | ^( FOR_EACH localModifierList type IDENT expression statement ) | ^( WHILE parenthesizedExpression statement ) | ^( DO statement parenthesizedExpression ) | ^( TRY block ( catches )? ( block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT statement ) | expression | SEMI );
	[GrammarRule("statement")]
	private IApexNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 55);
		TraceIn("statement", 55);
		IApexNode node = default(IApexNode);

		int statement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:341:5: ( block | ^( IF parenthesizedExpression statement ( statement )? ) | ^( FOR forInit forCondition forUpdater statement ) | ^( FOR_EACH localModifierList type IDENT expression statement ) | ^( WHILE parenthesizedExpression statement ) | ^( DO statement parenthesizedExpression ) | ^( TRY block ( catches )? ( block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT statement ) | expression | SEMI )
			int alt92=16;
			try { DebugEnterDecision(92, false);
			switch (input.LA(1))
			{
			case BLOCK_SCOPE:
				{
				alt92 = 1;
				}
				break;
			case IF:
				{
				alt92 = 2;
				}
				break;
			case FOR:
				{
				alt92 = 3;
				}
				break;
			case FOR_EACH:
				{
				alt92 = 4;
				}
				break;
			case WHILE:
				{
				alt92 = 5;
				}
				break;
			case DO:
				{
				alt92 = 6;
				}
				break;
			case TRY:
				{
				alt92 = 7;
				}
				break;
			case SWITCH:
				{
				alt92 = 8;
				}
				break;
			case SYNCHRONIZED:
				{
				alt92 = 9;
				}
				break;
			case RETURN:
				{
				alt92 = 10;
				}
				break;
			case THROW:
				{
				alt92 = 11;
				}
				break;
			case BREAK:
				{
				alt92 = 12;
				}
				break;
			case CONTINUE:
				{
				alt92 = 13;
				}
				break;
			case LABELED_STATEMENT:
				{
				alt92 = 14;
				}
				break;
			case EXPR:
				{
				alt92 = 15;
				}
				break;
			case SEMI:
				{
				alt92 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:341:9: block
				{
				DebugLocation(341, 9);
				PushFollow(Follow._block_in_statement2669);
				block();
				PopFollow();
				if (state.failed) return node;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:9: ^( IF parenthesizedExpression statement ( statement )? )
				{
				DebugLocation(342, 9);
				DebugLocation(342, 11);
				Match(input,IF,Follow._IF_in_statement2680); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(342, 14);
				PushFollow(Follow._parenthesizedExpression_in_statement2682);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(342, 38);
				PushFollow(Follow._statement_in_statement2684);
				statement();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(342, 48);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:48: ( statement )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==BLOCK_SCOPE||LA86_1==BREAK||LA86_1==CONTINUE||LA86_1==DO||LA86_1==EXPR||LA86_1==FOR||LA86_1==FOR_EACH||LA86_1==IF||LA86_1==LABELED_STATEMENT||LA86_1==RETURN||LA86_1==SEMI||LA86_1==SWITCH||LA86_1==SYNCHRONIZED||LA86_1==THROW||LA86_1==TRY||LA86_1==WHILE))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:48: statement
					{
					DebugLocation(342, 48);
					PushFollow(Follow._statement_in_statement2686);
					statement();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(86); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:343:9: ^( FOR forInit forCondition forUpdater statement )
				{
				DebugLocation(343, 9);
				DebugLocation(343, 11);
				Match(input,FOR,Follow._FOR_in_statement2699); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(343, 15);
				PushFollow(Follow._forInit_in_statement2701);
				forInit();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(343, 23);
				PushFollow(Follow._forCondition_in_statement2703);
				forCondition();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(343, 36);
				PushFollow(Follow._forUpdater_in_statement2705);
				forUpdater();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(343, 47);
				PushFollow(Follow._statement_in_statement2707);
				statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:344:9: ^( FOR_EACH localModifierList type IDENT expression statement )
				{
				DebugLocation(344, 9);
				DebugLocation(344, 11);
				Match(input,FOR_EACH,Follow._FOR_EACH_in_statement2719); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(344, 20);
				PushFollow(Follow._localModifierList_in_statement2721);
				localModifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(344, 38);
				PushFollow(Follow._type_in_statement2723);
				type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(344, 43);
				Match(input,IDENT,Follow._IDENT_in_statement2725); if (state.failed) return node;
				DebugLocation(344, 49);
				PushFollow(Follow._expression_in_statement2727);
				expression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(344, 60);
				PushFollow(Follow._statement_in_statement2729);
				statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:345:9: ^( WHILE parenthesizedExpression statement )
				{
				DebugLocation(345, 9);
				DebugLocation(345, 11);
				Match(input,WHILE,Follow._WHILE_in_statement2742); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(345, 17);
				PushFollow(Follow._parenthesizedExpression_in_statement2744);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(345, 41);
				PushFollow(Follow._statement_in_statement2746);
				statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:346:9: ^( DO statement parenthesizedExpression )
				{
				DebugLocation(346, 9);
				DebugLocation(346, 11);
				Match(input,DO,Follow._DO_in_statement2758); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(346, 14);
				PushFollow(Follow._statement_in_statement2760);
				statement();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(346, 24);
				PushFollow(Follow._parenthesizedExpression_in_statement2762);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:9: ^( TRY block ( catches )? ( block )? )
				{
				DebugLocation(347, 9);
				DebugLocation(347, 11);
				Match(input,TRY,Follow._TRY_in_statement2774); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(347, 15);
				PushFollow(Follow._block_in_statement2776);
				block();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(347, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:21: ( catches )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==CATCH_CLAUSE_LIST))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:21: catches
					{
					DebugLocation(347, 21);
					PushFollow(Follow._catches_in_statement2778);
					catches();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(347, 30);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:30: ( block )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==BLOCK_SCOPE))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:30: block
					{
					DebugLocation(347, 30);
					PushFollow(Follow._block_in_statement2781);
					block();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:348:9: ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
				DebugLocation(348, 9);
				DebugLocation(348, 11);
				Match(input,SWITCH,Follow._SWITCH_in_statement2796); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(348, 18);
				PushFollow(Follow._parenthesizedExpression_in_statement2798);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(348, 42);
				PushFollow(Follow._switchBlockLabels_in_statement2800);
				switchBlockLabels();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:349:9: ^( SYNCHRONIZED parenthesizedExpression block )
				{
				DebugLocation(349, 9);
				DebugLocation(349, 11);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement2812); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(349, 24);
				PushFollow(Follow._parenthesizedExpression_in_statement2814);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(349, 48);
				PushFollow(Follow._block_in_statement2816);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:350:9: ^( RETURN ( expression )? )
				{
				DebugLocation(350, 9);
				DebugLocation(350, 11);
				Match(input,RETURN,Follow._RETURN_in_statement2828); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(350, 18);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:350:18: ( expression )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, false);
					int LA89_1 = input.LA(1);

					if ((LA89_1==EXPR))
					{
						alt89 = 1;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:350:18: expression
						{
						DebugLocation(350, 18);
						PushFollow(Follow._expression_in_statement2830);
						expression();
						PopFollow();
						if (state.failed) return node;

						}
						break;

					}
					} finally { DebugExitSubRule(89); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:351:9: ^( THROW expression )
				{
				DebugLocation(351, 9);
				DebugLocation(351, 11);
				Match(input,THROW,Follow._THROW_in_statement2843); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(351, 17);
				PushFollow(Follow._expression_in_statement2845);
				expression();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:352:9: ^( BREAK ( IDENT )? )
				{
				DebugLocation(352, 9);
				DebugLocation(352, 11);
				Match(input,BREAK,Follow._BREAK_in_statement2857); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(352, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:352:17: ( IDENT )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, false);
					int LA90_1 = input.LA(1);

					if ((LA90_1==IDENT))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:352:17: IDENT
						{
						DebugLocation(352, 17);
						Match(input,IDENT,Follow._IDENT_in_statement2859); if (state.failed) return node;

						}
						break;

					}
					} finally { DebugExitSubRule(90); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:353:9: ^( CONTINUE ( IDENT )? )
				{
				DebugLocation(353, 9);
				DebugLocation(353, 11);
				Match(input,CONTINUE,Follow._CONTINUE_in_statement2872); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(353, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:353:20: ( IDENT )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_1 = input.LA(1);

					if ((LA91_1==IDENT))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:353:20: IDENT
						{
						DebugLocation(353, 20);
						Match(input,IDENT,Follow._IDENT_in_statement2874); if (state.failed) return node;

						}
						break;

					}
					} finally { DebugExitSubRule(91); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:354:9: ^( LABELED_STATEMENT IDENT statement )
				{
				DebugLocation(354, 9);
				DebugLocation(354, 11);
				Match(input,LABELED_STATEMENT,Follow._LABELED_STATEMENT_in_statement2887); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(354, 29);
				Match(input,IDENT,Follow._IDENT_in_statement2889); if (state.failed) return node;
				DebugLocation(354, 35);
				PushFollow(Follow._statement_in_statement2891);
				statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:355:9: expression
				{
				DebugLocation(355, 9);
				PushFollow(Follow._expression_in_statement2902);
				expression();
				PopFollow();
				if (state.failed) return node;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:356:9: SEMI
				{
				DebugLocation(356, 9);
				Match(input,SEMI,Follow._SEMI_in_statement2912); if (state.failed) return node;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 55);
			LeaveRule("statement", 55);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 55, statement_StartIndex); }

		}
		DebugLocation(357, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return node;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:359:1: catches : ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private void catches()
	{
		EnterRule_catches();
		EnterRule("catches", 56);
		TraceIn("catches", 56);
		int catches_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(359, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:5: ( ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:9: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
			DebugLocation(360, 9);
			DebugLocation(360, 11);
			Match(input,CATCH_CLAUSE_LIST,Follow._CATCH_CLAUSE_LIST_in_catches2941); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(360, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:29: ( catchClause )+
			int cnt93=0;
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==CATCH))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:29: catchClause
					{
					DebugLocation(360, 29);
					PushFollow(Follow._catchClause_in_catches2943);
					catchClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt93 >= 1)
						goto loop93;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee93 = new EarlyExitException( 93, input );
					DebugRecognitionException(eee93);
					throw eee93;
				}
				cnt93++;
			}
			loop93:
				;

			} finally { DebugExitSubRule(93); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catches", 56);
			LeaveRule("catches", 56);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 56, catches_StartIndex); }

		}
		DebugLocation(361, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:363:1: catchClause : ^( CATCH formalParameterStandardDecl block ) ;
	[GrammarRule("catchClause")]
	private void catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 57);
		TraceIn("catchClause", 57);
		int catchClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(363, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:364:5: ( ^( CATCH formalParameterStandardDecl block ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:364:9: ^( CATCH formalParameterStandardDecl block )
			{
			DebugLocation(364, 9);
			DebugLocation(364, 11);
			Match(input,CATCH,Follow._CATCH_in_catchClause2969); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(364, 17);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause2971);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(364, 45);
			PushFollow(Follow._block_in_catchClause2973);
			block();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 57);
			LeaveRule("catchClause", 57);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 57, catchClause_StartIndex); }

		}
		DebugLocation(365, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:367:1: switchBlockLabels : ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* ) ;
	[GrammarRule("switchBlockLabels")]
	private void switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 58);
		TraceIn("switchBlockLabels", 58);
		int switchBlockLabels_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(367, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:5: ( ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:9: ^( SWITCH_BLOCK_LABEL_LIST ( switchCaseLabel )* ( switchDefaultLabel )? ( switchCaseLabel )* )
			{
			DebugLocation(368, 9);
			DebugLocation(368, 11);
			Match(input,SWITCH_BLOCK_LABEL_LIST,Follow._SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels2994); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(368, 35);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:35: ( switchCaseLabel )*
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_1 = input.LA(1);

					if ((LA94_1==CASE))
					{
						int LA94_2 = input.LA(2);

						if ((EvaluatePredicate(synpred145_JavaTreeParser_fragment)))
						{
							alt94 = 1;
						}


					}


					} finally { DebugExitDecision(94); }
					switch ( alt94 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:35: switchCaseLabel
						{
						DebugLocation(368, 35);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels2996);
						switchCaseLabel();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop94;
					}
				}

				loop94:
					;

				} finally { DebugExitSubRule(94); }

				DebugLocation(368, 52);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:52: ( switchDefaultLabel )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==DEFAULT))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:52: switchDefaultLabel
					{
					DebugLocation(368, 52);
					PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels2999);
					switchDefaultLabel();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(368, 72);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:72: ( switchCaseLabel )*
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, false);
					int LA96_1 = input.LA(1);

					if ((LA96_1==CASE))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch ( alt96 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:72: switchCaseLabel
						{
						DebugLocation(368, 72);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels3002);
						switchCaseLabel();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop96;
					}
				}

				loop96:
					;

				} finally { DebugExitSubRule(96); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockLabels", 58);
			LeaveRule("switchBlockLabels", 58);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 58, switchBlockLabels_StartIndex); }

		}
		DebugLocation(369, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:371:1: switchCaseLabel : ^( CASE expression ( blockStatement )* ) ;
	[GrammarRule("switchCaseLabel")]
	private void switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 59);
		TraceIn("switchCaseLabel", 59);
		int switchCaseLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(371, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:372:5: ( ^( CASE expression ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:372:9: ^( CASE expression ( blockStatement )* )
			{
			DebugLocation(372, 9);
			DebugLocation(372, 11);
			Match(input,CASE,Follow._CASE_in_switchCaseLabel3032); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(372, 16);
			PushFollow(Follow._expression_in_switchCaseLabel3034);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(372, 27);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:372:27: ( blockStatement )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==AT||LA97_1==BLOCK_SCOPE||LA97_1==BREAK||LA97_1==BROKEN_EXPRESSION||LA97_1==CLASS||LA97_1==CONTINUE||LA97_1==DO||LA97_1==ENUM||LA97_1==EXPR||LA97_1==FOR||LA97_1==FOR_EACH||LA97_1==IF||LA97_1==INTERFACE||LA97_1==LABELED_STATEMENT||LA97_1==RETURN||LA97_1==SEMI||LA97_1==SWITCH||LA97_1==SYNCHRONIZED||LA97_1==THROW||LA97_1==TRY||LA97_1==VAR_DECLARATION||LA97_1==WHILE))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:372:27: blockStatement
					{
					DebugLocation(372, 27);
					PushFollow(Follow._blockStatement_in_switchCaseLabel3036);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchCaseLabel", 59);
			LeaveRule("switchCaseLabel", 59);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 59, switchCaseLabel_StartIndex); }

		}
		DebugLocation(373, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:375:1: switchDefaultLabel : ^( DEFAULT ( blockStatement )* ) ;
	[GrammarRule("switchDefaultLabel")]
	private void switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 60);
		TraceIn("switchDefaultLabel", 60);
		int switchDefaultLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(375, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:5: ( ^( DEFAULT ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:9: ^( DEFAULT ( blockStatement )* )
			{
			DebugLocation(376, 9);
			DebugLocation(376, 11);
			Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel3062); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(376, 19);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:19: ( blockStatement )*
				try { DebugEnterSubRule(98);
				while (true)
				{
					int alt98=2;
					try { DebugEnterDecision(98, false);
					int LA98_1 = input.LA(1);

					if ((LA98_1==AT||LA98_1==BLOCK_SCOPE||LA98_1==BREAK||LA98_1==BROKEN_EXPRESSION||LA98_1==CLASS||LA98_1==CONTINUE||LA98_1==DO||LA98_1==ENUM||LA98_1==EXPR||LA98_1==FOR||LA98_1==FOR_EACH||LA98_1==IF||LA98_1==INTERFACE||LA98_1==LABELED_STATEMENT||LA98_1==RETURN||LA98_1==SEMI||LA98_1==SWITCH||LA98_1==SYNCHRONIZED||LA98_1==THROW||LA98_1==TRY||LA98_1==VAR_DECLARATION||LA98_1==WHILE))
					{
						alt98 = 1;
					}


					} finally { DebugExitDecision(98); }
					switch ( alt98 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:19: blockStatement
						{
						DebugLocation(376, 19);
						PushFollow(Follow._blockStatement_in_switchDefaultLabel3064);
						blockStatement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop98;
					}
				}

				loop98:
					;

				} finally { DebugExitSubRule(98); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchDefaultLabel", 60);
			LeaveRule("switchDefaultLabel", 60);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 60, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(377, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:379:1: forInit : ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) ;
	[GrammarRule("forInit")]
	private void forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 61);
		TraceIn("forInit", 61);
		int forInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(379, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:5: ( ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:9: ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? )
			{
			DebugLocation(380, 9);
			DebugLocation(380, 11);
			Match(input,FOR_INIT,Follow._FOR_INIT_in_forInit3090); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(380, 20);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:20: ( localVariableDeclaration | ( expression )* )?
				int alt100=3;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case VAR_DECLARATION:
					{
					alt100 = 1;
					}
					break;
				case EXPR:
					{
					alt100 = 2;
					}
					break;
				case UP:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred152_JavaTreeParser_fragment)))
					{
						alt100 = 2;
					}
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:21: localVariableDeclaration
					{
					DebugLocation(380, 21);
					PushFollow(Follow._localVariableDeclaration_in_forInit3093);
					localVariableDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: ( expression )*
					{
					DebugLocation(380, 48);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: ( expression )*
					try { DebugEnterSubRule(99);
					while (true)
					{
						int alt99=2;
						try { DebugEnterDecision(99, false);
						int LA99_1 = input.LA(1);

						if ((LA99_1==EXPR))
						{
							alt99 = 1;
						}


						} finally { DebugExitDecision(99); }
						switch ( alt99 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: expression
							{
							DebugLocation(380, 48);
							PushFollow(Follow._expression_in_forInit3097);
							expression();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop99;
						}
					}

					loop99:
						;

					} finally { DebugExitSubRule(99); }


					}
					break;

				}
				} finally { DebugExitSubRule(100); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 61);
			LeaveRule("forInit", 61);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 61, forInit_StartIndex); }

		}
		DebugLocation(381, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:383:1: forCondition : ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private void forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 62);
		TraceIn("forCondition", 62);
		int forCondition_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(383, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:384:5: ( ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:384:9: ^( FOR_CONDITION ( expression )? )
			{
			DebugLocation(384, 9);
			DebugLocation(384, 11);
			Match(input,FOR_CONDITION,Follow._FOR_CONDITION_in_forCondition3125); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(384, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:384:25: ( expression )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==EXPR))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:384:25: expression
					{
					DebugLocation(384, 25);
					PushFollow(Follow._expression_in_forCondition3127);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forCondition", 62);
			LeaveRule("forCondition", 62);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 62, forCondition_StartIndex); }

		}
		DebugLocation(385, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:387:1: forUpdater : ^( FOR_UPDATE ( expression )* ) ;
	[GrammarRule("forUpdater")]
	private void forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 63);
		TraceIn("forUpdater", 63);
		int forUpdater_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(387, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:388:5: ( ^( FOR_UPDATE ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:388:9: ^( FOR_UPDATE ( expression )* )
			{
			DebugLocation(388, 9);
			DebugLocation(388, 11);
			Match(input,FOR_UPDATE,Follow._FOR_UPDATE_in_forUpdater3153); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(388, 22);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:388:22: ( expression )*
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=2;
					try { DebugEnterDecision(102, false);
					int LA102_1 = input.LA(1);

					if ((LA102_1==EXPR))
					{
						alt102 = 1;
					}


					} finally { DebugExitDecision(102); }
					switch ( alt102 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:388:22: expression
						{
						DebugLocation(388, 22);
						PushFollow(Follow._expression_in_forUpdater3155);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop102;
					}
				}

				loop102:
					;

				} finally { DebugExitSubRule(102); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forUpdater", 63);
			LeaveRule("forUpdater", 63);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 63, forUpdater_StartIndex); }

		}
		DebugLocation(389, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:393:1: parenthesizedExpression : ^( PARENTESIZED_EXPR expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private void parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 64);
		TraceIn("parenthesizedExpression", 64);
		int parenthesizedExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(393, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:394:5: ( ^( PARENTESIZED_EXPR expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:394:9: ^( PARENTESIZED_EXPR expression )
			{
			DebugLocation(394, 9);
			DebugLocation(394, 11);
			Match(input,PARENTESIZED_EXPR,Follow._PARENTESIZED_EXPR_in_parenthesizedExpression3183); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(394, 29);
			PushFollow(Follow._expression_in_parenthesizedExpression3185);
			expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parenthesizedExpression", 64);
			LeaveRule("parenthesizedExpression", 64);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 64, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(395, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:397:1: expression returns [IApexNode node] : ^( EXPR expr ) ;
	[GrammarRule("expression")]
	private IApexNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 65);
		TraceIn("expression", 65);
		IApexNode node = default(IApexNode);

		int expression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(397, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:398:5: ( ^( EXPR expr ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:398:9: ^( EXPR expr )
			{
			DebugLocation(398, 9);
			DebugLocation(398, 11);
			Match(input,EXPR,Follow._EXPR_in_expression3214); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(398, 16);
			PushFollow(Follow._expr_in_expression3216);
			expr();
			PopFollow();
			if (state.failed) return node;

			Match(input, TokenTypes.Up, null); if (state.failed) return node;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 65);
			LeaveRule("expression", 65);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 65, expression_StartIndex); }

		}
		DebugLocation(399, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return node;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:401:1: expr returns [IApexNode node] : ( ^( ASSIGN a= expr b= expr ) | ^( PLUS_ASSIGN expr expr ) | ^( MINUS_ASSIGN expr expr ) | ^( STAR_ASSIGN expr expr ) | ^( DIV_ASSIGN expr expr ) | ^( AND_ASSIGN expr expr ) | ^( OR_ASSIGN expr expr ) | ^( XOR_ASSIGN expr expr ) | ^( MOD_ASSIGN expr expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_LEFT_ASSIGN expr expr ) | ^( QUESTION expr expr expr ) | ^( LOGICAL_OR expr expr ) | ^( LOGICAL_AND expr expr ) | ^( OR expr expr ) | ^( XOR expr expr ) | ^( AND expr expr ) | ^( EQUAL expr expr ) | ^( NOT_EQUAL expr expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL expr expr ) | ^( GREATER_OR_EQUAL expr expr ) | ^( BIT_SHIFT_RIGHT expr expr ) | ^( SHIFT_RIGHT expr expr ) | ^( GREATER_THAN expr expr ) | ^( SHIFT_LEFT expr expr ) | ^( LESS_THAN expr expr ) | ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( MOD expr expr ) | ^( UNARY_PLUS expr ) | ^( UNARY_MINUS expr ) | ^( PRE_INC expr ) | ^( PRE_DEC expr ) | ^( POST_INC expr ) | ^( POST_DEC expr ) | ^( NOT expr ) | ^( LOGICAL_NOT expr ) | ^( CAST_EXPR type expr ) | primaryExpression );
	[GrammarRule("expr")]
	private IApexNode expr()
	{
		EnterRule_expr();
		EnterRule("expr", 66);
		TraceIn("expr", 66);
		IApexNode node = default(IApexNode);

		int expr_StartIndex = input.Index;

		IApexNode a = default(IApexNode);
		IApexNode b = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(401, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:402:5: ( ^( ASSIGN a= expr b= expr ) | ^( PLUS_ASSIGN expr expr ) | ^( MINUS_ASSIGN expr expr ) | ^( STAR_ASSIGN expr expr ) | ^( DIV_ASSIGN expr expr ) | ^( AND_ASSIGN expr expr ) | ^( OR_ASSIGN expr expr ) | ^( XOR_ASSIGN expr expr ) | ^( MOD_ASSIGN expr expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_RIGHT_ASSIGN expr expr ) | ^( SHIFT_LEFT_ASSIGN expr expr ) | ^( QUESTION expr expr expr ) | ^( LOGICAL_OR expr expr ) | ^( LOGICAL_AND expr expr ) | ^( OR expr expr ) | ^( XOR expr expr ) | ^( AND expr expr ) | ^( EQUAL expr expr ) | ^( NOT_EQUAL expr expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL expr expr ) | ^( GREATER_OR_EQUAL expr expr ) | ^( BIT_SHIFT_RIGHT expr expr ) | ^( SHIFT_RIGHT expr expr ) | ^( GREATER_THAN expr expr ) | ^( SHIFT_LEFT expr expr ) | ^( LESS_THAN expr expr ) | ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( MOD expr expr ) | ^( UNARY_PLUS expr ) | ^( UNARY_MINUS expr ) | ^( PRE_INC expr ) | ^( PRE_DEC expr ) | ^( POST_INC expr ) | ^( POST_DEC expr ) | ^( NOT expr ) | ^( LOGICAL_NOT expr ) | ^( CAST_EXPR type expr ) | primaryExpression )
			int alt103=43;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case ASSIGN:
				{
				alt103 = 1;
				}
				break;
			case PLUS_ASSIGN:
				{
				alt103 = 2;
				}
				break;
			case MINUS_ASSIGN:
				{
				alt103 = 3;
				}
				break;
			case STAR_ASSIGN:
				{
				alt103 = 4;
				}
				break;
			case DIV_ASSIGN:
				{
				alt103 = 5;
				}
				break;
			case AND_ASSIGN:
				{
				alt103 = 6;
				}
				break;
			case OR_ASSIGN:
				{
				alt103 = 7;
				}
				break;
			case XOR_ASSIGN:
				{
				alt103 = 8;
				}
				break;
			case MOD_ASSIGN:
				{
				alt103 = 9;
				}
				break;
			case BIT_SHIFT_RIGHT_ASSIGN:
				{
				alt103 = 10;
				}
				break;
			case SHIFT_RIGHT_ASSIGN:
				{
				alt103 = 11;
				}
				break;
			case SHIFT_LEFT_ASSIGN:
				{
				alt103 = 12;
				}
				break;
			case QUESTION:
				{
				alt103 = 13;
				}
				break;
			case LOGICAL_OR:
				{
				alt103 = 14;
				}
				break;
			case LOGICAL_AND:
				{
				alt103 = 15;
				}
				break;
			case OR:
				{
				alt103 = 16;
				}
				break;
			case XOR:
				{
				alt103 = 17;
				}
				break;
			case AND:
				{
				alt103 = 18;
				}
				break;
			case EQUAL:
				{
				alt103 = 19;
				}
				break;
			case NOT_EQUAL:
				{
				alt103 = 20;
				}
				break;
			case INSTANCEOF:
				{
				alt103 = 21;
				}
				break;
			case LESS_OR_EQUAL:
				{
				alt103 = 22;
				}
				break;
			case GREATER_OR_EQUAL:
				{
				alt103 = 23;
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				alt103 = 24;
				}
				break;
			case SHIFT_RIGHT:
				{
				alt103 = 25;
				}
				break;
			case GREATER_THAN:
				{
				alt103 = 26;
				}
				break;
			case SHIFT_LEFT:
				{
				alt103 = 27;
				}
				break;
			case LESS_THAN:
				{
				alt103 = 28;
				}
				break;
			case PLUS:
				{
				alt103 = 29;
				}
				break;
			case MINUS:
				{
				alt103 = 30;
				}
				break;
			case STAR:
				{
				alt103 = 31;
				}
				break;
			case DIV:
				{
				alt103 = 32;
				}
				break;
			case MOD:
				{
				alt103 = 33;
				}
				break;
			case UNARY_PLUS:
				{
				alt103 = 34;
				}
				break;
			case UNARY_MINUS:
				{
				alt103 = 35;
				}
				break;
			case PRE_INC:
				{
				alt103 = 36;
				}
				break;
			case PRE_DEC:
				{
				alt103 = 37;
				}
				break;
			case POST_INC:
				{
				alt103 = 38;
				}
				break;
			case POST_DEC:
				{
				alt103 = 39;
				}
				break;
			case NOT:
				{
				alt103 = 40;
				}
				break;
			case LOGICAL_NOT:
				{
				alt103 = 41;
				}
				break;
			case CAST_EXPR:
				{
				alt103 = 42;
				}
				break;
			case ARRAY_DECLARATOR:
			case ARRAY_ELEMENT_ACCESS:
			case CHARACTER_LITERAL:
			case CLASS_CONSTRUCTOR_CALL:
			case DECIMAL_LITERAL:
			case DOT:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case METHOD_CALL:
			case NULL:
			case OCTAL_LITERAL:
			case PARENTESIZED_EXPR:
			case STATIC_ARRAY_CREATOR:
			case STRING_LITERAL:
			case SUPER:
			case SUPER_CONSTRUCTOR_CALL:
			case THIS:
			case THIS_CONSTRUCTOR_CALL:
			case TRUE:
				{
				alt103 = 43;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:402:9: ^( ASSIGN a= expr b= expr )
				{
				DebugLocation(402, 9);
				DebugLocation(402, 11);
				Match(input,ASSIGN,Follow._ASSIGN_in_expr3241); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(402, 20);
				PushFollow(Follow._expr_in_expr3246);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(402, 27);
				PushFollow(Follow._expr_in_expr3250);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:403:9: ^( PLUS_ASSIGN expr expr )
				{
				DebugLocation(403, 9);
				DebugLocation(403, 11);
				Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_expr3262); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(403, 23);
				PushFollow(Follow._expr_in_expr3264);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(403, 28);
				PushFollow(Follow._expr_in_expr3266);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:404:9: ^( MINUS_ASSIGN expr expr )
				{
				DebugLocation(404, 9);
				DebugLocation(404, 11);
				Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_expr3278); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(404, 24);
				PushFollow(Follow._expr_in_expr3280);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(404, 29);
				PushFollow(Follow._expr_in_expr3282);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:405:9: ^( STAR_ASSIGN expr expr )
				{
				DebugLocation(405, 9);
				DebugLocation(405, 11);
				Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_expr3294); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(405, 23);
				PushFollow(Follow._expr_in_expr3296);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(405, 28);
				PushFollow(Follow._expr_in_expr3298);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:406:9: ^( DIV_ASSIGN expr expr )
				{
				DebugLocation(406, 9);
				DebugLocation(406, 11);
				Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_expr3310); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(406, 22);
				PushFollow(Follow._expr_in_expr3312);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(406, 27);
				PushFollow(Follow._expr_in_expr3314);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:407:9: ^( AND_ASSIGN expr expr )
				{
				DebugLocation(407, 9);
				DebugLocation(407, 11);
				Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_expr3326); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(407, 22);
				PushFollow(Follow._expr_in_expr3328);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(407, 27);
				PushFollow(Follow._expr_in_expr3330);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:408:9: ^( OR_ASSIGN expr expr )
				{
				DebugLocation(408, 9);
				DebugLocation(408, 11);
				Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_expr3342); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(408, 21);
				PushFollow(Follow._expr_in_expr3344);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(408, 26);
				PushFollow(Follow._expr_in_expr3346);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:409:9: ^( XOR_ASSIGN expr expr )
				{
				DebugLocation(409, 9);
				DebugLocation(409, 11);
				Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_expr3358); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(409, 22);
				PushFollow(Follow._expr_in_expr3360);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(409, 27);
				PushFollow(Follow._expr_in_expr3362);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:410:9: ^( MOD_ASSIGN expr expr )
				{
				DebugLocation(410, 9);
				DebugLocation(410, 11);
				Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_expr3374); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(410, 22);
				PushFollow(Follow._expr_in_expr3376);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(410, 27);
				PushFollow(Follow._expr_in_expr3378);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:411:9: ^( BIT_SHIFT_RIGHT_ASSIGN expr expr )
				{
				DebugLocation(411, 9);
				DebugLocation(411, 11);
				Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_expr3390); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(411, 34);
				PushFollow(Follow._expr_in_expr3392);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(411, 39);
				PushFollow(Follow._expr_in_expr3394);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:412:9: ^( SHIFT_RIGHT_ASSIGN expr expr )
				{
				DebugLocation(412, 9);
				DebugLocation(412, 11);
				Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_expr3406); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(412, 30);
				PushFollow(Follow._expr_in_expr3408);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(412, 35);
				PushFollow(Follow._expr_in_expr3410);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:413:9: ^( SHIFT_LEFT_ASSIGN expr expr )
				{
				DebugLocation(413, 9);
				DebugLocation(413, 11);
				Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_expr3422); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(413, 29);
				PushFollow(Follow._expr_in_expr3424);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(413, 34);
				PushFollow(Follow._expr_in_expr3426);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:414:9: ^( QUESTION expr expr expr )
				{
				DebugLocation(414, 9);
				DebugLocation(414, 11);
				Match(input,QUESTION,Follow._QUESTION_in_expr3438); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(414, 20);
				PushFollow(Follow._expr_in_expr3440);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(414, 25);
				PushFollow(Follow._expr_in_expr3442);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(414, 30);
				PushFollow(Follow._expr_in_expr3444);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:415:9: ^( LOGICAL_OR expr expr )
				{
				DebugLocation(415, 9);
				DebugLocation(415, 11);
				Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_expr3456); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(415, 22);
				PushFollow(Follow._expr_in_expr3458);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(415, 27);
				PushFollow(Follow._expr_in_expr3460);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:416:9: ^( LOGICAL_AND expr expr )
				{
				DebugLocation(416, 9);
				DebugLocation(416, 11);
				Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_expr3472); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(416, 23);
				PushFollow(Follow._expr_in_expr3474);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(416, 28);
				PushFollow(Follow._expr_in_expr3476);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:417:9: ^( OR expr expr )
				{
				DebugLocation(417, 9);
				DebugLocation(417, 11);
				Match(input,OR,Follow._OR_in_expr3488); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(417, 14);
				PushFollow(Follow._expr_in_expr3490);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(417, 19);
				PushFollow(Follow._expr_in_expr3492);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:418:9: ^( XOR expr expr )
				{
				DebugLocation(418, 9);
				DebugLocation(418, 11);
				Match(input,XOR,Follow._XOR_in_expr3504); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(418, 15);
				PushFollow(Follow._expr_in_expr3506);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(418, 20);
				PushFollow(Follow._expr_in_expr3508);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:419:9: ^( AND expr expr )
				{
				DebugLocation(419, 9);
				DebugLocation(419, 11);
				Match(input,AND,Follow._AND_in_expr3520); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(419, 15);
				PushFollow(Follow._expr_in_expr3522);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(419, 20);
				PushFollow(Follow._expr_in_expr3524);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 19:
				DebugEnterAlt(19);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:420:9: ^( EQUAL expr expr )
				{
				DebugLocation(420, 9);
				DebugLocation(420, 11);
				Match(input,EQUAL,Follow._EQUAL_in_expr3536); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(420, 17);
				PushFollow(Follow._expr_in_expr3538);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(420, 22);
				PushFollow(Follow._expr_in_expr3540);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 20:
				DebugEnterAlt(20);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:421:9: ^( NOT_EQUAL expr expr )
				{
				DebugLocation(421, 9);
				DebugLocation(421, 11);
				Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_expr3552); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(421, 21);
				PushFollow(Follow._expr_in_expr3554);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(421, 26);
				PushFollow(Follow._expr_in_expr3556);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 21:
				DebugEnterAlt(21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:422:9: ^( INSTANCEOF expr type )
				{
				DebugLocation(422, 9);
				DebugLocation(422, 11);
				Match(input,INSTANCEOF,Follow._INSTANCEOF_in_expr3568); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(422, 22);
				PushFollow(Follow._expr_in_expr3570);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(422, 27);
				PushFollow(Follow._type_in_expr3572);
				type();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 22:
				DebugEnterAlt(22);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:423:9: ^( LESS_OR_EQUAL expr expr )
				{
				DebugLocation(423, 9);
				DebugLocation(423, 11);
				Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_expr3584); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(423, 25);
				PushFollow(Follow._expr_in_expr3586);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(423, 30);
				PushFollow(Follow._expr_in_expr3588);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 23:
				DebugEnterAlt(23);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:424:9: ^( GREATER_OR_EQUAL expr expr )
				{
				DebugLocation(424, 9);
				DebugLocation(424, 11);
				Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_expr3600); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(424, 28);
				PushFollow(Follow._expr_in_expr3602);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(424, 33);
				PushFollow(Follow._expr_in_expr3604);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 24:
				DebugEnterAlt(24);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:425:9: ^( BIT_SHIFT_RIGHT expr expr )
				{
				DebugLocation(425, 9);
				DebugLocation(425, 11);
				Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_expr3616); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(425, 27);
				PushFollow(Follow._expr_in_expr3618);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(425, 32);
				PushFollow(Follow._expr_in_expr3620);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 25:
				DebugEnterAlt(25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:426:9: ^( SHIFT_RIGHT expr expr )
				{
				DebugLocation(426, 9);
				DebugLocation(426, 11);
				Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_expr3632); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(426, 23);
				PushFollow(Follow._expr_in_expr3634);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(426, 28);
				PushFollow(Follow._expr_in_expr3636);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 26:
				DebugEnterAlt(26);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:427:9: ^( GREATER_THAN expr expr )
				{
				DebugLocation(427, 9);
				DebugLocation(427, 11);
				Match(input,GREATER_THAN,Follow._GREATER_THAN_in_expr3648); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(427, 24);
				PushFollow(Follow._expr_in_expr3650);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(427, 29);
				PushFollow(Follow._expr_in_expr3652);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 27:
				DebugEnterAlt(27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:428:9: ^( SHIFT_LEFT expr expr )
				{
				DebugLocation(428, 9);
				DebugLocation(428, 11);
				Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_expr3664); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(428, 22);
				PushFollow(Follow._expr_in_expr3666);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(428, 27);
				PushFollow(Follow._expr_in_expr3668);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 28:
				DebugEnterAlt(28);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:429:9: ^( LESS_THAN expr expr )
				{
				DebugLocation(429, 9);
				DebugLocation(429, 11);
				Match(input,LESS_THAN,Follow._LESS_THAN_in_expr3680); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(429, 21);
				PushFollow(Follow._expr_in_expr3682);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(429, 26);
				PushFollow(Follow._expr_in_expr3684);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 29:
				DebugEnterAlt(29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:430:9: ^( PLUS expr expr )
				{
				DebugLocation(430, 9);
				DebugLocation(430, 11);
				Match(input,PLUS,Follow._PLUS_in_expr3696); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(430, 16);
				PushFollow(Follow._expr_in_expr3698);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(430, 21);
				PushFollow(Follow._expr_in_expr3700);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 30:
				DebugEnterAlt(30);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:431:9: ^( MINUS expr expr )
				{
				DebugLocation(431, 9);
				DebugLocation(431, 11);
				Match(input,MINUS,Follow._MINUS_in_expr3712); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(431, 17);
				PushFollow(Follow._expr_in_expr3714);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(431, 22);
				PushFollow(Follow._expr_in_expr3716);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 31:
				DebugEnterAlt(31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:432:9: ^( STAR expr expr )
				{
				DebugLocation(432, 9);
				DebugLocation(432, 11);
				Match(input,STAR,Follow._STAR_in_expr3728); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(432, 16);
				PushFollow(Follow._expr_in_expr3730);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(432, 21);
				PushFollow(Follow._expr_in_expr3732);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 32:
				DebugEnterAlt(32);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:433:9: ^( DIV expr expr )
				{
				DebugLocation(433, 9);
				DebugLocation(433, 11);
				Match(input,DIV,Follow._DIV_in_expr3744); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(433, 15);
				PushFollow(Follow._expr_in_expr3746);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(433, 20);
				PushFollow(Follow._expr_in_expr3748);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 33:
				DebugEnterAlt(33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:434:9: ^( MOD expr expr )
				{
				DebugLocation(434, 9);
				DebugLocation(434, 11);
				Match(input,MOD,Follow._MOD_in_expr3760); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(434, 15);
				PushFollow(Follow._expr_in_expr3762);
				expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(434, 20);
				PushFollow(Follow._expr_in_expr3764);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 34:
				DebugEnterAlt(34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:435:9: ^( UNARY_PLUS expr )
				{
				DebugLocation(435, 9);
				DebugLocation(435, 11);
				Match(input,UNARY_PLUS,Follow._UNARY_PLUS_in_expr3776); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(435, 22);
				PushFollow(Follow._expr_in_expr3778);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 35:
				DebugEnterAlt(35);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:436:9: ^( UNARY_MINUS expr )
				{
				DebugLocation(436, 9);
				DebugLocation(436, 11);
				Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_expr3790); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(436, 23);
				PushFollow(Follow._expr_in_expr3792);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 36:
				DebugEnterAlt(36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:437:9: ^( PRE_INC expr )
				{
				DebugLocation(437, 9);
				DebugLocation(437, 11);
				Match(input,PRE_INC,Follow._PRE_INC_in_expr3804); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(437, 19);
				PushFollow(Follow._expr_in_expr3806);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 37:
				DebugEnterAlt(37);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:438:9: ^( PRE_DEC expr )
				{
				DebugLocation(438, 9);
				DebugLocation(438, 11);
				Match(input,PRE_DEC,Follow._PRE_DEC_in_expr3818); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(438, 19);
				PushFollow(Follow._expr_in_expr3820);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 38:
				DebugEnterAlt(38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:439:9: ^( POST_INC expr )
				{
				DebugLocation(439, 9);
				DebugLocation(439, 11);
				Match(input,POST_INC,Follow._POST_INC_in_expr3832); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(439, 20);
				PushFollow(Follow._expr_in_expr3834);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 39:
				DebugEnterAlt(39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:9: ^( POST_DEC expr )
				{
				DebugLocation(440, 9);
				DebugLocation(440, 11);
				Match(input,POST_DEC,Follow._POST_DEC_in_expr3846); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(440, 20);
				PushFollow(Follow._expr_in_expr3848);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 40:
				DebugEnterAlt(40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:441:9: ^( NOT expr )
				{
				DebugLocation(441, 9);
				DebugLocation(441, 11);
				Match(input,NOT,Follow._NOT_in_expr3860); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(441, 15);
				PushFollow(Follow._expr_in_expr3862);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 41:
				DebugEnterAlt(41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:442:9: ^( LOGICAL_NOT expr )
				{
				DebugLocation(442, 9);
				DebugLocation(442, 11);
				Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_expr3874); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(442, 23);
				PushFollow(Follow._expr_in_expr3876);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 42:
				DebugEnterAlt(42);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:443:9: ^( CAST_EXPR type expr )
				{
				DebugLocation(443, 9);
				DebugLocation(443, 11);
				Match(input,CAST_EXPR,Follow._CAST_EXPR_in_expr3888); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(443, 21);
				PushFollow(Follow._type_in_expr3890);
				type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(443, 26);
				PushFollow(Follow._expr_in_expr3892);
				expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 43:
				DebugEnterAlt(43);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:444:9: primaryExpression
				{
				DebugLocation(444, 9);
				PushFollow(Follow._primaryExpression_in_expr3903);
				primaryExpression();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 66);
			LeaveRule("expr", 66);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 66, expr_StartIndex); }

		}
		DebugLocation(445, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return node;

	}
	// $ANTLR end "expr"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:447:1: primaryExpression : ( ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER );
	[GrammarRule("primaryExpression")]
	private void primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 67);
		TraceIn("primaryExpression", 67);
		int primaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(447, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:448:5: ( ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER )
			int alt107=11;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt107 = 1;
				}
				break;
			case PARENTESIZED_EXPR:
				{
				alt107 = 2;
				}
				break;
			case IDENT:
				{
				alt107 = 3;
				}
				break;
			case METHOD_CALL:
				{
				alt107 = 4;
				}
				break;
			case SUPER_CONSTRUCTOR_CALL:
			case THIS_CONSTRUCTOR_CALL:
				{
				alt107 = 5;
				}
				break;
			case ARRAY_ELEMENT_ACCESS:
				{
				alt107 = 6;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt107 = 7;
				}
				break;
			case CLASS_CONSTRUCTOR_CALL:
			case STATIC_ARRAY_CREATOR:
				{
				alt107 = 8;
				}
				break;
			case THIS:
				{
				alt107 = 9;
				}
				break;
			case ARRAY_DECLARATOR:
				{
				alt107 = 10;
				}
				break;
			case SUPER:
				{
				alt107 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:448:9: ^( DOT ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) )
				{
				DebugLocation(448, 9);
				DebugLocation(448, 13);
				Match(input,DOT,Follow._DOT_in_primaryExpression3929); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(449, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:449:13: ( primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS )
				int alt105=3;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				switch (input.LA(1))
				{
				case ARRAY_DECLARATOR:
				case ARRAY_ELEMENT_ACCESS:
				case CHARACTER_LITERAL:
				case CLASS_CONSTRUCTOR_CALL:
				case DECIMAL_LITERAL:
				case DOT:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENT:
				case METHOD_CALL:
				case NULL:
				case OCTAL_LITERAL:
				case PARENTESIZED_EXPR:
				case STATIC_ARRAY_CREATOR:
				case STRING_LITERAL:
				case SUPER:
				case SUPER_CONSTRUCTOR_CALL:
				case THIS:
				case THIS_CONSTRUCTOR_CALL:
				case TRUE:
					{
					alt105 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt105 = 2;
					}
					break;
				case VOID:
					{
					alt105 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 105, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:449:17: primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					{
					DebugLocation(449, 17);
					PushFollow(Follow._primaryExpression_in_primaryExpression3947);
					primaryExpression();
					PopFollow();
					if (state.failed) return;
					DebugLocation(450, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:450:17: ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					int alt104=5;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt104 = 1;
						}
						break;
					case THIS:
						{
						alt104 = 2;
						}
						break;
					case SUPER:
						{
						alt104 = 3;
						}
						break;
					case CLASS_CONSTRUCTOR_CALL:
						{
						alt104 = 4;
						}
						break;
					case CLASS:
						{
						alt104 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:450:21: IDENT
						{
						DebugLocation(450, 21);
						Match(input,IDENT,Follow._IDENT_in_primaryExpression3969); if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:451:21: THIS
						{
						DebugLocation(451, 21);
						Match(input,THIS,Follow._THIS_in_primaryExpression3991); if (state.failed) return;

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:452:21: SUPER
						{
						DebugLocation(452, 21);
						Match(input,SUPER,Follow._SUPER_in_primaryExpression4013); if (state.failed) return;

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:453:21: innerNewExpression
						{
						DebugLocation(453, 21);
						PushFollow(Follow._innerNewExpression_in_primaryExpression4035);
						innerNewExpression();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:454:21: CLASS
						{
						DebugLocation(454, 21);
						Match(input,CLASS,Follow._CLASS_in_primaryExpression4057); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(104); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:456:17: primitiveType CLASS
					{
					DebugLocation(456, 17);
					PushFollow(Follow._primitiveType_in_primaryExpression4093);
					primitiveType();
					PopFollow();
					if (state.failed) return;
					DebugLocation(456, 31);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression4095); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:457:17: VOID CLASS
					{
					DebugLocation(457, 17);
					Match(input,VOID,Follow._VOID_in_primaryExpression4113); if (state.failed) return;
					DebugLocation(457, 22);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression4115); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:460:9: parenthesizedExpression
				{
				DebugLocation(460, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression4149);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:461:9: IDENT
				{
				DebugLocation(461, 9);
				Match(input,IDENT,Follow._IDENT_in_primaryExpression4159); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:462:9: ^( METHOD_CALL primaryExpression ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(462, 9);
				DebugLocation(462, 11);
				Match(input,METHOD_CALL,Follow._METHOD_CALL_in_primaryExpression4170); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(462, 23);
				PushFollow(Follow._primaryExpression_in_primaryExpression4172);
				primaryExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(462, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:462:41: ( genericTypeArgumentList )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==GENERIC_TYPE_ARG_LIST))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:462:41: genericTypeArgumentList
					{
					DebugLocation(462, 41);
					PushFollow(Follow._genericTypeArgumentList_in_primaryExpression4174);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(462, 66);
				PushFollow(Follow._arguments_in_primaryExpression4177);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:463:9: explicitConstructorCall
				{
				DebugLocation(463, 9);
				PushFollow(Follow._explicitConstructorCall_in_primaryExpression4188);
				explicitConstructorCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:464:9: ^( ARRAY_ELEMENT_ACCESS primaryExpression expression )
				{
				DebugLocation(464, 9);
				DebugLocation(464, 11);
				Match(input,ARRAY_ELEMENT_ACCESS,Follow._ARRAY_ELEMENT_ACCESS_in_primaryExpression4199); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(464, 32);
				PushFollow(Follow._primaryExpression_in_primaryExpression4201);
				primaryExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(464, 50);
				PushFollow(Follow._expression_in_primaryExpression4203);
				expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:465:9: literal
				{
				DebugLocation(465, 9);
				PushFollow(Follow._literal_in_primaryExpression4214);
				literal();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:466:9: newExpression
				{
				DebugLocation(466, 9);
				PushFollow(Follow._newExpression_in_primaryExpression4224);
				newExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:467:9: THIS
				{
				DebugLocation(467, 9);
				Match(input,THIS,Follow._THIS_in_primaryExpression4234); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:468:9: arrayTypeDeclarator
				{
				DebugLocation(468, 9);
				PushFollow(Follow._arrayTypeDeclarator_in_primaryExpression4244);
				arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:469:9: SUPER
				{
				DebugLocation(469, 9);
				Match(input,SUPER,Follow._SUPER_in_primaryExpression4254); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 67);
			LeaveRule("primaryExpression", 67);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 67, primaryExpression_StartIndex); }

		}
		DebugLocation(470, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_explicitConstructorCall();
	partial void LeaveRule_explicitConstructorCall();
	// $ANTLR start "explicitConstructorCall"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:472:1: explicitConstructorCall : ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) );
	[GrammarRule("explicitConstructorCall")]
	private void explicitConstructorCall()
	{
		EnterRule_explicitConstructorCall();
		EnterRule("explicitConstructorCall", 68);
		TraceIn("explicitConstructorCall", 68);
		int explicitConstructorCall_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "explicitConstructorCall");
		DebugLocation(472, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:473:5: ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) )
			int alt111=2;
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==THIS_CONSTRUCTOR_CALL))
			{
				alt111 = 1;
			}
			else if ((LA111_1==SUPER_CONSTRUCTOR_CALL))
			{
				alt111 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:473:9: ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(473, 9);
				DebugLocation(473, 11);
				Match(input,THIS_CONSTRUCTOR_CALL,Follow._THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall4278); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(473, 33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:473:33: ( genericTypeArgumentList )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==GENERIC_TYPE_ARG_LIST))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:473:33: genericTypeArgumentList
					{
					DebugLocation(473, 33);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall4280);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(473, 58);
				PushFollow(Follow._arguments_in_explicitConstructorCall4283);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:9: ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(474, 9);
				DebugLocation(474, 11);
				Match(input,SUPER_CONSTRUCTOR_CALL,Follow._SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall4295); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(474, 34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:34: ( primaryExpression )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==ARRAY_DECLARATOR||LA109_1==ARRAY_ELEMENT_ACCESS||LA109_1==CHARACTER_LITERAL||LA109_1==CLASS_CONSTRUCTOR_CALL||LA109_1==DECIMAL_LITERAL||LA109_1==DOT||LA109_1==FALSE||LA109_1==FLOATING_POINT_LITERAL||(LA109_1>=HEX_LITERAL && LA109_1<=IDENT)||LA109_1==METHOD_CALL||LA109_1==NULL||LA109_1==OCTAL_LITERAL||LA109_1==PARENTESIZED_EXPR||LA109_1==STATIC_ARRAY_CREATOR||(LA109_1>=STRING_LITERAL && LA109_1<=SUPER_CONSTRUCTOR_CALL)||(LA109_1>=THIS && LA109_1<=THIS_CONSTRUCTOR_CALL)||LA109_1==TRUE))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:34: primaryExpression
					{
					DebugLocation(474, 34);
					PushFollow(Follow._primaryExpression_in_explicitConstructorCall4297);
					primaryExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(474, 53);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:53: ( genericTypeArgumentList )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==GENERIC_TYPE_ARG_LIST))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:53: genericTypeArgumentList
					{
					DebugLocation(474, 53);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall4300);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(474, 78);
				PushFollow(Follow._arguments_in_explicitConstructorCall4303);
				arguments();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitConstructorCall", 68);
			LeaveRule("explicitConstructorCall", 68);
			LeaveRule_explicitConstructorCall();
			if (state.backtracking > 0) { Memoize(input, 68, explicitConstructorCall_StartIndex); }

		}
		DebugLocation(475, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorCall"); }
		return;

	}
	// $ANTLR end "explicitConstructorCall"

	partial void EnterRule_arrayTypeDeclarator();
	partial void LeaveRule_arrayTypeDeclarator();
	// $ANTLR start "arrayTypeDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:477:1: arrayTypeDeclarator : ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) ;
	[GrammarRule("arrayTypeDeclarator")]
	private void arrayTypeDeclarator()
	{
		EnterRule_arrayTypeDeclarator();
		EnterRule("arrayTypeDeclarator", 69);
		TraceIn("arrayTypeDeclarator", 69);
		int arrayTypeDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayTypeDeclarator");
		DebugLocation(477, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:5: ( ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:9: ^( ARRAY_DECLARATOR ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) )
			{
			DebugLocation(478, 9);
			DebugLocation(478, 11);
			Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayTypeDeclarator4324); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(478, 28);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:28: ( arrayTypeDeclarator | qualifiedIdentifier | primitiveType )
			int alt112=3;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case ARRAY_DECLARATOR:
				{
				alt112 = 1;
				}
				break;
			case DOT:
			case IDENT:
				{
				alt112 = 2;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt112 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:29: arrayTypeDeclarator
				{
				DebugLocation(478, 29);
				PushFollow(Follow._arrayTypeDeclarator_in_arrayTypeDeclarator4327);
				arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:51: qualifiedIdentifier
				{
				DebugLocation(478, 51);
				PushFollow(Follow._qualifiedIdentifier_in_arrayTypeDeclarator4331);
				qualifiedIdentifier();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:478:73: primitiveType
				{
				DebugLocation(478, 73);
				PushFollow(Follow._primitiveType_in_arrayTypeDeclarator4335);
				primitiveType();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayTypeDeclarator", 69);
			LeaveRule("arrayTypeDeclarator", 69);
			LeaveRule_arrayTypeDeclarator();
			if (state.backtracking > 0) { Memoize(input, 69, arrayTypeDeclarator_StartIndex); }

		}
		DebugLocation(479, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayTypeDeclarator"); }
		return;

	}
	// $ANTLR end "arrayTypeDeclarator"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:481:1: newExpression : ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) );
	[GrammarRule("newExpression")]
	private void newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 70);
		TraceIn("newExpression", 70);
		int newExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(481, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:482:5: ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) )
			int alt117=2;
			try { DebugEnterDecision(117, false);
			int LA117_1 = input.LA(1);

			if ((LA117_1==STATIC_ARRAY_CREATOR))
			{
				alt117 = 1;
			}
			else if ((LA117_1==CLASS_CONSTRUCTOR_CALL))
			{
				alt117 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:482:9: ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) )
				{
				DebugLocation(482, 9);
				DebugLocation(482, 13);
				Match(input,STATIC_ARRAY_CREATOR,Follow._STATIC_ARRAY_CREATOR_in_newExpression4359); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(483, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:483:13: ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==BOOLEAN||LA114_1==BYTE||LA114_1==CHAR||LA114_1==DOUBLE||LA114_1==FLOAT||LA114_1==INT||LA114_1==LONG||LA114_1==SHORT))
				{
					alt114 = 1;
				}
				else if ((LA114_1==GENERIC_TYPE_ARG_LIST||LA114_1==QUALIFIED_TYPE_IDENT))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:483:17: primitiveType newArrayConstruction
					{
					DebugLocation(483, 17);
					PushFollow(Follow._primitiveType_in_newExpression4377);
					primitiveType();
					PopFollow();
					if (state.failed) return;
					DebugLocation(483, 31);
					PushFollow(Follow._newArrayConstruction_in_newExpression4379);
					newArrayConstruction();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:484:17: ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction
					{
					DebugLocation(484, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:484:17: ( genericTypeArgumentList )?
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					int LA113_1 = input.LA(1);

					if ((LA113_1==GENERIC_TYPE_ARG_LIST))
					{
						alt113 = 1;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:484:17: genericTypeArgumentList
						{
						DebugLocation(484, 17);
						PushFollow(Follow._genericTypeArgumentList_in_newExpression4397);
						genericTypeArgumentList();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(113); }

					DebugLocation(484, 42);
					PushFollow(Follow._qualifiedTypeIdent_in_newExpression4400);
					qualifiedTypeIdent();
					PopFollow();
					if (state.failed) return;
					DebugLocation(484, 61);
					PushFollow(Follow._newArrayConstruction_in_newExpression4402);
					newArrayConstruction();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:487:9: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? )
				{
				DebugLocation(487, 9);
				DebugLocation(487, 11);
				Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_newExpression4437); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(487, 34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:487:34: ( genericTypeArgumentList )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==GENERIC_TYPE_ARG_LIST))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:487:34: genericTypeArgumentList
					{
					DebugLocation(487, 34);
					PushFollow(Follow._genericTypeArgumentList_in_newExpression4439);
					genericTypeArgumentList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(487, 59);
				PushFollow(Follow._qualifiedTypeIdent_in_newExpression4442);
				qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return;
				DebugLocation(487, 78);
				PushFollow(Follow._arguments_in_newExpression4444);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(487, 88);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:487:88: ( classTopLevelScope )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==CLASS_TOP_LEVEL_SCOPE))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:487:88: classTopLevelScope
					{
					DebugLocation(487, 88);
					PushFollow(Follow._classTopLevelScope_in_newExpression4446);
					classTopLevelScope();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(116); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newExpression", 70);
			LeaveRule("newExpression", 70);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 70, newExpression_StartIndex); }

		}
		DebugLocation(488, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:490:1: innerNewExpression : ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) ;
	[GrammarRule("innerNewExpression")]
	private void innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 71);
		TraceIn("innerNewExpression", 71);
		int innerNewExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(490, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:5: ( ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:9: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? )
			{
			DebugLocation(491, 9);
			DebugLocation(491, 11);
			Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_innerNewExpression4469); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(491, 34);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:34: ( genericTypeArgumentList )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_1 = input.LA(1);

			if ((LA118_1==GENERIC_TYPE_ARG_LIST))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:34: genericTypeArgumentList
				{
				DebugLocation(491, 34);
				PushFollow(Follow._genericTypeArgumentList_in_innerNewExpression4471);
				genericTypeArgumentList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(118); }

			DebugLocation(491, 59);
			Match(input,IDENT,Follow._IDENT_in_innerNewExpression4474); if (state.failed) return;
			DebugLocation(491, 65);
			PushFollow(Follow._arguments_in_innerNewExpression4476);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(491, 75);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:75: ( classTopLevelScope )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if ((LA119_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt119 = 1;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:75: classTopLevelScope
				{
				DebugLocation(491, 75);
				PushFollow(Follow._classTopLevelScope_in_innerNewExpression4478);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(119); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("innerNewExpression", 71);
			LeaveRule("innerNewExpression", 71);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 71, innerNewExpression_StartIndex); }

		}
		DebugLocation(492, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:494:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private void newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 72);
		TraceIn("newArrayConstruction", 72);
		int newArrayConstruction_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(494, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:495:5: ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==ARRAY_DECLARATOR_LIST))
			{
				alt122 = 1;
			}
			else if ((LA122_1==EXPR))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:495:9: arrayDeclaratorList arrayInitializer
				{
				DebugLocation(495, 9);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction4503);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(495, 29);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction4505);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:9: ( expression )+ ( arrayDeclaratorList )?
				{
				DebugLocation(496, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:9: ( expression )+
				int cnt120=0;
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_1 = input.LA(1);

					if ((LA120_1==EXPR))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:9: expression
						{
						DebugLocation(496, 9);
						PushFollow(Follow._expression_in_newArrayConstruction4515);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt120 >= 1)
							goto loop120;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee120 = new EarlyExitException( 120, input );
						DebugRecognitionException(eee120);
						throw eee120;
					}
					cnt120++;
				}
				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(496, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:21: ( arrayDeclaratorList )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==ARRAY_DECLARATOR_LIST))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:21: arrayDeclaratorList
					{
					DebugLocation(496, 21);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction4518);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newArrayConstruction", 72);
			LeaveRule("newArrayConstruction", 72);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 72, newArrayConstruction_StartIndex); }

		}
		DebugLocation(497, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:499:1: arguments : ^( ARGUMENT_LIST ( expression )* ) ;
	[GrammarRule("arguments")]
	private void arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 73);
		TraceIn("arguments", 73);
		int arguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(499, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:500:5: ( ^( ARGUMENT_LIST ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:500:9: ^( ARGUMENT_LIST ( expression )* )
			{
			DebugLocation(500, 9);
			DebugLocation(500, 11);
			Match(input,ARGUMENT_LIST,Follow._ARGUMENT_LIST_in_arguments4539); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(500, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:500:25: ( expression )*
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=2;
					try { DebugEnterDecision(123, false);
					int LA123_1 = input.LA(1);

					if ((LA123_1==EXPR))
					{
						alt123 = 1;
					}


					} finally { DebugExitDecision(123); }
					switch ( alt123 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:500:25: expression
						{
						DebugLocation(500, 25);
						PushFollow(Follow._expression_in_arguments4541);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop123;
					}
				}

				loop123:
					;

				} finally { DebugExitSubRule(123); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 73);
			LeaveRule("arguments", 73);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 73, arguments_StartIndex); }

		}
		DebugLocation(501, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:503:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private void literal()
	{
		EnterRule_literal();
		EnterRule("literal", 74);
		TraceIn("literal", 74);
		int literal_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(503, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:504:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:
			{
			DebugLocation(504, 5);
			if (input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 74);
			LeaveRule("literal", 74);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 74, literal_StartIndex); }

		}
		DebugLocation(513, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred46_JavaTreeParser_fragment();
	partial void LeaveRule_synpred46_JavaTreeParser_fragment();

	// $ANTLR start synpred46_JavaTreeParser
	private void synpred46_JavaTreeParser_fragment()
	{
		EnterRule_synpred46_JavaTreeParser_fragment();
		EnterRule("synpred46_JavaTreeParser_fragment", 120);
		TraceIn("synpred46_JavaTreeParser_fragment", 120);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:2: ( ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			{
			DebugLocation(118, 2);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:2: ( '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:3: '{' ( modifier )? getRule ( SEMI | block ) ( ( modifier )? setRule ( SEMI | block ) )? '}'
			{
			DebugLocation(118, 3);
			Match(input,LCURLY,Follow._LCURLY_in_synpred46_JavaTreeParser754); if (state.failed) return;
			DebugLocation(118, 7);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:7: ( modifier )?
			int alt141=2;
			try { DebugEnterSubRule(141);
			try { DebugEnterDecision(141, false);
			int LA141_1 = input.LA(1);

			if ((LA141_1==ABSTRACT||LA141_1==AT||LA141_1==FINAL||LA141_1==GLOBAL||LA141_1==NATIVE||LA141_1==OVERRIDE||LA141_1==PRIVATE||(LA141_1>=PROTECTED && LA141_1<=PUBLIC)||LA141_1==STATIC||LA141_1==STRICTFP||(LA141_1>=SYNCHRONIZED && LA141_1<=TEST_METHOD)||LA141_1==TRANSIENT||LA141_1==VIRTUAL||LA141_1==VOLATILE||(LA141_1>=WITHOUT_SHARING && LA141_1<=WITH_SHARING)))
			{
				alt141 = 1;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:7: modifier
				{
				DebugLocation(118, 7);
				PushFollow(Follow._modifier_in_synpred46_JavaTreeParser756);
				modifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(141); }

			DebugLocation(118, 17);
			PushFollow(Follow._getRule_in_synpred46_JavaTreeParser759);
			getRule();
			PopFollow();
			if (state.failed) return;
			DebugLocation(118, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:25: ( SEMI | block )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==SEMI))
			{
				alt142 = 1;
			}
			else if ((LA142_1==BLOCK_SCOPE))
			{
				alt142 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:26: SEMI
				{
				DebugLocation(118, 26);
				Match(input,SEMI,Follow._SEMI_in_synpred46_JavaTreeParser762); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:31: block
				{
				DebugLocation(118, 31);
				PushFollow(Follow._block_in_synpred46_JavaTreeParser764);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(118, 38);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:38: ( ( modifier )? setRule ( SEMI | block ) )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if ((LA145_1==ABSTRACT||LA145_1==AT||LA145_1==FINAL||LA145_1==GLOBAL||LA145_1==IDENT||LA145_1==NATIVE||LA145_1==OVERRIDE||LA145_1==PRIVATE||(LA145_1>=PROTECTED && LA145_1<=PUBLIC)||LA145_1==STATIC||LA145_1==STRICTFP||(LA145_1>=SYNCHRONIZED && LA145_1<=TEST_METHOD)||LA145_1==TRANSIENT||LA145_1==VIRTUAL||LA145_1==VOLATILE||(LA145_1>=WITHOUT_SHARING && LA145_1<=WITH_SHARING)))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: ( modifier )? setRule ( SEMI | block )
				{
				DebugLocation(118, 39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: ( modifier )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, false);
				int LA143_1 = input.LA(1);

				if ((LA143_1==ABSTRACT||LA143_1==AT||LA143_1==FINAL||LA143_1==GLOBAL||LA143_1==NATIVE||LA143_1==OVERRIDE||LA143_1==PRIVATE||(LA143_1>=PROTECTED && LA143_1<=PUBLIC)||LA143_1==STATIC||LA143_1==STRICTFP||(LA143_1>=SYNCHRONIZED && LA143_1<=TEST_METHOD)||LA143_1==TRANSIENT||LA143_1==VIRTUAL||LA143_1==VOLATILE||(LA143_1>=WITHOUT_SHARING && LA143_1<=WITH_SHARING)))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:39: modifier
					{
					DebugLocation(118, 39);
					PushFollow(Follow._modifier_in_synpred46_JavaTreeParser768);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(118, 49);
				PushFollow(Follow._setRule_in_synpred46_JavaTreeParser771);
				setRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(118, 57);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:57: ( SEMI | block )
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==SEMI))
				{
					alt144 = 1;
				}
				else if ((LA144_1==BLOCK_SCOPE))
				{
					alt144 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:58: SEMI
					{
					DebugLocation(118, 58);
					Match(input,SEMI,Follow._SEMI_in_synpred46_JavaTreeParser774); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:63: block
					{
					DebugLocation(118, 63);
					PushFollow(Follow._block_in_synpred46_JavaTreeParser776);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;

			}
			} finally { DebugExitSubRule(145); }

			DebugLocation(118, 72);
			Match(input,RCURLY,Follow._RCURLY_in_synpred46_JavaTreeParser781); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred46_JavaTreeParser_fragment", 120);
			LeaveRule("synpred46_JavaTreeParser_fragment", 120);
			LeaveRule_synpred46_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred46_JavaTreeParser

	partial void EnterRule_synpred145_JavaTreeParser_fragment();
	partial void LeaveRule_synpred145_JavaTreeParser_fragment();

	// $ANTLR start synpred145_JavaTreeParser
	private void synpred145_JavaTreeParser_fragment()
	{
		EnterRule_synpred145_JavaTreeParser_fragment();
		EnterRule("synpred145_JavaTreeParser_fragment", 219);
		TraceIn("synpred145_JavaTreeParser_fragment", 219);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:35: ( switchCaseLabel )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:35: switchCaseLabel
			{
			DebugLocation(368, 35);
			PushFollow(Follow._switchCaseLabel_in_synpred145_JavaTreeParser2996);
			switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred145_JavaTreeParser_fragment", 219);
			LeaveRule("synpred145_JavaTreeParser_fragment", 219);
			LeaveRule_synpred145_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred145_JavaTreeParser

	partial void EnterRule_synpred152_JavaTreeParser_fragment();
	partial void LeaveRule_synpred152_JavaTreeParser_fragment();

	// $ANTLR start synpred152_JavaTreeParser
	private void synpred152_JavaTreeParser_fragment()
	{
		EnterRule_synpred152_JavaTreeParser_fragment();
		EnterRule("synpred152_JavaTreeParser_fragment", 226);
		TraceIn("synpred152_JavaTreeParser_fragment", 226);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: ( ( expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: ( expression )*
			{
			DebugLocation(380, 48);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: ( expression )*
			try { DebugEnterSubRule(162);
			while (true)
			{
				int alt162=2;
				try { DebugEnterDecision(162, false);
				int LA162_1 = input.LA(1);

				if ((LA162_1==EXPR))
				{
					alt162 = 1;
				}


				} finally { DebugExitDecision(162); }
				switch ( alt162 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:380:48: expression
					{
					DebugLocation(380, 48);
					PushFollow(Follow._expression_in_synpred152_JavaTreeParser3097);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop162;
				}
			}

			loop162:
				;

			} finally { DebugExitSubRule(162); }


			}

		}
		finally
		{
			TraceOut("synpred152_JavaTreeParser_fragment", 226);
			LeaveRule("synpred152_JavaTreeParser_fragment", 226);
			LeaveRule_synpred152_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred152_JavaTreeParser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _JAVA_SOURCE_in_javaSource104 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_javaSource106 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL,0x8UL});
		public static readonly BitSet _packageDeclaration_in_javaSource108 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL});
		public static readonly BitSet _importDeclaration_in_javaSource111 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL});
		public static readonly BitSet _typeDeclaration_in_javaSource114 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration139 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration141 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IMPORT_in_importDeclaration168 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STATIC_in_importDeclaration170 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration173 = new BitSet(new ulong[]{0x20000000000008UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration175 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_typeDeclaration205 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_typeDeclaration208 = new BitSet(new ulong[]{0x10000000000UL,0x8040002UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration210 = new BitSet(new ulong[]{0x10000000000UL,0x8000002UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration213 = new BitSet(new ulong[]{0x10000000000UL,0x8000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration216 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _classTopLevelScope_in_typeDeclaration219 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTERFACE_in_typeDeclaration233 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration235 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration237 = new BitSet(new ulong[]{0x0UL,0x400040002UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration239 = new BitSet(new ulong[]{0x0UL,0x400000002UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration242 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _interfaceTopLevelScope_in_typeDeclaration245 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ENUM_in_typeDeclaration257 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration259 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration261 = new BitSet(new ulong[]{0x400000000000000UL,0x8000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration263 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _enumTopLevelScope_in_typeDeclaration266 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AT_in_typeDeclaration278 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration280 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration282 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _annotationTopLevelScope_in_typeDeclaration284 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_CLAUSE_in_extendsClause321 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_extendsClause323 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _IMPLEMENTS_CLAUSE_in_implementsClause352 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_implementsClause354 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList384 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList386 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter408 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _bound_in_genericTypeParameter410 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_BOUND_LIST_in_bound440 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_bound442 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope464 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _enumConstant_in_enumTopLevelScope466 = new BitSet(new ulong[]{0x10000000008UL,0x1000000UL});
		public static readonly BitSet _classTopLevelScope_in_enumTopLevelScope469 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_enumConstant495 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_enumConstant497 = new BitSet(new ulong[]{0x10000008008UL});
		public static readonly BitSet _arguments_in_enumConstant499 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_enumConstant502 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope542 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _classScopeDeclarations_in_classTopLevelScope547 = new BitSet(new ulong[]{0x20010D000200008UL,0x200010000UL,0x420000000001000UL});
		public static readonly BitSet _CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations584 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_STATIC_INITIALIZER_in_classScopeDeclarations598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations600 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_classScopeDeclarations613 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations615 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations620 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations622 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations624 = new BitSet(new ulong[]{0x1020008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations626 = new BitSet(new ulong[]{0x1000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations629 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations632 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_classScopeDeclarations646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations648 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations650 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations653 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations655 = new BitSet(new ulong[]{0x1000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations657 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations660 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_classScopeDeclarations674 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations676 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations678 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_classScopeDeclarations680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_DECL_in_classScopeDeclarations693 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations695 = new BitSet(new ulong[]{0x0UL,0x40200UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations697 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations700 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations702 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations705 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PROPERTY_DECL_in_classScopeDeclarations718 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations720 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations722 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _propertyDeclaration_in_classScopeDeclarations724 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration754 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration756 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration759 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration762 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration764 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration768 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration771 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration776 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration788 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration790 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration793 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration796 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration798 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration802 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration805 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration808 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_getRule833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_setRule847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope866 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceTopLevelScope868 = new BitSet(new ulong[]{0x200001000200008UL,0x200010000UL,0x420000000000000UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations894 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations896 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations898 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations901 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations903 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations905 = new BitSet(new ulong[]{0x20008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations907 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations910 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_interfaceScopeDeclarations923 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations925 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations927 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations930 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations932 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations934 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_interfaceScopeDeclarations1025 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations1027 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations1029 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_interfaceScopeDeclarations1031 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_DECLARATOR_LIST_in_variableDeclaratorList1079 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarator_in_variableDeclaratorList1082 = new BitSet(new ulong[]{0x8UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _VAR_DECLARATOR_in_variableDeclarator1112 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclaratorId_in_variableDeclarator1114 = new BitSet(new ulong[]{0x4000000010080008UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator1118 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId1148 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId1153 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer1177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_variableInitializer1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator1217 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1239 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayDeclaratorList1241 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _ARRAY_INITIALIZER_in_arrayInitializer1269 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer1271 = new BitSet(new ulong[]{0x4000000010080008UL});
		public static readonly BitSet _THROWS_CLAUSE_in_throwsClause1293 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_throwsClause1295 = new BitSet(new ulong[]{0x10000000000008UL,0x1000000UL});
		public static readonly BitSet _MODIFIER_LIST_in_modifierList1336 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifier_in_modifierList1339 = new BitSet(new ulong[]{0x200018UL,0x200000000080008UL,0x6900418280006804UL});
		public static readonly BitSet _PUBLIC_in_modifier1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OVERRIDE_in_modifier1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIRTUAL_in_modifier1401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_SHARING_in_modifier1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITHOUT_SHARING_in_modifier1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier1444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier1456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier1490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier1500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier1520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_modifier1528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEST_METHOD_in_modifier1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCAL_MODIFIER_LIST_in_localModifierList1573 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifier_in_localModifierList1575 = new BitSet(new ulong[]{0x200008UL,0x8UL});
		public static readonly BitSet _FINAL_in_localModifier1596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier1606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_type1636 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_type1639 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _qualifiedTypeIdent_in_type1643 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _arrayDeclaratorList_in_type1648 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent1675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent1680 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeIdent1716 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent1721 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList1840 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList1845 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000010000UL});
		public static readonly BitSet _type_in_genericTypeArgument1884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument1897 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument1899 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_in_genericWildcardBoundType2039 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType2041 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_genericWildcardBoundType2053 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType2055 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_LIST_in_formalParameterList2076 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList2078 = new BitSet(new ulong[]{0x8UL,0xC00UL});
		public static readonly BitSet _formalParameterVarargDecl_in_formalParameterList2081 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl2108 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl2110 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl2112 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl2114 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl2139 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarargDecl2141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterVarargDecl2143 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarargDecl2145 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier2170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier2181 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentifier2183 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier2185 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_LIST_in_annotationList2212 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotation_in_annotationList2214 = new BitSet(new ulong[]{0x200008UL});
		public static readonly BitSet _AT_in_annotation2236 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation2238 = new BitSet(new ulong[]{0x108UL});
		public static readonly BitSet _annotationInit_in_annotation2240 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_BLOCK_in_annotationInit2266 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit2268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_KEY_LIST_in_annotationInitializers2289 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers2291 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers2304 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers2306 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_annotationInitializer2331 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer2333 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue2358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValue2360 = new BitSet(new ulong[]{0x4000000000200088UL});
		public static readonly BitSet _annotation_in_annotationElementValue2372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_annotationElementValue2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2406 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationTopLevelScope2408 = new BitSet(new ulong[]{0x200001000201008UL,0x200000000UL,0x20000000000000UL});
		public static readonly BitSet _ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2434 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2436 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2438 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations2440 = new BitSet(new ulong[]{0x1000000000008UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations2442 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_annotationScopeDeclarations2455 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2457 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_annotationScopeDeclarations2461 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue2496 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue2498 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BLOCK_SCOPE_in_block2525 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_block2527 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement2566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement2576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_blockStatement2585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BROKEN_EXPRESSION_in_brokenExpression2602 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_brokenExpression2604 = new BitSet(new ulong[]{0x10000000000008UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOT_in_brokenExpression2606 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_brokenExpression2609 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_localVariableDeclaration2626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration2628 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration2630 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_localVariableDeclaration2632 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _block_in_statement2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement2680 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2682 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2684 = new BitSet(new ulong[]{0x4008200005000008UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2686 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_in_statement2699 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _forInit_in_statement2701 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _forCondition_in_statement2703 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _forUpdater_in_statement2705 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2707 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_EACH_in_statement2719 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_statement2721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_statement2723 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_statement2725 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _expression_in_statement2727 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2729 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHILE_in_statement2742 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2744 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2746 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DO_in_statement2758 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_statement2760 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2762 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRY_in_statement2774 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_statement2776 = new BitSet(new ulong[]{0x201000008UL});
		public static readonly BitSet _catches_in_statement2778 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_statement2781 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_in_statement2796 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2798 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement2800 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement2812 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement2814 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_statement2816 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RETURN_in_statement2828 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement2830 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THROW_in_statement2843 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement2845 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BREAK_in_statement2857 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2859 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONTINUE_in_statement2872 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2874 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LABELED_STATEMENT_in_statement2887 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement2889 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement2891 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_statement2902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement2912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_CLAUSE_LIST_in_catches2941 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _catchClause_in_catches2943 = new BitSet(new ulong[]{0x100000008UL});
		public static readonly BitSet _CATCH_in_catchClause2969 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause2971 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_catchClause2973 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels2994 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels2996 = new BitSet(new ulong[]{0x1000040000008UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels2999 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels3002 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _CASE_in_switchCaseLabel3032 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_switchCaseLabel3034 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel3036 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel3062 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel3064 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _FOR_INIT_in_forInit3090 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit3093 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_forInit3097 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _FOR_CONDITION_in_forCondition3125 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forCondition3127 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_UPDATE_in_forUpdater3153 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forUpdater3155 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _PARENTESIZED_EXPR_in_parenthesizedExpression3183 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_parenthesizedExpression3185 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXPR_in_expression3214 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expression3216 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_expr3241 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3246 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3250 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_ASSIGN_in_expr3262 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3264 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3266 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_ASSIGN_in_expr3278 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3280 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3282 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_ASSIGN_in_expr3294 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3296 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3298 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_ASSIGN_in_expr3310 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3312 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3314 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_ASSIGN_in_expr3326 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3328 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3330 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_ASSIGN_in_expr3342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3344 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3346 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_ASSIGN_in_expr3358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3360 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3362 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_ASSIGN_in_expr3374 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3376 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3378 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_expr3390 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3392 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3394 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_expr3406 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3408 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3410 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_expr3422 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3424 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3426 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUESTION_in_expr3438 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3440 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3442 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3444 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_OR_in_expr3456 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3458 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3460 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_AND_in_expr3472 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3474 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3476 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_expr3488 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3490 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3492 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_in_expr3504 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3506 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3508 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_expr3520 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3522 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3524 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EQUAL_in_expr3536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3538 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3540 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_EQUAL_in_expr3552 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3554 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3556 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSTANCEOF_in_expr3568 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3570 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_expr3572 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_expr3584 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3586 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3588 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_expr3600 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3602 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3604 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_expr3616 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3618 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3620 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_in_expr3632 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3634 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3636 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_THAN_in_expr3648 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3650 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3652 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_in_expr3664 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3666 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3668 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_THAN_in_expr3680 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3682 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3684 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_in_expr3696 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3698 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3700 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_expr3712 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3714 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3716 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_expr3728 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3730 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3732 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_expr3744 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3746 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3748 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_in_expr3760 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3762 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3764 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_PLUS_in_expr3776 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3778 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_expr3790 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3792 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_INC_in_expr3804 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3806 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_DEC_in_expr3818 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3820 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_INC_in_expr3832 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3834 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_DEC_in_expr3846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3848 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_expr3860 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3862 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_NOT_in_expr3874 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3876 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CAST_EXPR_in_expr3888 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_expr3890 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3892 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primaryExpression_in_expr3903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression3929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression3947 = new BitSet(new ulong[]{0x3000000000UL,0x1000000UL,0x20800000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression3969 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THIS_in_primaryExpression3991 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_primaryExpression4013 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _innerNewExpression_in_primaryExpression4035 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_primaryExpression4057 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_primaryExpression4093 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression4095 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_in_primaryExpression4113 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression4115 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression4149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression4159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _METHOD_CALL_in_primaryExpression4170 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression4172 = new BitSet(new ulong[]{0x8000UL,0x20000UL});
		public static readonly BitSet _genericTypeArgumentList_in_primaryExpression4174 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_primaryExpression4177 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _explicitConstructorCall_in_primaryExpression4188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_ELEMENT_ACCESS_in_primaryExpression4199 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression4201 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _expression_in_primaryExpression4203 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_primaryExpression4214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression4224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression4234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayTypeDeclarator_in_primaryExpression4244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression4254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall4278 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall4280 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall4283 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall4295 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_explicitConstructorCall4297 = new BitSet(new ulong[]{0x8000UL,0x20000UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall4300 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall4303 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayTypeDeclarator4324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayTypeDeclarator_in_arrayTypeDeclarator4327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _qualifiedIdentifier_in_arrayTypeDeclarator4331 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_arrayTypeDeclarator4335 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STATIC_ARRAY_CREATOR_in_newExpression4359 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_newExpression4377 = new BitSet(new ulong[]{0x4000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression4379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression4397 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression4400 = new BitSet(new ulong[]{0x4000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression4402 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_newExpression4437 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression4439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression4442 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_newExpression4444 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_newExpression4446 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_innerNewExpression4469 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_innerNewExpression4471 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression4474 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_innerNewExpression4476 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_innerNewExpression4478 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction4503 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction4505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_newArrayConstruction4515 = new BitSet(new ulong[]{0x4000000000020002UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction4518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARGUMENT_LIST_in_arguments4539 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_arguments4541 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _LCURLY_in_synpred46_JavaTreeParser754 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_synpred46_JavaTreeParser756 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_synpred46_JavaTreeParser759 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred46_JavaTreeParser762 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_synpred46_JavaTreeParser764 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_synpred46_JavaTreeParser768 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_synpred46_JavaTreeParser771 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred46_JavaTreeParser774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_synpred46_JavaTreeParser776 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_synpred46_JavaTreeParser781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred145_JavaTreeParser2996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred152_JavaTreeParser3097 = new BitSet(new ulong[]{0x4000000000000002UL});
	}
	#endregion Follow sets
}

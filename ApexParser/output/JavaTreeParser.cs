//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g 2014-06-24 13:56:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using ApexParser.ApexNodes;
using ApexParser.Scopes;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class JavaTreeParser : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BROKEN_DECLARATION", "BROKEN_EXPRESSION", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "COMMENT", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GLOBAL", "GREATER_OR_EQUAL", "GREATER_THAN", "HEX_DIGIT", "HEX_LITERAL", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "MAP_INITIALIZER", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "OVERRIDE", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROPERTY_DECL", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SET_INITIALIZER", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SOQL_LITERAL", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "TEST_METHOD", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VIRTUAL", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WITHOUT_SHARING", "WITH_SHARING", "WS", "XOR", "XOR_ASSIGN", "'=>'"
	};
	public const int EOF=-1;
	public const int T__194=194;
	public const int ABSTRACT=4;
	public const int AND=5;
	public const int AND_ASSIGN=6;
	public const int ANNOTATION_INIT_ARRAY_ELEMENT=7;
	public const int ANNOTATION_INIT_BLOCK=8;
	public const int ANNOTATION_INIT_DEFAULT_KEY=9;
	public const int ANNOTATION_INIT_KEY_LIST=10;
	public const int ANNOTATION_LIST=11;
	public const int ANNOTATION_METHOD_DECL=12;
	public const int ANNOTATION_SCOPE=13;
	public const int ANNOTATION_TOP_LEVEL_SCOPE=14;
	public const int ARGUMENT_LIST=15;
	public const int ARRAY_DECLARATOR=16;
	public const int ARRAY_DECLARATOR_LIST=17;
	public const int ARRAY_ELEMENT_ACCESS=18;
	public const int ARRAY_INITIALIZER=19;
	public const int ASSIGN=20;
	public const int AT=21;
	public const int BIT_SHIFT_RIGHT=22;
	public const int BIT_SHIFT_RIGHT_ASSIGN=23;
	public const int BLOCK_SCOPE=24;
	public const int BOOLEAN=25;
	public const int BREAK=26;
	public const int BROKEN_DECLARATION=27;
	public const int BROKEN_EXPRESSION=28;
	public const int BYTE=29;
	public const int CASE=30;
	public const int CAST_EXPR=31;
	public const int CATCH=32;
	public const int CATCH_CLAUSE_LIST=33;
	public const int CHAR=34;
	public const int CHARACTER_LITERAL=35;
	public const int CLASS=36;
	public const int CLASS_CONSTRUCTOR_CALL=37;
	public const int CLASS_INSTANCE_INITIALIZER=38;
	public const int CLASS_STATIC_INITIALIZER=39;
	public const int CLASS_TOP_LEVEL_SCOPE=40;
	public const int COLON=41;
	public const int COMMA=42;
	public const int COMMENT=43;
	public const int CONSTRUCTOR_DECL=44;
	public const int CONTINUE=45;
	public const int DEC=46;
	public const int DECIMAL_LITERAL=47;
	public const int DEFAULT=48;
	public const int DIV=49;
	public const int DIV_ASSIGN=50;
	public const int DO=51;
	public const int DOT=52;
	public const int DOTSTAR=53;
	public const int DOUBLE=54;
	public const int ELLIPSIS=55;
	public const int ELSE=56;
	public const int ENUM=57;
	public const int ENUM_TOP_LEVEL_SCOPE=58;
	public const int EQUAL=59;
	public const int ESCAPE_SEQUENCE=60;
	public const int EXPONENT=61;
	public const int EXPR=62;
	public const int EXTENDS=63;
	public const int EXTENDS_BOUND_LIST=64;
	public const int EXTENDS_CLAUSE=65;
	public const int FALSE=66;
	public const int FINAL=67;
	public const int FINALLY=68;
	public const int FLOAT=69;
	public const int FLOATING_POINT_LITERAL=70;
	public const int FLOAT_TYPE_SUFFIX=71;
	public const int FOR=72;
	public const int FORMAL_PARAM_LIST=73;
	public const int FORMAL_PARAM_STD_DECL=74;
	public const int FORMAL_PARAM_VARARG_DECL=75;
	public const int FOR_CONDITION=76;
	public const int FOR_EACH=77;
	public const int FOR_INIT=78;
	public const int FOR_UPDATE=79;
	public const int FUNCTION_METHOD_DECL=80;
	public const int GENERIC_TYPE_ARG_LIST=81;
	public const int GENERIC_TYPE_PARAM_LIST=82;
	public const int GLOBAL=83;
	public const int GREATER_OR_EQUAL=84;
	public const int GREATER_THAN=85;
	public const int HEX_DIGIT=86;
	public const int HEX_LITERAL=87;
	public const int IDENT=88;
	public const int IF=89;
	public const int IMPLEMENTS=90;
	public const int IMPLEMENTS_CLAUSE=91;
	public const int IMPORT=92;
	public const int INC=93;
	public const int INSTANCEOF=94;
	public const int INT=95;
	public const int INTEGER_TYPE_SUFFIX=96;
	public const int INTERFACE=97;
	public const int INTERFACE_TOP_LEVEL_SCOPE=98;
	public const int JAVA_ID_PART=99;
	public const int JAVA_ID_START=100;
	public const int JAVA_SOURCE=101;
	public const int LABELED_STATEMENT=102;
	public const int LBRACK=103;
	public const int LCURLY=104;
	public const int LESS_OR_EQUAL=105;
	public const int LESS_THAN=106;
	public const int LINE_COMMENT=107;
	public const int LOCAL_MODIFIER_LIST=108;
	public const int LOGICAL_AND=109;
	public const int LOGICAL_NOT=110;
	public const int LOGICAL_OR=111;
	public const int LONG=112;
	public const int LPAREN=113;
	public const int MAP_INITIALIZER=114;
	public const int METHOD_CALL=115;
	public const int MINUS=116;
	public const int MINUS_ASSIGN=117;
	public const int MOD=118;
	public const int MODIFIER_LIST=119;
	public const int MOD_ASSIGN=120;
	public const int NATIVE=121;
	public const int NEW=122;
	public const int NOT=123;
	public const int NOT_EQUAL=124;
	public const int NULL=125;
	public const int OCTAL_ESCAPE=126;
	public const int OCTAL_LITERAL=127;
	public const int OR=128;
	public const int OR_ASSIGN=129;
	public const int OVERRIDE=130;
	public const int PACKAGE=131;
	public const int PARENTESIZED_EXPR=132;
	public const int PLUS=133;
	public const int PLUS_ASSIGN=134;
	public const int POST_DEC=135;
	public const int POST_INC=136;
	public const int PRE_DEC=137;
	public const int PRE_INC=138;
	public const int PRIVATE=139;
	public const int PROPERTY_DECL=140;
	public const int PROTECTED=141;
	public const int PUBLIC=142;
	public const int QUALIFIED_TYPE_IDENT=143;
	public const int QUESTION=144;
	public const int RBRACK=145;
	public const int RCURLY=146;
	public const int RETURN=147;
	public const int RPAREN=148;
	public const int SEMI=149;
	public const int SET_INITIALIZER=150;
	public const int SHIFT_LEFT=151;
	public const int SHIFT_LEFT_ASSIGN=152;
	public const int SHIFT_RIGHT=153;
	public const int SHIFT_RIGHT_ASSIGN=154;
	public const int SHORT=155;
	public const int SOQL_LITERAL=156;
	public const int STAR=157;
	public const int STAR_ASSIGN=158;
	public const int STATIC=159;
	public const int STATIC_ARRAY_CREATOR=160;
	public const int STRICTFP=161;
	public const int STRING_LITERAL=162;
	public const int SUPER=163;
	public const int SUPER_CONSTRUCTOR_CALL=164;
	public const int SWITCH=165;
	public const int SWITCH_BLOCK_LABEL_LIST=166;
	public const int SYNCHRONIZED=167;
	public const int TEST_METHOD=168;
	public const int THIS=169;
	public const int THIS_CONSTRUCTOR_CALL=170;
	public const int THROW=171;
	public const int THROWS=172;
	public const int THROWS_CLAUSE=173;
	public const int TRANSIENT=174;
	public const int TRUE=175;
	public const int TRY=176;
	public const int TYPE=177;
	public const int UNARY_MINUS=178;
	public const int UNARY_PLUS=179;
	public const int UNICODE_ESCAPE=180;
	public const int VAR_DECLARATION=181;
	public const int VAR_DECLARATOR=182;
	public const int VAR_DECLARATOR_LIST=183;
	public const int VIRTUAL=184;
	public const int VOID=185;
	public const int VOID_METHOD_DECL=186;
	public const int VOLATILE=187;
	public const int WHILE=188;
	public const int WITHOUT_SHARING=189;
	public const int WITH_SHARING=190;
	public const int WS=191;
	public const int XOR=192;
	public const int XOR_ASSIGN=193;

	public JavaTreeParser(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaTreeParser(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[312+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return JavaTreeParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g"; } }


	 
	   private bool mMessageCollectionEnabled = true;
			    private List<string> mMessages;

			    public void enableErrorMessageCollection(bool pNewState) {
			        mMessageCollectionEnabled = pNewState;
			        if (mMessages == null && mMessageCollectionEnabled) {
			            mMessages = new List<string>();
			        }
			    }
			    
		        public override void EmitErrorMessage(string pMessage)
		        {
		            if (mMessageCollectionEnabled) {
			            mMessages.Add(pMessage);
			        } else {
			            base.EmitErrorMessage(pMessage);
			        }
			    }
			    
			    public List<string> getMessages() {
			        return mMessages;
			    }

			    public bool hasErrors() {
		            return mMessages.Count>0;
			    }

		


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_javaSource();
	partial void LeaveRule_javaSource();
	// $ANTLR start "javaSource"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:50:1: javaSource returns [IApexNode node] : ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? ) ;
	[GrammarRule("javaSource")]
	private IApexNode javaSource()
	{
		EnterRule_javaSource();
		EnterRule("javaSource", 1);
		TraceIn("javaSource", 1);
		IApexNode node = default(IApexNode);

		int javaSource_StartIndex = input.Index;

		IApexNode typeDeclaration1 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "javaSource");
		DebugLocation(50, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:51:5: ( ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:6: ^( JAVA_SOURCE annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )? )
			{
			DebugLocation(52, 6);
			DebugLocation(52, 8);
			Match(input,JAVA_SOURCE,Follow._JAVA_SOURCE_in_javaSource110); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(52, 20);
			PushFollow(Follow._annotationList_in_javaSource112);
			annotationList();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(52, 35);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:35: ( packageDeclaration )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==PACKAGE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:35: packageDeclaration
				{
				DebugLocation(52, 35);
				PushFollow(Follow._packageDeclaration_in_javaSource114);
				packageDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(52, 55);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:55: ( importDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==IMPORT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:55: importDeclaration
					{
					DebugLocation(52, 55);
					PushFollow(Follow._importDeclaration_in_javaSource117);
					importDeclaration();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(52, 74);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:74: ( typeDeclaration )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==AT||LA3_1==CLASS||LA3_1==ENUM||LA3_1==INTERFACE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:52:74: typeDeclaration
				{
				DebugLocation(52, 74);
				PushFollow(Follow._typeDeclaration_in_javaSource120);
				typeDeclaration1=typeDeclaration();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); if (state.failed) return node;

			DebugLocation(52, 92);
			if (state.backtracking == 0)
			{
				node = typeDeclaration1;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("javaSource", 1);
			LeaveRule("javaSource", 1);
			LeaveRule_javaSource();
			if (state.backtracking > 0) { Memoize(input, 1, javaSource_StartIndex); }

		}
		DebugLocation(53, 4);
		} finally { DebugExitRule(GrammarFileName, "javaSource"); }
		return node;

	}
	// $ANTLR end "javaSource"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:55:1: packageDeclaration : ^( PACKAGE qualifiedIdentifier ) ;
	[GrammarRule("packageDeclaration")]
	private void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		int packageDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(55, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:56:5: ( ^( PACKAGE qualifiedIdentifier ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:56:9: ^( PACKAGE qualifiedIdentifier )
			{
			DebugLocation(56, 9);
			DebugLocation(56, 11);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration145); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(56, 19);
			PushFollow(Follow._qualifiedIdentifier_in_packageDeclaration147);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(57, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:59:1: importDeclaration : ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) ;
	[GrammarRule("importDeclaration")]
	private void importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		int importDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(59, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:5: ( ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:9: ^( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? )
			{
			DebugLocation(60, 9);
			DebugLocation(60, 11);
			Match(input,IMPORT,Follow._IMPORT_in_importDeclaration174); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(60, 18);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:18: ( STATIC )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==STATIC))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:18: STATIC
				{
				DebugLocation(60, 18);
				Match(input,STATIC,Follow._STATIC_in_importDeclaration176); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(60, 26);
			PushFollow(Follow._qualifiedIdentifier_in_importDeclaration179);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(60, 46);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:46: ( DOTSTAR )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==DOTSTAR))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:60:46: DOTSTAR
				{
				DebugLocation(60, 46);
				Match(input,DOTSTAR,Follow._DOTSTAR_in_importDeclaration181); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(61, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:63:1: typeDeclaration returns [IApexNode node] : ( ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) );
	[GrammarRule("typeDeclaration")]
	private IApexNode typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 4);
		TraceIn("typeDeclaration", 4);
		IApexNode node = default(IApexNode);

		int typeDeclaration_StartIndex = input.Index;

		CommonTree IDENT2 = default(CommonTree);
		CommonTree IDENT7 = default(CommonTree);
		CommonTree IDENT12 = default(CommonTree);
		List<Modifier> modifierList3 = default(List<Modifier>);
		List<ApexType> genericTypeParameterList4 = default(List<ApexType>);
		List<ApexType> extendsClause5 = default(List<ApexType>);
		List<IApexNode> classTopLevelScope6 = default(List<IApexNode>);
		List<Modifier> modifierList8 = default(List<Modifier>);
		List<ApexType> genericTypeParameterList9 = default(List<ApexType>);
		List<ApexType> extendsClause10 = default(List<ApexType>);
		List<IApexNode> interfaceTopLevelScope11 = default(List<IApexNode>);
		EnumBlock enumTopLevelScope13 = default(EnumBlock);
		List<Modifier> modifierList14 = default(List<Modifier>);

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(63, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:64:5: ( ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope ) | ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope ) | ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope ) | ^( AT modifierList IDENT annotationTopLevelScope ) )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			case ENUM:
				{
				alt12 = 3;
				}
				break;
			case AT:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:64:9: ^( CLASS modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? ( implementsClause )? classTopLevelScope )
				{
				DebugLocation(64, 9);
				DebugLocation(64, 11);
				Match(input,CLASS,Follow._CLASS_in_typeDeclaration211); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(64, 17);
				PushFollow(Follow._modifierList_in_typeDeclaration213);
				modifierList3=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(64, 30);
				IDENT2=(CommonTree)Match(input,IDENT,Follow._IDENT_in_typeDeclaration215); if (state.failed) return node;
				DebugLocation(64, 36);
				if (state.backtracking == 0)
				{
					node = new ApexClassNode(IDENT2.Text, ScopeFactory.Instance.CreateClassScope(),modifierList3);
				}
				DebugLocation(65, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:65:5: ( genericTypeParameterList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:65:6: genericTypeParameterList
					{
					DebugLocation(65, 6);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration225);
					genericTypeParameterList4=genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(65, 31);
					if (state.backtracking == 0)
					{
						(node as ApexClassNode).Generics = genericTypeParameterList4;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(66, 6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:66:6: ( extendsClause )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==EXTENDS_CLAUSE))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:66:7: extendsClause
					{
					DebugLocation(66, 7);
					PushFollow(Follow._extendsClause_in_typeDeclaration237);
					extendsClause5=extendsClause();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(66, 21);
					if (state.backtracking == 0)
					{
						(node as ApexClassNode).Extends = extendsClause5;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(66, 81);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:66:81: ( implementsClause )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==IMPLEMENTS_CLAUSE))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:66:81: implementsClause
					{
					DebugLocation(66, 81);
					PushFollow(Follow._implementsClause_in_typeDeclaration243);
					implementsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(66, 99);
				PushFollow(Follow._classTopLevelScope_in_typeDeclaration246);
				classTopLevelScope6=classTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(66, 119);
				if (state.backtracking == 0)
				{
					node.AddRage(classTopLevelScope6);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:68:9: ^( INTERFACE modifierList IDENT ( genericTypeParameterList )? ( extendsClause )? interfaceTopLevelScope )
				{
				DebugLocation(68, 9);
				DebugLocation(68, 11);
				Match(input,INTERFACE,Follow._INTERFACE_in_typeDeclaration267); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(68, 21);
				PushFollow(Follow._modifierList_in_typeDeclaration269);
				modifierList8=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(68, 34);
				IDENT7=(CommonTree)Match(input,IDENT,Follow._IDENT_in_typeDeclaration271); if (state.failed) return node;
				DebugLocation(68, 41);
				if (state.backtracking == 0)
				{
					node = new ApexInterfaceNode(IDENT7.Text, ScopeFactory.Instance.CreateInterfaceScope(),modifierList8);
				}
				DebugLocation(69, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:69:5: ( genericTypeParameterList )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:69:6: genericTypeParameterList
					{
					DebugLocation(69, 6);
					PushFollow(Follow._genericTypeParameterList_in_typeDeclaration282);
					genericTypeParameterList9=genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(69, 31);
					if (state.backtracking == 0)
					{
						(node as ApexInterfaceNode).Generics = genericTypeParameterList9;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(70, 5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:5: ( extendsClause )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==EXTENDS_CLAUSE))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:70:6: extendsClause
					{
					DebugLocation(70, 6);
					PushFollow(Follow._extendsClause_in_typeDeclaration294);
					extendsClause10=extendsClause();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(70, 20);
					if (state.backtracking == 0)
					{
						(node as ApexInterfaceNode).Extends = extendsClause10;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(70, 84);
				PushFollow(Follow._interfaceTopLevelScope_in_typeDeclaration300);
				interfaceTopLevelScope11=interfaceTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(70, 108);
				if (state.backtracking == 0)
				{
					node.AddRage(interfaceTopLevelScope11);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:72:9: ^( ENUM modifierList IDENT ( implementsClause )? enumTopLevelScope )
				{
				DebugLocation(72, 9);
				DebugLocation(72, 11);
				Match(input,ENUM,Follow._ENUM_in_typeDeclaration319); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(72, 16);
				PushFollow(Follow._modifierList_in_typeDeclaration321);
				modifierList14=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(72, 29);
				IDENT12=(CommonTree)Match(input,IDENT,Follow._IDENT_in_typeDeclaration323); if (state.failed) return node;
				DebugLocation(72, 35);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:72:35: ( implementsClause )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==IMPLEMENTS_CLAUSE))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:72:35: implementsClause
					{
					DebugLocation(72, 35);
					PushFollow(Follow._implementsClause_in_typeDeclaration325);
					implementsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(72, 53);
				PushFollow(Follow._enumTopLevelScope_in_typeDeclaration328);
				enumTopLevelScope13=enumTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(72, 72);
				if (state.backtracking == 0)
				{
					node = new ApexEnum(IDENT12.Text, enumTopLevelScope13, ScopeFactory.Instance.CreateEnumScope(),modifierList14);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:73:9: ^( AT modifierList IDENT annotationTopLevelScope )
				{
				DebugLocation(73, 9);
				DebugLocation(73, 11);
				Match(input,AT,Follow._AT_in_typeDeclaration342); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(73, 14);
				PushFollow(Follow._modifierList_in_typeDeclaration344);
				modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(73, 27);
				Match(input,IDENT,Follow._IDENT_in_typeDeclaration346); if (state.failed) return node;
				DebugLocation(73, 33);
				PushFollow(Follow._annotationTopLevelScope_in_typeDeclaration348);
				annotationTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 4);
			LeaveRule("typeDeclaration", 4);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 4, typeDeclaration_StartIndex); }

		}
		DebugLocation(74, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return node;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_extendsClause();
	partial void LeaveRule_extendsClause();
	// $ANTLR start "extendsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:76:1: extendsClause returns [List<ApexType> types] : ^( EXTENDS_CLAUSE ( type )+ ) ;
	[GrammarRule("extendsClause")]
	private List<ApexType> extendsClause()
	{
		EnterRule_extendsClause();
		EnterRule("extendsClause", 5);
		TraceIn("extendsClause", 5);
		List<ApexType> types = default(List<ApexType>);

		int extendsClause_StartIndex = input.Index;

		ApexType type15 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "extendsClause");
		DebugLocation(76, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:77:5: ( ^( EXTENDS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:78:6: ^( EXTENDS_CLAUSE ( type )+ )
			{
			DebugLocation(78, 6);
			if (state.backtracking == 0)
			{
				types = new List<ApexType>();
			}
			DebugLocation(79, 8);
			DebugLocation(79, 10);
			Match(input,EXTENDS_CLAUSE,Follow._EXTENDS_CLAUSE_in_extendsClause385); if (state.failed) return types;

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(79, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:79:25: ( type )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==TYPE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:79:26: type
					{
					DebugLocation(79, 26);
					PushFollow(Follow._type_in_extendsClause388);
					type15=type();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(79, 31);
					if (state.backtracking == 0)
					{
						types.Add(type15);
					}

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("extendsClause", 5);
			LeaveRule("extendsClause", 5);
			LeaveRule_extendsClause();
			if (state.backtracking > 0) { Memoize(input, 5, extendsClause_StartIndex); }

		}
		DebugLocation(80, 4);
		} finally { DebugExitRule(GrammarFileName, "extendsClause"); }
		return types;

	}
	// $ANTLR end "extendsClause"

	partial void EnterRule_implementsClause();
	partial void LeaveRule_implementsClause();
	// $ANTLR start "implementsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:82:1: implementsClause returns [List<ApexType> types] : ^( IMPLEMENTS_CLAUSE ( type )+ ) ;
	[GrammarRule("implementsClause")]
	private List<ApexType> implementsClause()
	{
		EnterRule_implementsClause();
		EnterRule("implementsClause", 6);
		TraceIn("implementsClause", 6);
		List<ApexType> types = default(List<ApexType>);

		int implementsClause_StartIndex = input.Index;

		ApexType type16 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "implementsClause");
		DebugLocation(82, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:83:5: ( ^( IMPLEMENTS_CLAUSE ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:83:9: ^( IMPLEMENTS_CLAUSE ( type )+ )
			{
			DebugLocation(83, 9);
			DebugLocation(83, 11);
			Match(input,IMPLEMENTS_CLAUSE,Follow._IMPLEMENTS_CLAUSE_in_implementsClause424); if (state.failed) return types;

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(83, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:83:29: ( type )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==TYPE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:83:30: type
					{
					DebugLocation(83, 30);
					PushFollow(Follow._type_in_implementsClause427);
					type16=type();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(83, 35);
					if (state.backtracking == 0)
					{
						types.Add(type16);
					}

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implementsClause", 6);
			LeaveRule("implementsClause", 6);
			LeaveRule_implementsClause();
			if (state.backtracking > 0) { Memoize(input, 6, implementsClause_StartIndex); }

		}
		DebugLocation(84, 4);
		} finally { DebugExitRule(GrammarFileName, "implementsClause"); }
		return types;

	}
	// $ANTLR end "implementsClause"

	partial void EnterRule_genericTypeParameterList();
	partial void LeaveRule_genericTypeParameterList();
	// $ANTLR start "genericTypeParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:86:1: genericTypeParameterList returns [List<ApexType> types] : ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) ;
	[GrammarRule("genericTypeParameterList")]
	private List<ApexType> genericTypeParameterList()
	{
		EnterRule_genericTypeParameterList();
		EnterRule("genericTypeParameterList", 7);
		TraceIn("genericTypeParameterList", 7);
		List<ApexType> types = default(List<ApexType>);

		int genericTypeParameterList_StartIndex = input.Index;

		ApexType genericTypeParameter17 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "genericTypeParameterList");
		DebugLocation(86, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:87:5: ( ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:88:6: ^( GENERIC_TYPE_PARAM_LIST ( genericTypeParameter )+ )
			{
			DebugLocation(88, 6);
			if (state.backtracking == 0)
			{
				types = new List<ApexType>();
			}
			DebugLocation(89, 6);
			DebugLocation(89, 8);
			Match(input,GENERIC_TYPE_PARAM_LIST,Follow._GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList475); if (state.failed) return types;

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(89, 32);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:89:32: ( genericTypeParameter )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==IDENT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:89:33: genericTypeParameter
					{
					DebugLocation(89, 33);
					PushFollow(Follow._genericTypeParameter_in_genericTypeParameterList478);
					genericTypeParameter17=genericTypeParameter();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(89, 54);
					if (state.backtracking == 0)
					{
						types.Add(genericTypeParameter17);
					}

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameterList", 7);
			LeaveRule("genericTypeParameterList", 7);
			LeaveRule_genericTypeParameterList();
			if (state.backtracking > 0) { Memoize(input, 7, genericTypeParameterList_StartIndex); }

		}
		DebugLocation(90, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameterList"); }
		return types;

	}
	// $ANTLR end "genericTypeParameterList"

	partial void EnterRule_genericTypeParameter();
	partial void LeaveRule_genericTypeParameter();
	// $ANTLR start "genericTypeParameter"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:92:1: genericTypeParameter returns [ApexType type] : ^( IDENT ( bound )? ) ;
	[GrammarRule("genericTypeParameter")]
	private ApexType genericTypeParameter()
	{
		EnterRule_genericTypeParameter();
		EnterRule("genericTypeParameter", 8);
		TraceIn("genericTypeParameter", 8);
		ApexType type = default(ApexType);

		int genericTypeParameter_StartIndex = input.Index;

		CommonTree IDENT18 = default(CommonTree);
		IList<ApexType> bound19 = default(IList<ApexType>);

		try { DebugEnterRule(GrammarFileName, "genericTypeParameter");
		DebugLocation(92, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:93:5: ( ^( IDENT ( bound )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:6: ^( IDENT ( bound )? )
			{
			DebugLocation(94, 6);
			DebugLocation(94, 8);
			IDENT18=(CommonTree)Match(input,IDENT,Follow._IDENT_in_genericTypeParameter513); if (state.failed) return type;

			DebugLocation(94, 14);
			if (state.backtracking == 0)
			{
				type = new ApexType(IDENT18.Text);
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return type;
				DebugLocation(94, 50);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:50: ( bound )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==EXTENDS_BOUND_LIST))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:94:51: bound
					{
					DebugLocation(94, 51);
					PushFollow(Follow._bound_in_genericTypeParameter518);
					bound19=bound();
					PopFollow();
					if (state.failed) return type;
					DebugLocation(94, 57);
					if (state.backtracking == 0)
					{
						type.AddTypes(bound19);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); if (state.failed) return type;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeParameter", 8);
			LeaveRule("genericTypeParameter", 8);
			LeaveRule_genericTypeParameter();
			if (state.backtracking > 0) { Memoize(input, 8, genericTypeParameter_StartIndex); }

		}
		DebugLocation(95, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeParameter"); }
		return type;

	}
	// $ANTLR end "genericTypeParameter"

	partial void EnterRule_bound();
	partial void LeaveRule_bound();
	// $ANTLR start "bound"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:97:1: bound returns [IList<ApexType> types] : ^( EXTENDS_BOUND_LIST ( type )+ ) ;
	[GrammarRule("bound")]
	private IList<ApexType> bound()
	{
		EnterRule_bound();
		EnterRule("bound", 9);
		TraceIn("bound", 9);
		IList<ApexType> types = default(IList<ApexType>);

		int bound_StartIndex = input.Index;

		ApexType type20 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "bound");
		DebugLocation(97, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:98:5: ( ^( EXTENDS_BOUND_LIST ( type )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:99:2: ^( EXTENDS_BOUND_LIST ( type )+ )
			{
			DebugLocation(99, 2);
			if (state.backtracking == 0)
			{
				 types = new List<ApexType>();
			}
			DebugLocation(100, 2);
			DebugLocation(100, 4);
			Match(input,EXTENDS_BOUND_LIST,Follow._EXTENDS_BOUND_LIST_in_bound559); if (state.failed) return types;

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(100, 23);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:100:23: ( type )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==TYPE))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:100:24: type
					{
					DebugLocation(100, 24);
					PushFollow(Follow._type_in_bound562);
					type20=type();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(100, 29);
					if (state.backtracking == 0)
					{
						types.Add(type20);
					}

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bound", 9);
			LeaveRule("bound", 9);
			LeaveRule_bound();
			if (state.backtracking > 0) { Memoize(input, 9, bound_StartIndex); }

		}
		DebugLocation(101, 4);
		} finally { DebugExitRule(GrammarFileName, "bound"); }
		return types;

	}
	// $ANTLR end "bound"

	partial void EnterRule_enumTopLevelScope();
	partial void LeaveRule_enumTopLevelScope();
	// $ANTLR start "enumTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:103:1: enumTopLevelScope returns [EnumBlock enumBlock] : ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? ) ;
	[GrammarRule("enumTopLevelScope")]
	private EnumBlock enumTopLevelScope()
	{
		EnterRule_enumTopLevelScope();
		EnterRule("enumTopLevelScope", 10);
		TraceIn("enumTopLevelScope", 10);
		EnumBlock enumBlock = default(EnumBlock);

		int enumTopLevelScope_StartIndex = input.Index;

		string enumConstant21 = default(string);

		try { DebugEnterRule(GrammarFileName, "enumTopLevelScope");
		DebugLocation(103, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return enumBlock; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:104:5: ( ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:105:6: ^( ENUM_TOP_LEVEL_SCOPE ( enumConstant )+ ( classTopLevelScope )? )
			{
			DebugLocation(105, 6);
			if (state.backtracking == 0)
			{
				enumBlock = new EnumBlock();
			}
			DebugLocation(106, 8);
			DebugLocation(106, 10);
			Match(input,ENUM_TOP_LEVEL_SCOPE,Follow._ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope603); if (state.failed) return enumBlock;

			Match(input, TokenTypes.Down, null); if (state.failed) return enumBlock;
			DebugLocation(106, 31);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:31: ( enumConstant )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==IDENT))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:32: enumConstant
					{
					DebugLocation(106, 32);
					PushFollow(Follow._enumConstant_in_enumTopLevelScope606);
					enumConstant21=enumConstant();
					PopFollow();
					if (state.failed) return enumBlock;
					DebugLocation(106, 45);
					if (state.backtracking == 0)
					{
						enumBlock.AddName(enumConstant21);
					}

					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					if (state.backtracking>0) {state.failed=true; return enumBlock;}
					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(106, 88);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:88: ( classTopLevelScope )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:106:88: classTopLevelScope
				{
				DebugLocation(106, 88);
				PushFollow(Follow._classTopLevelScope_in_enumTopLevelScope612);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return enumBlock;

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); if (state.failed) return enumBlock;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumTopLevelScope", 10);
			LeaveRule("enumTopLevelScope", 10);
			LeaveRule_enumTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 10, enumTopLevelScope_StartIndex); }

		}
		DebugLocation(107, 4);
		} finally { DebugExitRule(GrammarFileName, "enumTopLevelScope"); }
		return enumBlock;

	}
	// $ANTLR end "enumTopLevelScope"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:108:1: enumConstant returns [string name] : ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) ;
	[GrammarRule("enumConstant")]
	private string enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 11);
		TraceIn("enumConstant", 11);
		string name = default(string);

		int enumConstant_StartIndex = input.Index;

		CommonTree IDENT22 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(108, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return name; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:5: ( ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:9: ^( IDENT annotationList ( arguments )? ( classTopLevelScope )? )
			{
			DebugLocation(109, 9);
			DebugLocation(109, 11);
			IDENT22=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enumConstant636); if (state.failed) return name;

			Match(input, TokenTypes.Down, null); if (state.failed) return name;
			DebugLocation(109, 17);
			PushFollow(Follow._annotationList_in_enumConstant638);
			annotationList();
			PopFollow();
			if (state.failed) return name;
			DebugLocation(109, 32);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:32: ( arguments )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==ARGUMENT_LIST))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:32: arguments
				{
				DebugLocation(109, 32);
				PushFollow(Follow._arguments_in_enumConstant640);
				arguments();
				PopFollow();
				if (state.failed) return name;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(109, 43);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:43: ( classTopLevelScope )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:109:43: classTopLevelScope
				{
				DebugLocation(109, 43);
				PushFollow(Follow._classTopLevelScope_in_enumConstant643);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return name;

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); if (state.failed) return name;

			DebugLocation(109, 64);
			if (state.backtracking == 0)
			{
				name = IDENT22.Text;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstant", 11);
			LeaveRule("enumConstant", 11);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 11, enumConstant_StartIndex); }

		}
		DebugLocation(110, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return name;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_classTopLevelScope();
	partial void LeaveRule_classTopLevelScope();
	// $ANTLR start "classTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:113:1: classTopLevelScope returns [List<IApexNode> nodes] : ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) ;
	[GrammarRule("classTopLevelScope")]
	private List<IApexNode> classTopLevelScope()
	{
		EnterRule_classTopLevelScope();
		EnterRule("classTopLevelScope", 12);
		TraceIn("classTopLevelScope", 12);
		List<IApexNode> nodes = default(List<IApexNode>);

		int classTopLevelScope_StartIndex = input.Index;

		IApexNode classScopeDeclarations23 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "classTopLevelScope");
		DebugLocation(113, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return nodes; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:114:5: ( ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:115:8: ^( CLASS_TOP_LEVEL_SCOPE ( classScopeDeclarations )* )
			{
			DebugLocation(115, 8);
			DebugLocation(115, 10);
			Match(input,CLASS_TOP_LEVEL_SCOPE,Follow._CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope685); if (state.failed) return nodes;

			DebugLocation(115, 32);
			if (state.backtracking == 0)
			{
				nodes = new List<IApexNode>();
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return nodes;
				DebugLocation(115, 65);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:115:65: ( classScopeDeclarations )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if ((LA22_1==AT||LA22_1==CLASS||(LA22_1>=CLASS_INSTANCE_INITIALIZER && LA22_1<=CLASS_STATIC_INITIALIZER)||LA22_1==CONSTRUCTOR_DECL||LA22_1==ENUM||LA22_1==FUNCTION_METHOD_DECL||LA22_1==INTERFACE||LA22_1==PROPERTY_DECL||LA22_1==VAR_DECLARATION||LA22_1==VOID_METHOD_DECL))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:115:66: classScopeDeclarations
						{
						DebugLocation(115, 66);
						PushFollow(Follow._classScopeDeclarations_in_classTopLevelScope690);
						classScopeDeclarations23=classScopeDeclarations();
						PopFollow();
						if (state.failed) return nodes;
						DebugLocation(115, 89);
						if (state.backtracking == 0)
						{
							nodes.Add(classScopeDeclarations23);
						}

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); if (state.failed) return nodes;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classTopLevelScope", 12);
			LeaveRule("classTopLevelScope", 12);
			LeaveRule_classTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 12, classTopLevelScope_StartIndex); }

		}
		DebugLocation(116, 4);
		} finally { DebugExitRule(GrammarFileName, "classTopLevelScope"); }
		return nodes;

	}
	// $ANTLR end "classTopLevelScope"

	partial void EnterRule_classScopeDeclarations();
	partial void LeaveRule_classScopeDeclarations();
	// $ANTLR start "classScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:118:1: classScopeDeclarations returns [IApexNode node] : ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | typeDeclaration );
	[GrammarRule("classScopeDeclarations")]
	private IApexNode classScopeDeclarations()
	{
		EnterRule_classScopeDeclarations();
		EnterRule("classScopeDeclarations", 13);
		TraceIn("classScopeDeclarations", 13);
		IApexNode node = default(IApexNode);

		int classScopeDeclarations_StartIndex = input.Index;

		CommonTree IDENT27 = default(CommonTree);
		CommonTree IDENT32 = default(CommonTree);
		CommonTree IDENT39 = default(CommonTree);
		IApexNode block24 = default(IApexNode);
		IApexNode block25 = default(IApexNode);
		IApexNode block26 = default(IApexNode);
		List<Modifier> modifierList28 = default(List<Modifier>);
		ApexType type29 = default(ApexType);
		List<SignatureParam> formalParameterList30 = default(List<SignatureParam>);
		IApexNode block31 = default(IApexNode);
		List<Modifier> modifierList33 = default(List<Modifier>);
		List<SignatureParam> formalParameterList34 = default(List<SignatureParam>);
		ApexType type35 = default(ApexType);
		List<Modifier> modifierList36 = default(List<Modifier>);
		List<ApexField> variableDeclaratorList37 = default(List<ApexField>);
		List<Modifier> modifierList38 = default(List<Modifier>);
		ApexType type40 = default(ApexType);
		List<Modifier> modifierList41 = default(List<Modifier>);
		List<IApexNode> propertyDeclaration42 = default(List<IApexNode>);
		IApexNode typeDeclaration43 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "classScopeDeclarations");
		DebugLocation(118, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:5: ( ^( CLASS_INSTANCE_INITIALIZER block ) | ^( CLASS_STATIC_INITIALIZER block ) | ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) | ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration ) | typeDeclaration )
			int alt32=8;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case CLASS_INSTANCE_INITIALIZER:
				{
				alt32 = 1;
				}
				break;
			case CLASS_STATIC_INITIALIZER:
				{
				alt32 = 2;
				}
				break;
			case FUNCTION_METHOD_DECL:
				{
				alt32 = 3;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt32 = 4;
				}
				break;
			case VAR_DECLARATION:
				{
				alt32 = 5;
				}
				break;
			case CONSTRUCTOR_DECL:
				{
				alt32 = 6;
				}
				break;
			case PROPERTY_DECL:
				{
				alt32 = 7;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt32 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:119:9: ^( CLASS_INSTANCE_INITIALIZER block )
				{
				DebugLocation(119, 9);
				DebugLocation(119, 11);
				Match(input,CLASS_INSTANCE_INITIALIZER,Follow._CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations725); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(119, 38);
				PushFollow(Follow._block_in_classScopeDeclarations727);
				block24=block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(119, 45);
				if (state.backtracking == 0)
				{
					node =  new ApexMethod(block24);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:120:9: ^( CLASS_STATIC_INITIALIZER block )
				{
				DebugLocation(120, 9);
				DebugLocation(120, 11);
				Match(input,CLASS_STATIC_INITIALIZER,Follow._CLASS_STATIC_INITIALIZER_in_classScopeDeclarations741); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(120, 36);
				PushFollow(Follow._block_in_classScopeDeclarations743);
				block25=block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(120, 42);
				if (state.backtracking == 0)
				{
					node =  new ApexMethod(block25);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:121:9: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
				{
				DebugLocation(121, 9);
				if (state.backtracking == 0)
				{
					node = new ApexMethod();
				}
				DebugLocation(122, 6);
				DebugLocation(122, 8);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_classScopeDeclarations763); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(122, 29);
				PushFollow(Follow._modifierList_in_classScopeDeclarations765);
				modifierList28=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(122, 42);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:42: ( genericTypeParameterList )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:42: genericTypeParameterList
					{
					DebugLocation(122, 42);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations767);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(122, 68);
				PushFollow(Follow._type_in_classScopeDeclarations770);
				type29=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(122, 73);
				IDENT27=(CommonTree)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations772); if (state.failed) return node;
				DebugLocation(122, 79);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations774);
				formalParameterList30=formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(122, 99);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:99: ( arrayDeclaratorList )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==ARRAY_DECLARATOR_LIST))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:99: arrayDeclaratorList
					{
					DebugLocation(122, 99);
					PushFollow(Follow._arrayDeclaratorList_in_classScopeDeclarations776);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(122, 120);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:120: ( throwsClause )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==THROWS_CLAUSE))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:120: throwsClause
					{
					DebugLocation(122, 120);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations779);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(122, 134);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:134: ( block )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==BLOCK_SCOPE))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:122:135: block
					{
					DebugLocation(122, 135);
					PushFollow(Follow._block_in_classScopeDeclarations783);
					block26=block();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(122, 141);
					if (state.backtracking == 0)
					{
						(node as ApexMethod).Block = block26;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(123, 6);
				if (state.backtracking == 0)
				{
					var method = node as ApexMethod;method.Ident = IDENT27.Text;method.ModifierList = modifierList28; method.Type = type29; method.parameters = formalParameterList30;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:124:7: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
				{
				DebugLocation(124, 7);
				if (state.backtracking == 0)
				{
					node = new ApexMethod();
				}
				DebugLocation(125, 7);
				DebugLocation(125, 9);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_classScopeDeclarations812); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(125, 26);
				PushFollow(Follow._modifierList_in_classScopeDeclarations814);
				modifierList33=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(125, 39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:39: ( genericTypeParameterList )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:39: genericTypeParameterList
					{
					DebugLocation(125, 39);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations816);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(125, 65);
				IDENT32=(CommonTree)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations819); if (state.failed) return node;
				DebugLocation(125, 71);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations821);
				formalParameterList34=formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(125, 91);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:91: ( throwsClause )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==THROWS_CLAUSE))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:91: throwsClause
					{
					DebugLocation(125, 91);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations823);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(125, 105);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:105: ( block )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==BLOCK_SCOPE))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:125:106: block
					{
					DebugLocation(125, 106);
					PushFollow(Follow._block_in_classScopeDeclarations827);
					block31=block();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(125, 112);
					if (state.backtracking == 0)
					{
						(node as ApexMethod).Block = block31;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(126, 7);
				if (state.backtracking == 0)
				{
					var method = node as ApexMethod;method.Ident = IDENT32.Text;method.ModifierList = modifierList33;  method.parameters = formalParameterList34;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:127:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(127, 9);
				DebugLocation(127, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_classScopeDeclarations851); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(127, 27);
				PushFollow(Follow._modifierList_in_classScopeDeclarations853);
				modifierList36=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(127, 40);
				PushFollow(Follow._type_in_classScopeDeclarations855);
				type35=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(127, 45);
				PushFollow(Follow._variableDeclaratorList_in_classScopeDeclarations857);
				variableDeclaratorList37=variableDeclaratorList();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(127, 68);
				if (state.backtracking == 0)
				{
					node = new ApexFieldList(type35, modifierList36, variableDeclaratorList37);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:9: ^( CONSTRUCTOR_DECL modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
				{
				DebugLocation(128, 9);
				DebugLocation(128, 11);
				Match(input,CONSTRUCTOR_DECL,Follow._CONSTRUCTOR_DECL_in_classScopeDeclarations870); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(128, 28);
				PushFollow(Follow._modifierList_in_classScopeDeclarations872);
				modifierList38=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(128, 41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:41: ( genericTypeParameterList )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:41: genericTypeParameterList
					{
					DebugLocation(128, 41);
					PushFollow(Follow._genericTypeParameterList_in_classScopeDeclarations874);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(128, 67);
				PushFollow(Follow._formalParameterList_in_classScopeDeclarations877);
				formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(128, 87);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:87: ( throwsClause )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==THROWS_CLAUSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:128:87: throwsClause
					{
					DebugLocation(128, 87);
					PushFollow(Follow._throwsClause_in_classScopeDeclarations879);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(128, 101);
				PushFollow(Follow._block_in_classScopeDeclarations882);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(128, 107);
				if (state.backtracking == 0)
				{
					node = new ApexConstructor(modifierList38);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:129:9: ^( PROPERTY_DECL modifierList type IDENT propertyDeclaration )
				{
				DebugLocation(129, 9);
				DebugLocation(129, 11);
				Match(input,PROPERTY_DECL,Follow._PROPERTY_DECL_in_classScopeDeclarations895); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(129, 25);
				PushFollow(Follow._modifierList_in_classScopeDeclarations897);
				modifierList41=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(129, 38);
				PushFollow(Follow._type_in_classScopeDeclarations899);
				type40=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(129, 43);
				IDENT39=(CommonTree)Match(input,IDENT,Follow._IDENT_in_classScopeDeclarations901); if (state.failed) return node;
				DebugLocation(129, 49);
				PushFollow(Follow._propertyDeclaration_in_classScopeDeclarations903);
				propertyDeclaration42=propertyDeclaration();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(129, 70);
				if (state.backtracking == 0)
				{
					node = new ApexProperty(IDENT39.Text, type40, modifierList41, propertyDeclaration42);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:130:9: typeDeclaration
				{
				DebugLocation(130, 9);
				PushFollow(Follow._typeDeclaration_in_classScopeDeclarations916);
				typeDeclaration43=typeDeclaration();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(130, 25);
				if (state.backtracking == 0)
				{
					node = typeDeclaration43;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classScopeDeclarations", 13);
			LeaveRule("classScopeDeclarations", 13);
			LeaveRule_classScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 13, classScopeDeclarations_StartIndex); }

		}
		DebugLocation(131, 4);
		} finally { DebugExitRule(GrammarFileName, "classScopeDeclarations"); }
		return node;

	}
	// $ANTLR end "classScopeDeclarations"

	partial void EnterRule_propertyDeclaration();
	partial void LeaveRule_propertyDeclaration();
	// $ANTLR start "propertyDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:133:1: propertyDeclaration returns [List<IApexNode> nodes] : ( ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI |setBlock= block ) ( ( modifier )? getRule ( SEMI |getBlock= block ) )? '}' ) );
	[GrammarRule("propertyDeclaration")]
	private List<IApexNode> propertyDeclaration()
	{
		EnterRule_propertyDeclaration();
		EnterRule("propertyDeclaration", 14);
		TraceIn("propertyDeclaration", 14);
		List<IApexNode> nodes = default(List<IApexNode>);

		int propertyDeclaration_StartIndex = input.Index;

		IApexNode getBlock = default(IApexNode);
		IApexNode setBlock = default(IApexNode);
		string getRule44 = default(string);
		string setRule45 = default(string);
		string setRule46 = default(string);
		string getRule47 = default(string);

		try { DebugEnterRule(GrammarFileName, "propertyDeclaration");
		DebugLocation(133, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return nodes; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:134:2: ( ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' ) | ( '{' ( modifier )? setRule ( SEMI |setBlock= block ) ( ( modifier )? getRule ( SEMI |getBlock= block ) )? '}' ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==LCURLY))
			{
				int LA43_2 = input.LA(2);

				if ((EvaluatePredicate(synpred46_JavaTreeParser_fragment)))
				{
					alt43 = 1;
				}
				else if ((true))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return nodes;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return nodes;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:135:2: ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' )
				{
				DebugLocation(135, 2);
				if (state.backtracking == 0)
				{
					nodes = new List<IApexNode>();
				}
				DebugLocation(136, 2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:2: ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:3: '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}'
				{
				DebugLocation(136, 3);
				Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration940); if (state.failed) return nodes;
				DebugLocation(136, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:7: ( modifier )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==ABSTRACT||LA33_1==AT||LA33_1==FINAL||LA33_1==GLOBAL||LA33_1==NATIVE||LA33_1==OVERRIDE||LA33_1==PRIVATE||(LA33_1>=PROTECTED && LA33_1<=PUBLIC)||LA33_1==STATIC||LA33_1==STRICTFP||(LA33_1>=SYNCHRONIZED && LA33_1<=TEST_METHOD)||LA33_1==TRANSIENT||LA33_1==VIRTUAL||LA33_1==VOLATILE||(LA33_1>=WITHOUT_SHARING && LA33_1<=WITH_SHARING)))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:7: modifier
					{
					DebugLocation(136, 7);
					PushFollow(Follow._modifier_in_propertyDeclaration942);
					modifier();
					PopFollow();
					if (state.failed) return nodes;

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(136, 17);
				PushFollow(Follow._getRule_in_propertyDeclaration945);
				getRule44=getRule();
				PopFollow();
				if (state.failed) return nodes;
				DebugLocation(136, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:25: ( SEMI |getBlock= block )
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==SEMI))
				{
					alt34 = 1;
				}
				else if ((LA34_1==BLOCK_SCOPE))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return nodes;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:26: SEMI
					{
					DebugLocation(136, 26);
					Match(input,SEMI,Follow._SEMI_in_propertyDeclaration948); if (state.failed) return nodes;
					DebugLocation(136, 30);
					if (state.backtracking == 0)
					{
						nodes.Add(new Acessor(AcessorType.Get, getRule44));
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:88: getBlock= block
					{
					DebugLocation(136, 97);
					PushFollow(Follow._block_in_propertyDeclaration955);
					getBlock=block();
					PopFollow();
					if (state.failed) return nodes;
					DebugLocation(136, 105);
					if (state.backtracking == 0)
					{
						nodes.Add(new Acessor(AcessorType.Get, getBlock, getRule44));
					}

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(137, 3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:3: ( ( modifier )? setRule ( SEMI |setBlock= block ) )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==ABSTRACT||LA37_1==AT||LA37_1==FINAL||LA37_1==GLOBAL||LA37_1==IDENT||LA37_1==NATIVE||LA37_1==OVERRIDE||LA37_1==PRIVATE||(LA37_1>=PROTECTED && LA37_1<=PUBLIC)||LA37_1==STATIC||LA37_1==STRICTFP||(LA37_1>=SYNCHRONIZED && LA37_1<=TEST_METHOD)||LA37_1==TRANSIENT||LA37_1==VIRTUAL||LA37_1==VOLATILE||(LA37_1>=WITHOUT_SHARING && LA37_1<=WITH_SHARING)))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: ( modifier )? setRule ( SEMI |setBlock= block )
					{
					DebugLocation(137, 4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: ( modifier )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==ABSTRACT||LA35_1==AT||LA35_1==FINAL||LA35_1==GLOBAL||LA35_1==NATIVE||LA35_1==OVERRIDE||LA35_1==PRIVATE||(LA35_1>=PROTECTED && LA35_1<=PUBLIC)||LA35_1==STATIC||LA35_1==STRICTFP||(LA35_1>=SYNCHRONIZED && LA35_1<=TEST_METHOD)||LA35_1==TRANSIENT||LA35_1==VIRTUAL||LA35_1==VOLATILE||(LA35_1>=WITHOUT_SHARING && LA35_1<=WITH_SHARING)))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: modifier
						{
						DebugLocation(137, 4);
						PushFollow(Follow._modifier_in_propertyDeclaration963);
						modifier();
						PopFollow();
						if (state.failed) return nodes;

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(137, 14);
					PushFollow(Follow._setRule_in_propertyDeclaration966);
					setRule45=setRule();
					PopFollow();
					if (state.failed) return nodes;
					DebugLocation(137, 22);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:22: ( SEMI |setBlock= block )
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					int LA36_1 = input.LA(1);

					if ((LA36_1==SEMI))
					{
						alt36 = 1;
					}
					else if ((LA36_1==BLOCK_SCOPE))
					{
						alt36 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return nodes;}
						NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:23: SEMI
						{
						DebugLocation(137, 23);
						Match(input,SEMI,Follow._SEMI_in_propertyDeclaration969); if (state.failed) return nodes;
						DebugLocation(137, 27);
						if (state.backtracking == 0)
						{
							nodes.Add(new Acessor(AcessorType.Set, setRule45));
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:85: setBlock= block
						{
						DebugLocation(137, 94);
						PushFollow(Follow._block_in_propertyDeclaration976);
						setBlock=block();
						PopFollow();
						if (state.failed) return nodes;
						DebugLocation(137, 102);
						if (state.backtracking == 0)
						{
							nodes.Add(new Acessor(AcessorType.Set, setBlock, setRule45));
						}

						}
						break;

					}
					} finally { DebugExitSubRule(36); }


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(137, 180);
				Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration984); if (state.failed) return nodes;

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:4: ( '{' ( modifier )? setRule ( SEMI |setBlock= block ) ( ( modifier )? getRule ( SEMI |getBlock= block ) )? '}' )
				{
				DebugLocation(138, 4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:4: ( '{' ( modifier )? setRule ( SEMI |setBlock= block ) ( ( modifier )? getRule ( SEMI |getBlock= block ) )? '}' )
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:5: '{' ( modifier )? setRule ( SEMI |setBlock= block ) ( ( modifier )? getRule ( SEMI |getBlock= block ) )? '}'
				{
				DebugLocation(138, 5);
				Match(input,LCURLY,Follow._LCURLY_in_propertyDeclaration991); if (state.failed) return nodes;
				DebugLocation(138, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:9: ( modifier )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==ABSTRACT||LA38_1==AT||LA38_1==FINAL||LA38_1==GLOBAL||LA38_1==NATIVE||LA38_1==OVERRIDE||LA38_1==PRIVATE||(LA38_1>=PROTECTED && LA38_1<=PUBLIC)||LA38_1==STATIC||LA38_1==STRICTFP||(LA38_1>=SYNCHRONIZED && LA38_1<=TEST_METHOD)||LA38_1==TRANSIENT||LA38_1==VIRTUAL||LA38_1==VOLATILE||(LA38_1>=WITHOUT_SHARING && LA38_1<=WITH_SHARING)))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:9: modifier
					{
					DebugLocation(138, 9);
					PushFollow(Follow._modifier_in_propertyDeclaration993);
					modifier();
					PopFollow();
					if (state.failed) return nodes;

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(138, 19);
				PushFollow(Follow._setRule_in_propertyDeclaration996);
				setRule46=setRule();
				PopFollow();
				if (state.failed) return nodes;
				DebugLocation(138, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:27: ( SEMI |setBlock= block )
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==SEMI))
				{
					alt39 = 1;
				}
				else if ((LA39_1==BLOCK_SCOPE))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return nodes;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:28: SEMI
					{
					DebugLocation(138, 28);
					Match(input,SEMI,Follow._SEMI_in_propertyDeclaration999); if (state.failed) return nodes;
					DebugLocation(138, 32);
					if (state.backtracking == 0)
					{
						nodes.Add(new Acessor(AcessorType.Set, setRule46));
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:138:90: setBlock= block
					{
					DebugLocation(138, 99);
					PushFollow(Follow._block_in_propertyDeclaration1006);
					setBlock=block();
					PopFollow();
					if (state.failed) return nodes;
					DebugLocation(138, 107);
					if (state.backtracking == 0)
					{
						nodes.Add(new Acessor(AcessorType.Set, setBlock, setRule46));
					}

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(139, 3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:3: ( ( modifier )? getRule ( SEMI |getBlock= block ) )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==ABSTRACT||LA42_1==AT||LA42_1==FINAL||LA42_1==GLOBAL||LA42_1==IDENT||LA42_1==NATIVE||LA42_1==OVERRIDE||LA42_1==PRIVATE||(LA42_1>=PROTECTED && LA42_1<=PUBLIC)||LA42_1==STATIC||LA42_1==STRICTFP||(LA42_1>=SYNCHRONIZED && LA42_1<=TEST_METHOD)||LA42_1==TRANSIENT||LA42_1==VIRTUAL||LA42_1==VOLATILE||(LA42_1>=WITHOUT_SHARING && LA42_1<=WITH_SHARING)))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:4: ( modifier )? getRule ( SEMI |getBlock= block )
					{
					DebugLocation(139, 4);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:4: ( modifier )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==ABSTRACT||LA40_1==AT||LA40_1==FINAL||LA40_1==GLOBAL||LA40_1==NATIVE||LA40_1==OVERRIDE||LA40_1==PRIVATE||(LA40_1>=PROTECTED && LA40_1<=PUBLIC)||LA40_1==STATIC||LA40_1==STRICTFP||(LA40_1>=SYNCHRONIZED && LA40_1<=TEST_METHOD)||LA40_1==TRANSIENT||LA40_1==VIRTUAL||LA40_1==VOLATILE||(LA40_1>=WITHOUT_SHARING && LA40_1<=WITH_SHARING)))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:4: modifier
						{
						DebugLocation(139, 4);
						PushFollow(Follow._modifier_in_propertyDeclaration1014);
						modifier();
						PopFollow();
						if (state.failed) return nodes;

						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(139, 14);
					PushFollow(Follow._getRule_in_propertyDeclaration1017);
					getRule47=getRule();
					PopFollow();
					if (state.failed) return nodes;
					DebugLocation(139, 22);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:22: ( SEMI |getBlock= block )
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==SEMI))
					{
						alt41 = 1;
					}
					else if ((LA41_1==BLOCK_SCOPE))
					{
						alt41 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return nodes;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:23: SEMI
						{
						DebugLocation(139, 23);
						Match(input,SEMI,Follow._SEMI_in_propertyDeclaration1020); if (state.failed) return nodes;
						DebugLocation(139, 27);
						if (state.backtracking == 0)
						{
							nodes.Add(new Acessor(AcessorType.Get, getRule47));
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:139:85: getBlock= block
						{
						DebugLocation(139, 94);
						PushFollow(Follow._block_in_propertyDeclaration1027);
						getBlock=block();
						PopFollow();
						if (state.failed) return nodes;
						DebugLocation(139, 102);
						if (state.backtracking == 0)
						{
							nodes.Add(new Acessor(AcessorType.Get, getBlock, getRule47));
						}

						}
						break;

					}
					} finally { DebugExitSubRule(41); }


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(139, 181);
				Match(input,RCURLY,Follow._RCURLY_in_propertyDeclaration1036); if (state.failed) return nodes;

				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyDeclaration", 14);
			LeaveRule("propertyDeclaration", 14);
			LeaveRule_propertyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, propertyDeclaration_StartIndex); }

		}
		DebugLocation(140, 0);
		} finally { DebugExitRule(GrammarFileName, "propertyDeclaration"); }
		return nodes;

	}
	// $ANTLR end "propertyDeclaration"

	partial void EnterRule_getRule();
	partial void LeaveRule_getRule();
	// $ANTLR start "getRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:141:1: getRule returns [string Name] :{...}? IDENT ;
	[GrammarRule("getRule")]
	private string getRule()
	{
		EnterRule_getRule();
		EnterRule("getRule", 15);
		TraceIn("getRule", 15);
		string Name = default(string);

		int getRule_StartIndex = input.Index;

		CommonTree IDENT48 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "getRule");
		DebugLocation(141, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return Name; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:142:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:143:5: {...}? IDENT
			{
			DebugLocation(143, 5);
			if (!((((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text == "get"))))
			{
				if (state.backtracking>0) {state.failed=true; return Name;}
				throw new FailedPredicateException(input, "getRule", "((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text == \"get\")");
			}
			DebugLocation(143, 86);
			IDENT48=(CommonTree)Match(input,IDENT,Follow._IDENT_in_getRule1055); if (state.failed) return Name;
			DebugLocation(143, 92);
			if (state.backtracking == 0)
			{
				Name = IDENT48.Text;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("getRule", 15);
			LeaveRule("getRule", 15);
			LeaveRule_getRule();
			if (state.backtracking > 0) { Memoize(input, 15, getRule_StartIndex); }

		}
		DebugLocation(144, 0);
		} finally { DebugExitRule(GrammarFileName, "getRule"); }
		return Name;

	}
	// $ANTLR end "getRule"

	partial void EnterRule_setRule();
	partial void LeaveRule_setRule();
	// $ANTLR start "setRule"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:145:1: setRule returns [string Name] :{...}? IDENT ;
	[GrammarRule("setRule")]
	private string setRule()
	{
		EnterRule_setRule();
		EnterRule("setRule", 16);
		TraceIn("setRule", 16);
		string Name = default(string);

		int setRule_StartIndex = input.Index;

		CommonTree IDENT49 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "setRule");
		DebugLocation(145, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return Name; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:146:5: ({...}? IDENT )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:147:5: {...}? IDENT
			{
			DebugLocation(147, 5);
			if (!(((input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text== "set")))
			{
				if (state.backtracking>0) {state.failed=true; return Name;}
				throw new FailedPredicateException(input, "setRule", "(input.LT(1)as CommonTree)!=null&& (input.LT(1)as CommonTree).Text== \"set\"");
			}
			DebugLocation(147, 83);
			IDENT49=(CommonTree)Match(input,IDENT,Follow._IDENT_in_setRule1075); if (state.failed) return Name;
			DebugLocation(147, 89);
			if (state.backtracking == 0)
			{
				Name = IDENT49.Text;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("setRule", 16);
			LeaveRule("setRule", 16);
			LeaveRule_setRule();
			if (state.backtracking > 0) { Memoize(input, 16, setRule_StartIndex); }

		}
		DebugLocation(148, 0);
		} finally { DebugExitRule(GrammarFileName, "setRule"); }
		return Name;

	}
	// $ANTLR end "setRule"

	partial void EnterRule_interfaceTopLevelScope();
	partial void LeaveRule_interfaceTopLevelScope();
	// $ANTLR start "interfaceTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:150:1: interfaceTopLevelScope returns [List<IApexNode> nodes] : ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) ;
	[GrammarRule("interfaceTopLevelScope")]
	private List<IApexNode> interfaceTopLevelScope()
	{
		EnterRule_interfaceTopLevelScope();
		EnterRule("interfaceTopLevelScope", 17);
		TraceIn("interfaceTopLevelScope", 17);
		List<IApexNode> nodes = default(List<IApexNode>);

		int interfaceTopLevelScope_StartIndex = input.Index;

		IApexNode interfaceScopeDeclarations50 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "interfaceTopLevelScope");
		DebugLocation(150, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return nodes; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:151:5: ( ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:152:6: ^( INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* )
			{
			DebugLocation(152, 6);
			if (state.backtracking == 0)
			{
				nodes = new List<IApexNode>();
			}
			DebugLocation(153, 8);
			DebugLocation(153, 10);
			Match(input,INTERFACE_TOP_LEVEL_SCOPE,Follow._INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope1112); if (state.failed) return nodes;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return nodes;
				DebugLocation(153, 36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:36: ( interfaceScopeDeclarations )*
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					int LA44_1 = input.LA(1);

					if ((LA44_1==AT||LA44_1==CLASS||LA44_1==ENUM||LA44_1==FUNCTION_METHOD_DECL||LA44_1==INTERFACE||LA44_1==VAR_DECLARATION||LA44_1==VOID_METHOD_DECL))
					{
						alt44 = 1;
					}


					} finally { DebugExitDecision(44); }
					switch ( alt44 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:153:37: interfaceScopeDeclarations
						{
						DebugLocation(153, 37);
						PushFollow(Follow._interfaceScopeDeclarations_in_interfaceTopLevelScope1115);
						interfaceScopeDeclarations50=interfaceScopeDeclarations();
						PopFollow();
						if (state.failed) return nodes;
						DebugLocation(153, 64);
						if (state.backtracking == 0)
						{
							nodes.Add(interfaceScopeDeclarations50);
						}

						}
						break;

					default:
						goto loop44;
					}
				}

				loop44:
					;

				} finally { DebugExitSubRule(44); }


				Match(input, TokenTypes.Up, null); if (state.failed) return nodes;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceTopLevelScope", 17);
			LeaveRule("interfaceTopLevelScope", 17);
			LeaveRule_interfaceTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 17, interfaceTopLevelScope_StartIndex); }

		}
		DebugLocation(154, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceTopLevelScope"); }
		return nodes;

	}
	// $ANTLR end "interfaceTopLevelScope"

	partial void EnterRule_interfaceScopeDeclarations();
	partial void LeaveRule_interfaceScopeDeclarations();
	// $ANTLR start "interfaceScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:156:1: interfaceScopeDeclarations returns [IApexNode node] : ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("interfaceScopeDeclarations")]
	private IApexNode interfaceScopeDeclarations()
	{
		EnterRule_interfaceScopeDeclarations();
		EnterRule("interfaceScopeDeclarations", 18);
		TraceIn("interfaceScopeDeclarations", 18);
		IApexNode node = default(IApexNode);

		int interfaceScopeDeclarations_StartIndex = input.Index;

		CommonTree IDENT51 = default(CommonTree);
		CommonTree IDENT55 = default(CommonTree);
		List<Modifier> modifierList52 = default(List<Modifier>);
		ApexType type53 = default(ApexType);
		List<SignatureParam> formalParameterList54 = default(List<SignatureParam>);
		List<Modifier> modifierList56 = default(List<Modifier>);
		List<SignatureParam> formalParameterList57 = default(List<SignatureParam>);
		List<Modifier> modifierList58 = default(List<Modifier>);
		List<ApexField> variableDeclaratorList59 = default(List<ApexField>);
		IApexNode typeDeclaration60 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "interfaceScopeDeclarations");
		DebugLocation(156, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:157:5: ( ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt50=4;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case FUNCTION_METHOD_DECL:
				{
				alt50 = 1;
				}
				break;
			case VOID_METHOD_DECL:
				{
				alt50 = 2;
				}
				break;
			case VAR_DECLARATION:
				{
				alt50 = 3;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt50 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:158:8: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
				{
				DebugLocation(158, 8);
				if (state.backtracking == 0)
				{
					node = new ApexMethod();
				}
				DebugLocation(159, 6);
				DebugLocation(159, 8);
				Match(input,FUNCTION_METHOD_DECL,Follow._FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations1161); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(159, 29);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations1163);
				modifierList52=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(159, 42);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:42: ( genericTypeParameterList )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:42: genericTypeParameterList
					{
					DebugLocation(159, 42);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations1165);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(159, 68);
				PushFollow(Follow._type_in_interfaceScopeDeclarations1168);
				type53=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(159, 73);
				IDENT51=(CommonTree)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations1170); if (state.failed) return node;
				DebugLocation(159, 79);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations1172);
				formalParameterList54=formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(159, 99);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:99: ( arrayDeclaratorList )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ARRAY_DECLARATOR_LIST))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:99: arrayDeclaratorList
					{
					DebugLocation(159, 99);
					PushFollow(Follow._arrayDeclaratorList_in_interfaceScopeDeclarations1174);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(159, 120);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:120: ( throwsClause )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS_CLAUSE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:159:120: throwsClause
					{
					DebugLocation(159, 120);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations1177);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(160, 2);
				if (state.backtracking == 0)
				{
					var method = node as ApexMethod;method.Ident = IDENT51.Text;method.ModifierList = modifierList52; method.Type = type53;method.parameters = formalParameterList54;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:162:2: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
				{
				DebugLocation(162, 2);
				if (state.backtracking == 0)
				{
					node = new ApexMethod();
				}
				DebugLocation(163, 6);
				DebugLocation(163, 8);
				Match(input,VOID_METHOD_DECL,Follow._VOID_METHOD_DECL_in_interfaceScopeDeclarations1207); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(163, 25);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations1209);
				modifierList56=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(163, 38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:163:38: ( genericTypeParameterList )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==GENERIC_TYPE_PARAM_LIST))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:163:38: genericTypeParameterList
					{
					DebugLocation(163, 38);
					PushFollow(Follow._genericTypeParameterList_in_interfaceScopeDeclarations1211);
					genericTypeParameterList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(163, 64);
				IDENT55=(CommonTree)Match(input,IDENT,Follow._IDENT_in_interfaceScopeDeclarations1214); if (state.failed) return node;
				DebugLocation(163, 70);
				PushFollow(Follow._formalParameterList_in_interfaceScopeDeclarations1216);
				formalParameterList57=formalParameterList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(163, 90);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:163:90: ( throwsClause )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==THROWS_CLAUSE))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:163:90: throwsClause
					{
					DebugLocation(163, 90);
					PushFollow(Follow._throwsClause_in_interfaceScopeDeclarations1218);
					throwsClause();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(164, 6);
				if (state.backtracking == 0)
				{
					var method = node as ApexMethod;method.Ident = IDENT55.Text;method.ModifierList = modifierList56; method.parameters = formalParameterList57;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:168:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(168, 9);
				DebugLocation(168, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_interfaceScopeDeclarations1318); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(168, 27);
				PushFollow(Follow._modifierList_in_interfaceScopeDeclarations1320);
				modifierList58=modifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(168, 40);
				PushFollow(Follow._type_in_interfaceScopeDeclarations1322);
				type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(168, 45);
				PushFollow(Follow._variableDeclaratorList_in_interfaceScopeDeclarations1324);
				variableDeclaratorList59=variableDeclaratorList();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(169, 6);
				if (state.backtracking == 0)
				{
					node = new ApexFieldList(modifierList58, variableDeclaratorList59);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:170:9: typeDeclaration
				{
				DebugLocation(170, 9);
				PushFollow(Follow._typeDeclaration_in_interfaceScopeDeclarations1342);
				typeDeclaration60=typeDeclaration();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(170, 25);
				if (state.backtracking == 0)
				{
					node = typeDeclaration60;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceScopeDeclarations", 18);
			LeaveRule("interfaceScopeDeclarations", 18);
			LeaveRule_interfaceScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, interfaceScopeDeclarations_StartIndex); }

		}
		DebugLocation(171, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceScopeDeclarations"); }
		return node;

	}
	// $ANTLR end "interfaceScopeDeclarations"

	partial void EnterRule_variableDeclaratorList();
	partial void LeaveRule_variableDeclaratorList();
	// $ANTLR start "variableDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:173:1: variableDeclaratorList returns [List<ApexField> fields] : ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) ;
	[GrammarRule("variableDeclaratorList")]
	private List<ApexField> variableDeclaratorList()
	{
		EnterRule_variableDeclaratorList();
		EnterRule("variableDeclaratorList", 19);
		TraceIn("variableDeclaratorList", 19);
		List<ApexField> fields = default(List<ApexField>);

		int variableDeclaratorList_StartIndex = input.Index;

		ApexField variableDeclarator61 = default(ApexField);

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorList");
		DebugLocation(173, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return fields; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:174:5: ( ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:175:6: ^( VAR_DECLARATOR_LIST ( variableDeclarator )+ )
			{
			DebugLocation(175, 6);
			if (state.backtracking == 0)
			{
				fields = new List<ApexField>();
			}
			DebugLocation(176, 7);
			DebugLocation(176, 9);
			Match(input,VAR_DECLARATOR_LIST,Follow._VAR_DECLARATOR_LIST_in_variableDeclaratorList1381); if (state.failed) return fields;

			Match(input, TokenTypes.Down, null); if (state.failed) return fields;
			DebugLocation(176, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:176:29: ( variableDeclarator )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==VAR_DECLARATOR))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:176:30: variableDeclarator
					{
					DebugLocation(176, 30);
					PushFollow(Follow._variableDeclarator_in_variableDeclaratorList1384);
					variableDeclarator61=variableDeclarator();
					PopFollow();
					if (state.failed) return fields;
					DebugLocation(176, 49);
					if (state.backtracking == 0)
					{
						fields.Add(variableDeclarator61);
					}

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					if (state.backtracking>0) {state.failed=true; return fields;}
					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }


			Match(input, TokenTypes.Up, null); if (state.failed) return fields;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorList", 19);
			LeaveRule("variableDeclaratorList", 19);
			LeaveRule_variableDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 19, variableDeclaratorList_StartIndex); }

		}
		DebugLocation(177, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorList"); }
		return fields;

	}
	// $ANTLR end "variableDeclaratorList"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:179:1: variableDeclarator returns [ApexField field] : ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
	[GrammarRule("variableDeclarator")]
	private ApexField variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 20);
		TraceIn("variableDeclarator", 20);
		ApexField field = default(ApexField);

		int variableDeclarator_StartIndex = input.Index;

		ApexField variableDeclaratorId62 = default(ApexField);
		IApexNode variableInitializer63 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(179, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return field; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:181:5: ( ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:181:9: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
			{
			DebugLocation(181, 9);
			DebugLocation(181, 11);
			Match(input,VAR_DECLARATOR,Follow._VAR_DECLARATOR_in_variableDeclarator1414); if (state.failed) return field;

			Match(input, TokenTypes.Down, null); if (state.failed) return field;
			DebugLocation(181, 26);
			PushFollow(Follow._variableDeclaratorId_in_variableDeclarator1416);
			variableDeclaratorId62=variableDeclaratorId();
			PopFollow();
			if (state.failed) return field;
			DebugLocation(181, 47);
			if (state.backtracking == 0)
			{
				field = variableDeclaratorId62;
			}
			DebugLocation(181, 88);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:181:88: ( variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ARRAY_INITIALIZER||LA52_1==BROKEN_EXPRESSION||LA52_1==EXPR))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:181:89: variableInitializer
				{
				DebugLocation(181, 89);
				PushFollow(Follow._variableInitializer_in_variableDeclarator1421);
				variableInitializer63=variableInitializer();
				PopFollow();
				if (state.failed) return field;
				DebugLocation(181, 109);
				if (state.backtracking == 0)
				{
					 field.Initializer = variableInitializer63;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			Match(input, TokenTypes.Up, null); if (state.failed) return field;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 20);
			LeaveRule("variableDeclarator", 20);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 20, variableDeclarator_StartIndex); }

		}
		DebugLocation(182, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return field;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_variableDeclaratorId();
	partial void LeaveRule_variableDeclaratorId();
	// $ANTLR start "variableDeclaratorId"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:184:1: variableDeclaratorId returns [ApexField fieldId] : ^( IDENT ( arrayDeclaratorList )? ) ;
	[GrammarRule("variableDeclaratorId")]
	private ApexField variableDeclaratorId()
	{
		EnterRule_variableDeclaratorId();
		EnterRule("variableDeclaratorId", 21);
		TraceIn("variableDeclaratorId", 21);
		ApexField fieldId = default(ApexField);

		int variableDeclaratorId_StartIndex = input.Index;

		CommonTree IDENT64 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "variableDeclaratorId");
		DebugLocation(184, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return fieldId; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:5: ( ^( IDENT ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:9: ^( IDENT ( arrayDeclaratorList )? )
			{
			DebugLocation(185, 9);
			DebugLocation(185, 11);
			IDENT64=(CommonTree)Match(input,IDENT,Follow._IDENT_in_variableDeclaratorId1454); if (state.failed) return fieldId;

			DebugLocation(185, 17);
			if (state.backtracking == 0)
			{
				fieldId = new ApexField(IDENT64.Text);
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return fieldId;
				DebugLocation(185, 57);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:57: ( arrayDeclaratorList )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ARRAY_DECLARATOR_LIST))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:185:58: arrayDeclaratorList
					{
					DebugLocation(185, 58);
					PushFollow(Follow._arrayDeclaratorList_in_variableDeclaratorId1459);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return fieldId;
					DebugLocation(185, 78);
					if (state.backtracking == 0)
					{
						fieldId.IsArray = true;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				Match(input, TokenTypes.Up, null); if (state.failed) return fieldId;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaratorId", 21);
			LeaveRule("variableDeclaratorId", 21);
			LeaveRule_variableDeclaratorId();
			if (state.backtracking > 0) { Memoize(input, 21, variableDeclaratorId_StartIndex); }

		}
		DebugLocation(186, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaratorId"); }
		return fieldId;

	}
	// $ANTLR end "variableDeclaratorId"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:188:1: variableInitializer returns [IApexNode initializer] : ( arrayInitializer | expression | brokenExpression );
	[GrammarRule("variableInitializer")]
	private IApexNode variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 22);
		TraceIn("variableInitializer", 22);
		IApexNode initializer = default(IApexNode);

		int variableInitializer_StartIndex = input.Index;

		ArrayInitializer arrayInitializer65 = default(ArrayInitializer);
		IApexNode expression66 = default(IApexNode);
		IApexNode brokenExpression67 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(188, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return initializer; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:189:5: ( arrayInitializer | expression | brokenExpression )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case ARRAY_INITIALIZER:
				{
				alt54 = 1;
				}
				break;
			case EXPR:
				{
				alt54 = 2;
				}
				break;
			case BROKEN_EXPRESSION:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return initializer;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:189:9: arrayInitializer
				{
				DebugLocation(189, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer1486);
				arrayInitializer65=arrayInitializer();
				PopFollow();
				if (state.failed) return initializer;
				DebugLocation(189, 26);
				if (state.backtracking == 0)
				{
					initializer = arrayInitializer65; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:190:9: expression
				{
				DebugLocation(190, 9);
				PushFollow(Follow._expression_in_variableInitializer1498);
				expression66=expression();
				PopFollow();
				if (state.failed) return initializer;
				DebugLocation(190, 20);
				if (state.backtracking == 0)
				{
					initializer = expression66;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:191:9: brokenExpression
				{
				DebugLocation(191, 9);
				PushFollow(Follow._brokenExpression_in_variableInitializer1510);
				brokenExpression67=brokenExpression();
				PopFollow();
				if (state.failed) return initializer;
				DebugLocation(191, 26);
				if (state.backtracking == 0)
				{
					initializer = brokenExpression67;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 22);
			LeaveRule("variableInitializer", 22);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 22, variableInitializer_StartIndex); }

		}
		DebugLocation(192, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return initializer;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayDeclarator();
	partial void LeaveRule_arrayDeclarator();
	// $ANTLR start "arrayDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:194:1: arrayDeclarator : LBRACK RBRACK ;
	[GrammarRule("arrayDeclarator")]
	private void arrayDeclarator()
	{
		EnterRule_arrayDeclarator();
		EnterRule("arrayDeclarator", 23);
		TraceIn("arrayDeclarator", 23);
		int arrayDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclarator");
		DebugLocation(194, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:195:5: ( LBRACK RBRACK )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:195:9: LBRACK RBRACK
			{
			DebugLocation(195, 9);
			Match(input,LBRACK,Follow._LBRACK_in_arrayDeclarator1531); if (state.failed) return;
			DebugLocation(195, 16);
			Match(input,RBRACK,Follow._RBRACK_in_arrayDeclarator1533); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclarator", 23);
			LeaveRule("arrayDeclarator", 23);
			LeaveRule_arrayDeclarator();
			if (state.backtracking > 0) { Memoize(input, 23, arrayDeclarator_StartIndex); }

		}
		DebugLocation(196, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclarator"); }
		return;

	}
	// $ANTLR end "arrayDeclarator"

	partial void EnterRule_arrayDeclaratorList();
	partial void LeaveRule_arrayDeclaratorList();
	// $ANTLR start "arrayDeclaratorList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:198:1: arrayDeclaratorList : ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) ;
	[GrammarRule("arrayDeclaratorList")]
	private void arrayDeclaratorList()
	{
		EnterRule_arrayDeclaratorList();
		EnterRule("arrayDeclaratorList", 24);
		TraceIn("arrayDeclaratorList", 24);
		int arrayDeclaratorList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayDeclaratorList");
		DebugLocation(198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:199:5: ( ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:199:9: ^( ARRAY_DECLARATOR_LIST ( ARRAY_DECLARATOR )* )
			{
			DebugLocation(199, 9);
			DebugLocation(199, 11);
			Match(input,ARRAY_DECLARATOR_LIST,Follow._ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1553); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(199, 33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:199:33: ( ARRAY_DECLARATOR )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_1 = input.LA(1);

					if ((LA55_1==ARRAY_DECLARATOR))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:199:33: ARRAY_DECLARATOR
						{
						DebugLocation(199, 33);
						Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayDeclaratorList1555); if (state.failed) return;

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayDeclaratorList", 24);
			LeaveRule("arrayDeclaratorList", 24);
			LeaveRule_arrayDeclaratorList();
			if (state.backtracking > 0) { Memoize(input, 24, arrayDeclaratorList_StartIndex); }

		}
		DebugLocation(200, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaratorList"); }
		return;

	}
	// $ANTLR end "arrayDeclaratorList"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:202:1: arrayInitializer returns [ArrayInitializer initializer] : ^( ARRAY_INITIALIZER ( variableInitializer )* ) ;
	[GrammarRule("arrayInitializer")]
	private ArrayInitializer arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 25);
		TraceIn("arrayInitializer", 25);
		ArrayInitializer initializer = default(ArrayInitializer);

		int arrayInitializer_StartIndex = input.Index;

		IApexNode variableInitializer68 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(202, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return initializer; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:203:5: ( ^( ARRAY_INITIALIZER ( variableInitializer )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:204:6: ^( ARRAY_INITIALIZER ( variableInitializer )* )
			{
			DebugLocation(204, 6);
			if (state.backtracking == 0)
			{
				initializer = new ArrayInitializer();
			}
			DebugLocation(205, 7);
			DebugLocation(205, 9);
			Match(input,ARRAY_INITIALIZER,Follow._ARRAY_INITIALIZER_in_arrayInitializer1600); if (state.failed) return initializer;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return initializer;
				DebugLocation(205, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:205:27: ( variableInitializer )*
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==ARRAY_INITIALIZER||LA56_1==BROKEN_EXPRESSION||LA56_1==EXPR))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch ( alt56 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:205:28: variableInitializer
						{
						DebugLocation(205, 28);
						PushFollow(Follow._variableInitializer_in_arrayInitializer1603);
						variableInitializer68=variableInitializer();
						PopFollow();
						if (state.failed) return initializer;
						DebugLocation(205, 48);
						if (state.backtracking == 0)
						{
							initializer.Add(variableInitializer68);
						}

						}
						break;

					default:
						goto loop56;
					}
				}

				loop56:
					;

				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); if (state.failed) return initializer;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 25);
			LeaveRule("arrayInitializer", 25);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 25, arrayInitializer_StartIndex); }

		}
		DebugLocation(206, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return initializer;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_throwsClause();
	partial void LeaveRule_throwsClause();
	// $ANTLR start "throwsClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:208:1: throwsClause : ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) ;
	[GrammarRule("throwsClause")]
	private void throwsClause()
	{
		EnterRule_throwsClause();
		EnterRule("throwsClause", 26);
		TraceIn("throwsClause", 26);
		int throwsClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "throwsClause");
		DebugLocation(208, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:209:5: ( ^( THROWS_CLAUSE ( qualifiedIdentifier )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:209:9: ^( THROWS_CLAUSE ( qualifiedIdentifier )+ )
			{
			DebugLocation(209, 9);
			DebugLocation(209, 11);
			Match(input,THROWS_CLAUSE,Follow._THROWS_CLAUSE_in_throwsClause1628); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(209, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:209:25: ( qualifiedIdentifier )+
			int cnt57=0;
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==DOT||LA57_1==IDENT))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:209:25: qualifiedIdentifier
					{
					DebugLocation(209, 25);
					PushFollow(Follow._qualifiedIdentifier_in_throwsClause1630);
					qualifiedIdentifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt57 >= 1)
						goto loop57;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee57 = new EarlyExitException( 57, input );
					DebugRecognitionException(eee57);
					throw eee57;
				}
				cnt57++;
			}
			loop57:
				;

			} finally { DebugExitSubRule(57); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwsClause", 26);
			LeaveRule("throwsClause", 26);
			LeaveRule_throwsClause();
			if (state.backtracking > 0) { Memoize(input, 26, throwsClause_StartIndex); }

		}
		DebugLocation(210, 4);
		} finally { DebugExitRule(GrammarFileName, "throwsClause"); }
		return;

	}
	// $ANTLR end "throwsClause"

	partial void EnterRule_modifierList();
	partial void LeaveRule_modifierList();
	// $ANTLR start "modifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:212:1: modifierList returns [List<Modifier> modifierList] : ^( MODIFIER_LIST ( modifier )* ) ;
	[GrammarRule("modifierList")]
	private List<Modifier> modifierList()
	{
		EnterRule_modifierList();
		EnterRule("modifierList", 27);
		TraceIn("modifierList", 27);
		List<Modifier> modifierList = default(List<Modifier>);

		int modifierList_StartIndex = input.Index;

		Modifier modifier69 = default(Modifier);

		try { DebugEnterRule(GrammarFileName, "modifierList");
		DebugLocation(212, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return modifierList; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:213:5: ( ^( MODIFIER_LIST ( modifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:214:8: ^( MODIFIER_LIST ( modifier )* )
			{
			DebugLocation(214, 8);
			if (state.backtracking == 0)
			{
				modifierList = new List<Modifier>();
			}
			DebugLocation(215, 5);
			DebugLocation(215, 7);
			Match(input,MODIFIER_LIST,Follow._MODIFIER_LIST_in_modifierList1671); if (state.failed) return modifierList;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return modifierList;
				DebugLocation(215, 21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:215:21: ( modifier )*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_1 = input.LA(1);

					if ((LA58_1==ABSTRACT||LA58_1==AT||LA58_1==FINAL||LA58_1==GLOBAL||LA58_1==NATIVE||LA58_1==OVERRIDE||LA58_1==PRIVATE||(LA58_1>=PROTECTED && LA58_1<=PUBLIC)||LA58_1==STATIC||LA58_1==STRICTFP||(LA58_1>=SYNCHRONIZED && LA58_1<=TEST_METHOD)||LA58_1==TRANSIENT||LA58_1==VIRTUAL||LA58_1==VOLATILE||(LA58_1>=WITHOUT_SHARING && LA58_1<=WITH_SHARING)))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:215:22: modifier
						{
						DebugLocation(215, 22);
						PushFollow(Follow._modifier_in_modifierList1674);
						modifier69=modifier();
						PopFollow();
						if (state.failed) return modifierList;
						DebugLocation(215, 31);
						if (state.backtracking == 0)
						{
							modifierList.Add(modifier69);
						}

						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); if (state.failed) return modifierList;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifierList", 27);
			LeaveRule("modifierList", 27);
			LeaveRule_modifierList();
			if (state.backtracking > 0) { Memoize(input, 27, modifierList_StartIndex); }

		}
		DebugLocation(216, 4);
		} finally { DebugExitRule(GrammarFileName, "modifierList"); }
		return modifierList;

	}
	// $ANTLR end "modifierList"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:218:1: modifier returns [Modifier modifier] : ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier ) ;
	[GrammarRule("modifier")]
	private Modifier modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 28);
		TraceIn("modifier", 28);
		Modifier modifier = default(Modifier);

		int modifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(218, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return modifier; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:219:5: ( ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:6: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			{
			DebugLocation(221, 6);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:6: ( PUBLIC | OVERRIDE | VIRTUAL | WITH_SHARING | WITHOUT_SHARING | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | GLOBAL | TEST_METHOD | localModifier )
			int alt59=17;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case PUBLIC:
				{
				alt59 = 1;
				}
				break;
			case OVERRIDE:
				{
				alt59 = 2;
				}
				break;
			case VIRTUAL:
				{
				alt59 = 3;
				}
				break;
			case WITH_SHARING:
				{
				alt59 = 4;
				}
				break;
			case WITHOUT_SHARING:
				{
				alt59 = 5;
				}
				break;
			case PROTECTED:
				{
				alt59 = 6;
				}
				break;
			case PRIVATE:
				{
				alt59 = 7;
				}
				break;
			case STATIC:
				{
				alt59 = 8;
				}
				break;
			case ABSTRACT:
				{
				alt59 = 9;
				}
				break;
			case NATIVE:
				{
				alt59 = 10;
				}
				break;
			case SYNCHRONIZED:
				{
				alt59 = 11;
				}
				break;
			case TRANSIENT:
				{
				alt59 = 12;
				}
				break;
			case VOLATILE:
				{
				alt59 = 13;
				}
				break;
			case STRICTFP:
				{
				alt59 = 14;
				}
				break;
			case GLOBAL:
				{
				alt59 = 15;
				}
				break;
			case TEST_METHOD:
				{
				alt59 = 16;
				}
				break;
			case AT:
			case FINAL:
				{
				alt59 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return modifier;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:221:7: PUBLIC
				{
				DebugLocation(221, 7);
				Match(input,PUBLIC,Follow._PUBLIC_in_modifier1712); if (state.failed) return modifier;
				DebugLocation(221, 14);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Public;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:222:9: OVERRIDE
				{
				DebugLocation(222, 9);
				Match(input,OVERRIDE,Follow._OVERRIDE_in_modifier1724); if (state.failed) return modifier;
				DebugLocation(222, 18);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Override;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:223:9: VIRTUAL
				{
				DebugLocation(223, 9);
				Match(input,VIRTUAL,Follow._VIRTUAL_in_modifier1736); if (state.failed) return modifier;
				DebugLocation(223, 17);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Virtual;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:224:9: WITH_SHARING
				{
				DebugLocation(224, 9);
				Match(input,WITH_SHARING,Follow._WITH_SHARING_in_modifier1748); if (state.failed) return modifier;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:225:7: WITHOUT_SHARING
				{
				DebugLocation(225, 7);
				Match(input,WITHOUT_SHARING,Follow._WITHOUT_SHARING_in_modifier1757); if (state.failed) return modifier;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:226:9: PROTECTED
				{
				DebugLocation(226, 9);
				Match(input,PROTECTED,Follow._PROTECTED_in_modifier1767); if (state.failed) return modifier;
				DebugLocation(226, 19);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Protected;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:227:9: PRIVATE
				{
				DebugLocation(227, 9);
				Match(input,PRIVATE,Follow._PRIVATE_in_modifier1779); if (state.failed) return modifier;
				DebugLocation(227, 17);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Private;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:228:9: STATIC
				{
				DebugLocation(228, 9);
				Match(input,STATIC,Follow._STATIC_in_modifier1791); if (state.failed) return modifier;
				DebugLocation(228, 16);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Static;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:229:9: ABSTRACT
				{
				DebugLocation(229, 9);
				Match(input,ABSTRACT,Follow._ABSTRACT_in_modifier1803); if (state.failed) return modifier;
				DebugLocation(229, 18);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Abstract;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:230:9: NATIVE
				{
				DebugLocation(230, 9);
				Match(input,NATIVE,Follow._NATIVE_in_modifier1815); if (state.failed) return modifier;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:231:9: SYNCHRONIZED
				{
				DebugLocation(231, 9);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifier1825); if (state.failed) return modifier;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:232:9: TRANSIENT
				{
				DebugLocation(232, 9);
				Match(input,TRANSIENT,Follow._TRANSIENT_in_modifier1835); if (state.failed) return modifier;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:233:9: VOLATILE
				{
				DebugLocation(233, 9);
				Match(input,VOLATILE,Follow._VOLATILE_in_modifier1845); if (state.failed) return modifier;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:234:9: STRICTFP
				{
				DebugLocation(234, 9);
				Match(input,STRICTFP,Follow._STRICTFP_in_modifier1855); if (state.failed) return modifier;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:235:7: GLOBAL
				{
				DebugLocation(235, 7);
				Match(input,GLOBAL,Follow._GLOBAL_in_modifier1863); if (state.failed) return modifier;
				DebugLocation(235, 14);
				if (state.backtracking == 0)
				{
					modifier = Modifier.Global;
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:236:9: TEST_METHOD
				{
				DebugLocation(236, 9);
				Match(input,TEST_METHOD,Follow._TEST_METHOD_in_modifier1875); if (state.failed) return modifier;
				DebugLocation(236, 21);
				if (state.backtracking == 0)
				{
					modifier = Modifier.TestMethod;
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:237:9: localModifier
				{
				DebugLocation(237, 9);
				PushFollow(Follow._localModifier_in_modifier1887);
				localModifier();
				PopFollow();
				if (state.failed) return modifier;

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 28);
			LeaveRule("modifier", 28);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 28, modifier_StartIndex); }

		}
		DebugLocation(238, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return modifier;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_localModifierList();
	partial void LeaveRule_localModifierList();
	// $ANTLR start "localModifierList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:240:1: localModifierList : ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
	[GrammarRule("localModifierList")]
	private void localModifierList()
	{
		EnterRule_localModifierList();
		EnterRule("localModifierList", 29);
		TraceIn("localModifierList", 29);
		int localModifierList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifierList");
		DebugLocation(240, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:241:5: ( ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:241:9: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
			{
			DebugLocation(241, 9);
			DebugLocation(241, 11);
			Match(input,LOCAL_MODIFIER_LIST,Follow._LOCAL_MODIFIER_LIST_in_localModifierList1908); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(241, 31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:241:31: ( localModifier )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==AT||LA60_1==FINAL))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:241:31: localModifier
						{
						DebugLocation(241, 31);
						PushFollow(Follow._localModifier_in_localModifierList1910);
						localModifier();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifierList", 29);
			LeaveRule("localModifierList", 29);
			LeaveRule_localModifierList();
			if (state.backtracking > 0) { Memoize(input, 29, localModifierList_StartIndex); }

		}
		DebugLocation(242, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifierList"); }
		return;

	}
	// $ANTLR end "localModifierList"

	partial void EnterRule_localModifier();
	partial void LeaveRule_localModifier();
	// $ANTLR start "localModifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:244:1: localModifier : ( FINAL | annotation );
	[GrammarRule("localModifier")]
	private void localModifier()
	{
		EnterRule_localModifier();
		EnterRule("localModifier", 30);
		TraceIn("localModifier", 30);
		int localModifier_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localModifier");
		DebugLocation(244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:5: ( FINAL | annotation )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==FINAL))
			{
				alt61 = 1;
			}
			else if ((LA61_1==AT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:245:9: FINAL
				{
				DebugLocation(245, 9);
				Match(input,FINAL,Follow._FINAL_in_localModifier1931); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:246:9: annotation
				{
				DebugLocation(246, 9);
				PushFollow(Follow._annotation_in_localModifier1941);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localModifier", 30);
			LeaveRule("localModifier", 30);
			LeaveRule_localModifier();
			if (state.backtracking > 0) { Memoize(input, 30, localModifier_StartIndex); }

		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "localModifier"); }
		return;

	}
	// $ANTLR end "localModifier"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:249:1: type returns [ApexType type] : ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) ;
	[GrammarRule("type")]
	private ApexType type()
	{
		EnterRule_type();
		EnterRule("type", 31);
		TraceIn("type", 31);
		ApexType type = default(ApexType);

		int type_StartIndex = input.Index;

		ApexType qualifiedTypeIdent70 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(249, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:250:5: ( ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:6: ^( TYPE ( primitiveType | qualifiedTypeIdent ) ( arrayDeclaratorList )? )
			{
			DebugLocation(251, 6);
			DebugLocation(251, 8);
			Match(input,TYPE,Follow._TYPE_in_type1971); if (state.failed) return type;

			Match(input, TokenTypes.Down, null); if (state.failed) return type;
			DebugLocation(251, 13);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:13: ( primitiveType | qualifiedTypeIdent )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==BOOLEAN||LA62_1==BYTE||LA62_1==CHAR||LA62_1==DOUBLE||LA62_1==FLOAT||LA62_1==INT||LA62_1==LONG||LA62_1==SHORT))
			{
				alt62 = 1;
			}
			else if ((LA62_1==QUALIFIED_TYPE_IDENT))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return type;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:14: primitiveType
				{
				DebugLocation(251, 14);
				PushFollow(Follow._primitiveType_in_type1974);
				primitiveType();
				PopFollow();
				if (state.failed) return type;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:30: qualifiedTypeIdent
				{
				DebugLocation(251, 30);
				PushFollow(Follow._qualifiedTypeIdent_in_type1978);
				qualifiedTypeIdent70=qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return type;
				DebugLocation(251, 49);
				if (state.backtracking == 0)
				{
					type = qualifiedTypeIdent70;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(251, 85);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:85: ( arrayDeclaratorList )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==ARRAY_DECLARATOR_LIST))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:251:86: arrayDeclaratorList
				{
				DebugLocation(251, 86);
				PushFollow(Follow._arrayDeclaratorList_in_type1984);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return type;
				DebugLocation(251, 106);
				if (state.backtracking == 0)
				{
					type.IsArray = true;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			Match(input, TokenTypes.Up, null); if (state.failed) return type;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 31);
			LeaveRule("type", 31);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 31, type_StartIndex); }

		}
		DebugLocation(252, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return type;

	}
	// $ANTLR end "type"

	partial void EnterRule_qualifiedTypeIdent();
	partial void LeaveRule_qualifiedTypeIdent();
	// $ANTLR start "qualifiedTypeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:254:1: qualifiedTypeIdent returns [ApexType type] : ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
	[GrammarRule("qualifiedTypeIdent")]
	private ApexType qualifiedTypeIdent()
	{
		EnterRule_qualifiedTypeIdent();
		EnterRule("qualifiedTypeIdent", 32);
		TraceIn("qualifiedTypeIdent", 32);
		ApexType type = default(ApexType);

		int qualifiedTypeIdent_StartIndex = input.Index;

		ApexType typeIdent71 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "qualifiedTypeIdent");
		DebugLocation(254, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:5: ( ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:9: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
			{
			DebugLocation(255, 9);
			DebugLocation(255, 11);
			Match(input,QUALIFIED_TYPE_IDENT,Follow._QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent2014); if (state.failed) return type;

			Match(input, TokenTypes.Down, null); if (state.failed) return type;
			DebugLocation(255, 32);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:32: ( typeIdent )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==IDENT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:255:33: typeIdent
					{
					DebugLocation(255, 33);
					PushFollow(Follow._typeIdent_in_qualifiedTypeIdent2017);
					typeIdent71=typeIdent();
					PopFollow();
					if (state.failed) return type;
					DebugLocation(255, 43);
					if (state.backtracking == 0)
					{
						type =typeIdent71;
					}

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					if (state.backtracking>0) {state.failed=true; return type;}
					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			Match(input, TokenTypes.Up, null); if (state.failed) return type;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedTypeIdent", 32);
			LeaveRule("qualifiedTypeIdent", 32);
			LeaveRule_qualifiedTypeIdent();
			if (state.backtracking > 0) { Memoize(input, 32, qualifiedTypeIdent_StartIndex); }

		}
		DebugLocation(256, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedTypeIdent"); }
		return type;

	}
	// $ANTLR end "qualifiedTypeIdent"

	partial void EnterRule_typeIdent();
	partial void LeaveRule_typeIdent();
	// $ANTLR start "typeIdent"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:258:1: typeIdent returns [ApexType type] : ^( IDENT ( genericTypeArgumentList )? ) ;
	[GrammarRule("typeIdent")]
	private ApexType typeIdent()
	{
		EnterRule_typeIdent();
		EnterRule("typeIdent", 33);
		TraceIn("typeIdent", 33);
		ApexType type = default(ApexType);

		int typeIdent_StartIndex = input.Index;

		CommonTree IDENT72 = default(CommonTree);
		List<ApexType> genericTypeArgumentList73 = default(List<ApexType>);

		try { DebugEnterRule(GrammarFileName, "typeIdent");
		DebugLocation(258, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return type; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:259:5: ( ^( IDENT ( genericTypeArgumentList )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:6: ^( IDENT ( genericTypeArgumentList )? )
			{
			DebugLocation(260, 6);
			DebugLocation(260, 8);
			IDENT72=(CommonTree)Match(input,IDENT,Follow._IDENT_in_typeIdent2053); if (state.failed) return type;

			DebugLocation(260, 14);
			if (state.backtracking == 0)
			{
				type = new ApexType(IDENT72.Text);
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return type;
				DebugLocation(260, 50);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:50: ( genericTypeArgumentList )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==GENERIC_TYPE_ARG_LIST))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:260:51: genericTypeArgumentList
					{
					DebugLocation(260, 51);
					PushFollow(Follow._genericTypeArgumentList_in_typeIdent2058);
					genericTypeArgumentList73=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return type;
					DebugLocation(260, 75);
					if (state.backtracking == 0)
					{
						type.AddRage(genericTypeArgumentList73);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				Match(input, TokenTypes.Up, null); if (state.failed) return type;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeIdent", 33);
			LeaveRule("typeIdent", 33);
			LeaveRule_typeIdent();
			if (state.backtracking > 0) { Memoize(input, 33, typeIdent_StartIndex); }

		}
		DebugLocation(261, 4);
		} finally { DebugExitRule(GrammarFileName, "typeIdent"); }
		return type;

	}
	// $ANTLR end "typeIdent"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:263:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
	[GrammarRule("primitiveType")]
	private void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
		int primitiveType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:264:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:
			{
			DebugLocation(264, 5);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

		}
		DebugLocation(272, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_genericTypeArgumentList();
	partial void LeaveRule_genericTypeArgumentList();
	// $ANTLR start "genericTypeArgumentList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:274:1: genericTypeArgumentList returns [List<ApexType> types] : ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) ;
	[GrammarRule("genericTypeArgumentList")]
	private List<ApexType> genericTypeArgumentList()
	{
		EnterRule_genericTypeArgumentList();
		EnterRule("genericTypeArgumentList", 35);
		TraceIn("genericTypeArgumentList", 35);
		List<ApexType> types = default(List<ApexType>);

		int genericTypeArgumentList_StartIndex = input.Index;

		ApexType genericTypeArgument74 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "genericTypeArgumentList");
		DebugLocation(274, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return types; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:275:5: ( ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:275:9: ^( GENERIC_TYPE_ARG_LIST ( genericTypeArgument )+ )
			{
			DebugLocation(275, 9);
			DebugLocation(275, 11);
			Match(input,GENERIC_TYPE_ARG_LIST,Follow._GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList2177); if (state.failed) return types;

			DebugLocation(275, 33);
			if (state.backtracking == 0)
			{
				types = new List<ApexType>();
			}

			Match(input, TokenTypes.Down, null); if (state.failed) return types;
			DebugLocation(275, 65);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:275:65: ( genericTypeArgument )+
			int cnt66=0;
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==QUESTION||LA66_1==TYPE))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:275:66: genericTypeArgument
					{
					DebugLocation(275, 66);
					PushFollow(Follow._genericTypeArgument_in_genericTypeArgumentList2182);
					genericTypeArgument74=genericTypeArgument();
					PopFollow();
					if (state.failed) return types;
					DebugLocation(275, 86);
					if (state.backtracking == 0)
					{
						types.Add(genericTypeArgument74);
					}

					}
					break;

				default:
					if (cnt66 >= 1)
						goto loop66;

					if (state.backtracking>0) {state.failed=true; return types;}
					EarlyExitException eee66 = new EarlyExitException( 66, input );
					DebugRecognitionException(eee66);
					throw eee66;
				}
				cnt66++;
			}
			loop66:
				;

			} finally { DebugExitSubRule(66); }


			Match(input, TokenTypes.Up, null); if (state.failed) return types;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgumentList", 35);
			LeaveRule("genericTypeArgumentList", 35);
			LeaveRule_genericTypeArgumentList();
			if (state.backtracking > 0) { Memoize(input, 35, genericTypeArgumentList_StartIndex); }

		}
		DebugLocation(276, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgumentList"); }
		return types;

	}
	// $ANTLR end "genericTypeArgumentList"

	partial void EnterRule_genericTypeArgument();
	partial void LeaveRule_genericTypeArgument();
	// $ANTLR start "genericTypeArgument"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:278:1: genericTypeArgument returns [ApexType genericTypeArgument] : ( type | ^( QUESTION ( genericWildcardBoundType )? ) );
	[GrammarRule("genericTypeArgument")]
	private ApexType genericTypeArgument()
	{
		EnterRule_genericTypeArgument();
		EnterRule("genericTypeArgument", 36);
		TraceIn("genericTypeArgument", 36);
		ApexType genericTypeArgument = default(ApexType);

		int genericTypeArgument_StartIndex = input.Index;

		ApexType type75 = default(ApexType);

		try { DebugEnterRule(GrammarFileName, "genericTypeArgument");
		DebugLocation(278, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return genericTypeArgument; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:279:5: ( type | ^( QUESTION ( genericWildcardBoundType )? ) )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==TYPE))
			{
				alt68 = 1;
			}
			else if ((LA68_1==QUESTION))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return genericTypeArgument;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:280:6: type
				{
				DebugLocation(280, 6);
				PushFollow(Follow._type_in_genericTypeArgument2221);
				type75=type();
				PopFollow();
				if (state.failed) return genericTypeArgument;
				DebugLocation(280, 11);
				if (state.backtracking == 0)
				{
					genericTypeArgument = type75;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:281:9: ^( QUESTION ( genericWildcardBoundType )? )
				{
				DebugLocation(281, 9);
				DebugLocation(281, 11);
				Match(input,QUESTION,Follow._QUESTION_in_genericTypeArgument2234); if (state.failed) return genericTypeArgument;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return genericTypeArgument;
					DebugLocation(281, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:281:20: ( genericWildcardBoundType )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, false);
					int LA67_1 = input.LA(1);

					if ((LA67_1==EXTENDS||LA67_1==SUPER))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:281:20: genericWildcardBoundType
						{
						DebugLocation(281, 20);
						PushFollow(Follow._genericWildcardBoundType_in_genericTypeArgument2236);
						genericWildcardBoundType();
						PopFollow();
						if (state.failed) return genericTypeArgument;

						}
						break;

					}
					} finally { DebugExitSubRule(67); }


					Match(input, TokenTypes.Up, null); if (state.failed) return genericTypeArgument;
				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericTypeArgument", 36);
			LeaveRule("genericTypeArgument", 36);
			LeaveRule_genericTypeArgument();
			if (state.backtracking > 0) { Memoize(input, 36, genericTypeArgument_StartIndex); }

		}
		DebugLocation(282, 4);
		} finally { DebugExitRule(GrammarFileName, "genericTypeArgument"); }
		return genericTypeArgument;

	}
	// $ANTLR end "genericTypeArgument"

	partial void EnterRule_genericWildcardBoundType();
	partial void LeaveRule_genericWildcardBoundType();
	// $ANTLR start "genericWildcardBoundType"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:284:1: genericWildcardBoundType : ( ^( EXTENDS type ) | ^( SUPER type ) );
	[GrammarRule("genericWildcardBoundType")]
	private void genericWildcardBoundType()
	{
		EnterRule_genericWildcardBoundType();
		EnterRule("genericWildcardBoundType", 37);
		TraceIn("genericWildcardBoundType", 37);
		int genericWildcardBoundType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "genericWildcardBoundType");
		DebugLocation(284, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:285:5: ( ^( EXTENDS type ) | ^( SUPER type ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==EXTENDS))
			{
				alt69 = 1;
			}
			else if ((LA69_1==SUPER))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:285:9: ^( EXTENDS type )
				{
				DebugLocation(285, 9);
				DebugLocation(285, 11);
				Match(input,EXTENDS,Follow._EXTENDS_in_genericWildcardBoundType2376); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(285, 19);
				PushFollow(Follow._type_in_genericWildcardBoundType2378);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:286:9: ^( SUPER type )
				{
				DebugLocation(286, 9);
				DebugLocation(286, 11);
				Match(input,SUPER,Follow._SUPER_in_genericWildcardBoundType2390); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(286, 17);
				PushFollow(Follow._type_in_genericWildcardBoundType2392);
				type();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("genericWildcardBoundType", 37);
			LeaveRule("genericWildcardBoundType", 37);
			LeaveRule_genericWildcardBoundType();
			if (state.backtracking > 0) { Memoize(input, 37, genericWildcardBoundType_StartIndex); }

		}
		DebugLocation(287, 4);
		} finally { DebugExitRule(GrammarFileName, "genericWildcardBoundType"); }
		return;

	}
	// $ANTLR end "genericWildcardBoundType"

	partial void EnterRule_formalParameterStandardDecl();
	partial void LeaveRule_formalParameterStandardDecl();
	// $ANTLR start "formalParameterStandardDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:290:1: formalParameterStandardDecl returns [SignatureParam parameter] : ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterStandardDecl")]
	private SignatureParam formalParameterStandardDecl()
	{
		EnterRule_formalParameterStandardDecl();
		EnterRule("formalParameterStandardDecl", 38);
		TraceIn("formalParameterStandardDecl", 38);
		SignatureParam parameter = default(SignatureParam);

		int formalParameterStandardDecl_StartIndex = input.Index;

		ApexType type76 = default(ApexType);
		ApexField variableDeclaratorId77 = default(ApexField);

		try { DebugEnterRule(GrammarFileName, "formalParameterStandardDecl");
		DebugLocation(290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return parameter; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:5: ( ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:291:9: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(291, 9);
			DebugLocation(291, 11);
			Match(input,FORMAL_PARAM_STD_DECL,Follow._FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl2419); if (state.failed) return parameter;

			Match(input, TokenTypes.Down, null); if (state.failed) return parameter;
			DebugLocation(291, 33);
			PushFollow(Follow._localModifierList_in_formalParameterStandardDecl2421);
			localModifierList();
			PopFollow();
			if (state.failed) return parameter;
			DebugLocation(291, 51);
			PushFollow(Follow._type_in_formalParameterStandardDecl2423);
			type76=type();
			PopFollow();
			if (state.failed) return parameter;
			DebugLocation(291, 56);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterStandardDecl2425);
			variableDeclaratorId77=variableDeclaratorId();
			PopFollow();
			if (state.failed) return parameter;

			Match(input, TokenTypes.Up, null); if (state.failed) return parameter;

			DebugLocation(291, 78);
			if (state.backtracking == 0)
			{
				parameter = new SignatureParam(type76, variableDeclaratorId77);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterStandardDecl", 38);
			LeaveRule("formalParameterStandardDecl", 38);
			LeaveRule_formalParameterStandardDecl();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameterStandardDecl_StartIndex); }

		}
		DebugLocation(292, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterStandardDecl"); }
		return parameter;

	}
	// $ANTLR end "formalParameterStandardDecl"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();
	// $ANTLR start "formalParameterList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:294:1: formalParameterList returns [List<SignatureParam> parameters] : ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) ;
	[GrammarRule("formalParameterList")]
	private List<SignatureParam> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 39);
		TraceIn("formalParameterList", 39);
		List<SignatureParam> parameters = default(List<SignatureParam>);

		int formalParameterList_StartIndex = input.Index;

		SignatureParam formalParameterStandardDecl78 = default(SignatureParam);
		SignatureParam formalParameterVarargDecl79 = default(SignatureParam);

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return parameters; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:295:5: ( ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:296:5: ^( FORMAL_PARAM_LIST ( formalParameterStandardDecl )* ( formalParameterVarargDecl )? )
			{
			DebugLocation(296, 5);
			if (state.backtracking == 0)
			{
				parameters = new List<SignatureParam>();
			}
			DebugLocation(297, 6);
			DebugLocation(297, 8);
			Match(input,FORMAL_PARAM_LIST,Follow._FORMAL_PARAM_LIST_in_formalParameterList2468); if (state.failed) return parameters;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return parameters;
				DebugLocation(297, 26);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:297:26: ( formalParameterStandardDecl )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==FORMAL_PARAM_STD_DECL))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:297:27: formalParameterStandardDecl
						{
						DebugLocation(297, 27);
						PushFollow(Follow._formalParameterStandardDecl_in_formalParameterList2471);
						formalParameterStandardDecl78=formalParameterStandardDecl();
						PopFollow();
						if (state.failed) return parameters;
						DebugLocation(297, 55);
						if (state.backtracking == 0)
						{
							parameters.Add(formalParameterStandardDecl78);
						}

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }

				DebugLocation(298, 6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:298:6: ( formalParameterVarargDecl )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_1 = input.LA(1);

				if ((LA71_1==FORMAL_PARAM_VARARG_DECL))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:298:7: formalParameterVarargDecl
					{
					DebugLocation(298, 7);
					PushFollow(Follow._formalParameterVarargDecl_in_formalParameterList2484);
					formalParameterVarargDecl79=formalParameterVarargDecl();
					PopFollow();
					if (state.failed) return parameters;
					DebugLocation(298, 33);
					if (state.backtracking == 0)
					{
						parameters.Add(formalParameterVarargDecl79);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				Match(input, TokenTypes.Up, null); if (state.failed) return parameters;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 39);
			LeaveRule("formalParameterList", 39);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameterList_StartIndex); }

		}
		DebugLocation(299, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return parameters;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_formalParameterVarargDecl();
	partial void LeaveRule_formalParameterVarargDecl();
	// $ANTLR start "formalParameterVarargDecl"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:302:1: formalParameterVarargDecl returns [SignatureParam parameter] : ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
	[GrammarRule("formalParameterVarargDecl")]
	private SignatureParam formalParameterVarargDecl()
	{
		EnterRule_formalParameterVarargDecl();
		EnterRule("formalParameterVarargDecl", 40);
		TraceIn("formalParameterVarargDecl", 40);
		SignatureParam parameter = default(SignatureParam);

		int formalParameterVarargDecl_StartIndex = input.Index;

		ApexType type80 = default(ApexType);
		ApexField variableDeclaratorId81 = default(ApexField);

		try { DebugEnterRule(GrammarFileName, "formalParameterVarargDecl");
		DebugLocation(302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return parameter; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:303:5: ( ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:303:9: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
			{
			DebugLocation(303, 9);
			DebugLocation(303, 11);
			Match(input,FORMAL_PARAM_VARARG_DECL,Follow._FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl2523); if (state.failed) return parameter;

			Match(input, TokenTypes.Down, null); if (state.failed) return parameter;
			DebugLocation(303, 36);
			PushFollow(Follow._localModifierList_in_formalParameterVarargDecl2525);
			localModifierList();
			PopFollow();
			if (state.failed) return parameter;
			DebugLocation(303, 54);
			PushFollow(Follow._type_in_formalParameterVarargDecl2527);
			type80=type();
			PopFollow();
			if (state.failed) return parameter;
			DebugLocation(303, 59);
			PushFollow(Follow._variableDeclaratorId_in_formalParameterVarargDecl2529);
			variableDeclaratorId81=variableDeclaratorId();
			PopFollow();
			if (state.failed) return parameter;

			Match(input, TokenTypes.Up, null); if (state.failed) return parameter;

			DebugLocation(303, 81);
			if (state.backtracking == 0)
			{
				parameter = new SignatureParam(type80, variableDeclaratorId81);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterVarargDecl", 40);
			LeaveRule("formalParameterVarargDecl", 40);
			LeaveRule_formalParameterVarargDecl();
			if (state.backtracking > 0) { Memoize(input, 40, formalParameterVarargDecl_StartIndex); }

		}
		DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterVarargDecl"); }
		return parameter;

	}
	// $ANTLR end "formalParameterVarargDecl"

	partial void EnterRule_qualifiedIdentifier();
	partial void LeaveRule_qualifiedIdentifier();
	// $ANTLR start "qualifiedIdentifier"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:306:1: qualifiedIdentifier returns [Identifier ident] : (outerIdent= IDENT | ^( DOT innerQual= qualifiedIdentifier innerIdent= IDENT ) );
	[GrammarRule("qualifiedIdentifier")]
	private Identifier qualifiedIdentifier()
	{
		EnterRule_qualifiedIdentifier();
		EnterRule("qualifiedIdentifier", 41);
		TraceIn("qualifiedIdentifier", 41);
		Identifier ident = default(Identifier);

		int qualifiedIdentifier_StartIndex = input.Index;

		CommonTree outerIdent = default(CommonTree);
		CommonTree innerIdent = default(CommonTree);
		Identifier innerQual = default(Identifier);

		try { DebugEnterRule(GrammarFileName, "qualifiedIdentifier");
		DebugLocation(306, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return ident; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:307:5: (outerIdent= IDENT | ^( DOT innerQual= qualifiedIdentifier innerIdent= IDENT ) )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==IDENT))
			{
				alt72 = 1;
			}
			else if ((LA72_1==DOT))
			{
				alt72 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return ident;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:308:6: outerIdent= IDENT
				{
				DebugLocation(308, 17);
				outerIdent=(CommonTree)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier2568); if (state.failed) return ident;
				DebugLocation(308, 25);
				if (state.backtracking == 0)
				{
					ident = new Identifier(outerIdent.Text); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:309:9: ^( DOT innerQual= qualifiedIdentifier innerIdent= IDENT )
				{
				DebugLocation(309, 9);
				DebugLocation(309, 11);
				Match(input,DOT,Follow._DOT_in_qualifiedIdentifier2581); if (state.failed) return ident;

				Match(input, TokenTypes.Down, null); if (state.failed) return ident;
				DebugLocation(309, 25);
				PushFollow(Follow._qualifiedIdentifier_in_qualifiedIdentifier2587);
				innerQual=qualifiedIdentifier();
				PopFollow();
				if (state.failed) return ident;
				DebugLocation(309, 58);
				innerIdent=(CommonTree)Match(input,IDENT,Follow._IDENT_in_qualifiedIdentifier2593); if (state.failed) return ident;

				Match(input, TokenTypes.Up, null); if (state.failed) return ident;

				DebugLocation(309, 66);
				if (state.backtracking == 0)
				{
					ident = new Identifier(innerIdent.Text);ident.SubIdent = innerQual; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedIdentifier", 41);
			LeaveRule("qualifiedIdentifier", 41);
			LeaveRule_qualifiedIdentifier();
			if (state.backtracking > 0) { Memoize(input, 41, qualifiedIdentifier_StartIndex); }

		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedIdentifier"); }
		return ident;

	}
	// $ANTLR end "qualifiedIdentifier"

	partial void EnterRule_annotationList();
	partial void LeaveRule_annotationList();
	// $ANTLR start "annotationList"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:314:1: annotationList : ^( ANNOTATION_LIST ( annotation )* ) ;
	[GrammarRule("annotationList")]
	private void annotationList()
	{
		EnterRule_annotationList();
		EnterRule("annotationList", 42);
		TraceIn("annotationList", 42);
		int annotationList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationList");
		DebugLocation(314, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:315:5: ( ^( ANNOTATION_LIST ( annotation )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:315:9: ^( ANNOTATION_LIST ( annotation )* )
			{
			DebugLocation(315, 9);
			DebugLocation(315, 11);
			Match(input,ANNOTATION_LIST,Follow._ANNOTATION_LIST_in_annotationList2621); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(315, 27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:315:27: ( annotation )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==AT))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:315:27: annotation
						{
						DebugLocation(315, 27);
						PushFollow(Follow._annotation_in_annotationList2623);
						annotation();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationList", 42);
			LeaveRule("annotationList", 42);
			LeaveRule_annotationList();
			if (state.backtracking > 0) { Memoize(input, 42, annotationList_StartIndex); }

		}
		DebugLocation(316, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationList"); }
		return;

	}
	// $ANTLR end "annotationList"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:318:1: annotation : ^( AT qualifiedIdentifier ( annotationInit )? ) ;
	[GrammarRule("annotation")]
	private void annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 43);
		TraceIn("annotation", 43);
		int annotation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(318, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:319:5: ( ^( AT qualifiedIdentifier ( annotationInit )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:319:9: ^( AT qualifiedIdentifier ( annotationInit )? )
			{
			DebugLocation(319, 9);
			DebugLocation(319, 11);
			Match(input,AT,Follow._AT_in_annotation2645); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(319, 14);
			PushFollow(Follow._qualifiedIdentifier_in_annotation2647);
			qualifiedIdentifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(319, 34);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:319:34: ( annotationInit )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==ANNOTATION_INIT_BLOCK))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:319:34: annotationInit
				{
				DebugLocation(319, 34);
				PushFollow(Follow._annotationInit_in_annotation2649);
				annotationInit();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 43);
			LeaveRule("annotation", 43);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 43, annotation_StartIndex); }

		}
		DebugLocation(320, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_annotationInit();
	partial void LeaveRule_annotationInit();
	// $ANTLR start "annotationInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:322:1: annotationInit : ^( ANNOTATION_INIT_BLOCK annotationInitializers ) ;
	[GrammarRule("annotationInit")]
	private void annotationInit()
	{
		EnterRule_annotationInit();
		EnterRule("annotationInit", 44);
		TraceIn("annotationInit", 44);
		int annotationInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInit");
		DebugLocation(322, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:323:5: ( ^( ANNOTATION_INIT_BLOCK annotationInitializers ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:323:9: ^( ANNOTATION_INIT_BLOCK annotationInitializers )
			{
			DebugLocation(323, 9);
			DebugLocation(323, 11);
			Match(input,ANNOTATION_INIT_BLOCK,Follow._ANNOTATION_INIT_BLOCK_in_annotationInit2675); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(323, 33);
			PushFollow(Follow._annotationInitializers_in_annotationInit2677);
			annotationInitializers();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInit", 44);
			LeaveRule("annotationInit", 44);
			LeaveRule_annotationInit();
			if (state.backtracking > 0) { Memoize(input, 44, annotationInit_StartIndex); }

		}
		DebugLocation(324, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInit"); }
		return;

	}
	// $ANTLR end "annotationInit"

	partial void EnterRule_annotationInitializers();
	partial void LeaveRule_annotationInitializers();
	// $ANTLR start "annotationInitializers"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:326:1: annotationInitializers : ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
	[GrammarRule("annotationInitializers")]
	private void annotationInitializers()
	{
		EnterRule_annotationInitializers();
		EnterRule("annotationInitializers", 45);
		TraceIn("annotationInitializers", 45);
		int annotationInitializers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializers");
		DebugLocation(326, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:327:5: ( ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==ANNOTATION_INIT_KEY_LIST))
			{
				alt76 = 1;
			}
			else if ((LA76_1==ANNOTATION_INIT_DEFAULT_KEY))
			{
				alt76 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:327:9: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
				{
				DebugLocation(327, 9);
				DebugLocation(327, 11);
				Match(input,ANNOTATION_INIT_KEY_LIST,Follow._ANNOTATION_INIT_KEY_LIST_in_annotationInitializers2698); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(327, 36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:327:36: ( annotationInitializer )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_1 = input.LA(1);

					if ((LA75_1==IDENT))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:327:36: annotationInitializer
						{
						DebugLocation(327, 36);
						PushFollow(Follow._annotationInitializer_in_annotationInitializers2700);
						annotationInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:328:9: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
				{
				DebugLocation(328, 9);
				DebugLocation(328, 11);
				Match(input,ANNOTATION_INIT_DEFAULT_KEY,Follow._ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers2713); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(328, 39);
				PushFollow(Follow._annotationElementValue_in_annotationInitializers2715);
				annotationElementValue();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializers", 45);
			LeaveRule("annotationInitializers", 45);
			LeaveRule_annotationInitializers();
			if (state.backtracking > 0) { Memoize(input, 45, annotationInitializers_StartIndex); }

		}
		DebugLocation(329, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializers"); }
		return;

	}
	// $ANTLR end "annotationInitializers"

	partial void EnterRule_annotationInitializer();
	partial void LeaveRule_annotationInitializer();
	// $ANTLR start "annotationInitializer"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:331:1: annotationInitializer : ^( IDENT annotationElementValue ) ;
	[GrammarRule("annotationInitializer")]
	private void annotationInitializer()
	{
		EnterRule_annotationInitializer();
		EnterRule("annotationInitializer", 46);
		TraceIn("annotationInitializer", 46);
		int annotationInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationInitializer");
		DebugLocation(331, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:332:5: ( ^( IDENT annotationElementValue ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:332:9: ^( IDENT annotationElementValue )
			{
			DebugLocation(332, 9);
			DebugLocation(332, 11);
			Match(input,IDENT,Follow._IDENT_in_annotationInitializer2740); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(332, 17);
			PushFollow(Follow._annotationElementValue_in_annotationInitializer2742);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationInitializer", 46);
			LeaveRule("annotationInitializer", 46);
			LeaveRule_annotationInitializer();
			if (state.backtracking > 0) { Memoize(input, 46, annotationInitializer_StartIndex); }

		}
		DebugLocation(333, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationInitializer"); }
		return;

	}
	// $ANTLR end "annotationInitializer"

	partial void EnterRule_annotationElementValue();
	partial void LeaveRule_annotationElementValue();
	// $ANTLR start "annotationElementValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:335:1: annotationElementValue : ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression );
	[GrammarRule("annotationElementValue")]
	private void annotationElementValue()
	{
		EnterRule_annotationElementValue();
		EnterRule("annotationElementValue", 47);
		TraceIn("annotationElementValue", 47);
		int annotationElementValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationElementValue");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:5: ( ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* ) | annotation | expression )
			int alt78=3;
			try { DebugEnterDecision(78, false);
			switch (input.LA(1))
			{
			case ANNOTATION_INIT_ARRAY_ELEMENT:
				{
				alt78 = 1;
				}
				break;
			case AT:
				{
				alt78 = 2;
				}
				break;
			case EXPR:
				{
				alt78 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 78, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:9: ^( ANNOTATION_INIT_ARRAY_ELEMENT ( annotationElementValue )* )
				{
				DebugLocation(336, 9);
				DebugLocation(336, 11);
				Match(input,ANNOTATION_INIT_ARRAY_ELEMENT,Follow._ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue2767); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(336, 41);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:41: ( annotationElementValue )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_1 = input.LA(1);

						if ((LA77_1==ANNOTATION_INIT_ARRAY_ELEMENT||LA77_1==AT||LA77_1==EXPR))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:336:41: annotationElementValue
							{
							DebugLocation(336, 41);
							PushFollow(Follow._annotationElementValue_in_annotationElementValue2769);
							annotationElementValue();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:337:9: annotation
				{
				DebugLocation(337, 9);
				PushFollow(Follow._annotation_in_annotationElementValue2781);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:338:9: expression
				{
				DebugLocation(338, 9);
				PushFollow(Follow._expression_in_annotationElementValue2791);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationElementValue", 47);
			LeaveRule("annotationElementValue", 47);
			LeaveRule_annotationElementValue();
			if (state.backtracking > 0) { Memoize(input, 47, annotationElementValue_StartIndex); }

		}
		DebugLocation(339, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationElementValue"); }
		return;

	}
	// $ANTLR end "annotationElementValue"

	partial void EnterRule_annotationTopLevelScope();
	partial void LeaveRule_annotationTopLevelScope();
	// $ANTLR start "annotationTopLevelScope"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:341:1: annotationTopLevelScope : ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) ;
	[GrammarRule("annotationTopLevelScope")]
	private void annotationTopLevelScope()
	{
		EnterRule_annotationTopLevelScope();
		EnterRule("annotationTopLevelScope", 48);
		TraceIn("annotationTopLevelScope", 48);
		int annotationTopLevelScope_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTopLevelScope");
		DebugLocation(341, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:5: ( ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:9: ^( ANNOTATION_TOP_LEVEL_SCOPE ( annotationScopeDeclarations )* )
			{
			DebugLocation(342, 9);
			DebugLocation(342, 11);
			Match(input,ANNOTATION_TOP_LEVEL_SCOPE,Follow._ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2815); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(342, 38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:38: ( annotationScopeDeclarations )*
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_1 = input.LA(1);

					if ((LA79_1==ANNOTATION_METHOD_DECL||LA79_1==AT||LA79_1==CLASS||LA79_1==ENUM||LA79_1==INTERFACE||LA79_1==VAR_DECLARATION))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch ( alt79 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:342:38: annotationScopeDeclarations
						{
						DebugLocation(342, 38);
						PushFollow(Follow._annotationScopeDeclarations_in_annotationTopLevelScope2817);
						annotationScopeDeclarations();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop79;
					}
				}

				loop79:
					;

				} finally { DebugExitSubRule(79); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTopLevelScope", 48);
			LeaveRule("annotationTopLevelScope", 48);
			LeaveRule_annotationTopLevelScope();
			if (state.backtracking > 0) { Memoize(input, 48, annotationTopLevelScope_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTopLevelScope"); }
		return;

	}
	// $ANTLR end "annotationTopLevelScope"

	partial void EnterRule_annotationScopeDeclarations();
	partial void LeaveRule_annotationScopeDeclarations();
	// $ANTLR start "annotationScopeDeclarations"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:345:1: annotationScopeDeclarations : ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration );
	[GrammarRule("annotationScopeDeclarations")]
	private void annotationScopeDeclarations()
	{
		EnterRule_annotationScopeDeclarations();
		EnterRule("annotationScopeDeclarations", 49);
		TraceIn("annotationScopeDeclarations", 49);
		int annotationScopeDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationScopeDeclarations");
		DebugLocation(345, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:346:5: ( ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | ^( VAR_DECLARATION modifierList type variableDeclaratorList ) | typeDeclaration )
			int alt81=3;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case ANNOTATION_METHOD_DECL:
				{
				alt81 = 1;
				}
				break;
			case VAR_DECLARATION:
				{
				alt81 = 2;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:346:9: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
				{
				DebugLocation(346, 9);
				DebugLocation(346, 11);
				Match(input,ANNOTATION_METHOD_DECL,Follow._ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2843); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(346, 34);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2845);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(346, 47);
				PushFollow(Follow._type_in_annotationScopeDeclarations2847);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(346, 52);
				Match(input,IDENT,Follow._IDENT_in_annotationScopeDeclarations2849); if (state.failed) return;
				DebugLocation(346, 58);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:346:58: ( annotationDefaultValue )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==DEFAULT))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:346:58: annotationDefaultValue
					{
					DebugLocation(346, 58);
					PushFollow(Follow._annotationDefaultValue_in_annotationScopeDeclarations2851);
					annotationDefaultValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:347:9: ^( VAR_DECLARATION modifierList type variableDeclaratorList )
				{
				DebugLocation(347, 9);
				DebugLocation(347, 11);
				Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_annotationScopeDeclarations2864); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(347, 27);
				PushFollow(Follow._modifierList_in_annotationScopeDeclarations2866);
				modifierList();
				PopFollow();
				if (state.failed) return;
				DebugLocation(347, 40);
				PushFollow(Follow._type_in_annotationScopeDeclarations2868);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(347, 45);
				PushFollow(Follow._variableDeclaratorList_in_annotationScopeDeclarations2870);
				variableDeclaratorList();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:348:9: typeDeclaration
				{
				DebugLocation(348, 9);
				PushFollow(Follow._typeDeclaration_in_annotationScopeDeclarations2881);
				typeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationScopeDeclarations", 49);
			LeaveRule("annotationScopeDeclarations", 49);
			LeaveRule_annotationScopeDeclarations();
			if (state.backtracking > 0) { Memoize(input, 49, annotationScopeDeclarations_StartIndex); }

		}
		DebugLocation(349, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationScopeDeclarations"); }
		return;

	}
	// $ANTLR end "annotationScopeDeclarations"

	partial void EnterRule_annotationDefaultValue();
	partial void LeaveRule_annotationDefaultValue();
	// $ANTLR start "annotationDefaultValue"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:351:1: annotationDefaultValue : ^( DEFAULT annotationElementValue ) ;
	[GrammarRule("annotationDefaultValue")]
	private void annotationDefaultValue()
	{
		EnterRule_annotationDefaultValue();
		EnterRule("annotationDefaultValue", 50);
		TraceIn("annotationDefaultValue", 50);
		int annotationDefaultValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationDefaultValue");
		DebugLocation(351, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:352:5: ( ^( DEFAULT annotationElementValue ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:352:9: ^( DEFAULT annotationElementValue )
			{
			DebugLocation(352, 9);
			DebugLocation(352, 11);
			Match(input,DEFAULT,Follow._DEFAULT_in_annotationDefaultValue2905); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(352, 19);
			PushFollow(Follow._annotationElementValue_in_annotationDefaultValue2907);
			annotationElementValue();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationDefaultValue", 50);
			LeaveRule("annotationDefaultValue", 50);
			LeaveRule_annotationDefaultValue();
			if (state.backtracking > 0) { Memoize(input, 50, annotationDefaultValue_StartIndex); }

		}
		DebugLocation(353, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationDefaultValue"); }
		return;

	}
	// $ANTLR end "annotationDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:357:1: block returns [IApexNode node] : ^( BLOCK_SCOPE ( blockStatement )* ) ;
	[GrammarRule("block")]
	private IApexNode block()
	{
		EnterRule_block();
		EnterRule("block", 51);
		TraceIn("block", 51);
		IApexNode node = default(IApexNode);

		int block_StartIndex = input.Index;

		IApexNode blockStatement82 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(357, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:358:5: ( ^( BLOCK_SCOPE ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:359:6: ^( BLOCK_SCOPE ( blockStatement )* )
			{
			DebugLocation(359, 6);
			if (state.backtracking == 0)
			{
				node = new Block();
			}
			DebugLocation(360, 6);
			DebugLocation(360, 8);
			Match(input,BLOCK_SCOPE,Follow._BLOCK_SCOPE_in_block2947); if (state.failed) return node;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(360, 20);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:20: ( blockStatement )*
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_1 = input.LA(1);

					if ((LA82_1==AT||LA82_1==BLOCK_SCOPE||LA82_1==BREAK||LA82_1==BROKEN_EXPRESSION||LA82_1==CLASS||LA82_1==CONTINUE||LA82_1==DO||LA82_1==ENUM||LA82_1==EXPR||LA82_1==FOR||LA82_1==FOR_EACH||LA82_1==IF||LA82_1==INTERFACE||LA82_1==LABELED_STATEMENT||LA82_1==RETURN||LA82_1==SEMI||LA82_1==SWITCH||LA82_1==SYNCHRONIZED||LA82_1==THROW||LA82_1==TRY||LA82_1==VAR_DECLARATION||LA82_1==WHILE))
					{
						alt82 = 1;
					}


					} finally { DebugExitDecision(82); }
					switch ( alt82 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:360:21: blockStatement
						{
						DebugLocation(360, 21);
						PushFollow(Follow._blockStatement_in_block2950);
						blockStatement82=blockStatement();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(360, 36);
						if (state.backtracking == 0)
						{
							node.Add(blockStatement82);
						}

						}
						break;

					default:
						goto loop82;
					}
				}

				loop82:
					;

				} finally { DebugExitSubRule(82); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 51);
			LeaveRule("block", 51);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 51, block_StartIndex); }

		}
		DebugLocation(361, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return node;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:363:1: blockStatement returns [IApexNode node] : ( localVariableDeclaration | typeDeclaration | statement | brokenExpression );
	[GrammarRule("blockStatement")]
	private IApexNode blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 52);
		TraceIn("blockStatement", 52);
		IApexNode node = default(IApexNode);

		int blockStatement_StartIndex = input.Index;

		LocalVariableDeclaration localVariableDeclaration83 = default(LocalVariableDeclaration);
		IApexNode typeDeclaration84 = default(IApexNode);
		IApexNode statement85 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(363, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:364:5: ( localVariableDeclaration | typeDeclaration | statement | brokenExpression )
			int alt83=4;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case VAR_DECLARATION:
				{
				alt83 = 1;
				}
				break;
			case AT:
			case CLASS:
			case ENUM:
			case INTERFACE:
				{
				alt83 = 2;
				}
				break;
			case BLOCK_SCOPE:
			case BREAK:
			case CONTINUE:
			case DO:
			case EXPR:
			case FOR:
			case FOR_EACH:
			case IF:
			case LABELED_STATEMENT:
			case RETURN:
			case SEMI:
			case SWITCH:
			case SYNCHRONIZED:
			case THROW:
			case TRY:
			case WHILE:
				{
				alt83 = 3;
				}
				break;
			case BROKEN_EXPRESSION:
				{
				alt83 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:366:6: localVariableDeclaration
				{
				DebugLocation(366, 6);
				PushFollow(Follow._localVariableDeclaration_in_blockStatement2994);
				localVariableDeclaration83=localVariableDeclaration();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(366, 31);
				if (state.backtracking == 0)
				{
					node= localVariableDeclaration83;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:367:9: typeDeclaration
				{
				DebugLocation(367, 9);
				PushFollow(Follow._typeDeclaration_in_blockStatement3006);
				typeDeclaration84=typeDeclaration();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(367, 25);
				if (state.backtracking == 0)
				{
					node= typeDeclaration84;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:368:9: statement
				{
				DebugLocation(368, 9);
				PushFollow(Follow._statement_in_blockStatement3018);
				statement85=statement();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(368, 19);
				if (state.backtracking == 0)
				{
					 node = statement85; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:369:8: brokenExpression
				{
				DebugLocation(369, 8);
				PushFollow(Follow._brokenExpression_in_blockStatement3029);
				brokenExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(369, 26);
				if (state.backtracking == 0)
				{
					node = new BrokenExpression();
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 52);
			LeaveRule("blockStatement", 52);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 52, blockStatement_StartIndex); }

		}
		DebugLocation(370, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return node;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_brokenExpression();
	partial void LeaveRule_brokenExpression();
	// $ANTLR start "brokenExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:371:1: brokenExpression returns [IApexNode node] : ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? ) ;
	[GrammarRule("brokenExpression")]
	private IApexNode brokenExpression()
	{
		EnterRule_brokenExpression();
		EnterRule("brokenExpression", 53);
		TraceIn("brokenExpression", 53);
		IApexNode node = default(IApexNode);

		int brokenExpression_StartIndex = input.Index;

		IApexNode expression86 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "brokenExpression");
		DebugLocation(371, 0);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:372:4: ( ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:373:4: ^( BROKEN_EXPRESSION expression ( DOT )? ( SEMI )? )
			{
			DebugLocation(373, 4);
			DebugLocation(373, 6);
			Match(input,BROKEN_EXPRESSION,Follow._BROKEN_EXPRESSION_in_brokenExpression3054); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(373, 24);
			PushFollow(Follow._expression_in_brokenExpression3056);
			expression86=expression();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(373, 35);
			if (state.backtracking == 0)
			{
				node = expression86;
			}
			DebugLocation(373, 62);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:373:62: ( DOT )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==DOT))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:373:62: DOT
				{
				DebugLocation(373, 62);
				Match(input,DOT,Follow._DOT_in_brokenExpression3060); if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(373, 67);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:373:67: ( SEMI )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==SEMI))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:373:67: SEMI
				{
				DebugLocation(373, 67);
				Match(input,SEMI,Follow._SEMI_in_brokenExpression3063); if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(85); }


			Match(input, TokenTypes.Up, null); if (state.failed) return node;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("brokenExpression", 53);
			LeaveRule("brokenExpression", 53);
			LeaveRule_brokenExpression();
			if (state.backtracking > 0) { Memoize(input, 53, brokenExpression_StartIndex); }

		}
		DebugLocation(374, 0);
		} finally { DebugExitRule(GrammarFileName, "brokenExpression"); }
		return node;

	}
	// $ANTLR end "brokenExpression"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:375:1: localVariableDeclaration returns [LocalVariableDeclaration varDeclaration] : ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) ;
	[GrammarRule("localVariableDeclaration")]
	private LocalVariableDeclaration localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 54);
		TraceIn("localVariableDeclaration", 54);
		LocalVariableDeclaration varDeclaration = default(LocalVariableDeclaration);

		int localVariableDeclaration_StartIndex = input.Index;

		ApexType type87 = default(ApexType);
		List<ApexField> variableDeclaratorList88 = default(List<ApexField>);

		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(375, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return varDeclaration; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:5: ( ^( VAR_DECLARATION localModifierList type variableDeclaratorList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:376:9: ^( VAR_DECLARATION localModifierList type variableDeclaratorList )
			{
			DebugLocation(376, 9);
			DebugLocation(376, 11);
			Match(input,VAR_DECLARATION,Follow._VAR_DECLARATION_in_localVariableDeclaration3084); if (state.failed) return varDeclaration;

			Match(input, TokenTypes.Down, null); if (state.failed) return varDeclaration;
			DebugLocation(376, 27);
			PushFollow(Follow._localModifierList_in_localVariableDeclaration3086);
			localModifierList();
			PopFollow();
			if (state.failed) return varDeclaration;
			DebugLocation(376, 45);
			PushFollow(Follow._type_in_localVariableDeclaration3088);
			type87=type();
			PopFollow();
			if (state.failed) return varDeclaration;
			DebugLocation(376, 50);
			PushFollow(Follow._variableDeclaratorList_in_localVariableDeclaration3090);
			variableDeclaratorList88=variableDeclaratorList();
			PopFollow();
			if (state.failed) return varDeclaration;

			Match(input, TokenTypes.Up, null); if (state.failed) return varDeclaration;

			DebugLocation(376, 74);
			if (state.backtracking == 0)
			{
				varDeclaration = new LocalVariableDeclaration(type87, variableDeclaratorList88);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclaration", 54);
			LeaveRule("localVariableDeclaration", 54);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 54, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(377, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return varDeclaration;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:381:1: catches returns [List<CatchBlock> catches] : ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
	[GrammarRule("catches")]
	private List<CatchBlock> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 55);
		TraceIn("catches", 55);
		List<CatchBlock> catches = default(List<CatchBlock>);

		int catches_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(381, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return catches; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:382:5: ( ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:382:9: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
			{
			DebugLocation(382, 9);
			DebugLocation(382, 11);
			Match(input,CATCH_CLAUSE_LIST,Follow._CATCH_CLAUSE_LIST_in_catches3131); if (state.failed) return catches;

			Match(input, TokenTypes.Down, null); if (state.failed) return catches;
			DebugLocation(382, 29);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:382:29: ( catchClause )+
			int cnt86=0;
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==CATCH))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:382:29: catchClause
					{
					DebugLocation(382, 29);
					PushFollow(Follow._catchClause_in_catches3133);
					catchClause();
					PopFollow();
					if (state.failed) return catches;

					}
					break;

				default:
					if (cnt86 >= 1)
						goto loop86;

					if (state.backtracking>0) {state.failed=true; return catches;}
					EarlyExitException eee86 = new EarlyExitException( 86, input );
					DebugRecognitionException(eee86);
					throw eee86;
				}
				cnt86++;
			}
			loop86:
				;

			} finally { DebugExitSubRule(86); }


			Match(input, TokenTypes.Up, null); if (state.failed) return catches;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catches", 55);
			LeaveRule("catches", 55);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 55, catches_StartIndex); }

		}
		DebugLocation(383, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return catches;

	}
	// $ANTLR end "catches"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:384:1: statement returns [IApexNode node] : ( block | ^( IF parenthesizedExpression trueStatement= statement (elseStatement= statement )? ) | ^( FOR forInit forCondition forUpdater forStatementInner= statement ) | ^( FOR_EACH localModifierList type IDENT expression foreachStatementInner= statement ) | ^( WHILE parenthesizedExpression whileInnerStatement= statement ) | ^( DO doInnerStatemnt= statement parenthesizedExpression ) | ^( TRY tryBlock= block ( catches )? (finalyBlock= block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT labelStatement= statement ) | expression | SEMI );
	[GrammarRule("statement")]
	private IApexNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 56);
		TraceIn("statement", 56);
		IApexNode node = default(IApexNode);

		int statement_StartIndex = input.Index;

		CommonTree IDENT95 = default(CommonTree);
		CommonTree IDENT104 = default(CommonTree);
		IApexNode trueStatement = default(IApexNode);
		IApexNode elseStatement = default(IApexNode);
		IApexNode forStatementInner = default(IApexNode);
		IApexNode foreachStatementInner = default(IApexNode);
		IApexNode whileInnerStatement = default(IApexNode);
		IApexNode doInnerStatemnt = default(IApexNode);
		IApexNode tryBlock = default(IApexNode);
		IApexNode finalyBlock = default(IApexNode);
		IApexNode labelStatement = default(IApexNode);
		IApexNode block89 = default(IApexNode);
		IApexNode parenthesizedExpression90 = default(IApexNode);
		ForInit forInit91 = default(ForInit);
		IApexNode forCondition92 = default(IApexNode);
		List<IApexNode> forUpdater93 = default(List<IApexNode>);
		ApexType type94 = default(ApexType);
		IApexNode expression96 = default(IApexNode);
		IApexNode parenthesizedExpression97 = default(IApexNode);
		IApexNode parenthesizedExpression98 = default(IApexNode);
		List<CatchBlock> catches99 = default(List<CatchBlock>);
		IApexNode parenthesizedExpression100 = default(IApexNode);
		SwitchBlock switchBlockLabels101 = default(SwitchBlock);
		IApexNode expression102 = default(IApexNode);
		IApexNode expression103 = default(IApexNode);
		IApexNode expression105 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(384, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:385:5: ( block | ^( IF parenthesizedExpression trueStatement= statement (elseStatement= statement )? ) | ^( FOR forInit forCondition forUpdater forStatementInner= statement ) | ^( FOR_EACH localModifierList type IDENT expression foreachStatementInner= statement ) | ^( WHILE parenthesizedExpression whileInnerStatement= statement ) | ^( DO doInnerStatemnt= statement parenthesizedExpression ) | ^( TRY tryBlock= block ( catches )? (finalyBlock= block )? ) | ^( SWITCH parenthesizedExpression switchBlockLabels ) | ^( SYNCHRONIZED parenthesizedExpression block ) | ^( RETURN ( expression )? ) | ^( THROW expression ) | ^( BREAK ( IDENT )? ) | ^( CONTINUE ( IDENT )? ) | ^( LABELED_STATEMENT IDENT labelStatement= statement ) | expression | SEMI )
			int alt93=16;
			try { DebugEnterDecision(93, false);
			switch (input.LA(1))
			{
			case BLOCK_SCOPE:
				{
				alt93 = 1;
				}
				break;
			case IF:
				{
				alt93 = 2;
				}
				break;
			case FOR:
				{
				alt93 = 3;
				}
				break;
			case FOR_EACH:
				{
				alt93 = 4;
				}
				break;
			case WHILE:
				{
				alt93 = 5;
				}
				break;
			case DO:
				{
				alt93 = 6;
				}
				break;
			case TRY:
				{
				alt93 = 7;
				}
				break;
			case SWITCH:
				{
				alt93 = 8;
				}
				break;
			case SYNCHRONIZED:
				{
				alt93 = 9;
				}
				break;
			case RETURN:
				{
				alt93 = 10;
				}
				break;
			case THROW:
				{
				alt93 = 11;
				}
				break;
			case BREAK:
				{
				alt93 = 12;
				}
				break;
			case CONTINUE:
				{
				alt93 = 13;
				}
				break;
			case LABELED_STATEMENT:
				{
				alt93 = 14;
				}
				break;
			case EXPR:
				{
				alt93 = 15;
				}
				break;
			case SEMI:
				{
				alt93 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:385:9: block
				{
				DebugLocation(385, 9);
				PushFollow(Follow._block_in_statement3157);
				block89=block();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(385, 15);
				if (state.backtracking == 0)
				{
					 node = block89; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:386:9: ^( IF parenthesizedExpression trueStatement= statement (elseStatement= statement )? )
				{
				DebugLocation(386, 9);
				if (state.backtracking == 0)
				{
					 node = new IfStatement(); 
				}
				DebugLocation(386, 39);
				DebugLocation(386, 41);
				Match(input,IF,Follow._IF_in_statement3172); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(386, 44);
				PushFollow(Follow._parenthesizedExpression_in_statement3174);
				parenthesizedExpression90=parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(387, 20);
				PushFollow(Follow._statement_in_statement3186);
				trueStatement=statement();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(387, 32);
				if (state.backtracking == 0)
				{
					 var ifStatement = node as IfStatement; 
					    		ifStatement.BoolExpression = parenthesizedExpression90; 
					    		ifStatement.TrueStatement = trueStatement; 
				}
				DebugLocation(390, 6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:390:6: (elseStatement= statement )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==BLOCK_SCOPE||LA87_1==BREAK||LA87_1==CONTINUE||LA87_1==DO||LA87_1==EXPR||LA87_1==FOR||LA87_1==FOR_EACH||LA87_1==IF||LA87_1==LABELED_STATEMENT||LA87_1==RETURN||LA87_1==SEMI||LA87_1==SWITCH||LA87_1==SYNCHRONIZED||LA87_1==THROW||LA87_1==TRY||LA87_1==WHILE))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:390:8: elseStatement= statement
					{
					DebugLocation(390, 22);
					PushFollow(Follow._statement_in_statement3202);
					elseStatement=statement();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(390, 34);
					if (state.backtracking == 0)
					{
						 (node as IfStatement).ElseStatement = elseStatement; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:391:9: ^( FOR forInit forCondition forUpdater forStatementInner= statement )
				{
				DebugLocation(391, 9);
				DebugLocation(391, 11);
				Match(input,FOR,Follow._FOR_in_statement3218); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(391, 15);
				PushFollow(Follow._forInit_in_statement3220);
				forInit91=forInit();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(391, 23);
				PushFollow(Follow._forCondition_in_statement3222);
				forCondition92=forCondition();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(391, 36);
				PushFollow(Follow._forUpdater_in_statement3224);
				forUpdater93=forUpdater();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(391, 65);
				PushFollow(Follow._statement_in_statement3230);
				forStatementInner=statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(392, 6);
				if (state.backtracking == 0)
				{
					var forStatement  = new ForStatement(); forStatement.Init = forInit91; forStatement.Condition = forCondition92;forStatement.Update = forUpdater93;forStatement.Statement = forStatementInner; node = forStatement; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:393:9: ^( FOR_EACH localModifierList type IDENT expression foreachStatementInner= statement )
				{
				DebugLocation(393, 9);
				DebugLocation(393, 11);
				Match(input,FOR_EACH,Follow._FOR_EACH_in_statement3249); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(393, 20);
				PushFollow(Follow._localModifierList_in_statement3251);
				localModifierList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(393, 38);
				PushFollow(Follow._type_in_statement3253);
				type94=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(393, 43);
				IDENT95=(CommonTree)Match(input,IDENT,Follow._IDENT_in_statement3255); if (state.failed) return node;
				DebugLocation(393, 49);
				PushFollow(Follow._expression_in_statement3257);
				expression96=expression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(393, 82);
				PushFollow(Follow._statement_in_statement3263);
				foreachStatementInner=statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(394, 6);
				if (state.backtracking == 0)
				{
					node = new ForEachStatement(type94, IDENT95.Text, expression96, foreachStatementInner); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:395:9: ^( WHILE parenthesizedExpression whileInnerStatement= statement )
				{
				DebugLocation(395, 9);
				DebugLocation(395, 11);
				Match(input,WHILE,Follow._WHILE_in_statement3283); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(395, 17);
				PushFollow(Follow._parenthesizedExpression_in_statement3285);
				parenthesizedExpression97=parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(395, 61);
				PushFollow(Follow._statement_in_statement3291);
				whileInnerStatement=statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(396, 2);
				if (state.backtracking == 0)
				{
					node = new WhileStatement(parenthesizedExpression97, whileInnerStatement);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:397:9: ^( DO doInnerStatemnt= statement parenthesizedExpression )
				{
				DebugLocation(397, 9);
				DebugLocation(397, 11);
				Match(input,DO,Follow._DO_in_statement3306); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(397, 30);
				PushFollow(Follow._statement_in_statement3312);
				doInnerStatemnt=statement();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(397, 42);
				PushFollow(Follow._parenthesizedExpression_in_statement3314);
				parenthesizedExpression98=parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(398, 6);
				if (state.backtracking == 0)
				{
					node = new DoStatement(parenthesizedExpression98, doInnerStatemnt);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:400:6: ^( TRY tryBlock= block ( catches )? (finalyBlock= block )? )
				{
				DebugLocation(400, 6);
				if (state.backtracking == 0)
				{
					node = new TryStatemnt();
				}
				DebugLocation(401, 6);
				DebugLocation(401, 8);
				Match(input,TRY,Follow._TRY_in_statement3347); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(401, 21);
				PushFollow(Follow._block_in_statement3353);
				tryBlock=block();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(401, 28);
				if (state.backtracking == 0)
				{
					var tryStatemnt = node as TryStatemnt;tryStatemnt.Try = tryBlock;
				}
				DebugLocation(402, 6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:402:6: ( catches )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==CATCH_CLAUSE_LIST))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:402:7: catches
					{
					DebugLocation(402, 7);
					PushFollow(Follow._catches_in_statement3363);
					catches99=catches();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(402, 14);
					if (state.backtracking == 0)
					{
						var tryStatemnt = node as TryStatemnt;tryStatemnt.Catches = catches99;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(403, 6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:403:6: (finalyBlock= block )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==BLOCK_SCOPE))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:403:7: finalyBlock= block
					{
					DebugLocation(403, 19);
					PushFollow(Follow._block_in_statement3379);
					finalyBlock=block();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(403, 26);
					if (state.backtracking == 0)
					{
						var tryStatemnt = node as TryStatemnt;tryStatemnt.Finaly = finalyBlock;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:404:9: ^( SWITCH parenthesizedExpression switchBlockLabels )
				{
				DebugLocation(404, 9);
				DebugLocation(404, 11);
				Match(input,SWITCH,Follow._SWITCH_in_statement3394); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(404, 18);
				PushFollow(Follow._parenthesizedExpression_in_statement3396);
				parenthesizedExpression100=parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(404, 42);
				PushFollow(Follow._switchBlockLabels_in_statement3398);
				switchBlockLabels101=switchBlockLabels();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(405, 6);
				if (state.backtracking == 0)
				{
					node = new SwitchStatement(parenthesizedExpression100, switchBlockLabels101);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:406:9: ^( SYNCHRONIZED parenthesizedExpression block )
				{
				DebugLocation(406, 9);
				DebugLocation(406, 11);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement3418); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(406, 24);
				PushFollow(Follow._parenthesizedExpression_in_statement3420);
				parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(406, 48);
				PushFollow(Follow._block_in_statement3422);
				block();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:407:9: ^( RETURN ( expression )? )
				{
				DebugLocation(407, 9);
				if (state.backtracking == 0)
				{
					node = new ReturnStatement();
				}
				DebugLocation(407, 42);
				DebugLocation(407, 44);
				Match(input,RETURN,Follow._RETURN_in_statement3438); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(407, 51);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:407:51: ( expression )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, false);
					int LA90_1 = input.LA(1);

					if ((LA90_1==EXPR))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:407:52: expression
						{
						DebugLocation(407, 52);
						PushFollow(Follow._expression_in_statement3441);
						expression102=expression();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(407, 63);
						if (state.backtracking == 0)
						{
							(node as ReturnStatement).Expression = expression102;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(90); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:408:8: ^( THROW expression )
				{
				DebugLocation(408, 8);
				if (state.backtracking == 0)
				{
					node = new ThrowStatement();
				}
				DebugLocation(408, 41);
				DebugLocation(408, 43);
				Match(input,THROW,Follow._THROW_in_statement3460); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(408, 49);
				PushFollow(Follow._expression_in_statement3462);
				expression103=expression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(408, 61);
				if (state.backtracking == 0)
				{
					(node as ThrowStatement).Expression = expression103;
				}

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:409:9: ^( BREAK ( IDENT )? )
				{
				DebugLocation(409, 9);
				DebugLocation(409, 11);
				Match(input,BREAK,Follow._BREAK_in_statement3477); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(409, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:409:17: ( IDENT )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_1 = input.LA(1);

					if ((LA91_1==IDENT))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:409:17: IDENT
						{
						DebugLocation(409, 17);
						Match(input,IDENT,Follow._IDENT_in_statement3479); if (state.failed) return node;

						}
						break;

					}
					} finally { DebugExitSubRule(91); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}

				DebugLocation(409, 25);
				if (state.backtracking == 0)
				{
					node = new BreakStatement();
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:410:9: ^( CONTINUE ( IDENT )? )
				{
				DebugLocation(410, 9);
				DebugLocation(410, 11);
				Match(input,CONTINUE,Follow._CONTINUE_in_statement3494); if (state.failed) return node;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return node;
					DebugLocation(410, 20);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:410:20: ( IDENT )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_1 = input.LA(1);

					if ((LA92_1==IDENT))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:410:20: IDENT
						{
						DebugLocation(410, 20);
						Match(input,IDENT,Follow._IDENT_in_statement3496); if (state.failed) return node;

						}
						break;

					}
					} finally { DebugExitSubRule(92); }


					Match(input, TokenTypes.Up, null); if (state.failed) return node;
				}

				DebugLocation(410, 27);
				if (state.backtracking == 0)
				{
					node = new ContinueStatement();
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:411:9: ^( LABELED_STATEMENT IDENT labelStatement= statement )
				{
				DebugLocation(411, 9);
				DebugLocation(411, 11);
				Match(input,LABELED_STATEMENT,Follow._LABELED_STATEMENT_in_statement3510); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(411, 29);
				IDENT104=(CommonTree)Match(input,IDENT,Follow._IDENT_in_statement3512); if (state.failed) return node;
				DebugLocation(411, 50);
				PushFollow(Follow._statement_in_statement3518);
				labelStatement=statement();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(411, 62);
				if (state.backtracking == 0)
				{
					node = new LabelStatement(IDENT104.Text, labelStatement);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:412:9: expression
				{
				DebugLocation(412, 9);
				PushFollow(Follow._expression_in_statement3530);
				expression105=expression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(412, 20);
				if (state.backtracking == 0)
				{
					 node = expression105; 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:413:9: SEMI
				{
				DebugLocation(413, 9);
				Match(input,SEMI,Follow._SEMI_in_statement3542); if (state.failed) return node;
				DebugLocation(413, 14);
				if (state.backtracking == 0)
				{
					node = new EmptyStatement();
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 56);
			LeaveRule("statement", 56);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 56, statement_StartIndex); }

		}
		DebugLocation(414, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return node;

	}
	// $ANTLR end "statement"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:417:1: catchClause returns [CatchBlock catchResult] : ^( CATCH formalParameterStandardDecl block ) ;
	[GrammarRule("catchClause")]
	private CatchBlock catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 57);
		TraceIn("catchClause", 57);
		CatchBlock catchResult = default(CatchBlock);

		int catchClause_StartIndex = input.Index;

		IApexNode block106 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(417, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return catchResult; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:418:5: ( ^( CATCH formalParameterStandardDecl block ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:418:9: ^( CATCH formalParameterStandardDecl block )
			{
			DebugLocation(418, 9);
			DebugLocation(418, 11);
			Match(input,CATCH,Follow._CATCH_in_catchClause3581); if (state.failed) return catchResult;

			Match(input, TokenTypes.Down, null); if (state.failed) return catchResult;
			DebugLocation(418, 17);
			PushFollow(Follow._formalParameterStandardDecl_in_catchClause3583);
			formalParameterStandardDecl();
			PopFollow();
			if (state.failed) return catchResult;
			DebugLocation(418, 45);
			PushFollow(Follow._block_in_catchClause3585);
			block106=block();
			PopFollow();
			if (state.failed) return catchResult;

			Match(input, TokenTypes.Up, null); if (state.failed) return catchResult;

			DebugLocation(418, 51);
			if (state.backtracking == 0)
			{
				catchResult = new CatchBlock(block106);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 57);
			LeaveRule("catchClause", 57);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 57, catchClause_StartIndex); }

		}
		DebugLocation(419, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return catchResult;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_switchBlockLabels();
	partial void LeaveRule_switchBlockLabels();
	// $ANTLR start "switchBlockLabels"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:421:1: switchBlockLabels returns [SwitchBlock sBlock] : ^( SWITCH_BLOCK_LABEL_LIST (beforeDefaultCase= switchCaseLabel )* ( switchDefaultLabel )? (aftereDefaultCase= switchCaseLabel )* ) ;
	[GrammarRule("switchBlockLabels")]
	private SwitchBlock switchBlockLabels()
	{
		EnterRule_switchBlockLabels();
		EnterRule("switchBlockLabels", 58);
		TraceIn("switchBlockLabels", 58);
		SwitchBlock sBlock = default(SwitchBlock);

		int switchBlockLabels_StartIndex = input.Index;

		SwitchCaseBlock beforeDefaultCase = default(SwitchCaseBlock);
		SwitchCaseBlock aftereDefaultCase = default(SwitchCaseBlock);
		SwitchCaseBlock switchDefaultLabel107 = default(SwitchCaseBlock);

		try { DebugEnterRule(GrammarFileName, "switchBlockLabels");
		DebugLocation(421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return sBlock; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:422:5: ( ^( SWITCH_BLOCK_LABEL_LIST (beforeDefaultCase= switchCaseLabel )* ( switchDefaultLabel )? (aftereDefaultCase= switchCaseLabel )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:423:5: ^( SWITCH_BLOCK_LABEL_LIST (beforeDefaultCase= switchCaseLabel )* ( switchDefaultLabel )? (aftereDefaultCase= switchCaseLabel )* )
			{
			DebugLocation(423, 5);
			if (state.backtracking == 0)
			{
				sBlock = new SwitchBlock();
			}
			DebugLocation(424, 6);
			DebugLocation(424, 8);
			Match(input,SWITCH_BLOCK_LABEL_LIST,Follow._SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels3622); if (state.failed) return sBlock;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return sBlock;
				DebugLocation(424, 32);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:424:32: (beforeDefaultCase= switchCaseLabel )*
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_1 = input.LA(1);

					if ((LA94_1==CASE))
					{
						int LA94_2 = input.LA(2);

						if ((EvaluatePredicate(synpred145_JavaTreeParser_fragment)))
						{
							alt94 = 1;
						}


					}


					} finally { DebugExitDecision(94); }
					switch ( alt94 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:424:33: beforeDefaultCase= switchCaseLabel
						{
						DebugLocation(424, 51);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels3629);
						beforeDefaultCase=switchCaseLabel();
						PopFollow();
						if (state.failed) return sBlock;
						DebugLocation(424, 69);
						if (state.backtracking == 0)
						{
							sBlock.Add(beforeDefaultCase);
						}

						}
						break;

					default:
						goto loop94;
					}
				}

				loop94:
					;

				} finally { DebugExitSubRule(94); }

				DebugLocation(425, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:425:7: ( switchDefaultLabel )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==DEFAULT))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:425:8: switchDefaultLabel
					{
					DebugLocation(425, 8);
					PushFollow(Follow._switchDefaultLabel_in_switchBlockLabels3642);
					switchDefaultLabel107=switchDefaultLabel();
					PopFollow();
					if (state.failed) return sBlock;
					DebugLocation(425, 27);
					if (state.backtracking == 0)
					{
						sBlock.Add(switchDefaultLabel107);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(425, 70);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:425:70: (aftereDefaultCase= switchCaseLabel )*
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, false);
					int LA96_1 = input.LA(1);

					if ((LA96_1==CASE))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch ( alt96 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:425:72: aftereDefaultCase= switchCaseLabel
						{
						DebugLocation(425, 90);
						PushFollow(Follow._switchCaseLabel_in_switchBlockLabels3654);
						aftereDefaultCase=switchCaseLabel();
						PopFollow();
						if (state.failed) return sBlock;
						DebugLocation(425, 108);
						if (state.backtracking == 0)
						{
							sBlock.Add(aftereDefaultCase);
						}

						}
						break;

					default:
						goto loop96;
					}
				}

				loop96:
					;

				} finally { DebugExitSubRule(96); }


				Match(input, TokenTypes.Up, null); if (state.failed) return sBlock;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockLabels", 58);
			LeaveRule("switchBlockLabels", 58);
			LeaveRule_switchBlockLabels();
			if (state.backtracking > 0) { Memoize(input, 58, switchBlockLabels_StartIndex); }

		}
		DebugLocation(426, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockLabels"); }
		return sBlock;

	}
	// $ANTLR end "switchBlockLabels"

	partial void EnterRule_switchCaseLabel();
	partial void LeaveRule_switchCaseLabel();
	// $ANTLR start "switchCaseLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:428:1: switchCaseLabel returns [SwitchCaseBlock caseB] : ^( CASE expression ( blockStatement )* ) ;
	[GrammarRule("switchCaseLabel")]
	private SwitchCaseBlock switchCaseLabel()
	{
		EnterRule_switchCaseLabel();
		EnterRule("switchCaseLabel", 59);
		TraceIn("switchCaseLabel", 59);
		SwitchCaseBlock caseB = default(SwitchCaseBlock);

		int switchCaseLabel_StartIndex = input.Index;

		IApexNode expression108 = default(IApexNode);
		IApexNode blockStatement109 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "switchCaseLabel");
		DebugLocation(428, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return caseB; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:429:5: ( ^( CASE expression ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:430:6: ^( CASE expression ( blockStatement )* )
			{
			DebugLocation(430, 6);
			DebugLocation(430, 8);
			Match(input,CASE,Follow._CASE_in_switchCaseLabel3696); if (state.failed) return caseB;

			Match(input, TokenTypes.Down, null); if (state.failed) return caseB;
			DebugLocation(430, 13);
			PushFollow(Follow._expression_in_switchCaseLabel3698);
			expression108=expression();
			PopFollow();
			if (state.failed) return caseB;
			DebugLocation(430, 24);
			if (state.backtracking == 0)
			{
				caseB = new SwitchCaseBlock(expression108);
			}
			DebugLocation(430, 73);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:430:73: ( blockStatement )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==AT||LA97_1==BLOCK_SCOPE||LA97_1==BREAK||LA97_1==BROKEN_EXPRESSION||LA97_1==CLASS||LA97_1==CONTINUE||LA97_1==DO||LA97_1==ENUM||LA97_1==EXPR||LA97_1==FOR||LA97_1==FOR_EACH||LA97_1==IF||LA97_1==INTERFACE||LA97_1==LABELED_STATEMENT||LA97_1==RETURN||LA97_1==SEMI||LA97_1==SWITCH||LA97_1==SYNCHRONIZED||LA97_1==THROW||LA97_1==TRY||LA97_1==VAR_DECLARATION||LA97_1==WHILE))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:430:74: blockStatement
					{
					DebugLocation(430, 74);
					PushFollow(Follow._blockStatement_in_switchCaseLabel3703);
					blockStatement109=blockStatement();
					PopFollow();
					if (state.failed) return caseB;
					DebugLocation(430, 89);
					if (state.backtracking == 0)
					{
						caseB.Add(blockStatement109);
					}

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }


			Match(input, TokenTypes.Up, null); if (state.failed) return caseB;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchCaseLabel", 59);
			LeaveRule("switchCaseLabel", 59);
			LeaveRule_switchCaseLabel();
			if (state.backtracking > 0) { Memoize(input, 59, switchCaseLabel_StartIndex); }

		}
		DebugLocation(431, 4);
		} finally { DebugExitRule(GrammarFileName, "switchCaseLabel"); }
		return caseB;

	}
	// $ANTLR end "switchCaseLabel"

	partial void EnterRule_switchDefaultLabel();
	partial void LeaveRule_switchDefaultLabel();
	// $ANTLR start "switchDefaultLabel"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:433:1: switchDefaultLabel returns [SwitchCaseBlock caseB] : ^( DEFAULT ( blockStatement )* ) ;
	[GrammarRule("switchDefaultLabel")]
	private SwitchCaseBlock switchDefaultLabel()
	{
		EnterRule_switchDefaultLabel();
		EnterRule("switchDefaultLabel", 60);
		TraceIn("switchDefaultLabel", 60);
		SwitchCaseBlock caseB = default(SwitchCaseBlock);

		int switchDefaultLabel_StartIndex = input.Index;

		IApexNode blockStatement110 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "switchDefaultLabel");
		DebugLocation(433, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return caseB; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:434:5: ( ^( DEFAULT ( blockStatement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:435:6: ^( DEFAULT ( blockStatement )* )
			{
			DebugLocation(435, 6);
			if (state.backtracking == 0)
			{
				caseB = new SwitchCaseBlock();
			}
			DebugLocation(436, 6);
			DebugLocation(436, 8);
			Match(input,DEFAULT,Follow._DEFAULT_in_switchDefaultLabel3749); if (state.failed) return caseB;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return caseB;
				DebugLocation(436, 16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:436:16: ( blockStatement )*
				try { DebugEnterSubRule(98);
				while (true)
				{
					int alt98=2;
					try { DebugEnterDecision(98, false);
					int LA98_1 = input.LA(1);

					if ((LA98_1==AT||LA98_1==BLOCK_SCOPE||LA98_1==BREAK||LA98_1==BROKEN_EXPRESSION||LA98_1==CLASS||LA98_1==CONTINUE||LA98_1==DO||LA98_1==ENUM||LA98_1==EXPR||LA98_1==FOR||LA98_1==FOR_EACH||LA98_1==IF||LA98_1==INTERFACE||LA98_1==LABELED_STATEMENT||LA98_1==RETURN||LA98_1==SEMI||LA98_1==SWITCH||LA98_1==SYNCHRONIZED||LA98_1==THROW||LA98_1==TRY||LA98_1==VAR_DECLARATION||LA98_1==WHILE))
					{
						alt98 = 1;
					}


					} finally { DebugExitDecision(98); }
					switch ( alt98 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:436:17: blockStatement
						{
						DebugLocation(436, 17);
						PushFollow(Follow._blockStatement_in_switchDefaultLabel3752);
						blockStatement110=blockStatement();
						PopFollow();
						if (state.failed) return caseB;
						DebugLocation(436, 32);
						if (state.backtracking == 0)
						{
							caseB.Add(blockStatement110);
						}

						}
						break;

					default:
						goto loop98;
					}
				}

				loop98:
					;

				} finally { DebugExitSubRule(98); }


				Match(input, TokenTypes.Up, null); if (state.failed) return caseB;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchDefaultLabel", 60);
			LeaveRule("switchDefaultLabel", 60);
			LeaveRule_switchDefaultLabel();
			if (state.backtracking > 0) { Memoize(input, 60, switchDefaultLabel_StartIndex); }

		}
		DebugLocation(437, 4);
		} finally { DebugExitRule(GrammarFileName, "switchDefaultLabel"); }
		return caseB;

	}
	// $ANTLR end "switchDefaultLabel"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:439:1: forInit returns [ForInit init] : ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) ;
	[GrammarRule("forInit")]
	private ForInit forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 61);
		TraceIn("forInit", 61);
		ForInit init = default(ForInit);

		int forInit_StartIndex = input.Index;

		LocalVariableDeclaration localVariableDeclaration111 = default(LocalVariableDeclaration);
		IApexNode expression112 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(439, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return init; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:5: ( ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:9: ^( FOR_INIT ( localVariableDeclaration | ( expression )* )? )
			{
			DebugLocation(440, 9);
			DebugLocation(440, 11);
			Match(input,FOR_INIT,Follow._FOR_INIT_in_forInit3785); if (state.failed) return init;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return init;
				DebugLocation(440, 20);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:20: ( localVariableDeclaration | ( expression )* )?
				int alt100=3;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case VAR_DECLARATION:
					{
					alt100 = 1;
					}
					break;
				case EXPR:
					{
					alt100 = 2;
					}
					break;
				case UP:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred152_JavaTreeParser_fragment)))
					{
						alt100 = 2;
					}
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:21: localVariableDeclaration
					{
					DebugLocation(440, 21);
					PushFollow(Follow._localVariableDeclaration_in_forInit3788);
					localVariableDeclaration111=localVariableDeclaration();
					PopFollow();
					if (state.failed) return init;
					DebugLocation(440, 46);
					if (state.backtracking == 0)
					{
						init = new ForInit(localVariableDeclaration111);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:113: ( expression )*
					{
					DebugLocation(440, 113);
					if (state.backtracking == 0)
					{
						init = new ForInit();
					}
					DebugLocation(440, 137);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:137: ( expression )*
					try { DebugEnterSubRule(99);
					while (true)
					{
						int alt99=2;
						try { DebugEnterDecision(99, false);
						int LA99_1 = input.LA(1);

						if ((LA99_1==EXPR))
						{
							alt99 = 1;
						}


						} finally { DebugExitDecision(99); }
						switch ( alt99 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:138: expression
							{
							DebugLocation(440, 138);
							PushFollow(Follow._expression_in_forInit3798);
							expression112=expression();
							PopFollow();
							if (state.failed) return init;
							DebugLocation(440, 149);
							if (state.backtracking == 0)
							{
								init.Add(expression112);
							}

							}
							break;

						default:
							goto loop99;
						}
					}

					loop99:
						;

					} finally { DebugExitSubRule(99); }


					}
					break;

				}
				} finally { DebugExitSubRule(100); }


				Match(input, TokenTypes.Up, null); if (state.failed) return init;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 61);
			LeaveRule("forInit", 61);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 61, forInit_StartIndex); }

		}
		DebugLocation(441, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return init;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:443:1: forCondition returns [IApexNode condition] : ^( FOR_CONDITION ( expression )? ) ;
	[GrammarRule("forCondition")]
	private IApexNode forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 62);
		TraceIn("forCondition", 62);
		IApexNode condition = default(IApexNode);

		int forCondition_StartIndex = input.Index;

		IApexNode expression113 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(443, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return condition; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:444:5: ( ^( FOR_CONDITION ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:444:9: ^( FOR_CONDITION ( expression )? )
			{
			DebugLocation(444, 9);
			DebugLocation(444, 11);
			Match(input,FOR_CONDITION,Follow._FOR_CONDITION_in_forCondition3833); if (state.failed) return condition;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return condition;
				DebugLocation(444, 25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:444:25: ( expression )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==EXPR))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:444:26: expression
					{
					DebugLocation(444, 26);
					PushFollow(Follow._expression_in_forCondition3836);
					expression113=expression();
					PopFollow();
					if (state.failed) return condition;
					DebugLocation(444, 37);
					if (state.backtracking == 0)
					{
						condition = expression113;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				Match(input, TokenTypes.Up, null); if (state.failed) return condition;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forCondition", 62);
			LeaveRule("forCondition", 62);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 62, forCondition_StartIndex); }

		}
		DebugLocation(445, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return condition;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdater();
	partial void LeaveRule_forUpdater();
	// $ANTLR start "forUpdater"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:447:1: forUpdater returns [List<IApexNode> updates] : ^( FOR_UPDATE ( expression )* ) ;
	[GrammarRule("forUpdater")]
	private List<IApexNode> forUpdater()
	{
		EnterRule_forUpdater();
		EnterRule("forUpdater", 63);
		TraceIn("forUpdater", 63);
		List<IApexNode> updates = default(List<IApexNode>);

		int forUpdater_StartIndex = input.Index;

		IApexNode expression114 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "forUpdater");
		DebugLocation(447, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return updates; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:448:5: ( ^( FOR_UPDATE ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:449:5: ^( FOR_UPDATE ( expression )* )
			{
			DebugLocation(449, 5);
			if (state.backtracking == 0)
			{
				updates = new List<IApexNode>();
			}
			DebugLocation(450, 5);
			DebugLocation(450, 7);
			Match(input,FOR_UPDATE,Follow._FOR_UPDATE_in_forUpdater3880); if (state.failed) return updates;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return updates;
				DebugLocation(450, 18);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:450:18: ( expression )*
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=2;
					try { DebugEnterDecision(102, false);
					int LA102_1 = input.LA(1);

					if ((LA102_1==EXPR))
					{
						alt102 = 1;
					}


					} finally { DebugExitDecision(102); }
					switch ( alt102 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:450:19: expression
						{
						DebugLocation(450, 19);
						PushFollow(Follow._expression_in_forUpdater3883);
						expression114=expression();
						PopFollow();
						if (state.failed) return updates;
						DebugLocation(450, 30);
						if (state.backtracking == 0)
						{
							updates.Add(expression114);
						}

						}
						break;

					default:
						goto loop102;
					}
				}

				loop102:
					;

				} finally { DebugExitSubRule(102); }


				Match(input, TokenTypes.Up, null); if (state.failed) return updates;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forUpdater", 63);
			LeaveRule("forUpdater", 63);
			LeaveRule_forUpdater();
			if (state.backtracking > 0) { Memoize(input, 63, forUpdater_StartIndex); }

		}
		DebugLocation(451, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdater"); }
		return updates;

	}
	// $ANTLR end "forUpdater"

	partial void EnterRule_parenthesizedExpression();
	partial void LeaveRule_parenthesizedExpression();
	// $ANTLR start "parenthesizedExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:455:1: parenthesizedExpression returns [IApexNode node] : ^( PARENTESIZED_EXPR expression ) ;
	[GrammarRule("parenthesizedExpression")]
	private IApexNode parenthesizedExpression()
	{
		EnterRule_parenthesizedExpression();
		EnterRule("parenthesizedExpression", 64);
		TraceIn("parenthesizedExpression", 64);
		IApexNode node = default(IApexNode);

		int parenthesizedExpression_StartIndex = input.Index;

		IApexNode expression115 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "parenthesizedExpression");
		DebugLocation(455, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:456:5: ( ^( PARENTESIZED_EXPR expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:456:9: ^( PARENTESIZED_EXPR expression )
			{
			DebugLocation(456, 9);
			DebugLocation(456, 11);
			Match(input,PARENTESIZED_EXPR,Follow._PARENTESIZED_EXPR_in_parenthesizedExpression3918); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(456, 29);
			PushFollow(Follow._expression_in_parenthesizedExpression3920);
			expression115=expression();
			PopFollow();
			if (state.failed) return node;

			Match(input, TokenTypes.Up, null); if (state.failed) return node;

			DebugLocation(456, 41);
			if (state.backtracking == 0)
			{
				node = expression115;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parenthesizedExpression", 64);
			LeaveRule("parenthesizedExpression", 64);
			LeaveRule_parenthesizedExpression();
			if (state.backtracking > 0) { Memoize(input, 64, parenthesizedExpression_StartIndex); }

		}
		DebugLocation(457, 4);
		} finally { DebugExitRule(GrammarFileName, "parenthesizedExpression"); }
		return node;

	}
	// $ANTLR end "parenthesizedExpression"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:459:1: expression returns [IApexNode node] : ^( EXPR expr ) ;
	[GrammarRule("expression")]
	private IApexNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 65);
		TraceIn("expression", 65);
		IApexNode node = default(IApexNode);

		int expression_StartIndex = input.Index;

		IApexNode expr116 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(459, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:460:5: ( ^( EXPR expr ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:460:9: ^( EXPR expr )
			{
			DebugLocation(460, 9);
			DebugLocation(460, 11);
			Match(input,EXPR,Follow._EXPR_in_expression3951); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(460, 16);
			PushFollow(Follow._expr_in_expression3953);
			expr116=expr();
			PopFollow();
			if (state.failed) return node;

			Match(input, TokenTypes.Up, null); if (state.failed) return node;

			DebugLocation(460, 22);
			if (state.backtracking == 0)
			{
				node = expr116;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 65);
			LeaveRule("expression", 65);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 65, expression_StartIndex); }

		}
		DebugLocation(461, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return node;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:463:1: expr returns [IApexNode node] : ( ^( ASSIGN a= expr b= expr ) | ^( PLUS_ASSIGN a= expr b= expr ) | ^( MINUS_ASSIGN a= expr b= expr ) | ^( STAR_ASSIGN a= expr b= expr ) | ^( DIV_ASSIGN a= expr b= expr ) | ^( AND_ASSIGN a= expr b= expr ) | ^( OR_ASSIGN a= expr b= expr ) | ^( XOR_ASSIGN a= expr b= expr ) | ^( MOD_ASSIGN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_LEFT_ASSIGN a= expr b= expr ) | ^( QUESTION ifexpression= expr a= expr b= expr ) | ^( LOGICAL_OR a= expr b= expr ) | ^( LOGICAL_AND a= expr b= expr ) | ^( OR a= expr b= expr ) | ^( XOR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( EQUAL a= expr b= expr ) | ^( NOT_EQUAL a= expr b= expr ) | ^( INSTANCEOF a= expr type ) | ^( LESS_OR_EQUAL a= expr b= expr ) | ^( GREATER_OR_EQUAL a= expr b= expr ) | ^( GREATER_THAN a= expr b= expr ) | ^( LESS_THAN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_LEFT a= expr b= expr ) | ^( PLUS a= expr b= expr ) | ^( MINUS a= expr b= expr ) | ^( STAR a= expr b= expr ) | ^( DIV a= expr b= expr ) | ^( MOD a= expr b= expr ) | ^( UNARY_PLUS a= expr ) | ^( UNARY_MINUS a= expr ) | ^( PRE_INC a= expr ) | ^( PRE_DEC a= expr ) | ^( POST_INC a= expr ) | ^( POST_DEC a= expr ) | ^( NOT a= expr ) | ^( LOGICAL_NOT a= expr ) | ^( CAST_EXPR type a= expr ) | primaryExpression );
	[GrammarRule("expr")]
	private IApexNode expr()
	{
		EnterRule_expr();
		EnterRule("expr", 66);
		TraceIn("expr", 66);
		IApexNode node = default(IApexNode);

		int expr_StartIndex = input.Index;

		IApexNode a = default(IApexNode);
		IApexNode b = default(IApexNode);
		IApexNode ifexpression = default(IApexNode);
		ApexType type117 = default(ApexType);
		ApexType type118 = default(ApexType);
		IApexNode primaryExpression119 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(463, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:464:5: ( ^( ASSIGN a= expr b= expr ) | ^( PLUS_ASSIGN a= expr b= expr ) | ^( MINUS_ASSIGN a= expr b= expr ) | ^( STAR_ASSIGN a= expr b= expr ) | ^( DIV_ASSIGN a= expr b= expr ) | ^( AND_ASSIGN a= expr b= expr ) | ^( OR_ASSIGN a= expr b= expr ) | ^( XOR_ASSIGN a= expr b= expr ) | ^( MOD_ASSIGN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_LEFT_ASSIGN a= expr b= expr ) | ^( QUESTION ifexpression= expr a= expr b= expr ) | ^( LOGICAL_OR a= expr b= expr ) | ^( LOGICAL_AND a= expr b= expr ) | ^( OR a= expr b= expr ) | ^( XOR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( EQUAL a= expr b= expr ) | ^( NOT_EQUAL a= expr b= expr ) | ^( INSTANCEOF a= expr type ) | ^( LESS_OR_EQUAL a= expr b= expr ) | ^( GREATER_OR_EQUAL a= expr b= expr ) | ^( GREATER_THAN a= expr b= expr ) | ^( LESS_THAN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_LEFT a= expr b= expr ) | ^( PLUS a= expr b= expr ) | ^( MINUS a= expr b= expr ) | ^( STAR a= expr b= expr ) | ^( DIV a= expr b= expr ) | ^( MOD a= expr b= expr ) | ^( UNARY_PLUS a= expr ) | ^( UNARY_MINUS a= expr ) | ^( PRE_INC a= expr ) | ^( PRE_DEC a= expr ) | ^( POST_INC a= expr ) | ^( POST_DEC a= expr ) | ^( NOT a= expr ) | ^( LOGICAL_NOT a= expr ) | ^( CAST_EXPR type a= expr ) | primaryExpression )
			int alt103=43;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case ASSIGN:
				{
				alt103 = 1;
				}
				break;
			case PLUS_ASSIGN:
				{
				alt103 = 2;
				}
				break;
			case MINUS_ASSIGN:
				{
				alt103 = 3;
				}
				break;
			case STAR_ASSIGN:
				{
				alt103 = 4;
				}
				break;
			case DIV_ASSIGN:
				{
				alt103 = 5;
				}
				break;
			case AND_ASSIGN:
				{
				alt103 = 6;
				}
				break;
			case OR_ASSIGN:
				{
				alt103 = 7;
				}
				break;
			case XOR_ASSIGN:
				{
				alt103 = 8;
				}
				break;
			case MOD_ASSIGN:
				{
				alt103 = 9;
				}
				break;
			case BIT_SHIFT_RIGHT_ASSIGN:
				{
				alt103 = 10;
				}
				break;
			case SHIFT_RIGHT_ASSIGN:
				{
				alt103 = 11;
				}
				break;
			case SHIFT_LEFT_ASSIGN:
				{
				alt103 = 12;
				}
				break;
			case QUESTION:
				{
				alt103 = 13;
				}
				break;
			case LOGICAL_OR:
				{
				alt103 = 14;
				}
				break;
			case LOGICAL_AND:
				{
				alt103 = 15;
				}
				break;
			case OR:
				{
				alt103 = 16;
				}
				break;
			case XOR:
				{
				alt103 = 17;
				}
				break;
			case AND:
				{
				alt103 = 18;
				}
				break;
			case EQUAL:
				{
				alt103 = 19;
				}
				break;
			case NOT_EQUAL:
				{
				alt103 = 20;
				}
				break;
			case INSTANCEOF:
				{
				alt103 = 21;
				}
				break;
			case LESS_OR_EQUAL:
				{
				alt103 = 22;
				}
				break;
			case GREATER_OR_EQUAL:
				{
				alt103 = 23;
				}
				break;
			case GREATER_THAN:
				{
				alt103 = 24;
				}
				break;
			case LESS_THAN:
				{
				alt103 = 25;
				}
				break;
			case BIT_SHIFT_RIGHT:
				{
				alt103 = 26;
				}
				break;
			case SHIFT_RIGHT:
				{
				alt103 = 27;
				}
				break;
			case SHIFT_LEFT:
				{
				alt103 = 28;
				}
				break;
			case PLUS:
				{
				alt103 = 29;
				}
				break;
			case MINUS:
				{
				alt103 = 30;
				}
				break;
			case STAR:
				{
				alt103 = 31;
				}
				break;
			case DIV:
				{
				alt103 = 32;
				}
				break;
			case MOD:
				{
				alt103 = 33;
				}
				break;
			case UNARY_PLUS:
				{
				alt103 = 34;
				}
				break;
			case UNARY_MINUS:
				{
				alt103 = 35;
				}
				break;
			case PRE_INC:
				{
				alt103 = 36;
				}
				break;
			case PRE_DEC:
				{
				alt103 = 37;
				}
				break;
			case POST_INC:
				{
				alt103 = 38;
				}
				break;
			case POST_DEC:
				{
				alt103 = 39;
				}
				break;
			case NOT:
				{
				alt103 = 40;
				}
				break;
			case LOGICAL_NOT:
				{
				alt103 = 41;
				}
				break;
			case CAST_EXPR:
				{
				alt103 = 42;
				}
				break;
			case ARRAY_DECLARATOR:
			case ARRAY_ELEMENT_ACCESS:
			case CHARACTER_LITERAL:
			case CLASS_CONSTRUCTOR_CALL:
			case DECIMAL_LITERAL:
			case DOT:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENT:
			case METHOD_CALL:
			case NULL:
			case OCTAL_LITERAL:
			case PARENTESIZED_EXPR:
			case STATIC_ARRAY_CREATOR:
			case STRING_LITERAL:
			case SUPER:
			case SUPER_CONSTRUCTOR_CALL:
			case THIS:
			case THIS_CONSTRUCTOR_CALL:
			case TRUE:
				{
				alt103 = 43;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:464:9: ^( ASSIGN a= expr b= expr )
				{
				DebugLocation(464, 9);
				DebugLocation(464, 11);
				Match(input,ASSIGN,Follow._ASSIGN_in_expr3980); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(464, 20);
				PushFollow(Follow._expr_in_expr3985);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(464, 27);
				PushFollow(Follow._expr_in_expr3989);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(464, 34);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:465:9: ^( PLUS_ASSIGN a= expr b= expr )
				{
				DebugLocation(465, 9);
				DebugLocation(465, 11);
				Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_expr4003); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(465, 24);
				PushFollow(Follow._expr_in_expr4007);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(465, 31);
				PushFollow(Follow._expr_in_expr4011);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(465, 37);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:466:9: ^( MINUS_ASSIGN a= expr b= expr )
				{
				DebugLocation(466, 9);
				DebugLocation(466, 11);
				Match(input,MINUS_ASSIGN,Follow._MINUS_ASSIGN_in_expr4024); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(466, 25);
				PushFollow(Follow._expr_in_expr4028);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(466, 32);
				PushFollow(Follow._expr_in_expr4032);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(466, 38);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:467:9: ^( STAR_ASSIGN a= expr b= expr )
				{
				DebugLocation(467, 9);
				DebugLocation(467, 11);
				Match(input,STAR_ASSIGN,Follow._STAR_ASSIGN_in_expr4045); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(467, 24);
				PushFollow(Follow._expr_in_expr4049);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(467, 31);
				PushFollow(Follow._expr_in_expr4053);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(467, 37);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:468:9: ^( DIV_ASSIGN a= expr b= expr )
				{
				DebugLocation(468, 9);
				DebugLocation(468, 11);
				Match(input,DIV_ASSIGN,Follow._DIV_ASSIGN_in_expr4066); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(468, 23);
				PushFollow(Follow._expr_in_expr4070);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(468, 30);
				PushFollow(Follow._expr_in_expr4074);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(468, 36);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:469:9: ^( AND_ASSIGN a= expr b= expr )
				{
				DebugLocation(469, 9);
				DebugLocation(469, 11);
				Match(input,AND_ASSIGN,Follow._AND_ASSIGN_in_expr4087); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(469, 23);
				PushFollow(Follow._expr_in_expr4091);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(469, 30);
				PushFollow(Follow._expr_in_expr4095);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(469, 36);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:470:9: ^( OR_ASSIGN a= expr b= expr )
				{
				DebugLocation(470, 9);
				DebugLocation(470, 11);
				Match(input,OR_ASSIGN,Follow._OR_ASSIGN_in_expr4108); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(470, 22);
				PushFollow(Follow._expr_in_expr4112);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(470, 29);
				PushFollow(Follow._expr_in_expr4116);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(470, 35);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:471:9: ^( XOR_ASSIGN a= expr b= expr )
				{
				DebugLocation(471, 9);
				DebugLocation(471, 11);
				Match(input,XOR_ASSIGN,Follow._XOR_ASSIGN_in_expr4129); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(471, 23);
				PushFollow(Follow._expr_in_expr4133);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(471, 30);
				PushFollow(Follow._expr_in_expr4137);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(471, 36);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:472:9: ^( MOD_ASSIGN a= expr b= expr )
				{
				DebugLocation(472, 9);
				DebugLocation(472, 11);
				Match(input,MOD_ASSIGN,Follow._MOD_ASSIGN_in_expr4150); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(472, 23);
				PushFollow(Follow._expr_in_expr4154);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(472, 30);
				PushFollow(Follow._expr_in_expr4158);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(472, 36);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:473:9: ^( BIT_SHIFT_RIGHT_ASSIGN a= expr b= expr )
				{
				DebugLocation(473, 9);
				DebugLocation(473, 11);
				Match(input,BIT_SHIFT_RIGHT_ASSIGN,Follow._BIT_SHIFT_RIGHT_ASSIGN_in_expr4171); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(473, 35);
				PushFollow(Follow._expr_in_expr4175);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(473, 42);
				PushFollow(Follow._expr_in_expr4179);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(473, 48);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:474:9: ^( SHIFT_RIGHT_ASSIGN a= expr b= expr )
				{
				DebugLocation(474, 9);
				DebugLocation(474, 11);
				Match(input,SHIFT_RIGHT_ASSIGN,Follow._SHIFT_RIGHT_ASSIGN_in_expr4192); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(474, 31);
				PushFollow(Follow._expr_in_expr4196);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(474, 38);
				PushFollow(Follow._expr_in_expr4200);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(474, 44);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:475:9: ^( SHIFT_LEFT_ASSIGN a= expr b= expr )
				{
				DebugLocation(475, 9);
				DebugLocation(475, 11);
				Match(input,SHIFT_LEFT_ASSIGN,Follow._SHIFT_LEFT_ASSIGN_in_expr4213); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(475, 30);
				PushFollow(Follow._expr_in_expr4217);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(475, 37);
				PushFollow(Follow._expr_in_expr4221);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(475, 43);
				if (state.backtracking == 0)
				{
					node = new AssigmentExpression(a, b);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:477:9: ^( QUESTION ifexpression= expr a= expr b= expr )
				{
				DebugLocation(477, 9);
				DebugLocation(477, 11);
				Match(input,QUESTION,Follow._QUESTION_in_expr4239); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(477, 32);
				PushFollow(Follow._expr_in_expr4243);
				ifexpression=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(477, 39);
				PushFollow(Follow._expr_in_expr4247);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(477, 46);
				PushFollow(Follow._expr_in_expr4251);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(477, 52);
				if (state.backtracking == 0)
				{
					node = new TernarIfExpression(ifexpression, a, b);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:479:9: ^( LOGICAL_OR a= expr b= expr )
				{
				DebugLocation(479, 9);
				DebugLocation(479, 11);
				Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_expr4269); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(479, 23);
				PushFollow(Follow._expr_in_expr4273);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(479, 30);
				PushFollow(Follow._expr_in_expr4277);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(479, 36);
				if (state.backtracking == 0)
				{
					node = new LogicalDoubleExpression(a, b);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:480:9: ^( LOGICAL_AND a= expr b= expr )
				{
				DebugLocation(480, 9);
				DebugLocation(480, 11);
				Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_expr4290); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(480, 24);
				PushFollow(Follow._expr_in_expr4294);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(480, 31);
				PushFollow(Follow._expr_in_expr4298);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(480, 37);
				if (state.backtracking == 0)
				{
					node = new LogicalDoubleExpression(a, b);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:482:9: ^( OR a= expr b= expr )
				{
				DebugLocation(482, 9);
				DebugLocation(482, 11);
				Match(input,OR,Follow._OR_in_expr4316); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(482, 15);
				PushFollow(Follow._expr_in_expr4320);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(482, 22);
				PushFollow(Follow._expr_in_expr4324);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(482, 28);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:483:9: ^( XOR a= expr b= expr )
				{
				DebugLocation(483, 9);
				DebugLocation(483, 11);
				Match(input,XOR,Follow._XOR_in_expr4337); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(483, 16);
				PushFollow(Follow._expr_in_expr4341);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(483, 23);
				PushFollow(Follow._expr_in_expr4345);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(483, 29);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:484:9: ^( AND a= expr b= expr )
				{
				DebugLocation(484, 9);
				DebugLocation(484, 11);
				Match(input,AND,Follow._AND_in_expr4358); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(484, 16);
				PushFollow(Follow._expr_in_expr4362);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(484, 23);
				PushFollow(Follow._expr_in_expr4366);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(484, 29);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:485:9: ^( EQUAL a= expr b= expr )
				{
				DebugLocation(485, 9);
				DebugLocation(485, 11);
				Match(input,EQUAL,Follow._EQUAL_in_expr4379); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(485, 18);
				PushFollow(Follow._expr_in_expr4383);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(485, 25);
				PushFollow(Follow._expr_in_expr4387);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(485, 32);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:486:9: ^( NOT_EQUAL a= expr b= expr )
				{
				DebugLocation(486, 9);
				DebugLocation(486, 11);
				Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_expr4401); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(486, 22);
				PushFollow(Follow._expr_in_expr4405);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(486, 29);
				PushFollow(Follow._expr_in_expr4409);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(486, 35);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:488:9: ^( INSTANCEOF a= expr type )
				{
				DebugLocation(488, 9);
				DebugLocation(488, 11);
				Match(input,INSTANCEOF,Follow._INSTANCEOF_in_expr4427); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(488, 23);
				PushFollow(Follow._expr_in_expr4431);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(488, 29);
				PushFollow(Follow._type_in_expr4433);
				type117=type();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(488, 34);
				if (state.backtracking == 0)
				{
					node = new InstanceOf(type117, a);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:490:9: ^( LESS_OR_EQUAL a= expr b= expr )
				{
				DebugLocation(490, 9);
				DebugLocation(490, 11);
				Match(input,LESS_OR_EQUAL,Follow._LESS_OR_EQUAL_in_expr4451); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(490, 26);
				PushFollow(Follow._expr_in_expr4455);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(490, 33);
				PushFollow(Follow._expr_in_expr4459);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(490, 39);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:491:9: ^( GREATER_OR_EQUAL a= expr b= expr )
				{
				DebugLocation(491, 9);
				DebugLocation(491, 11);
				Match(input,GREATER_OR_EQUAL,Follow._GREATER_OR_EQUAL_in_expr4472); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(491, 29);
				PushFollow(Follow._expr_in_expr4476);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(491, 36);
				PushFollow(Follow._expr_in_expr4480);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(491, 42);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:492:9: ^( GREATER_THAN a= expr b= expr )
				{
				DebugLocation(492, 9);
				DebugLocation(492, 11);
				Match(input,GREATER_THAN,Follow._GREATER_THAN_in_expr4493); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(492, 25);
				PushFollow(Follow._expr_in_expr4497);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(492, 32);
				PushFollow(Follow._expr_in_expr4501);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(492, 38);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:493:9: ^( LESS_THAN a= expr b= expr )
				{
				DebugLocation(493, 9);
				DebugLocation(493, 11);
				Match(input,LESS_THAN,Follow._LESS_THAN_in_expr4514); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(493, 22);
				PushFollow(Follow._expr_in_expr4518);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(493, 29);
				PushFollow(Follow._expr_in_expr4522);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(493, 35);
				if (state.backtracking == 0)
				{
					node = new BynaryOperationWithBooleanResultExpression(a, b);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:495:9: ^( BIT_SHIFT_RIGHT a= expr b= expr )
				{
				DebugLocation(495, 9);
				DebugLocation(495, 11);
				Match(input,BIT_SHIFT_RIGHT,Follow._BIT_SHIFT_RIGHT_in_expr4540); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(495, 28);
				PushFollow(Follow._expr_in_expr4544);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(495, 35);
				PushFollow(Follow._expr_in_expr4548);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(495, 41);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:496:9: ^( SHIFT_RIGHT a= expr b= expr )
				{
				DebugLocation(496, 9);
				DebugLocation(496, 11);
				Match(input,SHIFT_RIGHT,Follow._SHIFT_RIGHT_in_expr4561); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(496, 24);
				PushFollow(Follow._expr_in_expr4565);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(496, 31);
				PushFollow(Follow._expr_in_expr4569);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(496, 37);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:497:9: ^( SHIFT_LEFT a= expr b= expr )
				{
				DebugLocation(497, 9);
				DebugLocation(497, 11);
				Match(input,SHIFT_LEFT,Follow._SHIFT_LEFT_in_expr4582); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(497, 23);
				PushFollow(Follow._expr_in_expr4586);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(497, 30);
				PushFollow(Follow._expr_in_expr4590);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(497, 36);
				if (state.backtracking == 0)
				{
					node = new BitOperationExpression(a, b);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:499:9: ^( PLUS a= expr b= expr )
				{
				DebugLocation(499, 9);
				DebugLocation(499, 11);
				Match(input,PLUS,Follow._PLUS_in_expr4612); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(499, 17);
				PushFollow(Follow._expr_in_expr4616);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(499, 24);
				PushFollow(Follow._expr_in_expr4620);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(499, 30);
				if (state.backtracking == 0)
				{
					node = new MathExpression(a, b);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:500:9: ^( MINUS a= expr b= expr )
				{
				DebugLocation(500, 9);
				DebugLocation(500, 11);
				Match(input,MINUS,Follow._MINUS_in_expr4633); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(500, 18);
				PushFollow(Follow._expr_in_expr4637);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(500, 25);
				PushFollow(Follow._expr_in_expr4641);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(500, 31);
				if (state.backtracking == 0)
				{
					node = new MathExpression(a, b);
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:501:9: ^( STAR a= expr b= expr )
				{
				DebugLocation(501, 9);
				DebugLocation(501, 11);
				Match(input,STAR,Follow._STAR_in_expr4654); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(501, 17);
				PushFollow(Follow._expr_in_expr4658);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(501, 24);
				PushFollow(Follow._expr_in_expr4662);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(501, 30);
				if (state.backtracking == 0)
				{
					node = new MathExpression(a, b);
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:502:9: ^( DIV a= expr b= expr )
				{
				DebugLocation(502, 9);
				DebugLocation(502, 11);
				Match(input,DIV,Follow._DIV_in_expr4675); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(502, 16);
				PushFollow(Follow._expr_in_expr4679);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(502, 23);
				PushFollow(Follow._expr_in_expr4683);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(502, 29);
				if (state.backtracking == 0)
				{
					node = new MathExpression(a, b);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:503:9: ^( MOD a= expr b= expr )
				{
				DebugLocation(503, 9);
				DebugLocation(503, 11);
				Match(input,MOD,Follow._MOD_in_expr4696); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(503, 16);
				PushFollow(Follow._expr_in_expr4700);
				a=expr();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(503, 23);
				PushFollow(Follow._expr_in_expr4704);
				b=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(503, 29);
				if (state.backtracking == 0)
				{
					node = new MathExpression(a, b);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:505:9: ^( UNARY_PLUS a= expr )
				{
				DebugLocation(505, 9);
				DebugLocation(505, 11);
				Match(input,UNARY_PLUS,Follow._UNARY_PLUS_in_expr4722); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(505, 23);
				PushFollow(Follow._expr_in_expr4726);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 35:
				DebugEnterAlt(35);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:506:9: ^( UNARY_MINUS a= expr )
				{
				DebugLocation(506, 9);
				DebugLocation(506, 11);
				Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_expr4738); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(506, 24);
				PushFollow(Follow._expr_in_expr4742);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 36:
				DebugEnterAlt(36);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:507:9: ^( PRE_INC a= expr )
				{
				DebugLocation(507, 9);
				DebugLocation(507, 11);
				Match(input,PRE_INC,Follow._PRE_INC_in_expr4754); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(507, 20);
				PushFollow(Follow._expr_in_expr4758);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(507, 27);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:508:9: ^( PRE_DEC a= expr )
				{
				DebugLocation(508, 9);
				DebugLocation(508, 11);
				Match(input,PRE_DEC,Follow._PRE_DEC_in_expr4772); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(508, 20);
				PushFollow(Follow._expr_in_expr4776);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(508, 26);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:509:9: ^( POST_INC a= expr )
				{
				DebugLocation(509, 9);
				DebugLocation(509, 11);
				Match(input,POST_INC,Follow._POST_INC_in_expr4789); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(509, 21);
				PushFollow(Follow._expr_in_expr4793);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(509, 27);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:510:9: ^( POST_DEC a= expr )
				{
				DebugLocation(510, 9);
				DebugLocation(510, 11);
				Match(input,POST_DEC,Follow._POST_DEC_in_expr4806); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(510, 21);
				PushFollow(Follow._expr_in_expr4810);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(510, 27);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:511:9: ^( NOT a= expr )
				{
				DebugLocation(511, 9);
				DebugLocation(511, 11);
				Match(input,NOT,Follow._NOT_in_expr4823); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(511, 16);
				PushFollow(Follow._expr_in_expr4827);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(511, 22);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:512:9: ^( LOGICAL_NOT a= expr )
				{
				DebugLocation(512, 9);
				DebugLocation(512, 11);
				Match(input,LOGICAL_NOT,Follow._LOGICAL_NOT_in_expr4840); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(512, 24);
				PushFollow(Follow._expr_in_expr4844);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(512, 30);
				if (state.backtracking == 0)
				{
					node = a;
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:514:9: ^( CAST_EXPR type a= expr )
				{
				DebugLocation(514, 9);
				DebugLocation(514, 11);
				Match(input,CAST_EXPR,Follow._CAST_EXPR_in_expr4862); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(514, 21);
				PushFollow(Follow._type_in_expr4864);
				type118=type();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(514, 27);
				PushFollow(Follow._expr_in_expr4868);
				a=expr();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(514, 33);
				if (state.backtracking == 0)
				{
					node = new CastExpression(type118, a);
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:515:9: primaryExpression
				{
				DebugLocation(515, 9);
				PushFollow(Follow._primaryExpression_in_expr4880);
				primaryExpression119=primaryExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(515, 27);
				if (state.backtracking == 0)
				{
					node = primaryExpression119;
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 66);
			LeaveRule("expr", 66);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 66, expr_StartIndex); }

		}
		DebugLocation(516, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return node;

	}
	// $ANTLR end "expr"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:518:1: primaryExpression returns [IApexNode node] : ( ^( DOT (dotPrimaryExpression= primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL methodPrimoryExpression= primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER );
	[GrammarRule("primaryExpression")]
	private IApexNode primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 67);
		TraceIn("primaryExpression", 67);
		IApexNode node = default(IApexNode);

		int primaryExpression_StartIndex = input.Index;

		CommonTree IDENT120 = default(CommonTree);
		CommonTree IDENT123 = default(CommonTree);
		IApexNode dotPrimaryExpression = default(IApexNode);
		IApexNode methodPrimoryExpression = default(IApexNode);
		IApexNode innerNewExpression121 = default(IApexNode);
		IApexNode parenthesizedExpression122 = default(IApexNode);
		List<ApexType> genericTypeArgumentList124 = default(List<ApexType>);
		List<IApexNode> arguments125 = default(List<IApexNode>);
		ExplicitContructorCall explicitConstructorCall126 = default(ExplicitContructorCall);
		ContantExpression literal127 = default(ContantExpression);
		IApexNode newExpression128 = default(IApexNode);
		ArrayDeclarator arrayTypeDeclarator129 = default(ArrayDeclarator);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(518, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:519:5: ( ^( DOT (dotPrimaryExpression= primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) ) | parenthesizedExpression | IDENT | ^( METHOD_CALL methodPrimoryExpression= primaryExpression ( genericTypeArgumentList )? arguments ) | explicitConstructorCall | ^( ARRAY_ELEMENT_ACCESS primaryExpression expression ) | literal | newExpression | THIS | arrayTypeDeclarator | SUPER )
			int alt107=11;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt107 = 1;
				}
				break;
			case PARENTESIZED_EXPR:
				{
				alt107 = 2;
				}
				break;
			case IDENT:
				{
				alt107 = 3;
				}
				break;
			case METHOD_CALL:
				{
				alt107 = 4;
				}
				break;
			case SUPER_CONSTRUCTOR_CALL:
			case THIS_CONSTRUCTOR_CALL:
				{
				alt107 = 5;
				}
				break;
			case ARRAY_ELEMENT_ACCESS:
				{
				alt107 = 6;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FALSE:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case NULL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case TRUE:
				{
				alt107 = 7;
				}
				break;
			case CLASS_CONSTRUCTOR_CALL:
			case STATIC_ARRAY_CREATOR:
				{
				alt107 = 8;
				}
				break;
			case THIS:
				{
				alt107 = 9;
				}
				break;
			case ARRAY_DECLARATOR:
				{
				alt107 = 10;
				}
				break;
			case SUPER:
				{
				alt107 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:519:9: ^( DOT (dotPrimaryExpression= primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS ) )
				{
				DebugLocation(519, 9);
				DebugLocation(519, 13);
				Match(input,DOT,Follow._DOT_in_primaryExpression4916); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(520, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:520:13: (dotPrimaryExpression= primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS ) | primitiveType CLASS | VOID CLASS )
				int alt105=3;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				switch (input.LA(1))
				{
				case ARRAY_DECLARATOR:
				case ARRAY_ELEMENT_ACCESS:
				case CHARACTER_LITERAL:
				case CLASS_CONSTRUCTOR_CALL:
				case DECIMAL_LITERAL:
				case DOT:
				case FALSE:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENT:
				case METHOD_CALL:
				case NULL:
				case OCTAL_LITERAL:
				case PARENTESIZED_EXPR:
				case STATIC_ARRAY_CREATOR:
				case STRING_LITERAL:
				case SUPER:
				case SUPER_CONSTRUCTOR_CALL:
				case THIS:
				case THIS_CONSTRUCTOR_CALL:
				case TRUE:
					{
					alt105 = 1;
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					alt105 = 2;
					}
					break;
				case VOID:
					{
					alt105 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return node;}
						NoViableAltException nvae = new NoViableAltException("", 105, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:520:17: dotPrimaryExpression= primaryExpression ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					{
					DebugLocation(520, 38);
					PushFollow(Follow._primaryExpression_in_primaryExpression4937);
					dotPrimaryExpression=primaryExpression();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(521, 17);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:521:17: ( IDENT | THIS | SUPER | innerNewExpression | CLASS )
					int alt104=5;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt104 = 1;
						}
						break;
					case THIS:
						{
						alt104 = 2;
						}
						break;
					case SUPER:
						{
						alt104 = 3;
						}
						break;
					case CLASS_CONSTRUCTOR_CALL:
						{
						alt104 = 4;
						}
						break;
					case CLASS:
						{
						alt104 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return node;}
							NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:522:21: IDENT
						{
						DebugLocation(522, 21);
						IDENT120=(CommonTree)Match(input,IDENT,Follow._IDENT_in_primaryExpression4980); if (state.failed) return node;
						DebugLocation(522, 27);
						if (state.backtracking == 0)
						{
							node = new DotExpression(IDENT120.Text,dotPrimaryExpression);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:523:21: THIS
						{
						DebugLocation(523, 21);
						Match(input,THIS,Follow._THIS_in_primaryExpression5004); if (state.failed) return node;
						DebugLocation(523, 27);
						if (state.backtracking == 0)
						{
							node = new DotExpression(DotScope.This,dotPrimaryExpression);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:524:21: SUPER
						{
						DebugLocation(524, 21);
						Match(input,SUPER,Follow._SUPER_in_primaryExpression5029); if (state.failed) return node;
						DebugLocation(524, 27);
						if (state.backtracking == 0)
						{
							node = new DotExpression(DotScope.Super,dotPrimaryExpression);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:525:21: innerNewExpression
						{
						DebugLocation(525, 21);
						PushFollow(Follow._innerNewExpression_in_primaryExpression5053);
						innerNewExpression121=innerNewExpression();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(525, 40);
						if (state.backtracking == 0)
						{
							node = new DotExpression(innerNewExpression121, dotPrimaryExpression);
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:526:21: CLASS
						{
						DebugLocation(526, 21);
						Match(input,CLASS,Follow._CLASS_in_primaryExpression5077); if (state.failed) return node;
						DebugLocation(526, 27);
						if (state.backtracking == 0)
						{
							node = new DotExpression(DotScope.Class,dotPrimaryExpression);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(104); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:528:10: primitiveType CLASS
					{
					DebugLocation(528, 10);
					PushFollow(Follow._primitiveType_in_primaryExpression5108);
					primitiveType();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(528, 24);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression5110); if (state.failed) return node;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:529:17: VOID CLASS
					{
					DebugLocation(529, 17);
					Match(input,VOID,Follow._VOID_in_primaryExpression5128); if (state.failed) return node;
					DebugLocation(529, 22);
					Match(input,CLASS,Follow._CLASS_in_primaryExpression5130); if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:532:9: parenthesizedExpression
				{
				DebugLocation(532, 9);
				PushFollow(Follow._parenthesizedExpression_in_primaryExpression5164);
				parenthesizedExpression122=parenthesizedExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(532, 33);
				if (state.backtracking == 0)
				{
					node = parenthesizedExpression122;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:533:9: IDENT
				{
				DebugLocation(533, 9);
				IDENT123=(CommonTree)Match(input,IDENT,Follow._IDENT_in_primaryExpression5176); if (state.failed) return node;
				DebugLocation(533, 15);
				if (state.backtracking == 0)
				{
					node = new IdentExpression(IDENT123.Text); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:534:9: ^( METHOD_CALL methodPrimoryExpression= primaryExpression ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(534, 9);
				DebugLocation(534, 11);
				Match(input,METHOD_CALL,Follow._METHOD_CALL_in_primaryExpression5189); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(534, 47);
				PushFollow(Follow._primaryExpression_in_primaryExpression5195);
				methodPrimoryExpression=primaryExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(534, 67);
				if (state.backtracking == 0)
				{
					node = new MethodCallExpression(methodPrimoryExpression);
				}
				DebugLocation(535, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:535:7: ( genericTypeArgumentList )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==GENERIC_TYPE_ARG_LIST))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:535:8: genericTypeArgumentList
					{
					DebugLocation(535, 8);
					PushFollow(Follow._genericTypeArgumentList_in_primaryExpression5206);
					genericTypeArgumentList124=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(535, 32);
					if (state.backtracking == 0)
					{
						var method = node as MethodCallExpression; method.Generic = genericTypeArgumentList124;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(535, 128);
				PushFollow(Follow._arguments_in_primaryExpression5212);
				arguments125=arguments();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;

				DebugLocation(536, 7);
				if (state.backtracking == 0)
				{
					var method = node as MethodCallExpression; method.Arguments = arguments125;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:537:9: explicitConstructorCall
				{
				DebugLocation(537, 9);
				PushFollow(Follow._explicitConstructorCall_in_primaryExpression5232);
				explicitConstructorCall126=explicitConstructorCall();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(537, 33);
				if (state.backtracking == 0)
				{
					node = explicitConstructorCall126;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:538:9: ^( ARRAY_ELEMENT_ACCESS primaryExpression expression )
				{
				DebugLocation(538, 9);
				DebugLocation(538, 11);
				Match(input,ARRAY_ELEMENT_ACCESS,Follow._ARRAY_ELEMENT_ACCESS_in_primaryExpression5245); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(538, 32);
				PushFollow(Follow._primaryExpression_in_primaryExpression5247);
				primaryExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(538, 50);
				PushFollow(Follow._expression_in_primaryExpression5249);
				expression();
				PopFollow();
				if (state.failed) return node;

				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:539:9: literal
				{
				DebugLocation(539, 9);
				PushFollow(Follow._literal_in_primaryExpression5260);
				literal127=literal();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(539, 17);
				if (state.backtracking == 0)
				{
					node = literal127;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:540:9: newExpression
				{
				DebugLocation(540, 9);
				PushFollow(Follow._newExpression_in_primaryExpression5272);
				newExpression128=newExpression();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(540, 23);
				if (state.backtracking == 0)
				{
					node = newExpression128;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:541:9: THIS
				{
				DebugLocation(541, 9);
				Match(input,THIS,Follow._THIS_in_primaryExpression5284); if (state.failed) return node;
				DebugLocation(541, 14);
				if (state.backtracking == 0)
				{
					node = new ThisExpression();
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:542:9: arrayTypeDeclarator
				{
				DebugLocation(542, 9);
				PushFollow(Follow._arrayTypeDeclarator_in_primaryExpression5296);
				arrayTypeDeclarator129=arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(542, 29);
				if (state.backtracking == 0)
				{
					node = arrayTypeDeclarator129;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:543:9: SUPER
				{
				DebugLocation(543, 9);
				Match(input,SUPER,Follow._SUPER_in_primaryExpression5308); if (state.failed) return node;
				DebugLocation(543, 15);
				if (state.backtracking == 0)
				{
					node = new SuperExpression();
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 67);
			LeaveRule("primaryExpression", 67);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 67, primaryExpression_StartIndex); }

		}
		DebugLocation(544, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return node;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_arrayTypeDeclarator();
	partial void LeaveRule_arrayTypeDeclarator();
	// $ANTLR start "arrayTypeDeclarator"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:547:1: arrayTypeDeclarator returns [ArrayDeclarator declarator] : ^( ARRAY_DECLARATOR (innerArrDec= arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) ;
	[GrammarRule("arrayTypeDeclarator")]
	private ArrayDeclarator arrayTypeDeclarator()
	{
		EnterRule_arrayTypeDeclarator();
		EnterRule("arrayTypeDeclarator", 68);
		TraceIn("arrayTypeDeclarator", 68);
		ArrayDeclarator declarator = default(ArrayDeclarator);

		int arrayTypeDeclarator_StartIndex = input.Index;

		ArrayDeclarator innerArrDec = default(ArrayDeclarator);
		Identifier qualifiedIdentifier130 = default(Identifier);

		try { DebugEnterRule(GrammarFileName, "arrayTypeDeclarator");
		DebugLocation(547, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return declarator; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:548:5: ( ^( ARRAY_DECLARATOR (innerArrDec= arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:549:6: ^( ARRAY_DECLARATOR (innerArrDec= arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) )
			{
			DebugLocation(549, 6);
			if (state.backtracking == 0)
			{
				declarator = new ArrayDeclarator();
			}
			DebugLocation(550, 7);
			DebugLocation(550, 9);
			Match(input,ARRAY_DECLARATOR,Follow._ARRAY_DECLARATOR_in_arrayTypeDeclarator5352); if (state.failed) return declarator;

			Match(input, TokenTypes.Down, null); if (state.failed) return declarator;
			DebugLocation(550, 26);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:550:26: (innerArrDec= arrayTypeDeclarator | qualifiedIdentifier | primitiveType )
			int alt108=3;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			switch (input.LA(1))
			{
			case ARRAY_DECLARATOR:
				{
				alt108 = 1;
				}
				break;
			case DOT:
			case IDENT:
				{
				alt108 = 2;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt108 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return declarator;}
					NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:550:27: innerArrDec= arrayTypeDeclarator
				{
				DebugLocation(550, 39);
				PushFollow(Follow._arrayTypeDeclarator_in_arrayTypeDeclarator5359);
				innerArrDec=arrayTypeDeclarator();
				PopFollow();
				if (state.failed) return declarator;
				DebugLocation(550, 61);
				if (state.backtracking == 0)
				{
					declarator.SubDeclarator =innerArrDec; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:550:117: qualifiedIdentifier
				{
				DebugLocation(550, 117);
				PushFollow(Follow._qualifiedIdentifier_in_arrayTypeDeclarator5365);
				qualifiedIdentifier130=qualifiedIdentifier();
				PopFollow();
				if (state.failed) return declarator;
				DebugLocation(550, 137);
				if (state.backtracking == 0)
				{
					declarator.Type = qualifiedIdentifier130;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:550:187: primitiveType
				{
				DebugLocation(550, 187);
				PushFollow(Follow._primitiveType_in_arrayTypeDeclarator5371);
				primitiveType();
				PopFollow();
				if (state.failed) return declarator;

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			Match(input, TokenTypes.Up, null); if (state.failed) return declarator;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayTypeDeclarator", 68);
			LeaveRule("arrayTypeDeclarator", 68);
			LeaveRule_arrayTypeDeclarator();
			if (state.backtracking > 0) { Memoize(input, 68, arrayTypeDeclarator_StartIndex); }

		}
		DebugLocation(551, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayTypeDeclarator"); }
		return declarator;

	}
	// $ANTLR end "arrayTypeDeclarator"

	partial void EnterRule_explicitConstructorCall();
	partial void LeaveRule_explicitConstructorCall();
	// $ANTLR start "explicitConstructorCall"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:552:1: explicitConstructorCall returns [ExplicitContructorCall call] : ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) );
	[GrammarRule("explicitConstructorCall")]
	private ExplicitContructorCall explicitConstructorCall()
	{
		EnterRule_explicitConstructorCall();
		EnterRule("explicitConstructorCall", 69);
		TraceIn("explicitConstructorCall", 69);
		ExplicitContructorCall call = default(ExplicitContructorCall);

		int explicitConstructorCall_StartIndex = input.Index;

		List<ApexType> genericTypeArgumentList131 = default(List<ApexType>);
		List<IApexNode> arguments132 = default(List<IApexNode>);
		IApexNode primaryExpression133 = default(IApexNode);
		List<ApexType> genericTypeArgumentList134 = default(List<ApexType>);
		List<IApexNode> arguments135 = default(List<IApexNode>);

		try { DebugEnterRule(GrammarFileName, "explicitConstructorCall");
		DebugLocation(552, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return call; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:553:5: ( ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments ) )
			int alt112=2;
			try { DebugEnterDecision(112, false);
			int LA112_1 = input.LA(1);

			if ((LA112_1==THIS_CONSTRUCTOR_CALL))
			{
				alt112 = 1;
			}
			else if ((LA112_1==SUPER_CONSTRUCTOR_CALL))
			{
				alt112 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return call;}
				NoViableAltException nvae = new NoViableAltException("", 112, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:554:2: ^( THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(554, 2);
				if (state.backtracking == 0)
				{
					call = new ExplicitContructorCall();
				}
				DebugLocation(555, 9);
				DebugLocation(555, 11);
				Match(input,THIS_CONSTRUCTOR_CALL,Follow._THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall5407); if (state.failed) return call;

				Match(input, TokenTypes.Down, null); if (state.failed) return call;
				DebugLocation(555, 33);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:555:33: ( genericTypeArgumentList )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==GENERIC_TYPE_ARG_LIST))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:555:34: genericTypeArgumentList
					{
					DebugLocation(555, 34);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall5410);
					genericTypeArgumentList131=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return call;
					DebugLocation(555, 58);
					if (state.backtracking == 0)
					{
						call.Gerics = genericTypeArgumentList131;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(555, 108);
				PushFollow(Follow._arguments_in_explicitConstructorCall5416);
				arguments132=arguments();
				PopFollow();
				if (state.failed) return call;
				DebugLocation(555, 118);
				if (state.backtracking == 0)
				{
					call.Arguments = arguments132; call.Scope = DotScope.This;
				}

				Match(input, TokenTypes.Up, null); if (state.failed) return call;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:556:9: ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )? arguments )
				{
				DebugLocation(556, 9);
				DebugLocation(556, 11);
				Match(input,SUPER_CONSTRUCTOR_CALL,Follow._SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall5431); if (state.failed) return call;

				Match(input, TokenTypes.Down, null); if (state.failed) return call;
				DebugLocation(556, 34);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:556:34: ( primaryExpression )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==ARRAY_DECLARATOR||LA110_1==ARRAY_ELEMENT_ACCESS||LA110_1==CHARACTER_LITERAL||LA110_1==CLASS_CONSTRUCTOR_CALL||LA110_1==DECIMAL_LITERAL||LA110_1==DOT||LA110_1==FALSE||LA110_1==FLOATING_POINT_LITERAL||(LA110_1>=HEX_LITERAL && LA110_1<=IDENT)||LA110_1==METHOD_CALL||LA110_1==NULL||LA110_1==OCTAL_LITERAL||LA110_1==PARENTESIZED_EXPR||LA110_1==STATIC_ARRAY_CREATOR||(LA110_1>=STRING_LITERAL && LA110_1<=SUPER_CONSTRUCTOR_CALL)||(LA110_1>=THIS && LA110_1<=THIS_CONSTRUCTOR_CALL)||LA110_1==TRUE))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:556:35: primaryExpression
					{
					DebugLocation(556, 35);
					PushFollow(Follow._primaryExpression_in_explicitConstructorCall5434);
					primaryExpression133=primaryExpression();
					PopFollow();
					if (state.failed) return call;
					DebugLocation(556, 53);
					if (state.backtracking == 0)
					{
						call.PrimoryExpression = primaryExpression133;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(556, 108);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:556:108: ( genericTypeArgumentList )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==GENERIC_TYPE_ARG_LIST))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:556:109: genericTypeArgumentList
					{
					DebugLocation(556, 109);
					PushFollow(Follow._genericTypeArgumentList_in_explicitConstructorCall5442);
					genericTypeArgumentList134=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return call;
					DebugLocation(556, 133);
					if (state.backtracking == 0)
					{
						call.Gerics = genericTypeArgumentList134;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(557, 7);
				PushFollow(Follow._arguments_in_explicitConstructorCall5454);
				arguments135=arguments();
				PopFollow();
				if (state.failed) return call;
				DebugLocation(557, 17);
				if (state.backtracking == 0)
				{
					call.Arguments = arguments135; call.Scope = DotScope.This;
				}

				Match(input, TokenTypes.Up, null); if (state.failed) return call;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitConstructorCall", 69);
			LeaveRule("explicitConstructorCall", 69);
			LeaveRule_explicitConstructorCall();
			if (state.backtracking > 0) { Memoize(input, 69, explicitConstructorCall_StartIndex); }

		}
		DebugLocation(558, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorCall"); }
		return call;

	}
	// $ANTLR end "explicitConstructorCall"

	partial void EnterRule_innerNewExpression();
	partial void LeaveRule_innerNewExpression();
	// $ANTLR start "innerNewExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:562:1: innerNewExpression returns [IApexNode node] : ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) ;
	[GrammarRule("innerNewExpression")]
	private IApexNode innerNewExpression()
	{
		EnterRule_innerNewExpression();
		EnterRule("innerNewExpression", 70);
		TraceIn("innerNewExpression", 70);
		IApexNode node = default(IApexNode);

		int innerNewExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "innerNewExpression");
		DebugLocation(562, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:5: ( ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:9: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? IDENT arguments ( classTopLevelScope )? )
			{
			DebugLocation(563, 9);
			DebugLocation(563, 11);
			Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_innerNewExpression5484); if (state.failed) return node;

			Match(input, TokenTypes.Down, null); if (state.failed) return node;
			DebugLocation(563, 34);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:34: ( genericTypeArgumentList )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==GENERIC_TYPE_ARG_LIST))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:34: genericTypeArgumentList
				{
				DebugLocation(563, 34);
				PushFollow(Follow._genericTypeArgumentList_in_innerNewExpression5486);
				genericTypeArgumentList();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(113); }

			DebugLocation(563, 59);
			Match(input,IDENT,Follow._IDENT_in_innerNewExpression5489); if (state.failed) return node;
			DebugLocation(563, 65);
			PushFollow(Follow._arguments_in_innerNewExpression5491);
			arguments();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(563, 75);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:75: ( classTopLevelScope )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_1 = input.LA(1);

			if ((LA114_1==CLASS_TOP_LEVEL_SCOPE))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:563:75: classTopLevelScope
				{
				DebugLocation(563, 75);
				PushFollow(Follow._classTopLevelScope_in_innerNewExpression5493);
				classTopLevelScope();
				PopFollow();
				if (state.failed) return node;

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			Match(input, TokenTypes.Up, null); if (state.failed) return node;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("innerNewExpression", 70);
			LeaveRule("innerNewExpression", 70);
			LeaveRule_innerNewExpression();
			if (state.backtracking > 0) { Memoize(input, 70, innerNewExpression_StartIndex); }

		}
		DebugLocation(564, 4);
		} finally { DebugExitRule(GrammarFileName, "innerNewExpression"); }
		return node;

	}
	// $ANTLR end "innerNewExpression"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:565:1: newExpression returns [IApexNode node] : ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent innerNewArrayConst= newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) );
	[GrammarRule("newExpression")]
	private IApexNode newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 71);
		TraceIn("newExpression", 71);
		IApexNode node = default(IApexNode);

		int newExpression_StartIndex = input.Index;

		NewArray innerNewArrayConst = default(NewArray);
		List<ApexType> genericTypeArgumentList136 = default(List<ApexType>);
		ApexType qualifiedTypeIdent137 = default(ApexType);
		List<ApexType> genericTypeArgumentList138 = default(List<ApexType>);
		ApexType qualifiedTypeIdent139 = default(ApexType);
		List<IApexNode> arguments140 = default(List<IApexNode>);

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(565, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:566:5: ( ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent innerNewArrayConst= newArrayConstruction ) ) | ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) )
			int alt119=2;
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if ((LA119_1==STATIC_ARRAY_CREATOR))
			{
				alt119 = 1;
			}
			else if ((LA119_1==CLASS_CONSTRUCTOR_CALL))
			{
				alt119 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return node;}
				NoViableAltException nvae = new NoViableAltException("", 119, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:567:6: ^( STATIC_ARRAY_CREATOR ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent innerNewArrayConst= newArrayConstruction ) )
				{
				DebugLocation(567, 6);
				if (state.backtracking == 0)
				{
					node = new StaticArrayCreator();
				}
				DebugLocation(568, 6);
				DebugLocation(568, 10);
				Match(input,STATIC_ARRAY_CREATOR,Follow._STATIC_ARRAY_CREATOR_in_newExpression5532); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(569, 13);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:569:13: ( primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent innerNewArrayConst= newArrayConstruction )
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==BOOLEAN||LA116_1==BYTE||LA116_1==CHAR||LA116_1==DOUBLE||LA116_1==FLOAT||LA116_1==INT||LA116_1==LONG||LA116_1==SHORT))
				{
					alt116 = 1;
				}
				else if ((LA116_1==GENERIC_TYPE_ARG_LIST||LA116_1==QUALIFIED_TYPE_IDENT))
				{
					alt116 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 116, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:569:17: primitiveType newArrayConstruction
					{
					DebugLocation(569, 17);
					PushFollow(Follow._primitiveType_in_newExpression5550);
					primitiveType();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(569, 31);
					PushFollow(Follow._newArrayConstruction_in_newExpression5552);
					newArrayConstruction();
					PopFollow();
					if (state.failed) return node;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:570:16: ( genericTypeArgumentList )? qualifiedTypeIdent innerNewArrayConst= newArrayConstruction
					{
					DebugLocation(570, 16);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:570:16: ( genericTypeArgumentList )?
					int alt115=2;
					try { DebugEnterSubRule(115);
					try { DebugEnterDecision(115, false);
					int LA115_1 = input.LA(1);

					if ((LA115_1==GENERIC_TYPE_ARG_LIST))
					{
						alt115 = 1;
					}
					} finally { DebugExitDecision(115); }
					switch (alt115)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:570:18: genericTypeArgumentList
						{
						DebugLocation(570, 18);
						PushFollow(Follow._genericTypeArgumentList_in_newExpression5571);
						genericTypeArgumentList136=genericTypeArgumentList();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(570, 42);
						if (state.backtracking == 0)
						{
							var arrayCreator = node as StaticArrayCreator;arrayCreator.GenericsArguments = genericTypeArgumentList136; 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(115); }

					DebugLocation(571, 15);
					PushFollow(Follow._qualifiedTypeIdent_in_newExpression5591);
					qualifiedTypeIdent137=qualifiedTypeIdent();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(571, 53);
					PushFollow(Follow._newArrayConstruction_in_newExpression5597);
					innerNewArrayConst=newArrayConstruction();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(572, 15);
					if (state.backtracking == 0)
					{
						var arrayCreator = node as StaticArrayCreator;arrayCreator.Type = qualifiedTypeIdent137;arrayCreator.ArrayConstructor = innerNewArrayConst;  
					}

					}
					break;

				}
				} finally { DebugExitSubRule(116); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:576:6: ^( CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? )
				{
				DebugLocation(576, 6);
				if (state.backtracking == 0)
				{
					node = new ClassConstructorCall();
				}
				DebugLocation(577, 6);
				DebugLocation(577, 8);
				Match(input,CLASS_CONSTRUCTOR_CALL,Follow._CLASS_CONSTRUCTOR_CALL_in_newExpression5661); if (state.failed) return node;

				Match(input, TokenTypes.Down, null); if (state.failed) return node;
				DebugLocation(577, 31);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:577:31: ( genericTypeArgumentList )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==GENERIC_TYPE_ARG_LIST))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:577:32: genericTypeArgumentList
					{
					DebugLocation(577, 32);
					PushFollow(Follow._genericTypeArgumentList_in_newExpression5664);
					genericTypeArgumentList138=genericTypeArgumentList();
					PopFollow();
					if (state.failed) return node;
					DebugLocation(577, 56);
					if (state.backtracking == 0)
					{
						var classConstructroCall = node as ClassConstructorCall; classConstructroCall.GenericsArguments = genericTypeArgumentList138;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(578, 6);
				PushFollow(Follow._qualifiedTypeIdent_in_newExpression5676);
				qualifiedTypeIdent139=qualifiedTypeIdent();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(578, 25);
				PushFollow(Follow._arguments_in_newExpression5678);
				arguments140=arguments();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(578, 36);
				if (state.backtracking == 0)
				{
					var classConstructroCall = node as ClassConstructorCall; classConstructroCall.Type = qualifiedTypeIdent139; classConstructroCall.arguments = arguments140;
				}
				DebugLocation(579, 7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:579:7: ( classTopLevelScope )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==CLASS_TOP_LEVEL_SCOPE))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:579:8: classTopLevelScope
					{
					DebugLocation(579, 8);
					PushFollow(Follow._classTopLevelScope_in_newExpression5690);
					classTopLevelScope();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(118); }


				Match(input, TokenTypes.Up, null); if (state.failed) return node;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newExpression", 71);
			LeaveRule("newExpression", 71);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 71, newExpression_StartIndex); }

		}
		DebugLocation(580, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return node;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_newArrayConstruction();
	partial void LeaveRule_newArrayConstruction();
	// $ANTLR start "newArrayConstruction"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:583:1: newArrayConstruction returns [NewArray node] : ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? );
	[GrammarRule("newArrayConstruction")]
	private NewArray newArrayConstruction()
	{
		EnterRule_newArrayConstruction();
		EnterRule("newArrayConstruction", 72);
		TraceIn("newArrayConstruction", 72);
		NewArray node = default(NewArray);

		int newArrayConstruction_StartIndex = input.Index;

		ArrayInitializer arrayInitializer141 = default(ArrayInitializer);
		IApexNode expression142 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "newArrayConstruction");
		DebugLocation(583, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return node; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:584:5: ( arrayDeclaratorList arrayInitializer | ( expression )+ ( arrayDeclaratorList )? )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==ARRAY_DECLARATOR_LIST))
			{
				alt122 = 1;
			}
			else if ((LA122_1==EXPR))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return node;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:584:9: arrayDeclaratorList arrayInitializer
				{
				DebugLocation(584, 9);
				if (state.backtracking == 0)
				{
					node= new NewArray();
				}
				DebugLocation(585, 6);
				PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction5728);
				arrayDeclaratorList();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(585, 26);
				PushFollow(Follow._arrayInitializer_in_newArrayConstruction5730);
				arrayInitializer141=arrayInitializer();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(585, 43);
				if (state.backtracking == 0)
				{
					node.ArrayInitializer = arrayInitializer141; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:586:9: ( expression )+ ( arrayDeclaratorList )?
				{
				DebugLocation(586, 9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:586:9: ( expression )+
				int cnt120=0;
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_1 = input.LA(1);

					if ((LA120_1==EXPR))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:586:10: expression
						{
						DebugLocation(586, 10);
						PushFollow(Follow._expression_in_newArrayConstruction5743);
						expression142=expression();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(586, 21);
						if (state.backtracking == 0)
						{
							node.Add(expression142);
						}

						}
						break;

					default:
						if (cnt120 >= 1)
							goto loop120;

						if (state.backtracking>0) {state.failed=true; return node;}
						EarlyExitException eee120 = new EarlyExitException( 120, input );
						DebugRecognitionException(eee120);
						throw eee120;
					}
					cnt120++;
				}
				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(586, 53);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:586:53: ( arrayDeclaratorList )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==ARRAY_DECLARATOR_LIST))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:586:53: arrayDeclaratorList
					{
					DebugLocation(586, 53);
					PushFollow(Follow._arrayDeclaratorList_in_newArrayConstruction5749);
					arrayDeclaratorList();
					PopFollow();
					if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newArrayConstruction", 72);
			LeaveRule("newArrayConstruction", 72);
			LeaveRule_newArrayConstruction();
			if (state.backtracking > 0) { Memoize(input, 72, newArrayConstruction_StartIndex); }

		}
		DebugLocation(587, 4);
		} finally { DebugExitRule(GrammarFileName, "newArrayConstruction"); }
		return node;

	}
	// $ANTLR end "newArrayConstruction"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:589:1: arguments returns [List<IApexNode> nodes] : ^( ARGUMENT_LIST ( expression )* ) ;
	[GrammarRule("arguments")]
	private List<IApexNode> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 73);
		TraceIn("arguments", 73);
		List<IApexNode> nodes = default(List<IApexNode>);

		int arguments_StartIndex = input.Index;

		IApexNode expression143 = default(IApexNode);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(589, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return nodes; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:590:5: ( ^( ARGUMENT_LIST ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:591:6: ^( ARGUMENT_LIST ( expression )* )
			{
			DebugLocation(591, 6);
			if (state.backtracking == 0)
			{
				nodes = new List<IApexNode>();
			}
			DebugLocation(591, 39);
			DebugLocation(591, 41);
			Match(input,ARGUMENT_LIST,Follow._ARGUMENT_LIST_in_arguments5782); if (state.failed) return nodes;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return nodes;
				DebugLocation(591, 55);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:591:55: ( expression )*
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=2;
					try { DebugEnterDecision(123, false);
					int LA123_1 = input.LA(1);

					if ((LA123_1==EXPR))
					{
						alt123 = 1;
					}


					} finally { DebugExitDecision(123); }
					switch ( alt123 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:591:56: expression
						{
						DebugLocation(591, 56);
						PushFollow(Follow._expression_in_arguments5785);
						expression143=expression();
						PopFollow();
						if (state.failed) return nodes;
						DebugLocation(591, 67);
						if (state.backtracking == 0)
						{
							nodes.Add(expression143);
						}

						}
						break;

					default:
						goto loop123;
					}
				}

				loop123:
					;

				} finally { DebugExitSubRule(123); }


				Match(input, TokenTypes.Up, null); if (state.failed) return nodes;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 73);
			LeaveRule("arguments", 73);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 73, arguments_StartIndex); }

		}
		DebugLocation(592, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return nodes;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:594:1: literal returns [ContantExpression vale] : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private ContantExpression literal()
	{
		EnterRule_literal();
		EnterRule("literal", 74);
		TraceIn("literal", 74);
		ContantExpression vale = default(ContantExpression);

		int literal_StartIndex = input.Index;

		CommonTree HEX_LITERAL144 = default(CommonTree);
		CommonTree OCTAL_LITERAL145 = default(CommonTree);
		CommonTree DECIMAL_LITERAL146 = default(CommonTree);
		CommonTree FLOATING_POINT_LITERAL147 = default(CommonTree);
		CommonTree CHARACTER_LITERAL148 = default(CommonTree);
		CommonTree STRING_LITERAL149 = default(CommonTree);
		CommonTree TRUE150 = default(CommonTree);
		CommonTree FALSE151 = default(CommonTree);
		CommonTree NULL152 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(594, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return vale; }

			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:595:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
			int alt124=9;
			try { DebugEnterDecision(124, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt124 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt124 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt124 = 3;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt124 = 4;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt124 = 5;
				}
				break;
			case STRING_LITERAL:
				{
				alt124 = 6;
				}
				break;
			case TRUE:
				{
				alt124 = 7;
				}
				break;
			case FALSE:
				{
				alt124 = 8;
				}
				break;
			case NULL:
				{
				alt124 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return vale;}
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:595:9: HEX_LITERAL
				{
				DebugLocation(595, 9);
				HEX_LITERAL144=(CommonTree)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_literal5813); if (state.failed) return vale;
				DebugLocation(595, 21);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("integer", HEX_LITERAL144.Text);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:596:9: OCTAL_LITERAL
				{
				DebugLocation(596, 9);
				OCTAL_LITERAL145=(CommonTree)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_literal5825); if (state.failed) return vale;
				DebugLocation(596, 23);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("integer", OCTAL_LITERAL145.Text);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:597:9: DECIMAL_LITERAL
				{
				DebugLocation(597, 9);
				DECIMAL_LITERAL146=(CommonTree)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_literal5837); if (state.failed) return vale;
				DebugLocation(597, 25);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("integer", DECIMAL_LITERAL146.Text);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:598:9: FLOATING_POINT_LITERAL
				{
				DebugLocation(598, 9);
				FLOATING_POINT_LITERAL147=(CommonTree)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_literal5849); if (state.failed) return vale;
				DebugLocation(598, 32);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("double", FLOATING_POINT_LITERAL147.Text);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:599:9: CHARACTER_LITERAL
				{
				DebugLocation(599, 9);
				CHARACTER_LITERAL148=(CommonTree)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_literal5861); if (state.failed) return vale;
				DebugLocation(599, 27);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("char", CHARACTER_LITERAL148.Text);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:600:9: STRING_LITERAL
				{
				DebugLocation(600, 9);
				STRING_LITERAL149=(CommonTree)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_literal5873); if (state.failed) return vale;
				DebugLocation(600, 24);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("string", STRING_LITERAL149.Text);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:601:9: TRUE
				{
				DebugLocation(601, 9);
				TRUE150=(CommonTree)Match(input,TRUE,Follow._TRUE_in_literal5885); if (state.failed) return vale;
				DebugLocation(601, 14);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("boolean", TRUE150.Text);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:602:9: FALSE
				{
				DebugLocation(602, 9);
				FALSE151=(CommonTree)Match(input,FALSE,Follow._FALSE_in_literal5897); if (state.failed) return vale;
				DebugLocation(602, 15);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("boolean", FALSE151.Text);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:603:9: NULL
				{
				DebugLocation(603, 9);
				NULL152=(CommonTree)Match(input,NULL,Follow._NULL_in_literal5909); if (state.failed) return vale;
				DebugLocation(603, 14);
				if (state.backtracking == 0)
				{
					vale = new ContantExpression("null", NULL152.Text);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 74);
			LeaveRule("literal", 74);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 74, literal_StartIndex); }

		}
		DebugLocation(604, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return vale;

	}
	// $ANTLR end "literal"

	partial void EnterRule_synpred46_JavaTreeParser_fragment();
	partial void LeaveRule_synpred46_JavaTreeParser_fragment();

	// $ANTLR start synpred46_JavaTreeParser
	private void synpred46_JavaTreeParser_fragment()
	{
		IApexNode getBlock = default(IApexNode);
		IApexNode setBlock = default(IApexNode);

		EnterRule_synpred46_JavaTreeParser_fragment();
		EnterRule("synpred46_JavaTreeParser_fragment", 120);
		TraceIn("synpred46_JavaTreeParser_fragment", 120);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:135:2: ( ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:135:2: ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' )
			{
			DebugLocation(136, 2);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:2: ( '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:3: '{' ( modifier )? getRule ( SEMI |getBlock= block ) ( ( modifier )? setRule ( SEMI |setBlock= block ) )? '}'
			{
			DebugLocation(136, 3);
			Match(input,LCURLY,Follow._LCURLY_in_synpred46_JavaTreeParser940); if (state.failed) return;
			DebugLocation(136, 7);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:7: ( modifier )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==ABSTRACT||LA142_1==AT||LA142_1==FINAL||LA142_1==GLOBAL||LA142_1==NATIVE||LA142_1==OVERRIDE||LA142_1==PRIVATE||(LA142_1>=PROTECTED && LA142_1<=PUBLIC)||LA142_1==STATIC||LA142_1==STRICTFP||(LA142_1>=SYNCHRONIZED && LA142_1<=TEST_METHOD)||LA142_1==TRANSIENT||LA142_1==VIRTUAL||LA142_1==VOLATILE||(LA142_1>=WITHOUT_SHARING && LA142_1<=WITH_SHARING)))
			{
				alt142 = 1;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:7: modifier
				{
				DebugLocation(136, 7);
				PushFollow(Follow._modifier_in_synpred46_JavaTreeParser942);
				modifier();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(136, 17);
			PushFollow(Follow._getRule_in_synpred46_JavaTreeParser945);
			getRule();
			PopFollow();
			if (state.failed) return;
			DebugLocation(136, 25);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:25: ( SEMI |getBlock= block )
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_1 = input.LA(1);

			if ((LA143_1==SEMI))
			{
				alt143 = 1;
			}
			else if ((LA143_1==BLOCK_SCOPE))
			{
				alt143 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:26: SEMI
				{
				DebugLocation(136, 26);
				Match(input,SEMI,Follow._SEMI_in_synpred46_JavaTreeParser948); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:136:88: getBlock= block
				{
				DebugLocation(136, 97);
				PushFollow(Follow._block_in_synpred46_JavaTreeParser955);
				getBlock=block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(137, 3);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:3: ( ( modifier )? setRule ( SEMI |setBlock= block ) )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==ABSTRACT||LA146_1==AT||LA146_1==FINAL||LA146_1==GLOBAL||LA146_1==IDENT||LA146_1==NATIVE||LA146_1==OVERRIDE||LA146_1==PRIVATE||(LA146_1>=PROTECTED && LA146_1<=PUBLIC)||LA146_1==STATIC||LA146_1==STRICTFP||(LA146_1>=SYNCHRONIZED && LA146_1<=TEST_METHOD)||LA146_1==TRANSIENT||LA146_1==VIRTUAL||LA146_1==VOLATILE||(LA146_1>=WITHOUT_SHARING && LA146_1<=WITH_SHARING)))
			{
				alt146 = 1;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: ( modifier )? setRule ( SEMI |setBlock= block )
				{
				DebugLocation(137, 4);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: ( modifier )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==ABSTRACT||LA144_1==AT||LA144_1==FINAL||LA144_1==GLOBAL||LA144_1==NATIVE||LA144_1==OVERRIDE||LA144_1==PRIVATE||(LA144_1>=PROTECTED && LA144_1<=PUBLIC)||LA144_1==STATIC||LA144_1==STRICTFP||(LA144_1>=SYNCHRONIZED && LA144_1<=TEST_METHOD)||LA144_1==TRANSIENT||LA144_1==VIRTUAL||LA144_1==VOLATILE||(LA144_1>=WITHOUT_SHARING && LA144_1<=WITH_SHARING)))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:4: modifier
					{
					DebugLocation(137, 4);
					PushFollow(Follow._modifier_in_synpred46_JavaTreeParser963);
					modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(137, 14);
				PushFollow(Follow._setRule_in_synpred46_JavaTreeParser966);
				setRule();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 22);
				// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:22: ( SEMI |setBlock= block )
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				int LA145_1 = input.LA(1);

				if ((LA145_1==SEMI))
				{
					alt145 = 1;
				}
				else if ((LA145_1==BLOCK_SCOPE))
				{
					alt145 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:23: SEMI
					{
					DebugLocation(137, 23);
					Match(input,SEMI,Follow._SEMI_in_synpred46_JavaTreeParser969); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:137:85: setBlock= block
					{
					DebugLocation(137, 94);
					PushFollow(Follow._block_in_synpred46_JavaTreeParser976);
					setBlock=block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(137, 180);
			Match(input,RCURLY,Follow._RCURLY_in_synpred46_JavaTreeParser984); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred46_JavaTreeParser_fragment", 120);
			LeaveRule("synpred46_JavaTreeParser_fragment", 120);
			LeaveRule_synpred46_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred46_JavaTreeParser

	partial void EnterRule_synpred145_JavaTreeParser_fragment();
	partial void LeaveRule_synpred145_JavaTreeParser_fragment();

	// $ANTLR start synpred145_JavaTreeParser
	private void synpred145_JavaTreeParser_fragment()
	{
		SwitchCaseBlock beforeDefaultCase = default(SwitchCaseBlock);

		EnterRule_synpred145_JavaTreeParser_fragment();
		EnterRule("synpred145_JavaTreeParser_fragment", 219);
		TraceIn("synpred145_JavaTreeParser_fragment", 219);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:424:33: (beforeDefaultCase= switchCaseLabel )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:424:33: beforeDefaultCase= switchCaseLabel
			{
			DebugLocation(424, 51);
			PushFollow(Follow._switchCaseLabel_in_synpred145_JavaTreeParser3629);
			beforeDefaultCase=switchCaseLabel();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred145_JavaTreeParser_fragment", 219);
			LeaveRule("synpred145_JavaTreeParser_fragment", 219);
			LeaveRule_synpred145_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred145_JavaTreeParser

	partial void EnterRule_synpred152_JavaTreeParser_fragment();
	partial void LeaveRule_synpred152_JavaTreeParser_fragment();

	// $ANTLR start synpred152_JavaTreeParser
	private void synpred152_JavaTreeParser_fragment()
	{
		EnterRule_synpred152_JavaTreeParser_fragment();
		EnterRule("synpred152_JavaTreeParser_fragment", 226);
		TraceIn("synpred152_JavaTreeParser_fragment", 226);
		try
		{
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:113: ( ( expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:113: ( expression )*
			{
			DebugLocation(440, 137);
			// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:137: ( expression )*
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				int LA163_1 = input.LA(1);

				if ((LA163_1==EXPR))
				{
					alt163 = 1;
				}


				} finally { DebugExitDecision(163); }
				switch ( alt163 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Maxim\\Desktop\\documents-export-2014-06-09 (1)\\ApexParser\\JavaTreeParser.g:440:138: expression
					{
					DebugLocation(440, 138);
					PushFollow(Follow._expression_in_synpred152_JavaTreeParser3798);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop163;
				}
			}

			loop163:
				;

			} finally { DebugExitSubRule(163); }


			}

		}
		finally
		{
			TraceOut("synpred152_JavaTreeParser_fragment", 226);
			LeaveRule("synpred152_JavaTreeParser_fragment", 226);
			LeaveRule_synpred152_JavaTreeParser_fragment();
		}
	}
	// $ANTLR end synpred152_JavaTreeParser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _JAVA_SOURCE_in_javaSource110 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_javaSource112 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL,0x8UL});
		public static readonly BitSet _packageDeclaration_in_javaSource114 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL});
		public static readonly BitSet _importDeclaration_in_javaSource117 = new BitSet(new ulong[]{0x200001000200008UL,0x210000000UL});
		public static readonly BitSet _typeDeclaration_in_javaSource120 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration145 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_packageDeclaration147 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IMPORT_in_importDeclaration174 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STATIC_in_importDeclaration176 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000UL});
		public static readonly BitSet _qualifiedIdentifier_in_importDeclaration179 = new BitSet(new ulong[]{0x20000000000008UL});
		public static readonly BitSet _DOTSTAR_in_importDeclaration181 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_typeDeclaration211 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration213 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration215 = new BitSet(new ulong[]{0x10000000000UL,0x8040002UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration225 = new BitSet(new ulong[]{0x10000000000UL,0x8000002UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration237 = new BitSet(new ulong[]{0x10000000000UL,0x8000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration243 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _classTopLevelScope_in_typeDeclaration246 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTERFACE_in_typeDeclaration267 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration269 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration271 = new BitSet(new ulong[]{0x0UL,0x400040002UL});
		public static readonly BitSet _genericTypeParameterList_in_typeDeclaration282 = new BitSet(new ulong[]{0x0UL,0x400000002UL});
		public static readonly BitSet _extendsClause_in_typeDeclaration294 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _interfaceTopLevelScope_in_typeDeclaration300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ENUM_in_typeDeclaration319 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration321 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration323 = new BitSet(new ulong[]{0x400000000000000UL,0x8000000UL});
		public static readonly BitSet _implementsClause_in_typeDeclaration325 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _enumTopLevelScope_in_typeDeclaration328 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AT_in_typeDeclaration342 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_typeDeclaration344 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeDeclaration346 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _annotationTopLevelScope_in_typeDeclaration348 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_CLAUSE_in_extendsClause385 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_extendsClause388 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _IMPLEMENTS_CLAUSE_in_implementsClause424 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_implementsClause427 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _GENERIC_TYPE_PARAM_LIST_in_genericTypeParameterList475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeParameter_in_genericTypeParameterList478 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_genericTypeParameter513 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _bound_in_genericTypeParameter518 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_BOUND_LIST_in_bound559 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_bound562 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _ENUM_TOP_LEVEL_SCOPE_in_enumTopLevelScope603 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _enumConstant_in_enumTopLevelScope606 = new BitSet(new ulong[]{0x10000000008UL,0x1000000UL});
		public static readonly BitSet _classTopLevelScope_in_enumTopLevelScope612 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_enumConstant636 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationList_in_enumConstant638 = new BitSet(new ulong[]{0x10000008008UL});
		public static readonly BitSet _arguments_in_enumConstant640 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_enumConstant643 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope685 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _classScopeDeclarations_in_classTopLevelScope690 = new BitSet(new ulong[]{0x20010D000200008UL,0x200010000UL,0x420000000001000UL});
		public static readonly BitSet _CLASS_INSTANCE_INITIALIZER_in_classScopeDeclarations725 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations727 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_STATIC_INITIALIZER_in_classScopeDeclarations741 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_classScopeDeclarations743 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_classScopeDeclarations763 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations765 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations770 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations772 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations774 = new BitSet(new ulong[]{0x1020008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_classScopeDeclarations776 = new BitSet(new ulong[]{0x1000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations779 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations783 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_classScopeDeclarations812 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations814 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations816 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations819 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations821 = new BitSet(new ulong[]{0x1000008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations823 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_classScopeDeclarations827 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_classScopeDeclarations851 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations853 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations855 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_classScopeDeclarations857 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_DECL_in_classScopeDeclarations870 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations872 = new BitSet(new ulong[]{0x0UL,0x40200UL});
		public static readonly BitSet _genericTypeParameterList_in_classScopeDeclarations874 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_classScopeDeclarations877 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_classScopeDeclarations879 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_classScopeDeclarations882 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PROPERTY_DECL_in_classScopeDeclarations895 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_classScopeDeclarations897 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_classScopeDeclarations899 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_classScopeDeclarations901 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _propertyDeclaration_in_classScopeDeclarations903 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_classScopeDeclarations916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration940 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration942 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration945 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration948 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration955 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration963 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration966 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration969 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration976 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_propertyDeclaration991 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration993 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_propertyDeclaration996 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration999 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_propertyDeclaration1006 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_propertyDeclaration1014 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_propertyDeclaration1017 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_propertyDeclaration1020 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_propertyDeclaration1027 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_propertyDeclaration1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_getRule1055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_setRule1075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope1112 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _interfaceScopeDeclarations_in_interfaceTopLevelScope1115 = new BitSet(new ulong[]{0x200001000200008UL,0x200010000UL,0x420000000000000UL});
		public static readonly BitSet _FUNCTION_METHOD_DECL_in_interfaceScopeDeclarations1161 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations1163 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x2000000000000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations1165 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations1168 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations1170 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations1172 = new BitSet(new ulong[]{0x20008UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _arrayDeclaratorList_in_interfaceScopeDeclarations1174 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations1177 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_METHOD_DECL_in_interfaceScopeDeclarations1207 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations1209 = new BitSet(new ulong[]{0x0UL,0x1040000UL});
		public static readonly BitSet _genericTypeParameterList_in_interfaceScopeDeclarations1211 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_interfaceScopeDeclarations1214 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _formalParameterList_in_interfaceScopeDeclarations1216 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _throwsClause_in_interfaceScopeDeclarations1218 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_interfaceScopeDeclarations1318 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_interfaceScopeDeclarations1320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_interfaceScopeDeclarations1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_interfaceScopeDeclarations1324 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_interfaceScopeDeclarations1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_DECLARATOR_LIST_in_variableDeclaratorList1381 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarator_in_variableDeclaratorList1384 = new BitSet(new ulong[]{0x8UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _VAR_DECLARATOR_in_variableDeclarator1414 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclaratorId_in_variableDeclarator1416 = new BitSet(new ulong[]{0x4000000010080008UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator1421 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_variableDeclaratorId1454 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayDeclaratorList_in_variableDeclaratorId1459 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer1486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer1498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_variableInitializer1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayDeclarator1531 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _RBRACK_in_arrayDeclarator1533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_DECLARATOR_LIST_in_arrayDeclaratorList1553 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayDeclaratorList1555 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _ARRAY_INITIALIZER_in_arrayInitializer1600 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer1603 = new BitSet(new ulong[]{0x4000000010080008UL});
		public static readonly BitSet _THROWS_CLAUSE_in_throwsClause1628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_throwsClause1630 = new BitSet(new ulong[]{0x10000000000008UL,0x1000000UL});
		public static readonly BitSet _MODIFIER_LIST_in_modifierList1671 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifier_in_modifierList1674 = new BitSet(new ulong[]{0x200018UL,0x200000000080008UL,0x6900418280006804UL});
		public static readonly BitSet _PUBLIC_in_modifier1712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OVERRIDE_in_modifier1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIRTUAL_in_modifier1736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_SHARING_in_modifier1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITHOUT_SHARING_in_modifier1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROTECTED_in_modifier1767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVATE_in_modifier1779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_modifier1791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ABSTRACT_in_modifier1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIVE_in_modifier1815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifier1825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSIENT_in_modifier1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOLATILE_in_modifier1845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRICTFP_in_modifier1855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_modifier1863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEST_METHOD_in_modifier1875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localModifier_in_modifier1887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCAL_MODIFIER_LIST_in_localModifierList1908 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifier_in_localModifierList1910 = new BitSet(new ulong[]{0x200008UL,0x8UL});
		public static readonly BitSet _FINAL_in_localModifier1931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_localModifier1941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_type1971 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_type1974 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _qualifiedTypeIdent_in_type1978 = new BitSet(new ulong[]{0x20008UL});
		public static readonly BitSet _arrayDeclaratorList_in_type1984 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent2014 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typeIdent_in_qualifiedTypeIdent2017 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_typeIdent2053 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_typeIdent2058 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GENERIC_TYPE_ARG_LIST_in_genericTypeArgumentList2177 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgument_in_genericTypeArgumentList2182 = new BitSet(new ulong[]{0x8UL,0x0UL,0x2000000010000UL});
		public static readonly BitSet _type_in_genericTypeArgument2221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUESTION_in_genericTypeArgument2234 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericWildcardBoundType_in_genericTypeArgument2236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXTENDS_in_genericWildcardBoundType2376 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType2378 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_genericWildcardBoundType2390 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_genericWildcardBoundType2392 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_STD_DECL_in_formalParameterStandardDecl2419 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterStandardDecl2421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterStandardDecl2423 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterStandardDecl2425 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_LIST_in_formalParameterList2468 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_formalParameterList2471 = new BitSet(new ulong[]{0x8UL,0xC00UL});
		public static readonly BitSet _formalParameterVarargDecl_in_formalParameterList2484 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FORMAL_PARAM_VARARG_DECL_in_formalParameterVarargDecl2523 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_formalParameterVarargDecl2525 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_formalParameterVarargDecl2527 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _variableDeclaratorId_in_formalParameterVarargDecl2529 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier2568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_qualifiedIdentifier2581 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_qualifiedIdentifier2587 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_qualifiedIdentifier2593 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_LIST_in_annotationList2621 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotation_in_annotationList2623 = new BitSet(new ulong[]{0x200008UL});
		public static readonly BitSet _AT_in_annotation2645 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _qualifiedIdentifier_in_annotation2647 = new BitSet(new ulong[]{0x108UL});
		public static readonly BitSet _annotationInit_in_annotation2649 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_BLOCK_in_annotationInit2675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializers_in_annotationInit2677 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_KEY_LIST_in_annotationInitializers2698 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationInitializer_in_annotationInitializers2700 = new BitSet(new ulong[]{0x8UL,0x1000000UL});
		public static readonly BitSet _ANNOTATION_INIT_DEFAULT_KEY_in_annotationInitializers2713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializers2715 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_annotationInitializer2740 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationInitializer2742 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ANNOTATION_INIT_ARRAY_ELEMENT_in_annotationElementValue2767 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationElementValue2769 = new BitSet(new ulong[]{0x4000000000200088UL});
		public static readonly BitSet _annotation_in_annotationElementValue2781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_annotationElementValue2791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANNOTATION_TOP_LEVEL_SCOPE_in_annotationTopLevelScope2815 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationScopeDeclarations_in_annotationTopLevelScope2817 = new BitSet(new ulong[]{0x200001000201008UL,0x200000000UL,0x20000000000000UL});
		public static readonly BitSet _ANNOTATION_METHOD_DECL_in_annotationScopeDeclarations2843 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2845 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2847 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_annotationScopeDeclarations2849 = new BitSet(new ulong[]{0x1000000000008UL});
		public static readonly BitSet _annotationDefaultValue_in_annotationScopeDeclarations2851 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_annotationScopeDeclarations2864 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _modifierList_in_annotationScopeDeclarations2866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_annotationScopeDeclarations2868 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_annotationScopeDeclarations2870 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _typeDeclaration_in_annotationScopeDeclarations2881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_annotationDefaultValue2905 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _annotationElementValue_in_annotationDefaultValue2907 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BLOCK_SCOPE_in_block2947 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_block2950 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _localVariableDeclaration_in_blockStatement2994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_blockStatement3006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement3018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brokenExpression_in_blockStatement3029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BROKEN_EXPRESSION_in_brokenExpression3054 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_brokenExpression3056 = new BitSet(new ulong[]{0x10000000000008UL,0x0UL,0x200000UL});
		public static readonly BitSet _DOT_in_brokenExpression3060 = new BitSet(new ulong[]{0x8UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_brokenExpression3063 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VAR_DECLARATION_in_localVariableDeclaration3084 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_localVariableDeclaration3086 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_localVariableDeclaration3088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _variableDeclaratorList_in_localVariableDeclaration3090 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CATCH_CLAUSE_LIST_in_catches3131 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _catchClause_in_catches3133 = new BitSet(new ulong[]{0x100000008UL});
		public static readonly BitSet _block_in_statement3157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement3172 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement3174 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3186 = new BitSet(new ulong[]{0x4008200005000008UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3202 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_in_statement3218 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _forInit_in_statement3220 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _forCondition_in_statement3222 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _forUpdater_in_statement3224 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3230 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_EACH_in_statement3249 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localModifierList_in_statement3251 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_statement3253 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_statement3255 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _expression_in_statement3257 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3263 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHILE_in_statement3283 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement3285 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3291 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DO_in_statement3306 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_statement3312 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _parenthesizedExpression_in_statement3314 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRY_in_statement3347 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_statement3353 = new BitSet(new ulong[]{0x201000008UL});
		public static readonly BitSet _catches_in_statement3363 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _block_in_statement3379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_in_statement3394 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement3396 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _switchBlockLabels_in_statement3398 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement3418 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _parenthesizedExpression_in_statement3420 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_statement3422 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RETURN_in_statement3438 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement3441 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THROW_in_statement3460 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_statement3462 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BREAK_in_statement3477 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement3479 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONTINUE_in_statement3494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement3496 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LABELED_STATEMENT_in_statement3510 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_statement3512 = new BitSet(new ulong[]{0x4008200005000000UL,0x4002002100UL,0x100108A000280000UL});
		public static readonly BitSet _statement_in_statement3518 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_statement3530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement3542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_catchClause3581 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _formalParameterStandardDecl_in_catchClause3583 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _block_in_catchClause3585 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SWITCH_BLOCK_LABEL_LIST_in_switchBlockLabels3622 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels3629 = new BitSet(new ulong[]{0x1000040000008UL});
		public static readonly BitSet _switchDefaultLabel_in_switchBlockLabels3642 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _switchCaseLabel_in_switchBlockLabels3654 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _CASE_in_switchCaseLabel3696 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_switchCaseLabel3698 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _blockStatement_in_switchCaseLabel3703 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _DEFAULT_in_switchDefaultLabel3749 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _blockStatement_in_switchDefaultLabel3752 = new BitSet(new ulong[]{0x4208201015200008UL,0x4202002100UL,0x102108A000280000UL});
		public static readonly BitSet _FOR_INIT_in_forInit3785 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit3788 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expression_in_forInit3798 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _FOR_CONDITION_in_forCondition3833 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forCondition3836 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FOR_UPDATE_in_forUpdater3880 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_forUpdater3883 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _PARENTESIZED_EXPR_in_parenthesizedExpression3918 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_parenthesizedExpression3920 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXPR_in_expression3951 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expression3953 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_expr3980 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3985 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr3989 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_ASSIGN_in_expr4003 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4007 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4011 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_ASSIGN_in_expr4024 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4028 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4032 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_ASSIGN_in_expr4045 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4049 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4053 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_ASSIGN_in_expr4066 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4070 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4074 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_ASSIGN_in_expr4087 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4091 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4095 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_ASSIGN_in_expr4108 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4112 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4116 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_ASSIGN_in_expr4129 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4133 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4137 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_ASSIGN_in_expr4150 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4154 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4158 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_ASSIGN_in_expr4171 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4175 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4179 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_ASSIGN_in_expr4192 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4196 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4200 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_ASSIGN_in_expr4213 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4217 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4221 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUESTION_in_expr4239 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4243 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4247 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4251 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_OR_in_expr4269 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4273 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4277 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_AND_in_expr4290 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4294 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4298 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_expr4316 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4320 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4324 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _XOR_in_expr4337 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4341 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4345 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_expr4358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4362 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4366 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EQUAL_in_expr4379 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4383 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4387 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_EQUAL_in_expr4401 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4405 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4409 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSTANCEOF_in_expr4427 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4431 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _type_in_expr4433 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_OR_EQUAL_in_expr4451 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4455 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4459 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_OR_EQUAL_in_expr4472 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4476 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4480 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GREATER_THAN_in_expr4493 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4497 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4501 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LESS_THAN_in_expr4514 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4518 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4522 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BIT_SHIFT_RIGHT_in_expr4540 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4544 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4548 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_RIGHT_in_expr4561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4565 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4569 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SHIFT_LEFT_in_expr4582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4586 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4590 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_in_expr4612 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4616 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4620 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_expr4633 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4637 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4641 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_expr4654 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4658 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4662 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_expr4675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4679 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4683 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MOD_in_expr4696 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4700 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4704 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_PLUS_in_expr4722 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4726 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_expr4738 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4742 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_INC_in_expr4754 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4758 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_DEC_in_expr4772 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4776 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_INC_in_expr4789 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4793 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_DEC_in_expr4806 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4810 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_expr4823 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4827 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LOGICAL_NOT_in_expr4840 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr4844 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CAST_EXPR_in_expr4862 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_expr4864 = new BitSet(new ulong[]{0x816802880D50060UL,0xB978E60041B00044UL,0xC861D678107F3UL,0x3UL});
		public static readonly BitSet _expr_in_expr4868 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primaryExpression_in_expr4880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression4916 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression4937 = new BitSet(new ulong[]{0x3000000000UL,0x1000000UL,0x20800000000UL});
		public static readonly BitSet _IDENT_in_primaryExpression4980 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THIS_in_primaryExpression5004 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_in_primaryExpression5029 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _innerNewExpression_in_primaryExpression5053 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_in_primaryExpression5077 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_primaryExpression5108 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression5110 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VOID_in_primaryExpression5128 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _CLASS_in_primaryExpression5130 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parenthesizedExpression_in_primaryExpression5164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_primaryExpression5176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _METHOD_CALL_in_primaryExpression5189 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression5195 = new BitSet(new ulong[]{0x8000UL,0x20000UL});
		public static readonly BitSet _genericTypeArgumentList_in_primaryExpression5206 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_primaryExpression5212 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _explicitConstructorCall_in_primaryExpression5232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_ELEMENT_ACCESS_in_primaryExpression5245 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_primaryExpression5247 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _expression_in_primaryExpression5249 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_primaryExpression5260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_primaryExpression5272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression5284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayTypeDeclarator_in_primaryExpression5296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primaryExpression5308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARRAY_DECLARATOR_in_arrayTypeDeclarator5352 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arrayTypeDeclarator_in_arrayTypeDeclarator5359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _qualifiedIdentifier_in_arrayTypeDeclarator5365 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primitiveType_in_arrayTypeDeclarator5371 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall5407 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall5410 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall5416 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall5431 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primaryExpression_in_explicitConstructorCall5434 = new BitSet(new ulong[]{0x8000UL,0x20000UL});
		public static readonly BitSet _genericTypeArgumentList_in_explicitConstructorCall5442 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_explicitConstructorCall5454 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_innerNewExpression5484 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_innerNewExpression5486 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_innerNewExpression5489 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_innerNewExpression5491 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_innerNewExpression5493 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STATIC_ARRAY_CREATOR_in_newExpression5532 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveType_in_newExpression5550 = new BitSet(new ulong[]{0x4000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression5552 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression5571 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression5591 = new BitSet(new ulong[]{0x4000000000020000UL});
		public static readonly BitSet _newArrayConstruction_in_newExpression5597 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASS_CONSTRUCTOR_CALL_in_newExpression5661 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _genericTypeArgumentList_in_newExpression5664 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _qualifiedTypeIdent_in_newExpression5676 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arguments_in_newExpression5678 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _classTopLevelScope_in_newExpression5690 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction5728 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _arrayInitializer_in_newArrayConstruction5730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_newArrayConstruction5743 = new BitSet(new ulong[]{0x4000000000020002UL});
		public static readonly BitSet _arrayDeclaratorList_in_newArrayConstruction5749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARGUMENT_LIST_in_arguments5782 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expression_in_arguments5785 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _HEX_LITERAL_in_literal5813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_literal5825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_literal5837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_literal5849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_literal5861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_literal5873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_literal5885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_literal5897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal5909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_synpred46_JavaTreeParser940 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280006804UL});
		public static readonly BitSet _modifier_in_synpred46_JavaTreeParser942 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _getRule_in_synpred46_JavaTreeParser945 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred46_JavaTreeParser948 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _block_in_synpred46_JavaTreeParser955 = new BitSet(new ulong[]{0x200010UL,0x200000001080008UL,0x6900418280046804UL});
		public static readonly BitSet _modifier_in_synpred46_JavaTreeParser963 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setRule_in_synpred46_JavaTreeParser966 = new BitSet(new ulong[]{0x1000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _SEMI_in_synpred46_JavaTreeParser969 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _block_in_synpred46_JavaTreeParser976 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_synpred46_JavaTreeParser984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseLabel_in_synpred145_JavaTreeParser3629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred152_JavaTreeParser3798 = new BitSet(new ulong[]{0x4000000000000002UL});
	}
	#endregion Follow sets
}
